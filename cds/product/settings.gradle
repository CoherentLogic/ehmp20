rootProject.name = 'parent'

def globalTasks = ['build', 'clean', 'tasks', 'generateversionpropertiesfile']
def eclipseTasks = ['app', 'jetty', 'farm', 'prepare', 'tomcat']

def tasks = gradle.startParameter.taskNames

def eclipseTask = tasks.each { task -> eclipseTasks.each { et -> task.startsWith( et ) }}
	

//Eclipse load
if( tasks.size() == 0 || eclipseTask.size() != 0 ) {
	include ':production:cdsdashboard'
	include ':production:cdsdashboard:cds-dashboard'
	include ':production:cdsdashboard:cds-dashboard-client'
	include ':production:cdsdashboard:cds-dashboard-model'
	include ':production:opencds'
	include ':production:opencds:opencds-knowledge-repository-data'
	include ':production:cdsinvocation'
	include ':production:cdsinvocation:cds-metrics-collection-service'
	include ':production:cdsinvocation:cds-results-service'
	include ':production:cdsinvocation:cds-invocation'
	include ':production:cdsinvocation:cds-engine-agent'
}

tasks.each { taskName ->
	def formattedTaskName = taskName.toString().toLowerCase()

	// Include only the test projects
	if(globalTasks.contains(formattedTaskName) || formattedTaskName.contains("test"))
	{
		include ':tests:acceptance-tests'
		include ':tests:smoke-tests'
	}
	if(globalTasks.contains(formattedTaskName) || formattedTaskName.contains("cdsdashboarddev")
	 || formattedTaskName.contains("buildcdsdashboard") || formattedTaskName.contains("uploadartifactcdsdashboard") || formattedTaskName.contains("destroycdsdashboard"))
	{
		include ':production:cdsdashboard'
		include ':production:cdsdashboard:cds-dashboard'
		include ':production:cdsdashboard:cds-dashboard-client'
		include ':production:cdsdashboard:cds-dashboard-model'
	}
	if(globalTasks.contains(formattedTaskName) || formattedTaskName.contains("opencdsdev")
	 || formattedTaskName.contains("buildopencds") || formattedTaskName.contains("uploadzipfileopencds") || formattedTaskName.contains("destroyopencds"))
	{
		include ':production:opencds'
		include ':production:opencds:opencds-knowledge-repository-data'
		include ':production:cdsinvocation:cds-engine-agent'
	}
	if(globalTasks.contains(formattedTaskName) || formattedTaskName.contains("cdsinvocationdev")
	 || formattedTaskName.contains("buildcdsinvocation") || formattedTaskName.contains("uploadartifactscdsinvocation") || formattedTaskName.contains("destroycdsinvocation"))
	{
		include ':production:cdsinvocation'
		include ':production:cdsinvocation:cds-metrics-collection-service'
		include ':production:cdsinvocation:cds-results-service'
		include ':production:cdsinvocation:cds-invocation'
	}
}