package neurosurgeryConsult;

import org.joda.time.Period;
import org.joda.time.PeriodType;
import java.util.Date;
import java.text.DecimalFormat;

import ca.uhn.fhir.model.api.IDatatype;
import ca.uhn.fhir.model.api.ExtensionDt;
import ca.uhn.fhir.model.primitive.CodeDt;
import ca.uhn.fhir.model.primitive.StringDt;
import ca.uhn.fhir.model.dstu2.composite.CodeableConceptDt;
import ca.uhn.fhir.model.dstu2.composite.CodingDt;
import ca.uhn.fhir.model.dstu2.composite.QuantityDt;
import ca.uhn.fhir.model.dstu2.composite.ContainedDt;
import ca.uhn.fhir.model.dstu2.composite.IdentifierDt;
import ca.uhn.fhir.model.dstu2.resource.CommunicationRequest;
import ca.uhn.fhir.model.dstu2.resource.Provenance;
import ca.uhn.fhir.model.dstu2.resource.Provenance.Agent;
import ca.uhn.fhir.model.dstu2.resource.CommunicationRequest.Payload;
import ca.uhn.fhir.model.dstu2.resource.Observation;
import ca.uhn.fhir.model.dstu2.resource.Observation.Related;
import ca.uhn.fhir.model.dstu2.resource.Procedure;
import ca.uhn.fhir.model.dstu2.resource.Patient;
import ca.uhn.fhir.model.primitive.StringDt;
import ca.uhn.fhir.model.dstu2.composite.QuantityDt;
import ca.uhn.fhir.model.dstu2.valueset.ObservationStatusEnum;
import ca.uhn.fhir.model.dstu2.composite.ResourceReferenceDt;
import ca.uhn.fhir.model.dstu2.resource.Observation.Related;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Collections;
import org.opencds.service.evaluate.ObservationComparator;

global java.lang.String clientLanguage
global java.lang.String clientTimeZoneOffset
global java.lang.String focalPersonId
global java.util.Date evalTime
global java.util.HashSet assertions
global java.util.HashMap namedObjects
 
import function org.opencds.service.evaluate.FhirUtils.isCodingContains;
import function org.opencds.service.evaluate.FhirUtils.getValueQuantity;
import function org.opencds.service.evaluate.FhirUtils.createProvenance;
import function org.opencds.service.evaluate.FhirUtils.createCommunicationRequest;
import function org.opencds.service.evaluate.FhirUtils.hasInputFlag;
import function org.opencds.service.evaluate.FhirUtils.createOutputExtension;

function Observation createBmiObservation(int days) {
        Observation obs = new Observation();
        obs.setStatus(ObservationStatusEnum.FINAL);
        obs.addUndeclaredExtension(createOutputExtension());
        obs.addUndeclaredExtension(createDurationExtension( days + "d"));
        obs.addUndeclaredExtension(createStatusExtension("Failed"));
        CodeableConceptDt code = new CodeableConceptDt();
		CodingDt  codingDt = code.addCoding();
		codingDt.setCode("60621009");
		codingDt.setSystem("http://snomed.info/");
		codingDt.setDisplay("Body mass index");
		obs.setCode(code);
		code.setText("BMI");
		IdentifierDt id =  new IdentifierDt();
        id.setSystem("http://snomed.info/");
        id.setValue("60621009");
        List<IdentifierDt> identifiers = new ArrayList<>();
        identifiers.add(id);
        obs.setIdentifier(identifiers);
        obs.setComments("BMI");
        return obs;
}

function void setStatus(Observation obs, String status) {
        List<ExtensionDt> extensions = obs.getUndeclaredModifierExtensions();
        for (ExtensionDt next : extensions) {
            if ("http://org.cognitive.cds.invocation.fhir.datanature.status".equals(next.getUrlAsString())) {
              CodeDt cd = new CodeDt();
              cd.setValueAsString(status);
              next.setValue(cd);
            }
        }
    }
    
function ExtensionDt createDurationExtension(String d){
    ExtensionDt ext = new ExtensionDt();
    ext.setUrl("http://org.cognitive.cds.invocation.fhir.datanature.duration");
    ext.setModifier(true);
    CodeDt cd = new CodeDt();
    cd.setValueAsString(d);
    ext.setValue(cd);
    return ext;
}

function ExtensionDt createStatusExtension(String status){
        ExtensionDt ext = new ExtensionDt();
        ext.setUrl("http://org.cognitive.cds.invocation.fhir.datanature.status");
        ext.setModifier(true);
        CodeDt cd = new CodeDt();
        cd.setValueAsString(status);
        ext.setValue(cd);
        return ext;
    }

// An Object to hold all the observations that would trigger the final rules
declare NEUROSURGERY_COHORT
    @propertyReactive
	heightList : ArrayList
	weightList : ArrayList
	heightMR : Observation // Most recent height Observation
	weightMR : Observation // Most recent weight Observation
	bmi : double
	days : int
end

rule "Initialize"
	salience 1000, no-loop
	when
	then
	    int days = 60;
		insert(new NEUROSURGERY_COHORT(new ArrayList(), new ArrayList(), null, null, 0, days));
		namedObjects.put("bmi", createBmiObservation(days));	
end

rule "Collect Height Observations"
	dialect "java"
	salience 260
	when
	    $cohort : NEUROSURGERY_COHORT()
        $obs : Observation( isCodingContains(code, "http://loinc.org", "8302-2"))
	then
        modify($cohort) { getHeightList( ).add($obs) };   				
end

rule "Collect Weight Observations"
	dialect "java"
	salience 250
	when
	    $cohort : NEUROSURGERY_COHORT()
        $obs : Observation( isCodingContains(code, "http://loinc.org", "29463-7"))
	then
        modify($cohort) { getWeightList( ).add($obs) };   				
end

rule "The most recent weight Observation"
	dialect "java"
	salience 200
    when
	     $cohort : NEUROSURGERY_COHORT(!weightList.isEmpty())
	then
    Collections.sort($cohort.getWeightList(), ObservationComparator.ISSUED_DATE );
    Observation obs = (Observation)$cohort.getWeightList().get(0);
    modify($cohort) { setWeightMR( obs ) };
    
    Observation bmiObs = (Observation) namedObjects.get("bmi");
    bmiObs.getContained().getContainedResources().add(obs);
    obs.setId("weight");
    ResourceReferenceDt rr = new ResourceReferenceDt();
    rr.setReference("#weight");
    Related r = new Related();
    r.setTarget(rr);
    bmiObs.getRelated().add(r);
    
    //System.out.println("Weigght date = " + obs.getIssued());
end  

rule "The most recent Height Observation"
	dialect "java"
	salience 200
    when
	     $cohort : NEUROSURGERY_COHORT(!heightList.isEmpty())
	then
    Collections.sort($cohort.getHeightList(), ObservationComparator.ISSUED_DATE );
    Observation obs = (Observation)$cohort.getHeightList().get(0);
    modify($cohort) { setHeightMR( obs ) };
   
    Observation bmiObs = (Observation) namedObjects.get("bmi");
    obs.setId("height");
    bmiObs.getContained().getContainedResources().add(obs);
    
    ResourceReferenceDt rr = new ResourceReferenceDt();
    rr.setReference("#height");
    Related r = new Related();
    r.setTarget(rr);
    bmiObs.getRelated().add(r);
     
    //System.out.println("Heigght date = " + obs.getIssued());
   
end    

rule "bmi calculate"
      dialect "java"
      salience 100
      when
       $cohort : NEUROSURGERY_COHORT(heightMR != null, $heightMR:heightMR, weightMR != null, $weightMR:weightMR)
      then
      // Formula: weight (lb) / [height (in)]2 x 703
	  // Calculate BMI by dividing weight in pounds (lbs) by height in inches (in) squared and multiplying by a conversion factor of 703.
      double bmi = getValueQuantity($weightMR.getValue()).getValue().doubleValue() / 
      			   (getValueQuantity($heightMR.getValue()).getValue().doubleValue() * 
      			   getValueQuantity($heightMR.getValue()).getValue().doubleValue()) * 703;
      modify($cohort) { setBmi( bmi ) };
      Observation bmiObs = (Observation) namedObjects.get("bmi");
      QuantityDt bmiValue = new QuantityDt();
      DecimalFormat formatter = new DecimalFormat("#.00");
	  bmiValue.setValue(Double.parseDouble(formatter.format(bmi)));
	  
	  bmiObs.setValue(bmiValue);
    
end 
rule "BMI check passed rule"
       dialect "java"
       salience 0
       when 
          $cohort : NEUROSURGERY_COHORT(heightMR != null, $heightMR:heightMR, weightMR != null, $weightMR:weightMR, $issuedDate:weightMR.getIssued(),
          $issuedDate != null, $bmi:bmi, $bmi < 30, $days:days)
          $issued : Period() from new Period($issuedDate.getTime(), new Date().getTime(), PeriodType.days())
          eval($issued.getDays() <= $days )
      then
      
      Observation bmiObs = (Observation) namedObjects.get("bmi");
      QuantityDt bmiValue = new QuantityDt();
      DecimalFormat formatter = new DecimalFormat("#.00");
	  bmiValue.setValue(Double.parseDouble(formatter.format($bmi)));
	  
	  bmiObs.setValue(bmiValue);
     
      setStatus(bmiObs, "Passed");
      
      //System.out.println("passed");
end