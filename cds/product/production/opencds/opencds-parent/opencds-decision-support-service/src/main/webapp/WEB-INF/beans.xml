<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jaxrs="http://cxf.apache.org/jaxrs" xmlns:util="http://www.springframework.org/schema/util"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd
	http://cxf.apache.org/jaxws 
	http://cxf.apache.org/schemas/jaxws.xsd
    http://cxf.apache.org/jaxrs
    http://cxf.apache.org/schemas/jaxrs.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="valueSeparator" value="?" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations" value="file:${user.home}/.opencds/opencds.properties" />
    </bean>

    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

    <!-- BEGIN: CONFIGURATION -->
    <bean id="jaxbContextService" class="org.opencds.config.api.xml.JAXBContextService" />

    <bean id="cacheService" class="org.opencds.config.service.CacheServiceImpl" />

    <bean id="configData" class="org.opencds.config.api.ConfigData">
        <property name="configType" value="${knowledge-repository.type}" />
        <property name="configPath" value="${knowledge-repository.path}" />
        <property name="kmThreads" value="${km.threads?1}" />
    </bean>

    <bean id="configurationService" class="org.opencds.config.api.ConfigurationService">
        <constructor-arg name="configStrategies">
            <util:set>
                <bean class="org.opencds.config.store.strategy.BDBConfigStrategy" destroy-method="shutdown" />
                <bean class="org.opencds.config.file.FileConfigStrategy" />
                <bean class="org.opencds.config.classpath.ClasspathConfigStrategy" />
            </util:set>
        </constructor-arg>
        <constructor-arg name="cacheService" ref="cacheService" />
        <constructor-arg name="configData" ref="configData" />
    </bean>
    <!-- END: CONFIGURATION -->

    <!-- utilities -->
    <bean id="miscUtility" class="org.opencds.common.utilities.MiscUtility" destroy-method="shutdown" />

    <bean id="streamUtility" class="org.opencds.common.utilities.StreamUtility" />

    <bean id="requestProcessorService" class="org.opencds.dss.evaluate.impl.RequestProcessorService" />

    <bean id="evaluationService" class="org.opencds.evaluation.service.EvaluationServiceImpl" />

    <bean id="dssEvaluation" class="org.opencds.dss.evaluate.impl.DSSEvaluation">
        <constructor-arg name="evaluationService" ref="evaluationService" />
        <constructor-arg name="configurationService" ref="configurationService" />
        <constructor-arg name="requestProcessor" ref="requestProcessorService" />
    </bean>

    <bean id="evaluationSoapService" class="org.opencds.dss.evaluate.EvaluationSoapService">
        <constructor-arg name="evaluation" ref="dssEvaluation" />
    </bean>

    <jaxws:endpoint id="evaluationWebService" address="/evaluate" serviceName="dss:DecisionSupportService" endpointName="dss:evaluate" xmlns:dss="http://www.omg.org/spec/CDSS/201105/dssWsdl" wsdlLocation="WEB-INF/wsdl/dss.wsdl">
        <jaxws:implementor>
            <bean parent="evaluationSoapService" />
        </jaxws:implementor>
    </jaxws:endpoint>

    <!-- BEGIN : REST : Configuration Services -->

    <bean id="conceptDeterminationMethodRestService" class="org.opencds.config.service.rest.ConceptDeterminationMethodRestService">
        <constructor-arg name="configurationService" ref="configurationService" />
    </bean>

    <bean id="executionEngineRestService" class="org.opencds.config.service.rest.ExecutionEngineRestService">
        <constructor-arg name="configurationService" ref="configurationService" />
    </bean>

    <bean id="knowledgeModuleRestService" class="org.opencds.config.service.rest.KnowledgeModuleRestService">
        <constructor-arg name="configurationService" ref="configurationService" />
    </bean>

    <bean id="supportingDataRestService" class="org.opencds.config.service.rest.SupportingDataRestService">
        <constructor-arg name="configurationService" ref="configurationService" />
    </bean>

    <bean id="semanticSignifierRestService" class="org.opencds.config.service.rest.SemanticSignifierRestService">
        <constructor-arg name="configurationService" ref="configurationService" />
    </bean>

    <bean id="configurationReloadRestService" class="org.opencds.config.service.rest.ConfigurationReloadRestService">
        <constructor-arg name="configurationService" ref="configurationService" />
    </bean>

    <bean id="pluginPackageRestService" class="org.opencds.config.service.rest.PluginPackageRestService">
        <constructor-arg name="configurationService" ref="configurationService" />
    </bean>
    
    <bean id="logRestService" class="org.opencds.config.service.rest.LogRestService" />

    <jaxrs:server id="configurationRESTService" address="/config/v1">
        <jaxrs:schemaLocations>
            <jaxrs:schemaLocation>classpath:schema/OpenCDSConfiguration.xsd</jaxrs:schemaLocation>
            <jaxrs:schemaLocation>classpath:schema/OpenCDSConfigRest.xsd</jaxrs:schemaLocation>
        </jaxrs:schemaLocations>
        <jaxrs:serviceBeans>
            <ref bean="conceptDeterminationMethodRestService" />
            <ref bean="executionEngineRestService" />
            <ref bean="knowledgeModuleRestService" />
            <ref bean="supportingDataRestService" />
            <ref bean="semanticSignifierRestService" />
            <ref bean="pluginPackageRestService" />
            <ref bean="configurationReloadRestService" />
            <ref bean="logRestService" />
        </jaxrs:serviceBeans>
    </jaxrs:server>

    <bean id="userDetailsService" class="org.opencds.config.service.security.UserDetailsServiceImpl">
        <constructor-arg name="jaxbContextService" ref="jaxbContextService" />
        <constructor-arg name="location" value="${config.security}" />
    </bean>


    <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <constructor-arg>
            <list>
                <security:filter-chain pattern="/config/**" filters="basicAuthenticationFilter" />
            </list>
        </constructor-arg>
    </bean>

    <!-- To allow public access by default and to set authentication mode to basic login/password -->
    <security:http create-session="stateless" realm="OpenCDS Configuration Service" use-expressions="true" authentication-manager-ref="authenticationManager">
        <!-- <security:intercept-url pattern="/config/**" method="GET" access="ROLE_CONFIG_USER" /> -->
        <security:intercept-url pattern="/config/**" access="hasRole('ROLE_CONFIG_ADMIN')" />
        <security:http-basic entry-point-ref="authenticationEntryPoint" />
    </security:http>

    <!-- To create user/password with roles -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="userDetailsService" />
    </security:authentication-manager>

    <bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <property name="realmName" value="OpenCDS Configuration Service" />
    </bean>

    <bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager" />
        <property name="authenticationEntryPoint" ref="authenticationEntryPoint" />
    </bean>

    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleHierarchyVoter">
        <constructor-arg ref="roleHierarchy" />
    </bean>

    <bean id="roleHierarchy" class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
        <property name="hierarchy">
            <value>
                ROLE_CONFIG_ADMIN > ROLE_CONFIG_USER
            </value>
        </property>
    </bean>

    <!-- END : REST : Configuration Services -->

</beans>
