
/*
 * 
 */

package org.omg.dss;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2.9
 * Thu Jul 28 08:04:45 MDT 2011
 * Generated source version: 2.2.9
 * 
 */


@WebServiceClient(name = "DecisionSupportService", 
//                  wsdlLocation = "file:/C:/OpenCDS/dss-wsdl-2-java/src/main/resources/dss.wsdl",
                  targetNamespace = "http://www.omg.org/spec/CDSS/201105/dssWsdl") 
public class DecisionSupportService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://www.omg.org/spec/CDSS/201105/dssWsdl", "DecisionSupportService");
    public final static QName Evaluate = new QName("http://www.omg.org/spec/CDSS/201105/dssWsdl", "evaluate");
    public final static QName Query = new QName("http://www.omg.org/spec/CDSS/201105/dssWsdl", "query");
    public final static QName Metadata = new QName("http://www.omg.org/spec/CDSS/201105/dssWsdl", "metadata");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/OpenCDS/dss-wsdl-2-java/src/main/resources/dss.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:/C:/OpenCDS/dss-wsdl-2-java/src/main/resources/dss.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public DecisionSupportService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public DecisionSupportService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DecisionSupportService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     * 
     * @return
     *     returns Evaluation
     */
    @WebEndpoint(name = "evaluate")
    public Evaluation getEvaluate() {
        return super.getPort(Evaluate, Evaluation.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Evaluation
     */
    @WebEndpoint(name = "evaluate")
    public Evaluation getEvaluate(WebServiceFeature... features) {
        return super.getPort(Evaluate, Evaluation.class, features);
    }
    /**
     * 
     * @return
     *     returns Query
     */
    @WebEndpoint(name = "query")
    public Query getQuery() {
        return super.getPort(Query, Query.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Query
     */
    @WebEndpoint(name = "query")
    public Query getQuery(WebServiceFeature... features) {
        return super.getPort(Query, Query.class, features);
    }
    /**
     * 
     * @return
     *     returns MetadataDiscovery
     */
    @WebEndpoint(name = "metadata")
    public MetadataDiscovery getMetadata() {
        return super.getPort(Metadata, MetadataDiscovery.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MetadataDiscovery
     */
    @WebEndpoint(name = "metadata")
    public MetadataDiscovery getMetadata(WebServiceFeature... features) {
        return super.getPort(Metadata, MetadataDiscovery.class, features);
    }

}
