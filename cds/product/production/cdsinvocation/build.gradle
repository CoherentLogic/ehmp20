apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'
def repoCommitCountClosure = {
  def proc1 = ['sh', '-c', "git rev-list --full-history --all ${commitCountDir}"].execute()
  def proc2 = 'wc -l'.execute()
  proc1 | proc2
  return proc2.text.trim()
}
def repoCommitCount = "${->repoCommitCountClosure()}"
def version = "${->repoVersion + '.' + repoCommitCount}"

allprojects {
  ext.set('groupId', 'us.vistacore.cdsinvocation')
  ext.set('repoVersion', getRepoVersion())
  ext.set('commitCountDir', projectDir)
  apply plugin: 'java'
  apply plugin: 'maven'

  ext.set('commitCountDir', projectDir)
  // Set dependency versions here:
  ext.set('javaVersion', '1.8')
  ext.set('targetJavaVersion', '1.8')
  ext.set('cxfVersion', '3.1.6')
  ext.set('jacksonVersion', '2.5.4')
  ext.set('openCDSDSSVersion', '2.1.2')
  ext.set('openCDSVMRVersion', '2.1.2')
  ext.set('javaxVersion', '2.0')
  ext.set('slf4jVersion', '1.7.21')
  ext.set('log4jVersion', '2.3')
  ext.set('junitVersion', '4.12')
  ext.set('springVersion', '4.2.5.RELEASE')
  ext.set('springSecurityVersion', '4.0.4.RELEASE')
  ext.set('hapiVersion', '1.0')

  repositories {
    maven {
      url 'https://store.vistacore.us/nexus/content/groups/public'
    }
  }
 uploadArchives {
    repositories.mavenDeployer {
      pom.groupId = "${groupId}"
      pom.version = "${version}"
      repository(url: "https://store.vistacore.us/nexus/content/repositories/${->repo}/") {
        authentication(userName: System.getenv()['NEXUS_USER_NAME'], password: System.getenv()['NEXUS_PASSWORD'])
      }
    }
}
  //This will show STDOUT, STDERR, etc from tests in the console output
  test {
    testLogging {
      showStandardStreams = true
    }
  }
}

project(':production:cdsinvocation').build.dependsOn(project(':production:cdsinvocation:cds-results-service').build)
project(':production:cdsinvocation').build.dependsOn(project(':production:cdsinvocation:cds-metrics-collection-service').build)
project(':production:cdsinvocation').build.dependsOn(project(':production:cdsinvocation:cds-invocation').build)

// Start CDS services in the order
farm {
  webapp ':production:cdsinvocation:cds-results-service'
  webapp ':production:cdsinvocation:cds-engine-agent'
  webapp '../opencds/opencds-parent/opencds-decision-support-service/target/opencds-decision-support-service.war'
}
