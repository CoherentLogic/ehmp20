#LoadModule proxy_balancer_module modules/mod_proxy_balancer.so

##
## SSL Virtual Host Context
##

<VirtualHost *:<%= node[:ehmp_balancer][:incoming_port]%>>

        Header always set Strict-Transport-Security "max-age=31536000"
        Header always set Content-Security-Policy-Report-Only " script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'none'; img-src 'self' data:; media-src 'none'; frame-src 'none'; connect-src 'self'"
        Header always set X-Content-Security-Policy-Report-Only "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'none';  img-src 'self' data:; media-src 'none'; frame-src 'none'; connect-src 'self'"
        Header always set X-WebKit-CSP-Report-Only " script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'none'; img-src 'self' data:; media-src 'none'; frame-src 'none'; connect-src 'self'"

        <IfModule mod_autoindex.c>
            Options -Indexes
        </IfModule>

        # TODO: mod_gzip instead?
        <IfModule mod_deflate.c>
            # Compress HTML, CSS, JavaScript, Text, XML and fonts
            AddOutputFilterByType DEFLATE application/javascript
            AddOutputFilterByType DEFLATE application/json
            AddOutputFilterByType DEFLATE application/rss+xml
            AddOutputFilterByType DEFLATE application/vnd.ms-fontobject
            AddOutputFilterByType DEFLATE application/x-font
            AddOutputFilterByType DEFLATE application/x-font-opentype
            AddOutputFilterByType DEFLATE application/x-font-otf
            AddOutputFilterByType DEFLATE application/x-font-truetype
            AddOutputFilterByType DEFLATE application/x-font-ttf
            AddOutputFilterByType DEFLATE application/x-javascript
            AddOutputFilterByType DEFLATE application/xhtml+xml
            AddOutputFilterByType DEFLATE application/xml
            AddOutputFilterByType DEFLATE font/opentype
            AddOutputFilterByType DEFLATE font/otf
            AddOutputFilterByType DEFLATE font/ttf
            AddOutputFilterByType DEFLATE image/svg+xml
            AddOutputFilterByType DEFLATE image/x-icon
            AddOutputFilterByType DEFLATE text/css
            AddOutputFilterByType DEFLATE text/html
            AddOutputFilterByType DEFLATE text/javascript
            AddOutputFilterByType DEFLATE text/plain
            AddOutputFilterByType DEFLATE text/xml

            # Remove browser bugs (only needed for really old browsers)
            BrowserMatch ^Mozilla/4 gzip-only-text/html
            BrowserMatch ^Mozilla/4\.0[678] no-gzip
            BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
            Header append Vary User-Agent
        </IfModule>

        # Configure proxy-balancer
        ProxyRequests off

        ServerName <%= node[:ehmp_balancer][:fqdn]%>

        <Proxy balancer://web-cluster>
            <% if node.recipe?('ehmp-ui') %>
                BalancerMember http://<%= node['ipaddress']%>:<%= node['adk']['port']%>
            <% else %>
              <% @ehmp_ui_members.each do |member| %>
                BalancerMember http://<%= member['ipaddress']%>:<%= member['adk']['port']%>
              <% end %>
            <% end %>
                # Security "technically we aren't blocking
                # anyone but this the place to make those
                # chages
                Order Deny,Allow
                Deny from none
                Allow from all

                # Load Balancer Settings for ehmp static web
                # We will be configuring a simple Round
                # Robin style load balancer.  This means
                # that all webheads take an equal share of
                # of the load.
                <%= "# stickysession=#{node[:ehmp_balancer][:sticky_session]}" %>
                <% if node[:ehmp_balancer][:sticky_session] == "DISABLED" %>
                    ProxySet lbmethod=<%= node[:ehmp_balancer][:lb_method]%>
                <% else %>
                    ProxySet lbmethod=<%= node[:ehmp_balancer][:lb_method]%> stickysession=<%= node[:ehmp_balancer][:sticky_session]%>
                <% end %>

        </Proxy>

        <Proxy balancer://rdk-cluster>
            <% @rdk_members.each do |member| %>
                <% member['rdk']['services']['fetch_server']['processes'].times do |index| %>
                    BalancerMember <%= member['rdk']['protocol']%>://<%= member['ipaddress']%>:<%= (member['rdk']['services']['fetch_server']['port']-index)%>
                <% end %>
            <% end %>

                # Security "technically we aren't blocking
                # anyone but this the place to make those
                # chages
                Order Deny,Allow
                Deny from none
                Allow from all

                # Load Balancer Settings
                # We will be configuring a simple Round
                # Robin style load balancer.  This means
                # that all webheads take an equal share of
                # of the load.
                <%= "# stickysession=#{node[:ehmp_balancer][:sticky_session]}" %>
                ProxySet lbmethod=<%= node[:ehmp_balancer][:lb_method] %> timeout=<%= node[:ehmp_balancer][:rdk_timeout] %> <%= node[:ehmp_balancer][:sticky_session] != "DISABLED" ? "stickysession=#{node[:ehmp_balancer][:sticky_session]}" : ''%>
        </Proxy>

        <Proxy balancer://write-back-cluster>
            <% @rdk_members.each do |member| %>
                <% member['rdk']['services']['write_back']['processes'].times do |index| %>
                    BalancerMember <%= member['rdk']['protocol']%>://<%= member['ipaddress']%>:<%= (member['rdk']['services']['write_back']['port']-index)%>
                <% end %>
            <% end %>

                # Security "technically we aren't blocking
                # anyone but this the place to make those
                # chages
                Order Deny,Allow
                Deny from none
                Allow from all

                # Load Balancer Settings
                # We will be configuring a simple Round
                # Robin style load balancer.  This means
                # that all webheads take an equal share of
                # of the load.
                <%= "# stickysession=#{node[:ehmp_balancer][:sticky_session]}" %>
                <% if node[:ehmp_balancer][:sticky_session] == "DISABLED" %>
                    ProxySet lbmethod=<%= node[:ehmp_balancer][:lb_method]%>
                <% else %>
                    ProxySet lbmethod=<%= node[:ehmp_balancer][:lb_method]%> stickysession=<%= node[:ehmp_balancer][:sticky_session]%>
                <% end %>

        </Proxy>

        <Proxy balancer://pick-list-cluster>
            <% @rdk_members.each do |member| %>
                <% member['rdk']['services']['pick_list']['processes'].times do |index| %>
                    BalancerMember <%= member['rdk']['protocol']%>://<%= member['ipaddress']%>:<%= (member['rdk']['services']['pick_list']['port']-index)%>
                <% end %>
            <% end %>

                # Security "technically we aren't blocking
                # anyone but this the place to make those
                # chages
                Order Deny,Allow
                Deny from none
                Allow from all

                # Load Balancer Settings
                # We will be configuring a simple Round
                # Robin style load balancer.  This means
                # that all webheads take an equal share of
                # of the load.
                <%= "# stickysession=#{node[:ehmp_balancer][:sticky_session]}" %>
                <% if node[:ehmp_balancer][:sticky_session] == "DISABLED" %>
                    ProxySet lbmethod=<%= node[:ehmp_balancer][:lb_method]%>
                <% else %>
                    ProxySet lbmethod=<%= node[:ehmp_balancer][:lb_method]%> stickysession=<%= node[:ehmp_balancer][:sticky_session]%>
                <% end %>

        </Proxy>

        # allow access to the uri's representing each component
        <Location /write-pick-list>
                Order deny,allow
                Allow from all
        </Location>
        <Location /write-health-data>
                Order deny,allow
                Allow from all
        </Location>
        <Location /resource>
                Order deny,allow
                Allow from all
        </Location>
        <Location />
                Order deny,allow
                Allow from all
        </Location>
        <Location /resource/authentication/systems/internal>
                Order deny,allow
                Deny from all
        </Location>
        <Location /resource/authentication/systems/external>
                NSSVerifyClient require
                NSSRequireSSL
                NSSOptions +FakeBasicAuth +ExportCertData +CompatEnvVars +StrictRequire
                NSSUserName SSL_CLIENT_S_DN_UID
        </Location>

        # Point of Balance
        # This setting will allow to explicitly name the
        # the location in the site that we want to be
        # balanced, in this example we will balance "/"
        # or everything in the site.
        ProxyPass /balancer-manager !

        ProxyPass /resource/write-pick-list balancer://pick-list-cluster/resource/write-pick-list

        ProxyPass /resource/write-health-data balancer://write-back-cluster/resource/write-health-data

        # traffic to rdk
        ProxyPass /resource balancer://rdk-cluster/resource

        # Reference ssoi-config.erb
        <%= render "ssoi-config.erb", :variables => {:ssoi_host => @ssoi_members}  unless @ssoi_members.nil? %>

        # send the rest to static ehmp web
        ProxyPass / balancer://web-cluster/

        <IfModule mod_headers.c>
            Header always edit Set-Cookie ^(.*)$ "$1; Secure"
            Header edit Set-Cookie ^(.*)$ "$1; Secure"
        </IfModule>

        # SSL VirtualHost directives

        DocumentRoot /var/www

        # mod_nss can log to separate log files, you can choose to do that if you'd like
        # LogLevel is not inherited from httpd.conf.
        ErrorLog logs/ssl_error_log
        TransferLog logs/ssl_access_log
        LogLevel warn

        #   SSL Engine Switch:
        #   Enable/Disable SSL for this virtual host.
        NSSEngine on

        #   FIPS mode Switch:
        #   Enable/Disable FIPS mode
        NSSFips on

        #   SSL Cipher Suite:
        # List the ciphers that the client is permitted to negotiate.
        # See the mod_nss documentation for a complete list.
        # TLS ciphers with forward secrecy
        NSSCipherSuite +ecdhe_rsa_aes_256_sha,+ecdhe_rsa_3des_sha,+ecdhe_rsa_aes_128_sha,+ecdhe_rsa_aes_128_sha_256

        #   SSL Protocol:
        #   Cryptographic protocols that provide communication security.
        #   NSS handles the specified protocols as "ranges", and automatically
        #   negotiates the use of the strongest protocol for a connection starting
        #   with the maximum specified protocol and downgrading as necessary to the
        #   minimum specified protocol that can be used between two processes.
        #   Since all protocol ranges are completely inclusive, and no protocol in the
        #   middle of a range may be excluded, the entry "NSSProtocol SSLv3,TLSv1.1"
        #   is identical to the entry "NSSProtocol SSLv3,TLSv1.0,TLSv1.1".
        NSSProtocol TLSv1.1,TLSv1.2

        #   SSL Certificate Nickname:
        #   The nickname of the RSA server certificate you are going to use.
        NSSNickname Server-Cert
        
        #   TLS Renegotiation 
        NSSRenegotiation on
        NSSRequireSafeNegotiation on

        #   Server Certificate Database:
        #   The NSS security database directory that holds the certificates and
        #   keys. The database consists of 3 files: cert8.db, key3.db and secmod.db.
        #   Provide the directory that these files exist.
        NSSCertificateDatabase <%= node[:ehmp_balancer][:ssl_dir] %>

        #   Database Prefix:
        #   In order to be able to store multiple NSS databases in one directory
        #   they need unique names. This option sets the database prefix used for
        #   cert8.db and key3.db.
        #NSSDBPrefix my-prefix-

        #   Per-Server Logging:
        #   The home of a custom SSL log file. Use this when you want a
        #   compact non-error SSL logfile on a virtual host basis.
        CustomLog logs/ssl_request_log \
                  "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>
