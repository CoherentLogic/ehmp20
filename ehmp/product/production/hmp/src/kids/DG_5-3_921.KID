KIDS Distribution saved on Jun 24, 2016@09:35:39
Fixed routines' 3rd line
**KIDS**:DG*5.3*921^

**INSTALL NAME**
DG*5.3*921
"BLD",9606,0)
DG*5.3*921^^0^3160624^y
"BLD",9606,1,0)
^^25^25^3151001^
"BLD",9606,1,1,0)
Modified DG10 routine to allow for additional fields in file 2 to trigger 
"BLD",9606,1,2,0)
an unsolicited update.  Here are the newly added fields:
"BLD",9606,1,3,0)
 
"BLD",9606,1,4,0)
Field #             Field Name
"BLD",9606,1,5,0)
=======             ==========
"BLD",9606,1,6,0)
.033                Age
"BLD",9606,1,7,0)
.133                Email Address
"BLD",9606,1,8,0)
.1211               Temporary Address Line 1
"BLD",9606,1,9,0)
.1212               Temporary Address Line 2
"BLD",9606,1,10,0)
.1213               Temporary Address Line 3
"BLD",9606,1,11,0)
.1214               Temporary City
"BLD",9606,1,12,0)
.1215               Temporary State
"BLD",9606,1,13,0)
.1216               Temporary Zipcode
"BLD",9606,1,14,0)
.21011              Primary NOK Work Phone Number
"BLD",9606,1,15,0)
.215                Primary NOK Streed Address Line 3
"BLD",9606,1,16,0)
.331                Emergency Contact Name
"BLD",9606,1,17,0)
.332                Emergency Contact Relationship
"BLD",9606,1,18,0)
.333                Emergency Contact Street Address Line 1
"BLD",9606,1,19,0)
.334                Emergency Contact Street Address Line 2
"BLD",9606,1,20,0)
.335                Emergency Contact Street Address Line 3
"BLD",9606,1,21,0)
.336                Emergency Contact City
"BLD",9606,1,22,0)
.337                Emergency Contact State
"BLD",9606,1,23,0)
.338                Emergency Contact Zipcode
"BLD",9606,1,24,0)
.3731               Service COnnected Conditions
"BLD",9606,1,25,0)
.3121               Insurance
"BLD",9606,4,0)
^9.64PA^^
"BLD",9606,6.3)
7
"BLD",9606,"KRN",0)
^9.67PA^779.2^20
"BLD",9606,"KRN",.4,0)
.4
"BLD",9606,"KRN",.401,0)
.401
"BLD",9606,"KRN",.402,0)
.402
"BLD",9606,"KRN",.403,0)
.403
"BLD",9606,"KRN",.5,0)
.5
"BLD",9606,"KRN",.84,0)
.84
"BLD",9606,"KRN",3.6,0)
3.6
"BLD",9606,"KRN",3.8,0)
3.8
"BLD",9606,"KRN",9.2,0)
9.2
"BLD",9606,"KRN",9.8,0)
9.8
"BLD",9606,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",9606,"KRN",9.8,"NM",1,0)
DG10^^0^B29845134
"BLD",9606,"KRN",9.8,"NM",2,0)
DGPFAA^^0^B41523705
"BLD",9606,"KRN",9.8,"NM","B","DG10",1)

"BLD",9606,"KRN",9.8,"NM","B","DGPFAA",2)

"BLD",9606,"KRN",19,0)
19
"BLD",9606,"KRN",19.1,0)
19.1
"BLD",9606,"KRN",101,0)
101
"BLD",9606,"KRN",101,"NM",0)
^9.68A^1^1
"BLD",9606,"KRN",101,"NM",1,0)
DGPF ASSIGN FLAG^^0
"BLD",9606,"KRN",101,"NM","B","DGPF ASSIGN FLAG",1)

"BLD",9606,"KRN",409.61,0)
409.61
"BLD",9606,"KRN",771,0)
771
"BLD",9606,"KRN",779.2,0)
779.2
"BLD",9606,"KRN",870,0)
870
"BLD",9606,"KRN",8989.51,0)
8989.51
"BLD",9606,"KRN",8989.52,0)
8989.52
"BLD",9606,"KRN",8994,0)
8994
"BLD",9606,"KRN","B",.4,.4)

"BLD",9606,"KRN","B",.401,.401)

"BLD",9606,"KRN","B",.402,.402)

"BLD",9606,"KRN","B",.403,.403)

"BLD",9606,"KRN","B",.5,.5)

"BLD",9606,"KRN","B",.84,.84)

"BLD",9606,"KRN","B",3.6,3.6)

"BLD",9606,"KRN","B",3.8,3.8)

"BLD",9606,"KRN","B",9.2,9.2)

"BLD",9606,"KRN","B",9.8,9.8)

"BLD",9606,"KRN","B",19,19)

"BLD",9606,"KRN","B",19.1,19.1)

"BLD",9606,"KRN","B",101,101)

"BLD",9606,"KRN","B",409.61,409.61)

"BLD",9606,"KRN","B",771,771)

"BLD",9606,"KRN","B",779.2,779.2)

"BLD",9606,"KRN","B",870,870)

"BLD",9606,"KRN","B",8989.51,8989.51)

"BLD",9606,"KRN","B",8989.52,8989.52)

"BLD",9606,"KRN","B",8994,8994)

"BLD",9606,"QUES",0)
^9.62^^
"BLD",9606,"REQB",0)
^9.611^^
"KRN",101,4929,-1)
0^1
"KRN",101,4929,0)
DGPF ASSIGN FLAG^Assign Flag^^X^^^^^^^^REGISTRATION
"KRN",101,4929,1,0)
^^2^2^3030708^
"KRN",101,4929,1,1,0)
This action protocol permits the user to assign a flag to a patient 
"KRN",101,4929,1,2,0)
within the Record Flag Assignment [DGPF RECORD FLAG ASSIGNMENT] option.
"KRN",101,4929,10,0)
^101.01PA^1^1
"KRN",101,4929,20)
D AF^DGPFLMA2
"KRN",101,4929,24)
I $G(DGDFN)
"KRN",101,4929,99)
64091,50586
"MBREQ")
0
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","DG10")
0^1^B29845134
"RTN","DG10",1,0)
DG10 ;ALB/MRL,DAK,AEG,PHH,TMK,ASMR/JD-LOAD/EDIT PATIENT DATA ; 09/30/15 @ 08:34
"RTN","DG10",2,0)
 ;;5.3;Registration;**32,109,139,149,182,326,513,425,574,642,658,773,864,921**;Aug 13, 1993;Build 7
"RTN","DG10",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DG10",4,0)
 ;
"RTN","DG10",5,0)
 ;Done for eHMP project: DG*5.3*921
"RTN","DG10",6,0)
 ;Added logic to trigger unsolicited updates for demographics that are not otherwise triggered
"RTN","DG10",7,0)
 ;by the TRIGGER x-ref.  New code:  Tags T, T59, and T60 and any references to those tags thereof.
"RTN","DG10",8,0)
START ;
"RTN","DG10",9,0)
 D LO^DGUTL
"RTN","DG10",10,0)
 I $G(DGPRFLG)=1,$G(DGPLOC)=1 D  G Q:$G(DGRPOUT),A1
"RTN","DG10",11,0)
 .; D EN^DGRPD,REG^IVMCQ($G(DFN))
"RTN","DG10",12,0)
 . D EN^DGRPD
"RTN","DG10",13,0)
 . Q:$G(DGRPOUT)
"RTN","DG10",14,0)
 . D REG^IVMCQ($G(DFN))
"RTN","DG10",15,0)
 . D HINQ
"RTN","DG10",16,0)
 ;
"RTN","DG10",17,0)
A W !! K VET,DIE,DIC,CARD S DIC=2,DLAYGO=2,DIC(0)="ALEQM" K DIC("S") D ^DIC G Q:Y<0 S (DFN,DA)=+Y,DGNEW=$P(Y,"^",3) K DLAYGO
"RTN","DG10",18,0)
 ;DG*5.3*921 Invoke eHMP demographic change checking
"RTN","DG10",19,0)
 I DGNEW']"" D T59(DFN,"BEFORE")  ;Get a snapshot of the demographics before changes
"RTN","DG10",20,0)
 N Y D PAUSE I DGNEW D NEW^DGRP S DA=DFN,VET=$S($D(^DPT(DFN,"VET")):^("VET")'="Y",1:0)
"RTN","DG10",21,0)
 ;
"RTN","DG10",22,0)
 ;MPI QUERY
"RTN","DG10",23,0)
 ;check to see if CIRN PD/MPI is installed
"RTN","DG10",24,0)
 N X S X="MPIFAPI" X ^%ZOSF("TEST") G:'$T SKIP
"RTN","DG10",25,0)
 K MPIFRTN
"RTN","DG10",26,0)
 D MPIQ^MPIFAPI(DFN)
"RTN","DG10",27,0)
 K MPIFRTN
"RTN","DG10",28,0)
 ;
"RTN","DG10",29,0)
 N DGNOIVMUPD
"RTN","DG10",30,0)
 S DGNOIVMUPD=1 ; Set flag to prevent MT Event Driver from updating converted IVM test
"RTN","DG10",31,0)
 I +$G(DGNEW) D
"RTN","DG10",32,0)
 . ; query CMOR for Patient Record Flag Assignments if NEW patient and
"RTN","DG10",33,0)
 . ; display results
"RTN","DG10",34,0)
 . I $$PRFQRY^DGPFAPI(DFN) D DISPPRF^DGPFAPI(DFN)
"RTN","DG10",35,0)
 . I $$EN^DGPFMPI(DFN)
"RTN","DG10",36,0)
 ;
"RTN","DG10",37,0)
SKIP ;
"RTN","DG10",38,0)
 ;DG*5.3*921 Invoke eHMP demographic change checking (via D T)
"RTN","DG10",39,0)
 S DGELVER=0 D EN^DGRPD I $D(DGRPOUT) K DGRPOUT D T G A
"RTN","DG10",40,0)
 D HINQ,REG^IVMCQ($G(DFN)) G A1
"RTN","DG10",41,0)
 ;
"RTN","DG10",42,0)
HINQ ;
"RTN","DG10",43,0)
 S Y=$S($D(^DG(43,1,0)):^(0),1:0) I $P(Y,U,27) S X="DVBHQZ4" X ^%ZOSF("TEST") I $T D
"RTN","DG10",44,0)
 .N DGROUT
"RTN","DG10",45,0)
 .S DGROUT=X
"RTN","DG10",46,0)
 .I $G(DFN) D
"RTN","DG10",47,0)
 ..N X,Y,DGRP
"RTN","DG10",48,0)
 ..F X=.3,.32 S DGRP(X)=$G(^DPT(DFN,X))
"RTN","DG10",49,0)
 ..W !,"     Money Verified: " S Y=$P(DGRP(.3),"^",6) X:Y]"" ^DD("DD") W $S(Y]"":Y,1:"NOT VERIFIED")
"RTN","DG10",50,0)
 ..W ?40,"   Service Verified: " S Y=$P(DGRP(.32),"^",2) X:Y]"" ^DD("DD") W $S(Y]"":Y,1:"NOT VERIFIED")
"RTN","DG10",51,0)
 .D @("EN^"_DGROUT) K Y Q  ;from dgdem0
"RTN","DG10",52,0)
 Q
"RTN","DG10",53,0)
 ;
"RTN","DG10",54,0)
 ;   SDIEMM is used as a flag by AMBCARE Incomplete Encounter Management 
"RTN","DG10",55,0)
 ;   to bypass the embossing routines when calling load/edit from IEMM
"RTN","DG10",56,0)
 ;
"RTN","DG10",57,0)
A1 D  G H:'%,CK:%'=1 S DGRPV=0 D EN1^DGRP,MT(DFN),CP G Q:$G(DGPRFLG)=1 G Q:$G(SDIEMM) G Q:'$D(DA),EMBOS
"RTN","DG10",58,0)
 .W !,"Do you want to ",$S(DGNEW:"enter",1:"edit")," Patient Data"
"RTN","DG10",59,0)
 .S %=1 D YN^DICN
"RTN","DG10",60,0)
 .I +$G(DGNEW) Q
"RTN","DG10",61,0)
 .I $$ADD^DGADDUTL($G(DFN)) ;
"RTN","DG10",62,0)
 ;
"RTN","DG10",63,0)
H W !?5,"Enter 'YES' to enter/edit registration data or 'NO' to continue without",!?5,"editing."
"RTN","DG10",64,0)
 G A1
"RTN","DG10",65,0)
 ;
"RTN","DG10",66,0)
CK S DGEDCN=1 D ^DGRPC,MT(DFN),CP
"RTN","DG10",67,0)
 G Q:$G(DGPRFLG)=1 G Q:$G(SDIEMM)
"RTN","DG10",68,0)
 I $G(DGER)[55 K DIR S DIR(0)="Y",DIR("A")="Do you wish to return to Screen #9 to enter missing Income Data? " D ^DIR K DIR
"RTN","DG10",69,0)
 ;G:Y ^DGRP9
"RTN","DG10",70,0)
 ;
"RTN","DG10",71,0)
EMBOS ;W ! D EMBOS^DGQEMA G A
"RTN","DG10",72,0)
 ;DG*5.3*921 Invoke eHMP demographic change checking
"RTN","DG10",73,0)
 D T
"RTN","DG10",74,0)
 G A
"RTN","DG10",75,0)
 ;
"RTN","DG10",76,0)
 ;
"RTN","DG10",77,0)
Q K X,Y,Z,DIC,DGELVER,DGNEW,DGRPV,VET Q
"RTN","DG10",78,0)
 ;
"RTN","DG10",79,0)
MT(DFN) ; Check if user requires a means test.  Ask user if they want to proceedif
"RTN","DG10",80,0)
 ; one is required
"RTN","DG10",81,0)
 I '$D(SDIEMM) DO
"RTN","DG10",82,0)
 .N DGREQF,DIV
"RTN","DG10",83,0)
 .D EN^DGMTR
"RTN","DG10",84,0)
 .I DGREQF D EDT^DGMTU(DFN,DT):$P($$MTS^DGMTU(DFN),U,2)="R"
"RTN","DG10",85,0)
 .Q
"RTN","DG10",86,0)
 I $D(SDIEMM) DO
"RTN","DG10",87,0)
 .N DGMTI
"RTN","DG10",88,0)
 .S DGMTI=$$LST^DGMTU(DFN,SCINF("ENCOUNTER"),1)
"RTN","DG10",89,0)
 .I $P(DGMTI,U,4)="R" D  I 1
"RTN","DG10",90,0)
 ..S DGMT0=$G(^DGMT(408.31,+DGMTI,0)),DGMTDT=$P(DGMT0,"^")
"RTN","DG10",91,0)
 ..I '$$OKTOCONT(DGMTDT) Q
"RTN","DG10",92,0)
 ..S DGMTI=+DGMTI,DGMTYPT=1,DGMTACT="COM",DGMTROU="COM^DGMTEO" D EN^DGMTSC
"RTN","DG10",93,0)
 .E  D WARNING
"RTN","DG10",94,0)
 .Q
"RTN","DG10",95,0)
 Q
"RTN","DG10",96,0)
 ;
"RTN","DG10",97,0)
WARNING ;
"RTN","DG10",98,0)
 ;prints a warning to the screen about means test
"RTN","DG10",99,0)
 ;
"RTN","DG10",100,0)
 W !!,"A means test for this encounter date was not found and may be required!"
"RTN","DG10",101,0)
 W !,"Further investigation will be needed."
"RTN","DG10",102,0)
 W !
"RTN","DG10",103,0)
 D PAUSE
"RTN","DG10",104,0)
 Q
"RTN","DG10",105,0)
 ;
"RTN","DG10",106,0)
PAUSE ;
"RTN","DG10",107,0)
 N DIR
"RTN","DG10",108,0)
 S DIR(0)="FAO",DIR("A")="Press ENTER to continue " D ^DIR
"RTN","DG10",109,0)
 Q
"RTN","DG10",110,0)
 ;
"RTN","DG10",111,0)
OKTOCONT(Y) ;
"RTN","DG10",112,0)
 ;
"RTN","DG10",113,0)
 N DIR
"RTN","DG10",114,0)
 W !!,"Patient Requires a means Test"
"RTN","DG10",115,0)
 X ^DD("DD")
"RTN","DG10",116,0)
 W !,"Primary Means Test Required from '",Y,"'",!
"RTN","DG10",117,0)
 ;
"RTN","DG10",118,0)
 I $D(SDIEMM),'$D(^XUSEC("SCENI MEANS TEST EDIT",DUZ)) DO  G OKQ
"RTN","DG10",119,0)
 .W !,$C(7),"You do not have the appropriate IEMM Security Key.  Contact your supervisor.",!
"RTN","DG10",120,0)
 .D PAUSE
"RTN","DG10",121,0)
 .S Y=0
"RTN","DG10",122,0)
 ;
"RTN","DG10",123,0)
 S DIR("A")="Do you wish to proceed with the means test at this time"
"RTN","DG10",124,0)
 S DIR("B")="YES"
"RTN","DG10",125,0)
 S DIR(0)="Y"
"RTN","DG10",126,0)
 D ^DIR
"RTN","DG10",127,0)
OKQ Q $S(Y=1:1,1:0)
"RTN","DG10",128,0)
 ;
"RTN","DG10",129,0)
CP ;If not (autoexempt or MTested) & no CP test this year then
"RTN","DG10",130,0)
 ;prompt for add/edit cp test
"RTN","DG10",131,0)
 N DIV,DGIB,DGIBDT,DGX,X,DIRUT,DTOUT
"RTN","DG10",132,0)
 G:'$P($G(^DG(43,1,0)),U,41) QTCP ;USE CP FLAG
"RTN","DG10",133,0)
 S DGIBDT=$S($D(DFN1):9999999-DFN1,1:DT)
"RTN","DG10",134,0)
 D EN^DGMTCOR
"RTN","DG10",135,0)
 I +$G(DGNOCOPF) S DGMTCOR=0
"RTN","DG10",136,0)
 I DGMTCOR D THRESH^DGMTCOU1(DGIBDT) D EDT^DGMTCOU(DFN,DT)
"RTN","DG10",137,0)
 K DGNOCOPF
"RTN","DG10",138,0)
QTCP Q
"RTN","DG10",139,0)
 ;
"RTN","DG10",140,0)
T ;
"RTN","DG10",141,0)
 ;DG*5.3*921- Check to ensure all demographic changes are passed to eHMP 10/2/15
"RTN","DG10",142,0)
 ;If we are editing demographics for an existing patient, get a snapshot after
"RTN","DG10",143,0)
 ;the changes and compare the before and after snapshots.  If there are ANY changes
"RTN","DG10",144,0)
 ;invoke the unsolicited update protocol.
"RTN","DG10",145,0)
 I DGNEW']"" D
"RTN","DG10",146,0)
 .N DGFIELD,DGFILE,DGDA
"RTN","DG10",147,0)
 .D T59(DFN,"AFTER")
"RTN","DG10",148,0)
 .I $$T60("BEFORE","AFTER",.DGFIELD) S DGFILE=2,DGDA=DFN D:$L($T(DG^HMPEVNT)) DG^HMPEVNT
"RTN","DG10",149,0)
 Q
"RTN","DG10",150,0)
 ;
"RTN","DG10",151,0)
T59(A,B) ;Get all the demographics that are supposed to trigger an unsolicited update
"RTN","DG10",152,0)
 ;DG*5.3*921
"RTN","DG10",153,0)
 ;A = DFN
"RTN","DG10",154,0)
 ;B = Return array
"RTN","DG10",155,0)
 N FLDS,INS
"RTN","DG10",156,0)
 S FLDS=".01;.02;.03;.05;.08;.09;.351;.361;.364;.111;.1112;.112;.113;.114;.115;.131;.132;.134;"
"RTN","DG10",157,0)
 S FLDS=FLDS_".211;.212;.213;.214;.216;.217;.218;.219;.301;.302;1901;.32102;.32103;.32201;.5295;"
"RTN","DG10",158,0)
 S FLDS=FLDS_".133;.1211;.1212;.1213;.1214;.1215;.1216;.331;.332;.333;.334;.335;.336;.337;"
"RTN","DG10",159,0)
 S FLDS=FLDS_".338;.339;.33011;.215;.21011;.3731;"
"RTN","DG10",160,0)
 D GETS^DIQ(2,A_",",FLDS,,B)
"RTN","DG10",161,0)
 Q
"RTN","DG10",162,0)
 ;
"RTN","DG10",163,0)
T60(A,B,C) ;Compare the before and after arrays to see if any of the considerd demographics
"RTN","DG10",164,0)
 ;were changed
"RTN","DG10",165,0)
 ;DG*5.3*921
"RTN","DG10",166,0)
 ;A = "before" changes array
"RTN","DG10",167,0)
 ;B = "after" changes array
"RTN","DG10",168,0)
 ;Both A and B are of the form: A(2,DFN_",",Field#)=Field value.  E.g. A(2,"3,",.114)="LOS ANGELES"
"RTN","DG10",169,0)
 ;C = the first field that was changed (e.g. .111 for street address line 1).
"RTN","DG10",170,0)
 ;    This is an output parameter.
"RTN","DG10",171,0)
 ;Returns true (1) if any change is detected.  Quits at the FIRST find.
"RTN","DG10",172,0)
 ;        false (null) if there are no changes.
"RTN","DG10",173,0)
 N F,X,Y,Z
"RTN","DG10",174,0)
 S (C,F,Z)=""
"RTN","DG10",175,0)
 F  S Z=$O(@A@(Z)) Q:$G(F)!(Z'=+Z)  D
"RTN","DG10",176,0)
 .S Y=""
"RTN","DG10",177,0)
 .F  S Y=$O(@A@(Z,Y)) Q:$G(F)!(Y']"")  D
"RTN","DG10",178,0)
 ..S X=""
"RTN","DG10",179,0)
 ..F  S X=$O(@A@(Z,Y,X)) Q:$G(F)!(X'=+X)  D
"RTN","DG10",180,0)
 ...I @A@(Z,Y,X)'=$G(@B@(Z,Y,X)) S F=1,C=X Q
"RTN","DG10",181,0)
 Q F
"RTN","DGPFAA")
0^2^B41523705
"RTN","DGPFAA",1,0)
DGPFAA ;ALB/RPM,ASMR/JD - PRF ASSIGNMENT API'S ; 10/28/15 13:24:31
"RTN","DGPFAA",2,0)
 ;;5.3;Registration;**425,*921**;Aug 13, 1993;Build 7
"RTN","DGPFAA",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DGPFAA",4,0)
 ;
"RTN","DGPFAA",5,0)
 ;DE2813 - JD - 10/28/15
"RTN","DGPFAA",6,0)
 ;Done for eHMP project: DG*5.3*921
"RTN","DGPFAA",7,0)
 ;Addd logic to trigger an unsolicited update when a patient flag is updated.
"RTN","DGPFAA",8,0)
 ;New code: Tag UU and any reference to that tag thereof.
"RTN","DGPFAA",9,0)
 ;
"RTN","DGPFAA",10,0)
 Q  ;no direct entry
"RTN","DGPFAA",11,0)
 ;
"RTN","DGPFAA",12,0)
GETALL(DGDFN,DGIENS,DGSTAT,DGCAT) ;retrieve list of assignment IENs
"RTN","DGPFAA",13,0)
 ;This function returns an array of patient record flag assignment IENs
"RTN","DGPFAA",14,0)
 ;for a given patient.  The returned IEN array may optionally be
"RTN","DGPFAA",15,0)
 ;filtered by Active or Inactive status and by flag category.
"RTN","DGPFAA",16,0)
 ;
"RTN","DGPFAA",17,0)
 ;  Input:
"RTN","DGPFAA",18,0)
 ;    DGDFN - (required) Pointer to patient in PATIENT (#2) file
"RTN","DGPFAA",19,0)
 ;   DGIENS - (required) Result array passed by reference
"RTN","DGPFAA",20,0)
 ;   DGSTAT - (optional) Status filter (0:Inactive,1:Active,"":Both).
"RTN","DGPFAA",21,0)
 ;            Defaults to Both.
"RTN","DGPFAA",22,0)
 ;    DGCAT - (optional) Category filter
"RTN","DGPFAA",23,0)
 ;            (1:Category I,2:Category II,"":Both).  Defaults to Both.
"RTN","DGPFAA",24,0)
 ;
"RTN","DGPFAA",25,0)
 ;  Output:
"RTN","DGPFAA",26,0)
 ;   Function Value - Count of returned IENs
"RTN","DGPFAA",27,0)
 ;         DGIENS - Output array subscripted by the assignment IENs
"RTN","DGPFAA",28,0)
 ;
"RTN","DGPFAA",29,0)
 N DGCNT   ;number of returned values
"RTN","DGPFAA",30,0)
 N DGIEN   ;single IEN
"RTN","DGPFAA",31,0)
 N DGCKS   ;check status flag (1:check, 0:ignore)
"RTN","DGPFAA",32,0)
 N DGFLAG  ;pointer to #26.11 or #26.15
"RTN","DGPFAA",33,0)
 ;
"RTN","DGPFAA",34,0)
 S DGCNT=0
"RTN","DGPFAA",35,0)
 I $G(DGDFN)>0,$D(^DGPF(26.13,"B",DGDFN)) D
"RTN","DGPFAA",36,0)
 . S DGFLAG=""
"RTN","DGPFAA",37,0)
 . S DGCKS=0
"RTN","DGPFAA",38,0)
 . S DGSTAT=$G(DGSTAT)
"RTN","DGPFAA",39,0)
 . I DGSTAT=0!(DGSTAT=1) S DGCKS=1
"RTN","DGPFAA",40,0)
 . S DGCAT=+$G(DGCAT)
"RTN","DGPFAA",41,0)
 . S DGCAT=$S(DGCAT=1:"26.15",DGCAT=2:"26.11",1:0)
"RTN","DGPFAA",42,0)
 . F  S DGFLAG=$O(^DGPF(26.13,"C",DGDFN,DGFLAG)) Q:(DGFLAG="")  D
"RTN","DGPFAA",43,0)
 . . I DGCAT,DGFLAG'[DGCAT Q
"RTN","DGPFAA",44,0)
 . . S DGIEN=$O(^DGPF(26.13,"C",DGDFN,DGFLAG,0))
"RTN","DGPFAA",45,0)
 . . I DGCKS,'$D(^DGPF(26.13,"D",DGDFN,DGSTAT,DGIEN)) Q
"RTN","DGPFAA",46,0)
 . . S DGCNT=DGCNT+1
"RTN","DGPFAA",47,0)
 . . S DGIENS(DGIEN)=""
"RTN","DGPFAA",48,0)
 Q DGCNT
"RTN","DGPFAA",49,0)
 ;
"RTN","DGPFAA",50,0)
GETASGN(DGPFIEN,DGPFA) ;retrieve a single assignment record
"RTN","DGPFAA",51,0)
 ;This function returns a single patient record flag assignment in an
"RTN","DGPFAA",52,0)
 ;array format.
"RTN","DGPFAA",53,0)
 ;
"RTN","DGPFAA",54,0)
 ;  Input:
"RTN","DGPFAA",55,0)
 ;    DGPFIEN - (required) Pointer to patient record flag assignment in
"RTN","DGPFAA",56,0)
 ;              PRF ASSIGNMENT (#26.13) file
"RTN","DGPFAA",57,0)
 ;      DGPFA - (required) Result array passed by reference
"RTN","DGPFAA",58,0)
 ;
"RTN","DGPFAA",59,0)
 ;  Output:
"RTN","DGPFAA",60,0)
 ;   Function Value - Returns 1 on success, 0 on failure
"RTN","DGPFAA",61,0)
 ;            DGPFA - Output array containing assignment record field
"RTN","DGPFAA",62,0)
 ;                    values.
"RTN","DGPFAA",63,0)
 ;                    Subscript          Field#   Data
"RTN","DGPFAA",64,0)
 ;                    --------------     -------  ---------------------
"RTN","DGPFAA",65,0)
 ;                    "DFN"              .01      internal^external
"RTN","DGPFAA",66,0)
 ;                    "FLAG"             .02      internal^external
"RTN","DGPFAA",67,0)
 ;                    "STATUS"           .03      internal^external
"RTN","DGPFAA",68,0)
 ;                    "OWNER"            .04      internal^external
"RTN","DGPFAA",69,0)
 ;                    "ORIGSITE"         .05      internal^external
"RTN","DGPFAA",70,0)
 ;                    "REVIEWDT"         .06      internal^external
"RTN","DGPFAA",71,0)
 ;                    "NARR",line#,0     1        character string
"RTN","DGPFAA",72,0)
 ;
"RTN","DGPFAA",73,0)
 N DGIENS   ;IEN string for DIQ
"RTN","DGPFAA",74,0)
 N DGFLDS   ;results array for DIQ
"RTN","DGPFAA",75,0)
 N DGERR  ;error arrary for DIQ
"RTN","DGPFAA",76,0)
 N DGRSLT
"RTN","DGPFAA",77,0)
 ;
"RTN","DGPFAA",78,0)
 S DGRSLT=0
"RTN","DGPFAA",79,0)
 I $G(DGPFIEN)>0,$D(^DGPF(26.13,DGPFIEN)) D
"RTN","DGPFAA",80,0)
 . S DGIENS=DGPFIEN_","
"RTN","DGPFAA",81,0)
 . D GETS^DIQ(26.13,DGIENS,"*","IEZ","DGFLDS","DGERR")
"RTN","DGPFAA",82,0)
 . Q:$D(DGERR)
"RTN","DGPFAA",83,0)
 . S DGRSLT=1
"RTN","DGPFAA",84,0)
 . S DGPFA("DFN")=$G(DGFLDS(26.13,DGIENS,.01,"I"))_U_$G(DGFLDS(26.13,DGIENS,.01,"E"))
"RTN","DGPFAA",85,0)
 . S DGPFA("FLAG")=$G(DGFLDS(26.13,DGIENS,.02,"I"))_U_$G(DGFLDS(26.13,DGIENS,.02,"E"))
"RTN","DGPFAA",86,0)
 . S DGPFA("STATUS")=$G(DGFLDS(26.13,DGIENS,.03,"I"))_U_$G(DGFLDS(26.13,DGIENS,.03,"E"))
"RTN","DGPFAA",87,0)
 . S DGPFA("OWNER")=$G(DGFLDS(26.13,DGIENS,.04,"I"))_U_$G(DGFLDS(26.13,DGIENS,.04,"E"))
"RTN","DGPFAA",88,0)
 . S DGPFA("ORIGSITE")=$G(DGFLDS(26.13,DGIENS,.05,"I"))_U_$G(DGFLDS(26.13,DGIENS,.05,"E"))
"RTN","DGPFAA",89,0)
 . S DGPFA("REVIEWDT")=$G(DGFLDS(26.13,DGIENS,.06,"I"))_U_$G(DGFLDS(26.13,DGIENS,.06,"E"))
"RTN","DGPFAA",90,0)
 . ;build assignment narrative word processing array
"RTN","DGPFAA",91,0)
 . M DGPFA("NARR")=DGFLDS(26.13,DGIENS,1)
"RTN","DGPFAA",92,0)
 . K DGPFA("NARR","E"),DGPFA("NARR","I")
"RTN","DGPFAA",93,0)
 Q DGRSLT
"RTN","DGPFAA",94,0)
 ;
"RTN","DGPFAA",95,0)
FNDASGN(DGPFDFN,DGPFFLG) ;Find Assignment
"RTN","DGPFAA",96,0)
 ;  This function finds a patient record flag assignment record.
"RTN","DGPFAA",97,0)
 ;
"RTN","DGPFAA",98,0)
 ;  Input:
"RTN","DGPFAA",99,0)
 ;    DGDFN - Pointer to patient in the PATIENT (#2) file
"RTN","DGPFAA",100,0)
 ;   DGFLAG - Pointer to flag in either the PRF LOCAL FLAG (#26.11)
"RTN","DGPFAA",101,0)
 ;            file or the PRF NATIONAL FLAG (#26.15) file
"RTN","DGPFAA",102,0)
 ;
"RTN","DGPFAA",103,0)
 ;  Output:
"RTN","DGPFAA",104,0)
 ;   Function Value - Returns IEN of existing record on success, 0 on
"RTN","DGPFAA",105,0)
 ;                    failure
"RTN","DGPFAA",106,0)
 ;
"RTN","DGPFAA",107,0)
 N DGIEN
"RTN","DGPFAA",108,0)
 ;
"RTN","DGPFAA",109,0)
 I $G(DGPFDFN)>0,($G(DGPFFLG)>0) D
"RTN","DGPFAA",110,0)
 . S DGIEN=$O(^DGPF(26.13,"C",DGPFDFN,DGPFFLG,0))
"RTN","DGPFAA",111,0)
 Q $S($G(DGIEN)>0:DGIEN,1:0)
"RTN","DGPFAA",112,0)
 ;
"RTN","DGPFAA",113,0)
STOASGN(DGPFA,DGPFERR) ;store a single PRF ASSIGNMENT (#26.13) file record
"RTN","DGPFAA",114,0)
 ;
"RTN","DGPFAA",115,0)
 ;  Input:
"RTN","DGPFAA",116,0)
 ;    DGPFA - (required) array of values to be filed (see GETASGN tag
"RTN","DGPFAA",117,0)
 ;            above for valid array structure)
"RTN","DGPFAA",118,0)
 ;  DGPFERR - (optional) passed by reference to contain error messages
"RTN","DGPFAA",119,0)
 ;
"RTN","DGPFAA",120,0)
 ;  Output:
"RTN","DGPFAA",121,0)
 ;   Function Value - Returns IEN of record on success, 0 on failure
"RTN","DGPFAA",122,0)
 ;          DGPFERR - Undefined on success, error message on failure
"RTN","DGPFAA",123,0)
 ;
"RTN","DGPFAA",124,0)
 N DGSUB
"RTN","DGPFAA",125,0)
 N DGFLD
"RTN","DGPFAA",126,0)
 N DGIEN
"RTN","DGPFAA",127,0)
 N DGIENS
"RTN","DGPFAA",128,0)
 N DGFDA
"RTN","DGPFAA",129,0)
 N DGFDAIEN
"RTN","DGPFAA",130,0)
 N DGERR
"RTN","DGPFAA",131,0)
 F DGSUB="DFN","FLAG","STATUS","OWNER","ORIGSITE" D
"RTN","DGPFAA",132,0)
 . S DGFLD(DGSUB)=$P($G(DGPFA(DGSUB)),U,1)
"RTN","DGPFAA",133,0)
 ;
"RTN","DGPFAA",134,0)
 ;only build DGFLD("REVIEWDT") if "REVIEWDT" is passed
"RTN","DGPFAA",135,0)
 I $D(DGPFA("REVIEWDT"))=1 S DGFLD("REVIEWDT")=$P(DGPFA("REVIEWDT"),U,1)
"RTN","DGPFAA",136,0)
 ;
"RTN","DGPFAA",137,0)
 I $D(DGPFA("NARR")) M DGFLD("NARR")=DGPFA("NARR")
"RTN","DGPFAA",138,0)
 I $$VALID^DGPFUT("DGPFAA1",26.13,.DGFLD,.DGPFERR) D
"RTN","DGPFAA",139,0)
 . S DGIEN=$$FNDASGN^DGPFAA(DGFLD("DFN"),DGFLD("FLAG"))
"RTN","DGPFAA",140,0)
 . I DGIEN S DGIENS=DGIEN_","
"RTN","DGPFAA",141,0)
 . E  S DGIENS="+1,"
"RTN","DGPFAA",142,0)
 . S DGFDA(26.13,DGIENS,.01)=DGFLD("DFN")
"RTN","DGPFAA",143,0)
 . S DGFDA(26.13,DGIENS,.02)=DGFLD("FLAG")
"RTN","DGPFAA",144,0)
 . S DGFDA(26.13,DGIENS,.03)=DGFLD("STATUS")
"RTN","DGPFAA",145,0)
 . S DGFDA(26.13,DGIENS,.04)=DGFLD("OWNER")
"RTN","DGPFAA",146,0)
 . S DGFDA(26.13,DGIENS,.05)=DGFLD("ORIGSITE")
"RTN","DGPFAA",147,0)
 . ;
"RTN","DGPFAA",148,0)
 . ;only touch REVIEW DATE (#.06) field if "REVIEWDT" is passed
"RTN","DGPFAA",149,0)
 . I $D(DGFLD("REVIEWDT")) S DGFDA(26.13,DGIENS,.06)=DGFLD("REVIEWDT")
"RTN","DGPFAA",150,0)
 . ;
"RTN","DGPFAA",151,0)
 . S DGFDA(26.13,DGIENS,1)="DGFLD(""NARR"")"
"RTN","DGPFAA",152,0)
 . I DGIEN D
"RTN","DGPFAA",153,0)
 . . D FILE^DIE("","DGFDA","DGERR")
"RTN","DGPFAA",154,0)
 . . I $D(DGERR) S DGIEN=0
"RTN","DGPFAA",155,0)
 . . ;DG*5.3*921 - Trigger an unsolicited update if a patient flag is updated
"RTN","DGPFAA",156,0)
 . . I '$D(DGERR) D UU(.DGPFA)
"RTN","DGPFAA",157,0)
 . E  D
"RTN","DGPFAA",158,0)
 . . D UPDATE^DIE("","DGFDA","DGFDAIEN","DGERR")
"RTN","DGPFAA",159,0)
 . . I '$D(DGERR) S DGIEN=$G(DGFDAIEN(1))
"RTN","DGPFAA",160,0)
 Q $S($G(DGIEN)>0:DGIEN,1:0)
"RTN","DGPFAA",161,0)
 ;
"RTN","DGPFAA",162,0)
STOALL(DGPFA,DGPFAH,DGPFERR) ;store both the assignment and history record
"RTN","DGPFAA",163,0)
 ;This function acts as a wrapper around the $$STOASGN and $$STOHIST
"RTN","DGPFAA",164,0)
 ;filer calls.
"RTN","DGPFAA",165,0)
 ;
"RTN","DGPFAA",166,0)
 ;  Input:
"RTN","DGPFAA",167,0)
 ;    DGPFA - (required) array of assignment values to be filed (see
"RTN","DGPFAA",168,0)
 ;            $$GETASGN^DGPFAA for valid array structure)
"RTN","DGPFAA",169,0)
 ;   DGPFAH - (required) array of assignment history values to be filed
"RTN","DGPFAA",170,0)
 ;            (see $$STOHIST^DGPFAAH for valid array structure)
"RTN","DGPFAA",171,0)
 ;  DGPFERR - (optional) passed by reference to contain error messages
"RTN","DGPFAA",172,0)
 ;
"RTN","DGPFAA",173,0)
 ;  Output:
"RTN","DGPFAA",174,0)
 ;   Function Value - Returns circumflex("^") delimited results of
"RTN","DGPFAA",175,0)
 ;                    $$STOASGN^DGPFAA and $$STOHIST^DGPFAAH calls
"RTN","DGPFAA",176,0)
 ;          DGPFERR - Undefined on success, error message on failure
"RTN","DGPFAA",177,0)
 ;
"RTN","DGPFAA",178,0)
 N DGOIEN    ;existing assignment file IEN used for "roll-back"
"RTN","DGPFAA",179,0)
 N DGPFOA    ;existing assignment data array used for "roll-back"
"RTN","DGPFAA",180,0)
 N DGAIEN    ;assignment file IEN
"RTN","DGPFAA",181,0)
 N DGAHIEN   ;assignment history file IEN
"RTN","DGPFAA",182,0)
 N DGDFN     ;"DFN" value
"RTN","DGPFAA",183,0)
 N DGFLG     ;"FLAG" value
"RTN","DGPFAA",184,0)
 ;
"RTN","DGPFAA",185,0)
 S (DGAIEN,DGAHIEN)=0
"RTN","DGPFAA",186,0)
 S DGDFN=$P($G(DGPFA("DFN")),U,1)
"RTN","DGPFAA",187,0)
 S DGFLG=$P($G(DGPFA("FLAG")),U,1)
"RTN","DGPFAA",188,0)
 S DGOIEN=$$FNDASGN^DGPFAA(DGDFN,DGFLG)
"RTN","DGPFAA",189,0)
 D   ;drops out of block if can't rollback or assignment filer fails
"RTN","DGPFAA",190,0)
 . I DGOIEN,'$$GETASGN^DGPFAA(DGOIEN,.DGPFOA) Q  ;can't rollback, so quit
"RTN","DGPFAA",191,0)
 . ;
"RTN","DGPFAA",192,0)
 . ;store the assignment
"RTN","DGPFAA",193,0)
 . S DGAIEN=$$STOASGN^DGPFAA(.DGPFA,.DGPFERR)
"RTN","DGPFAA",194,0)
 . I $D(DGPFERR) S DGAIEN=0
"RTN","DGPFAA",195,0)
 . Q:'DGAIEN  ;assignment filer failed, so quit
"RTN","DGPFAA",196,0)
 . ;
"RTN","DGPFAA",197,0)
 . ;store the assignment history
"RTN","DGPFAA",198,0)
 . S DGPFAH("ASSIGN")=DGAIEN
"RTN","DGPFAA",199,0)
 . S DGAHIEN=$$STOHIST^DGPFAAH(.DGPFAH,.DGPFERR)
"RTN","DGPFAA",200,0)
 . I $D(DGPFERR) S DGAHIEN=0
"RTN","DGPFAA",201,0)
 . I DGAHIEN=0 D    ;history filer failed, so rollback the assignment 
"RTN","DGPFAA",202,0)
 . . I 'DGOIEN,'$D(DGPFOA) S DGPFOA("DFN")="@"
"RTN","DGPFAA",203,0)
 . . I $$ROLLBACK^DGPFAA2(DGAIEN,.DGPFOA) S DGAIEN=0
"RTN","DGPFAA",204,0)
 Q $S(+$G(DGAHIEN)=0:0,1:DGAIEN_"^"_DGAHIEN)
"RTN","DGPFAA",205,0)
 ;
"RTN","DGPFAA",206,0)
UU(ARRY)        ;Fire off "DGPF ASSIGN FLAG" protocol for UPDATED flags
"RTN","DGPFAA",207,0)
 ;ARRY("DFN")=DFN
"RTN","DGPFAA",208,0)
 N DGDFN,X
"RTN","DGPFAA",209,0)
 S DGDFN=+ARRY("DFN")
"RTN","DGPFAA",210,0)
 S X=+$O(^ORD(101,"B","DGPF ASSIGN FLAG",0))_";ORD(101,"
"RTN","DGPFAA",211,0)
 D:X EN1^XQOR
"RTN","DGPFAA",212,0)
 Q
"VER")
8.0^22.0
**END**
**END**
