#LoadModule rewrite_module modules/mod_rewrite.so
#LoadModule proxy_balancer_module modules/mod_proxy_balancer.so

##
## SSL Virtual Host Context
##

<VirtualHost *:443>

        Header always set Strict-Transport-Security "max-age=31536000"

        <IfModule mod_autoindex.c>
            Options -Indexes
        </IfModule>

        # TODO: mod_gzip instead?
        <IfModule mod_deflate.c>
            # Compress HTML, CSS, JavaScript, Text, XML and fonts
            AddOutputFilterByType DEFLATE application/javascript
            AddOutputFilterByType DEFLATE application/json
            AddOutputFilterByType DEFLATE application/rss+xml
            AddOutputFilterByType DEFLATE application/vnd.ms-fontobject
            AddOutputFilterByType DEFLATE application/x-font
            AddOutputFilterByType DEFLATE application/x-font-opentype
            AddOutputFilterByType DEFLATE application/x-font-otf
            AddOutputFilterByType DEFLATE application/x-font-truetype
            AddOutputFilterByType DEFLATE application/x-font-ttf
            AddOutputFilterByType DEFLATE application/x-javascript
            AddOutputFilterByType DEFLATE application/xhtml+xml
            AddOutputFilterByType DEFLATE application/xml
            AddOutputFilterByType DEFLATE font/opentype
            AddOutputFilterByType DEFLATE font/otf
            AddOutputFilterByType DEFLATE font/ttf
            AddOutputFilterByType DEFLATE image/svg+xml
            AddOutputFilterByType DEFLATE image/x-icon
            AddOutputFilterByType DEFLATE text/css
            AddOutputFilterByType DEFLATE text/html
            AddOutputFilterByType DEFLATE text/javascript
            AddOutputFilterByType DEFLATE text/plain
            AddOutputFilterByType DEFLATE text/xml

            # Remove browser bugs (only needed for really old browsers)
            BrowserMatch ^Mozilla/4 gzip-only-text/html
            BrowserMatch ^Mozilla/4\.0[678] no-gzip
            BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
            Header append Vary User-Agent
        </IfModule>

        # Configure proxy-balancer
        ProxyRequests off
        
        ServerName web.vistacore.us

        <Proxy balancer://web-cluster>
                BalancerMember http://IPADDRESS:POR
                # Security "technically we aren't blocking
                # anyone but this the place to make those
                # chages
                Order Deny,Allow
                Deny from none
                Allow from all

                # Load Balancer Settings for ehmp static web
                # We will be configuring a simple Round
                # Robin style load balancer.  This means
                # that all webheads take an equal share of
                # of the load.
                # stickysession=JSESSIONID
                    ProxySet lbmethod=byrequests stickysession=JSESSIONID

        </Proxy>

        <Proxy balancer://rdk-cluster>
                BalancerMember http://IP_ADDRESS:PORT

                # Security "technically we aren't blocking
                # anyone but this the place to make those
                # chages
                Order Deny,Allow
                Deny from none
                Allow from all

                # Load Balancer Settings
                # We will be configuring a simple Round
                # Robin style load balancer.  This means
                # that all webheads take an equal share of
                # of the load.
                # stickysession=JSESSIONID
                    ProxySet lbmethod=byrequests stickysession=JSESSIONID

        </Proxy>

        <Proxy balancer://write-back-cluster>
                    BalancerMember http://IP_ADDRESS:PORT

                # Security "technically we aren't blocking
                # anyone but this the place to make those
                # chages
                Order Deny,Allow
                Deny from none
                Allow from all

                # Load Balancer Settings
                # We will be configuring a simple Round
                # Robin style load balancer.  This means
                # that all webheads take an equal share of
                # of the load.
                # stickysession=JSESSIONID
                    ProxySet lbmethod=byrequests stickysession=JSESSIONID

        </Proxy>

        <Proxy balancer://pick-list-cluster>
                 BalancerMember http://IP_ADDRESS:PORT

                # Security "technically we aren't blocking
                # anyone but this the place to make those
                # chages
                Order Deny,Allow
                Deny from none
                Allow from all

                # Load Balancer Settings
                # We will be configuring a simple Round
                # Robin style load balancer.  This means
                # that all webheads take an equal share of
                # of the load.
                # stickysession=JSESSIONID
                    ProxySet lbmethod=byrequests stickysession=JSESSIONID

        </Proxy>
        
        # allow access to the uri's representing each component
        <Location /write-pick-list>
                Order deny,allow
                Allow from all
        </Location>
        <Location /write-health-data>
                Order deny,allow
                Allow from all
        </Location>
        <Location /resource>
                Order deny,allow
                Allow from all
        </Location>
	<Location />
                Order deny,allow
                Allow from all
        </Location>


        # Point of Balance
        # This setting will allow to explicitly name the
        # the location in the site that we want to be
        # balanced, in this example we will balance "/"
        # or everything in the site.

        ProxyPass /balancer-manager !

        ProxyPass /resource/write-pick-list balancer://pick-list-cluster/resource/write-pick-list

        ProxyPass /resource/write-health-data balancer://write-back-cluster/resource/write-health-data

        # traffic to rdk
        ProxyPass /resource balancer://rdk-cluster/resource

# mockssoi endpoint
ProxyPass /mockssoi http://IP_ADDRESS:PORT/mockssoi

        # send the rest to static ehmp web
        ProxyPass / balancer://web-cluster/


# check for mockssoi cookie
# if not found send to mockssoi login
# else add headers from cookie then continue to ehmp web

RewriteEngine On

RewriteCond %{HTTP_COOKIE} !^.*mockssoi.*$ [NC]
RewriteRule ^/$ https://IP_ADDRESS/mockssoi/?TARGET=https://IP_ADDRESS [NC,L]

RewriteCond %{HTTP_COOKIE} \\"firstname\\":\\"(.*?)\\"
RewriteRule . - [E=FIRSTNAME:%1]
RequestHeader set FIRSTNAME "%{FIRSTNAME}e" env=FIRSTNAME

RewriteCond %{HTTP_COOKIE} \\"lastname\\":\\"(.*?)\\"
RewriteRule . - [E=LASTNAME:%1]
RequestHeader set LASTNAME "%{LASTNAME}e" env=LASTNAME

RewriteCond %{HTTP_COOKIE} \\"role\\":\\"(.*?)\\"
RewriteRule . - [E=ROLE:%1]
RequestHeader set ROLE "%{ROLE}e" env=ROLE

RewriteCond %{HTTP_COOKIE} \\"site\\":\\"(.*?)\\"
RewriteRule . - [E=SITE:%1]
RequestHeader set SITE "%{SITE}e" env=SITE

RewriteCond %{HTTP_COOKIE} \\"duz\\":\\"(.*?)\\"
RewriteRule . - [E=DUZ:%1]
RequestHeader set DUZ "%{DUZ}e" env=DUZ

RewriteCond %{HTTP_COOKIE} \\"adEmail\\":\\"(.*?)\\"
RewriteRule . - [E=ADEMAIL:%1]
RequestHeader set ADEMAIL "%{ADEMAIL}e" env=ADEMAIL

RewriteCond %{HTTP_COOKIE} \\"adDomain\\":\\"(.*?)\\"
RewriteRule . - [E=ADDOMAIN:%1]
RequestHeader set ADDOMAIN "%{ADDOMAIN}e" env=ADDOMAIN

RewriteCond %{HTTP_COOKIE} \\"adUpn\\":\\"(.*?)\\"
RewriteRule . - [E=ADUPN:%1]
RequestHeader set ADUPN "%{ADUPN}e" env=ADUPN

RewriteCond %{HTTP_COOKIE} \\"adSamAccountName\\":\\"(.*?)\\"
RewriteRule . - [E=ADSAMACCOUNTNAME:%1]
RequestHeader set ADSAMACCOUNTNAME "%{ADSAMACCOUNTNAME}e" env=ADSAMACCOUNTNAME

RewriteCond %{HTTP_COOKIE} \\"uid\\":\\"(.*?)\\"
RewriteRule . - [E=UID:%1]
RequestHeader set VAUID "%{UID}e" env=UID

RewriteCond %{HTTP_COOKIE} \\"username\\":\\"(.*?)\\"
RewriteRule . - [E=USERNAME:%1]
RequestHeader set ACCESSCODE "%{USERNAME}e" env=USERNAME

RewriteCond %{HTTP_COOKIE} \\"pwd\\":\\"(.*?)\\"
RewriteRule . - [E=PWD:%1]
RequestHeader set VERIFYCODE "%{PWD}e" env=PWD

RewriteCond %{HTTP_COOKIE} \\"vistaId\\":\\"(.*?)\\"
RewriteRule . - [E=VISTAID:%1]
RequestHeader set VISTAID "%{VISTAID}e" env=VISTAID

# if no VISTAID goto new page
RewriteCond %{HTTP_COOKIE} ^.*mockssoi.*$ [NC]
RewriteCond %{ENV:VISTAID} ^$
RewriteCond %{QUERY_STRING} !^code=NV$ [NC]
RewriteRule ^/$ https://IP_ADDRESS/?code=NV [NC,L]


        <IfModule mod_headers.c>
                Header always edit Set-Cookie ^(.*)$ "$1; Secure"
                Header edit Set-Cookie ^(.*)$ "$1; Secure"
        </IfModule>

        # SSL VirtualHost directives
        
        DocumentRoot /var/www

        # mod_nss can log to separate log files, you can choose to do that if you'd like
        # LogLevel is not inherited from httpd.conf.
        ErrorLog logs/ssl_error_log
        TransferLog logs/ssl_access_log
        LogLevel warn

        #   SSL Engine Switch:
        #   Enable/Disable SSL for this virtual host.
        NSSEngine on

        #   FIPS mode Switch:
        #   Enable/Disable FIPS mode
        NSSFips on

        #   SSL Cipher Suite:
        # List the ciphers that the client is permitted to negotiate.
        # See the mod_nss documentation for a complete list.

        # SSL 3 ciphers. SSL 2 is disabled by default.
        NSSCipherSuite -rsa_rc4_128_md5,-rsa_rc4_128_sha,+rsa_3des_sha,-rsa_des_sha,-rsa_rc4_40_md5,-rsa_rc2_40_md5,-rsa_null_md5,-rsa_null_sha,+fips_3des_sha,-fips_des_sha,-fortezza,-fortezza_rc4_128_sha,-fortezza_null,-rsa_des_56_sha,-rsa_rc4_56_sha,+rsa_aes_128_sha,+rsa_aes_256_sha

        #   SSL Protocol:
        #   Cryptographic protocols that provide communication security.
        #   NSS handles the specified protocols as "ranges", and automatically
        #   negotiates the use of the strongest protocol for a connection starting
        #   with the maximum specified protocol and downgrading as necessary to the
        #   minimum specified protocol that can be used between two processes.
        #   Since all protocol ranges are completely inclusive, and no protocol in the
        #   middle of a range may be excluded, the entry "NSSProtocol SSLv3,TLSv1.1"
        #   is identical to the entry "NSSProtocol SSLv3,TLSv1.0,TLSv1.1".
        NSSProtocol TLSv1.0,TLSv1.1

        #   SSL Certificate Nickname:
        #   The nickname of the RSA server certificate you are going to use.
        NSSNickname Server-Cert

        #   Server Certificate Database:
        #   The NSS security database directory that holds the certificates and
        #   keys. The database consists of 3 files: cert8.db, key3.db and secmod.db.
        #   Provide the directory that these files exist.
        NSSCertificateDatabase /etc/httpd/ssl

        #   Database Prefix:
        #   In order to be able to store multiple NSS databases in one directory
        #   they need unique names. This option sets the database prefix used for
        #   cert8.db and key3.db.
        #NSSDBPrefix my-prefix-

        #   Per-Server Logging:
        #   The home of a custom SSL log file. Use this when you want a
        #   compact non-error SSL logfile on a virtual host basis.
        CustomLog logs/ssl_request_log \
                  "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>

