KIDS Distribution saved on Jun 11, 2014@01:01:13
HMP 1.0 - S60
**KIDS**:HMP 1.0^MD*1.0*38^OR*3.0*390^PSB*3.0*79^VPR*1.0*3^TIU*1.0*106^

**INSTALL NAME**
HMP 1.0
"BLD",8821,0)
HMP 1.0^^1^3140611^n
"BLD",8821,6.3)
184
"BLD",8821,10,0)
^9.63^5^5
"BLD",8821,10,1,0)
MD*1.0*38^1
"BLD",8821,10,2,0)
OR*3.0*390^1
"BLD",8821,10,3,0)
PSB*3.0*79^1
"BLD",8821,10,4,0)
VPR*1.0*3^1
"BLD",8821,10,5,0)
TIU*1.0*106^1
"BLD",8821,10,"B","MD*1.0*38",1)

"BLD",8821,10,"B","OR*3.0*390",2)

"BLD",8821,10,"B","PSB*3.0*79",3)

"BLD",8821,10,"B","TIU*1.0*106",5)

"BLD",8821,10,"B","VPR*1.0*3",4)

"BLD",8821,"KRN",0)
^9.67PA^779.2^20
"BLD",8821,"KRN",.4,0)
.4
"BLD",8821,"KRN",.401,0)
.401
"BLD",8821,"KRN",.402,0)
.402
"BLD",8821,"KRN",.403,0)
.403
"BLD",8821,"KRN",.5,0)
.5
"BLD",8821,"KRN",.84,0)
.84
"BLD",8821,"KRN",3.6,0)
3.6
"BLD",8821,"KRN",3.8,0)
3.8
"BLD",8821,"KRN",9.2,0)
9.2
"BLD",8821,"KRN",9.8,0)
9.8
"BLD",8821,"KRN",19,0)
19
"BLD",8821,"KRN",19.1,0)
19.1
"BLD",8821,"KRN",101,0)
101
"BLD",8821,"KRN",409.61,0)
409.61
"BLD",8821,"KRN",771,0)
771
"BLD",8821,"KRN",779.2,0)
779.2
"BLD",8821,"KRN",870,0)
870
"BLD",8821,"KRN",8989.51,0)
8989.51
"BLD",8821,"KRN",8989.52,0)
8989.52
"BLD",8821,"KRN",8994,0)
8994
"BLD",8821,"KRN","B",.4,.4)

"BLD",8821,"KRN","B",.401,.401)

"BLD",8821,"KRN","B",.402,.402)

"BLD",8821,"KRN","B",.403,.403)

"BLD",8821,"KRN","B",.5,.5)

"BLD",8821,"KRN","B",.84,.84)

"BLD",8821,"KRN","B",3.6,3.6)

"BLD",8821,"KRN","B",3.8,3.8)

"BLD",8821,"KRN","B",9.2,9.2)

"BLD",8821,"KRN","B",9.8,9.8)

"BLD",8821,"KRN","B",19,19)

"BLD",8821,"KRN","B",19.1,19.1)

"BLD",8821,"KRN","B",101,101)

"BLD",8821,"KRN","B",409.61,409.61)

"BLD",8821,"KRN","B",771,771)

"BLD",8821,"KRN","B",779.2,779.2)

"BLD",8821,"KRN","B",870,870)

"BLD",8821,"KRN","B",8989.51,8989.51)

"BLD",8821,"KRN","B",8989.52,8989.52)

"BLD",8821,"KRN","B",8994,8994)

"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.0
**INSTALL NAME**
MD*1.0*38
"BLD",8820,0)
MD*1.0*38^CLINICAL PROCEDURES^0^3140611^y
"BLD",8820,1,0)
^^2^2^3131219^
"BLD",8820,1,1,0)
This patch creates an event for broadcasting new or updated data in the
"BLD",8820,1,2,0)
Clinical Observations (CLiO) module.
"BLD",8820,4,0)
^9.64PA^^
"BLD",8820,6.3)
174
"BLD",8820,"INIT")
EN^MDPOST38
"BLD",8820,"KRN",0)
^9.67PA^779.2^20
"BLD",8820,"KRN",.4,0)
.4
"BLD",8820,"KRN",.401,0)
.401
"BLD",8820,"KRN",.402,0)
.402
"BLD",8820,"KRN",.403,0)
.403
"BLD",8820,"KRN",.5,0)
.5
"BLD",8820,"KRN",.84,0)
.84
"BLD",8820,"KRN",3.6,0)
3.6
"BLD",8820,"KRN",3.8,0)
3.8
"BLD",8820,"KRN",9.2,0)
9.2
"BLD",8820,"KRN",9.8,0)
9.8
"BLD",8820,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",8820,"KRN",9.8,"NM",1,0)
MDCPROTD^^0^B6599959
"BLD",8820,"KRN",9.8,"NM","B","MDCPROTD",1)

"BLD",8820,"KRN",19,0)
19
"BLD",8820,"KRN",19.1,0)
19.1
"BLD",8820,"KRN",101,0)
101
"BLD",8820,"KRN",101,"NM",0)
^9.68A^1^1
"BLD",8820,"KRN",101,"NM",1,0)
MDC OBSERVATION UPDATE^^0
"BLD",8820,"KRN",101,"NM","B","MDC OBSERVATION UPDATE",1)

"BLD",8820,"KRN",409.61,0)
409.61
"BLD",8820,"KRN",771,0)
771
"BLD",8820,"KRN",779.2,0)
779.2
"BLD",8820,"KRN",870,0)
870
"BLD",8820,"KRN",8989.51,0)
8989.51
"BLD",8820,"KRN",8989.52,0)
8989.52
"BLD",8820,"KRN",8994,0)
8994
"BLD",8820,"KRN","B",.4,.4)

"BLD",8820,"KRN","B",.401,.401)

"BLD",8820,"KRN","B",.402,.402)

"BLD",8820,"KRN","B",.403,.403)

"BLD",8820,"KRN","B",.5,.5)

"BLD",8820,"KRN","B",.84,.84)

"BLD",8820,"KRN","B",3.6,3.6)

"BLD",8820,"KRN","B",3.8,3.8)

"BLD",8820,"KRN","B",9.2,9.2)

"BLD",8820,"KRN","B",9.8,9.8)

"BLD",8820,"KRN","B",19,19)

"BLD",8820,"KRN","B",19.1,19.1)

"BLD",8820,"KRN","B",101,101)

"BLD",8820,"KRN","B",409.61,409.61)

"BLD",8820,"KRN","B",771,771)

"BLD",8820,"KRN","B",779.2,779.2)

"BLD",8820,"KRN","B",870,870)

"BLD",8820,"KRN","B",8989.51,8989.51)

"BLD",8820,"KRN","B",8989.52,8989.52)

"BLD",8820,"KRN","B",8994,8994)

"BLD",8820,"QUES",0)
^9.62^^
"BLD",8820,"REQB",0)
^9.611^^
"INIT")
EN^MDPOST38
"KRN",101,5982,-1)
0^1
"KRN",101,5982,0)
MDC OBSERVATION UPDATE^Observation update notification^^X^^^^^^^^CLINICAL PROCEDURES
"KRN",101,5982,1,0)
^^16^16^3120830^
"KRN",101,5982,1,1,0)
This protocol will be triggered when an observation in the OBS file 
"KRN",101,5982,1,2,0)
enters or leaves VERIFIED status.
"KRN",101,5982,1,3,0)
 
"KRN",101,5982,1,4,0)
The local array "MDCOBS" will be populated as follows:
"KRN",101,5982,1,5,0)
 
"KRN",101,5982,1,6,0)
MDCOBS("OBS_ID","E")="{35627230-5C66-49E3-AD93-97C269CB257D}"
"KRN",101,5982,1,7,0)
MDCOBS("OBS_ID","I")="{35627230-5C66-49E3-AD93-97C269CB257D}"
"KRN",101,5982,1,8,0)
MDCOBS("OLD_STATUS","E")="Verified"
"KRN",101,5982,1,9,0)
MDCOBS("OLD_STATUS","I")=1
"KRN",101,5982,1,10,0)
MDCOBS("PATIENT_ID","E")="SIMPSON,BARTHOLOMUE"
"KRN",101,5982,1,11,0)
MDCOBS("PATIENT_ID","I")=2
"KRN",101,5982,1,12,0)
MDCOBS("STATUS","E")="Unverified"
"KRN",101,5982,1,13,0)
MDCOBS("STATUS","I")=0
"KRN",101,5982,1,14,0)
 
"KRN",101,5982,1,15,0)
In case of an error, MDCOBS("ERROR") will be populated with the error 
"KRN",101,5982,1,16,0)
number and error text from FileMan.
"KRN",101,5982,5)

"KRN",101,5982,10,0)
^101.01PA^5^1
"KRN",101,5982,20)
D EN^MDCPROTD
"KRN",101,5982,99)
63349,2443
"KRN",101,5982,775,0)
^101.0775PA^^
"MBREQ")
1
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",557,-1)
1^1
"PKG",557,0)
CLINICAL PROCEDURES^MD^Clinical Procedures
"PKG",557,20,0)
^9.402P^^
"PKG",557,22,0)
^9.49I^1^1
"PKG",557,22,1,0)
1.0^3040429^3050121^10000000020
"PKG",557,22,1,"PAH",1,0)
38^3140611^1085
"PKG",557,22,1,"PAH",1,1,0)
^^2^2^3140611
"PKG",557,22,1,"PAH",1,1,1,0)
This patch creates an event for broadcasting new or updated data in the
"PKG",557,22,1,"PAH",1,1,2,0)
Clinical Observations (CLiO) module.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","MDCPROTD")
0^1^B6599959
"RTN","MDCPROTD",1,0)
MDCPROTD ;HINES OIFO/BLJ - CliO backend driver;02 Feb 2005 ; 12/12/13 8:52pm
"RTN","MDCPROTD",2,0)
 ;;1.0;CLINICAL PROCEDURES;**38**;Apr 01, 2004;Build 174
"RTN","MDCPROTD",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCPROTD",4,0)
 ;
"RTN","MDCPROTD",5,0)
 ; External References -
"RTN","MDCPROTD",6,0)
 ;  EN^XQOR - IA # 10101
"RTN","MDCPROTD",7,0)
 ;
"RTN","MDCPROTD",8,0)
EN ;
"RTN","MDCPROTD",9,0)
 ; First, we'll get the root observation.
"RTN","MDCPROTD",10,0)
 New MDCERR,IEN
"RTN","MDCPROTD",11,0)
 Set IEN=$Get(DA) If '+IEN Write "IEN FOR PROTOCOL UNDEFINED!",! Quit
"RTN","MDCPROTD",12,0)
 Do GETS^DIQ(704.117,IEN_",",".01;.08;.09","EINR","^TMP(""MDCOBS"",$J)","MDCERR")
"RTN","MDCPROTD",13,0)
 If $Data(MDCERR) Do  Quit
"RTN","MDCPROTD",14,0)
 . Set MDCOBS("ERROR")=$Get(MDCERR("DIERR",1))_U_$Get(MDCERR("DIERR",1,"TEXT",1))
"RTN","MDCPROTD",15,0)
 Merge MDCOBS=^TMP("MDCOBS",$J,704.117,IEN_",") Kill ^TMP("MDCOBS",$J)
"RTN","MDCPROTD",16,0)
 Set MDCOBS("OLD_STATUS","E")=$$EXTERNAL^DILFD(704.117,".09",,$Get(X1))
"RTN","MDCPROTD",17,0)
 Set MDCOBS("OLD_STATUS","I")=X1
"RTN","MDCPROTD",18,0)
 Set MDCOBS("DOMAIN","VITALS")=0
"RTN","MDCPROTD",19,0)
 Set MDGUID=$$GET1^DIQ(704.117,IEN_",",.07)
"RTN","MDCPROTD",20,0)
 For Y=1:1 Quit:$Text(MAP+Y)=""  If $Piece($Text(MAP+Y),";",4)=MDGUID Set MDCOBS("DOMAIN","VITALS")=1 Quit
"RTN","MDCPROTD",21,0)
 Quit
"RTN","MDCPROTD",22,0)
 ;
"RTN","MDCPROTD",23,0)
PROT ;Call the protocol.
"RTN","MDCPROTD",24,0)
 Set X="MDC OBSERVATION UPDATE",DIC="101"
"RTN","MDCPROTD",25,0)
 Do EN^XQOR
"RTN","MDCPROTD",26,0)
 Quit
"RTN","MDCPROTD",27,0)
 ;
"RTN","MDCPROTD",28,0)
 ; This must be updated if Vitals EVER adds a new term that we map to. This only says our term it paired with a vital sign.
"RTN","MDCPROTD",29,0)
 ;
"RTN","MDCPROTD",30,0)
MAP ; Contains the mappings from Vitals to CliO - vital;abbv;vuid;term_guid
"RTN","MDCPROTD",31,0)
 ;;ABDOMINAL GIRTH;{F70E6642-2719-22BE-BE87-DEF0A884F177}
"RTN","MDCPROTD",32,0)
 ;;AUDIOMETRY;{FFD29134-8BB2-248E-0412-93C2C08B076F}
"RTN","MDCPROTD",33,0)
 ;;BLOOD PRESSURE;{B15F2DF6-CE99-B847-FE6B-3D5F174A2BCD}
"RTN","MDCPROTD",34,0)
 ;;CENTRAL VENOUS PRESSURE;{D30F98A7-4C5D-12E8-AB4D-9C85A4332EC3}
"RTN","MDCPROTD",35,0)
 ;;CIRCUMFERENCE/GIRTH;{92A124D4-B75F-9FD9-1A51-605887BCEA79};
"RTN","MDCPROTD",36,0)
 ;;FETAL HEART TONES;{A2E22A44-E924-ADDE-2B8E-0251666B4DE6}
"RTN","MDCPROTD",37,0)
 ;;FUNDAL HEIGHT;{EEAB8762-624F-7BA3-4001-114FD229BA69}
"RTN","MDCPROTD",38,0)
 ;;HEAD CIRCUMFERENCE;{33827E3C-5DBB-083C-D8BE-4DFD7D42071F}
"RTN","MDCPROTD",39,0)
 ;;HEARING;{813CCC94-3D64-5093-BC6C-053EFD9948F9}
"RTN","MDCPROTD",40,0)
 ;;HEIGHT;{B440216B-0FB3-1950-7859-7C1BE398FE4A}
"RTN","MDCPROTD",41,0)
 ;;PAIN;{47A83DEA-BA95-38AD-DF2E-1F209122E684}
"RTN","MDCPROTD",42,0)
 ;;PULSE;{FCA63B76-EF4C-EBE5-33C1-F1EEBD7A7BC4}
"RTN","MDCPROTD",43,0)
 ;;PULSE OXIMETRY;{5F84DD55-3CCF-094C-2536-B51EB7FAD999}
"RTN","MDCPROTD",44,0)
 ;;RESPIRATION;{973ED2C0-0625-7DF9-17DC-8FFF7E376F23}
"RTN","MDCPROTD",45,0)
 ;;TEMPERATURE;{0F33223E-DF2C-6B8B-5201-5E091C5F9065}
"RTN","MDCPROTD",46,0)
 ;;TONOMETRY;{C06989EF-4B0F-4941-B1A7-FA9D81A480FF}
"RTN","MDCPROTD",47,0)
 ;;VISION CORRECTED;{ED022AC1-EBE4-E708-684D-63D00628A94C}
"RTN","MDCPROTD",48,0)
 ;;VISION UNCORRECTED;{BEA5E565-D728-F5B3-0A3A-0528C42A45C4}
"RTN","MDCPROTD",49,0)
 ;;WEIGHT;{CD2D8263-6B71-0E1C-0AFE-87B4B2C12632}
"RTN","MDPOST38")
0^^B2283064
"RTN","MDPOST38",1,0)
MDPOST38 ;HINES OIFO/MKB - Post Installation Tasks;02 Mar 2008 ; 12/12/13 8:52pm
"RTN","MDPOST38",2,0)
 ;;1.0;CLINICAL PROCEDURES;**38**;Apr 01, 2004;Build 174
"RTN","MDPOST38",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDPOST38",4,0)
 ;
"RTN","MDPOST38",5,0)
 ; External References -
"RTN","MDPOST38",6,0)
 ;  CREIXN^DDMOD - IA # 2916
"RTN","MDPOST38",7,0)
 ;
"RTN","MDPOST38",8,0)
EN ; -- create ASTATUS index on OBS file #704.117
"RTN","MDPOST38",9,0)
 Q:$O(^DD("IX","BB",704.117,"ASTATUS",0))  ;exists
"RTN","MDPOST38",10,0)
 N VPRX,VPRY
"RTN","MDPOST38",11,0)
 S VPRX("FILE")=704.117,VPRX("NAME")="ASTATUS"
"RTN","MDPOST38",12,0)
 S VPRX("TYPE")="MU",VPRX("USE")="A"
"RTN","MDPOST38",13,0)
 S VPRX("EXECUTION")="F",VPRX("ACTIVITY")=""
"RTN","MDPOST38",14,0)
 S VPRX("SHORT DESCR")="Used to trigger MD OBSERVATION UPDATE protocol"
"RTN","MDPOST38",15,0)
 S VPRX("DESCR",1)="This index invokes the MD OBSERVATION UPDATE protocol when the"
"RTN","MDPOST38",16,0)
 S VPRX("DESCR",2)="status of OBS data is changed to or from verified."
"RTN","MDPOST38",17,0)
 S VPRX("DESCR",3)="No actual cross-reference nodes are set or killed."
"RTN","MDPOST38",18,0)
 S VPRX("SET")="D:((X1=""1"")!(X2=""1"")) PROT^MDCPROTD Q"
"RTN","MDPOST38",19,0)
 S VPRX("KILL")="Q",VPRX("WHOLE KILL")="Q"
"RTN","MDPOST38",20,0)
 S VPRX("VAL",1)=.09            ;Status
"RTN","MDPOST38",21,0)
 D CREIXN^DDMOD(.VPRX,"",.VPRY) ;VPRY=ien^name of index
"RTN","MDPOST38",22,0)
 Q
"VER")
8.0^22.0
**INSTALL NAME**
OR*3.0*390
"BLD",8850,0)
OR*3.0*390^ORDER ENTRY/RESULTS REPORTING^0^3140611^y
"BLD",8850,4,0)
^9.64PA^^
"BLD",8850,6.3)
110
"BLD",8850,"KRN",0)
^9.67PA^779.2^20
"BLD",8850,"KRN",.4,0)
.4
"BLD",8850,"KRN",.401,0)
.401
"BLD",8850,"KRN",.402,0)
.402
"BLD",8850,"KRN",.403,0)
.403
"BLD",8850,"KRN",.5,0)
.5
"BLD",8850,"KRN",.84,0)
.84
"BLD",8850,"KRN",3.6,0)
3.6
"BLD",8850,"KRN",3.8,0)
3.8
"BLD",8850,"KRN",9.2,0)
9.2
"BLD",8850,"KRN",9.8,0)
9.8
"BLD",8850,"KRN",9.8,"NM",0)
^9.68A^4^4
"BLD",8850,"KRN",9.8,"NM",1,0)
ORCACT1^^0^B49643037
"BLD",8850,"KRN",9.8,"NM",2,0)
ORCSEND^^0^B65938879
"BLD",8850,"KRN",9.8,"NM",3,0)
ORMBLDOR^^0^B5650360
"BLD",8850,"KRN",9.8,"NM",4,0)
ORWDXA^^0^B83177974
"BLD",8850,"KRN",9.8,"NM","B","ORCACT1",1)

"BLD",8850,"KRN",9.8,"NM","B","ORCSEND",2)

"BLD",8850,"KRN",9.8,"NM","B","ORMBLDOR",3)

"BLD",8850,"KRN",9.8,"NM","B","ORWDXA",4)

"BLD",8850,"KRN",19,0)
19
"BLD",8850,"KRN",19.1,0)
19.1
"BLD",8850,"KRN",101,0)
101
"BLD",8850,"KRN",101,"NM",0)
^9.68A^1^1
"BLD",8850,"KRN",101,"NM",1,0)
OR EVSEND VPR^^0
"BLD",8850,"KRN",101,"NM","B","OR EVSEND VPR",1)

"BLD",8850,"KRN",409.61,0)
409.61
"BLD",8850,"KRN",771,0)
771
"BLD",8850,"KRN",779.2,0)
779.2
"BLD",8850,"KRN",870,0)
870
"BLD",8850,"KRN",8989.51,0)
8989.51
"BLD",8850,"KRN",8989.52,0)
8989.52
"BLD",8850,"KRN",8994,0)
8994
"BLD",8850,"KRN","B",.4,.4)

"BLD",8850,"KRN","B",.401,.401)

"BLD",8850,"KRN","B",.402,.402)

"BLD",8850,"KRN","B",.403,.403)

"BLD",8850,"KRN","B",.5,.5)

"BLD",8850,"KRN","B",.84,.84)

"BLD",8850,"KRN","B",3.6,3.6)

"BLD",8850,"KRN","B",3.8,3.8)

"BLD",8850,"KRN","B",9.2,9.2)

"BLD",8850,"KRN","B",9.8,9.8)

"BLD",8850,"KRN","B",19,19)

"BLD",8850,"KRN","B",19.1,19.1)

"BLD",8850,"KRN","B",101,101)

"BLD",8850,"KRN","B",409.61,409.61)

"BLD",8850,"KRN","B",771,771)

"BLD",8850,"KRN","B",779.2,779.2)

"BLD",8850,"KRN","B",870,870)

"BLD",8850,"KRN","B",8989.51,8989.51)

"BLD",8850,"KRN","B",8989.52,8989.52)

"BLD",8850,"KRN","B",8994,8994)

"BLD",8850,"QUES",0)
^9.62^^
"BLD",8850,"REQB",0)
^9.611^4^4
"BLD",8850,"REQB",1,0)
OR*3.0*97^2
"BLD",8850,"REQB",2,0)
OR*3.0*284^2
"BLD",8850,"REQB",3,0)
OR*3.0*296^2
"BLD",8850,"REQB",4,0)
OR*3.0*306^2
"BLD",8850,"REQB","B","OR*3.0*284",2)

"BLD",8850,"REQB","B","OR*3.0*296",3)

"BLD",8850,"REQB","B","OR*3.0*306",4)

"BLD",8850,"REQB","B","OR*3.0*97",1)

"KRN",101,6053,-1)
0^1
"KRN",101,6053,0)
OR EVSEND VPR^OE/RR => VPR MESSAGE EVENT^^X^^^^^^^^
"KRN",101,6053,10,0)
^101.01PA^7^1
"KRN",101,6053,99)
63349,2443
"MBREQ")
1
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",170,-1)
1^1
"PKG",170,0)
ORDER ENTRY/RESULTS REPORTING^OR^Order Entry/Results Reporting
"PKG",170,22,0)
^9.49I^1^1
"PKG",170,22,1,0)
3.0^2971217^2980917^11712
"PKG",170,22,1,"PAH",1,0)
390^3140611^1085
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","ORCACT1")
0^1^B49643037
"RTN","ORCACT1",1,0)
ORCACT1 ;SLC/MKB-Act on orders cont ;7/29/97  08:26
"RTN","ORCACT1",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**7,27,56,48,86,92,116,149,215,284,390**;Dec 17, 1997;Build 110
"RTN","ORCACT1",3,0)
 ;
"RTN","ORCACT1",4,0)
FLAG ; -- flag orders
"RTN","ORCACT1",5,0)
 D EN("FL") Q
"RTN","ORCACT1",6,0)
 ;
"RTN","ORCACT1",7,0)
UNFLAG ; -- unflag orders
"RTN","ORCACT1",8,0)
 D EN("UF") Q
"RTN","ORCACT1",9,0)
 ;
"RTN","ORCACT1",10,0)
COMMENT ; -- add ward comments to orders
"RTN","ORCACT1",11,0)
 D EN("CM") Q
"RTN","ORCACT1",12,0)
 ;
"RTN","ORCACT1",13,0)
ALERT ; -- alert provider when results available
"RTN","ORCACT1",14,0)
 D EN("AL") Q
"RTN","ORCACT1",15,0)
 ;
"RTN","ORCACT1",16,0)
UNHOLD ; -- release hold on orders - no longer in use
"RTN","ORCACT1",17,0)
 Q  ; see UNHOLD^ORCACT instead
"RTN","ORCACT1",18,0)
 ;
"RTN","ORCACT1",19,0)
EN(ORACT) ; -- Actions that don't create orders
"RTN","ORCACT1",20,0)
 ;    ORNMBR = #,#,...,# of selected orders
"RTN","ORCACT1",21,0)
 ;    ORACT  = action to be taken
"RTN","ORCACT1",22,0)
 ;
"RTN","ORCACT1",23,0)
 ;    OREBUILD defined on return if Orders tab needs to be rebuilt
"RTN","ORCACT1",24,0)
 ;
"RTN","ORCACT1",25,0)
 N ORLK,ORI,NMBR,IDX,ORIFN,ORDITM,ORERR,ORQUIT
"RTN","ORCACT1",26,0)
 I '$G(ORNMBR) S ORNMBR=$$ORDERS^ORCHART("") Q:'ORNMBR
"RTN","ORCACT1",27,0)
 D FREEZE^ORCMENU S VALMBCK="R" K OREBUILD
"RTN","ORCACT1",28,0)
 F ORI=1:1:$L(ORNMBR,",") S NMBR=$P(ORNMBR,",",ORI) D:NMBR  Q:$D(ORQUIT)
"RTN","ORCACT1",29,0)
 . S IDX=$G(^TMP("OR",$J,ORTAB,"IDX",NMBR)),ORIFN=$P(IDX,U)
"RTN","ORCACT1",30,0)
 . Q:'ORIFN  S:'$P(ORIFN,";",2) ORIFN=+ORIFN_";1"
"RTN","ORCACT1",31,0)
 . I '$D(^OR(100,+ORIFN,0)) W !,"This order has been deleted!" H 1 Q
"RTN","ORCACT1",32,0)
 . S ORDITM=$$ORDITEM^ORCACT(ORIFN) D SUBHDR^ORCACT(ORDITM)
"RTN","ORCACT1",33,0)
 . I '$$VALID^ORCACT0(ORIFN,ORACT,.ORERR) W !,ORERR H 1 Q
"RTN","ORCACT1",34,0)
 . S ORLK=$$LOCK1^ORX2(+ORIFN) I 'ORLK W !,$P(ORLK,U,2) H 1 Q
"RTN","ORCACT1",35,0)
 . D @ORACT,UNLK1^ORX2(+ORIFN)
"RTN","ORCACT1",36,0)
ENQ Q
"RTN","ORCACT1",37,0)
 ;
"RTN","ORCACT1",38,0)
FL ; -- Flag order ORIFN
"RTN","ORCACT1",39,0)
 D EN^ORCFLAG
"RTN","ORCACT1",40,0)
 Q
"RTN","ORCACT1",41,0)
 ;
"RTN","ORCACT1",42,0)
UF ; -- Unflag order ORIFN
"RTN","ORCACT1",43,0)
 D UN^ORCFLAG
"RTN","ORCACT1",44,0)
 Q
"RTN","ORCACT1",45,0)
 ;
"RTN","ORCACT1",46,0)
CM ; -- Ward Comments on order ORIFN
"RTN","ORCACT1",47,0)
 N DIC,DWPK,DIWEPSE,DIWESUB,DDWRW
"RTN","ORCACT1",48,0)
 S DIC="^OR(100,"_+ORIFN_",8,"_+$P(ORIFN,";",2)_",5,",(DWPK,DIWEPSE)=1
"RTN","ORCACT1",49,0)
 S DIWESUB=ORDITM,DDWRW="B" ;go to bottom of text
"RTN","ORCACT1",50,0)
 D EN^DIWE
"RTN","ORCACT1",51,0)
 Q
"RTN","ORCACT1",52,0)
 ;
"RTN","ORCACT1",53,0)
AL ; -- Alert when results are available for order ORIFN
"RTN","ORCACT1",54,0)
 S $P(^OR(100,+ORIFN,3),U,10)=1
"RTN","ORCACT1",55,0)
 W !?10,"... done." H 1
"RTN","ORCACT1",56,0)
 Q
"RTN","ORCACT1",57,0)
 ;
"RTN","ORCACT1",58,0)
RL ; -- Release hold on order ORIFN [No longer used]
"RTN","ORCACT1",59,0)
 D EN^ORCSEND(+ORIFN,ORACT,3,1,,,.ORERR)
"RTN","ORCACT1",60,0)
 W !,"... order "_$S($G(ORERR):"not ",1:"")_"released from hold."
"RTN","ORCACT1",61,0)
 W:$L($P($G(ORERR),U,2)) !,"  >> "_$P(ORERR,U,2) H 1
"RTN","ORCACT1",62,0)
 S OREBUILD=1 ; print?
"RTN","ORCACT1",63,0)
 Q
"RTN","ORCACT1",64,0)
 ;
"RTN","ORCACT1",65,0)
VERIFY(ORVER) ; -- Verify orders
"RTN","ORCACT1",66,0)
 N ORLK,ORI,NMBR,IDX,ORIFN,ORDITM,ORES,ORERR,ORSIG,OROLDSTS,ORNEW,ORWAIT
"RTN","ORCACT1",67,0)
 I "^"[$G(ORVER) W $C(7),!!,"You must be a nurse or clerk to verify these orders!" S VALMBCK="" H 2 Q
"RTN","ORCACT1",68,0)
 I '$G(ORNMBR) S ORNMBR=$$ORDERS^ORCHART("") Q:'ORNMBR
"RTN","ORCACT1",69,0)
 D FREEZE^ORCMENU S VALMBCK="R" K OREBUILD
"RTN","ORCACT1",70,0)
 F ORI=1:1:$L(ORNMBR,",") S NMBR=$P(ORNMBR,",",ORI) D:NMBR  Q:$D(ORQUIT)
"RTN","ORCACT1",71,0)
 . S IDX=$G(^TMP("OR",$J,ORTAB,"IDX",NMBR)),ORIFN=$P(IDX,U)
"RTN","ORCACT1",72,0)
 . Q:'ORIFN  S:'$P(ORIFN,";",2) ORIFN=+ORIFN_";1" Q:$D(ORES(ORIFN))
"RTN","ORCACT1",73,0)
 . I '$$VALID^ORCACT0(ORIFN,"VR",.ORERR) W !!,$$ORDITEM^ORCACT(ORIFN)_" invalid.",!,"  >> "_ORERR H 1 Q
"RTN","ORCACT1",74,0)
 . S ORLK=$$LOCK1^ORX2(+ORIFN) I 'ORLK W !!,$$ORDITEM^ORCACT(ORIFN)_" invalid.",!,"  >> "_$P(ORLK,U,2) H 1 Q
"RTN","ORCACT1",75,0)
 . S ORES(ORIFN)="" D REPLCD
"RTN","ORCACT1",76,0)
VR1 Q:'$O(ORES(0))  D COMPLX S ORSIG=$S($$ESIG^ORCSIGN:1,1:0)
"RTN","ORCACT1",77,0)
 I 'ORSIG W !,"Nothing verified!" D UNLOCK H 1 Q
"RTN","ORCACT1",78,0)
 W !!,"Verifying orders ..."
"RTN","ORCACT1",79,0)
 S ORIFN=0 F  S ORIFN=$O(ORES(ORIFN)) Q:ORIFN'>0  D
"RTN","ORCACT1",80,0)
 . S OROLDSTS=+$P($G(^OR(100,+ORIFN,3)),U,3)
"RTN","ORCACT1",81,0)
 . D EN^ORCSEND(ORIFN,"VR","","",,,.ORERR),UNLK1^ORX2(+ORIFN)
"RTN","ORCACT1",82,0)
 . I $G(ORERR) D  Q
"RTN","ORCACT1",83,0)
 . . W !,$$ORDITEM^ORCACT(ORIFN)_" not verified."
"RTN","ORCACT1",84,0)
 . . W:$L($P($G(ORERR),U,2)) !,"  >> "_$P(ORERR,U,2) H 1
"RTN","ORCACT1",85,0)
 . S ORNEW=+$P($G(^OR(100,+ORIFN,3)),U,3) I ORNEW'=OROLDSTS W !,$$ORDITEM^ORCACT(ORIFN)_" is now "_$$STS(ORNEW)_"." S ORWAIT=1
"RTN","ORCACT1",86,0)
 S OREBUILD=1 D:'$D(XQAID) CKALERT I $G(ORWAIT) H 2
"RTN","ORCACT1",87,0)
VRQ Q
"RTN","ORCACT1",88,0)
 ;
"RTN","ORCACT1",89,0)
STS(X) ; -- Return name of status X
"RTN","ORCACT1",90,0)
 N Y S Y=$P($G(^ORD(100.01,+$G(X),0)),U)
"RTN","ORCACT1",91,0)
 Q Y
"RTN","ORCACT1",92,0)
 ;
"RTN","ORCACT1",93,0)
REPLCD ; -- Ck for unverified replaced orders for ORIFN, add to ORES(order#)
"RTN","ORCACT1",94,0)
 ;    [Expects ORVER; also called from VERIFY^ORWDXA,VERIFY^ORRCOR]
"RTN","ORCACT1",95,0)
 N OR3,ORIG,ORFLD,ORDA,ORI,ORLK
"RTN","ORCACT1",96,0)
 S ORFLD=$S($G(ORVER)="N":8,$G(ORVER)="R":18,1:10),ORDA=+$P(ORIFN,";",2)
"RTN","ORCACT1",97,0)
 I ORDA>1 D  Q  ;ck for prior unverified actions
"RTN","ORCACT1",98,0)
 . ;Q:$P($G(^OR(100,+ORIFN,8,ORDA,0)),U,2)'="XX"
"RTN","ORCACT1",99,0)
 . S ORI=0 F  S ORI=$O(^OR(100,+ORIFN,8,ORI)) Q:ORI<1  Q:ORI'<ORDA  D
"RTN","ORCACT1",100,0)
 .. Q:$P($G(^OR(100,+ORIFN,8,ORI,0)),U,ORFLD)  ;already verified
"RTN","ORCACT1",101,0)
 .. S ORLK=$$LOCK1^ORX2(+ORIFN) Q:'ORLK
"RTN","ORCACT1",102,0)
 .. S ORES(+ORIFN_";"_ORI)=""
"RTN","ORCACT1",103,0)
 S OR3=$G(^OR(100,+ORIFN,3)) Q:$P(OR3,U,11)'=1
"RTN","ORCACT1",104,0)
 S ORIG=+$P(OR3,U,5) Q:'ORIG  Q:$P($G(^OR(100,ORIG,3)),U,3)'=12
"RTN","ORCACT1",105,0)
 S ORDA=0 F  S ORDA=$O(^OR(100,ORIG,8,ORDA)) Q:ORDA'>0  I '$P($G(^(ORDA,0)),U,ORFLD) D
"RTN","ORCACT1",106,0)
 . S ORLK=$$LOCK1^ORX2(ORIG) Q:'ORLK
"RTN","ORCACT1",107,0)
 . S ORES(ORIG_";"_ORDA)=""
"RTN","ORCACT1",108,0)
 Q
"RTN","ORCACT1",109,0)
 ;
"RTN","ORCACT1",110,0)
COMPLX ; -- Ck for other child orders to be verified at same time
"RTN","ORCACT1",111,0)
 N IFN,DAD,CHLD,ALL,P,X,I
"RTN","ORCACT1",112,0)
 S P=$S(ORVER="N":9,ORVER="C":11,ORVER="R":19,1:0) Q:P<1
"RTN","ORCACT1",113,0)
 S IFN=0 F  S IFN=$O(ORES(IFN)) Q:IFN<1  D
"RTN","ORCACT1",114,0)
 . S X=+$P($G(^OR(100,+IFN,0)),U,14) Q:$$NMSP^ORCD(X)'["PS"
"RTN","ORCACT1",115,0)
 . S X=$P($G(^OR(100,+IFN,8,+$P(IFN,";",2),0)),U,2) Q:X'="NW"&(X'="XX")
"RTN","ORCACT1",116,0)
 . I $P($G(^OR(100,+IFN,3)),U,9) S DAD(+$P(^(3),U,9))=""
"RTN","ORCACT1",117,0)
 Q:'$O(DAD(0))  S IFN=0 F  S IFN=+$O(DAD(IFN)) Q:IFN<1  D
"RTN","ORCACT1",118,0)
 . S CHLD=0,ALL=1
"RTN","ORCACT1",119,0)
 . F  S CHLD=+$O(^OR(100,IFN,2,CHLD)) Q:CHLD<1  F X="NW","XX" D
"RTN","ORCACT1",120,0)
 .. S I=+$O(^OR(100,CHLD,8,"C",X,0)) Q:I<1
"RTN","ORCACT1",121,0)
 .. Q:$P($G(^OR(100,CHLD,8,I,0)),U,P)  Q:$D(ORES(CHLD_";"_I))
"RTN","ORCACT1",122,0)
 .. S ORES(CHLD_";"_I)="",ALL=0
"RTN","ORCACT1",123,0)
 . Q:ALL  S X=$$ORDITEM^ORCACT(IFN) D SUBHDR^ORCACT(X)
"RTN","ORCACT1",124,0)
 . W !,"All doses of this complex order must be verified together;"
"RTN","ORCACT1",125,0)
 . W !,"adding remaining doses to signature list..."
"RTN","ORCACT1",126,0)
 Q
"RTN","ORCACT1",127,0)
 ;
"RTN","ORCACT1",128,0)
CKALERT ; -- Ck if Unverified Orders alerts can be deleted
"RTN","ORCACT1",129,0)
 N ORNOW,ORBEG,ORLIST,ORALL,ORMEDS S ORNOW=$$NOW^XLFDT
"RTN","ORCACT1",130,0)
 S:'$G(ORWARD) ORBEG=$$FMADD^XLFDT(ORNOW,"-30") I $G(ORWARD) D
"RTN","ORCACT1",131,0)
 . N DFN,VAIN,VAERR S DFN=+ORVP D INP^VADPT
"RTN","ORCACT1",132,0)
 . S ORBEG=$S($G(VAIN(7)):$P(VAIN(7),U),1:$$FMADD^XLFDT(ORNOW,-30))
"RTN","ORCACT1",133,0)
 D EN^ORQ1(ORVP,,9,,ORBEG,ORNOW) ;see if any unverified orders remain
"RTN","ORCACT1",134,0)
 I $G(ORLIST),$G(^TMP("ORR",$J,ORLIST,"TOT")) D  ;see if any are meds
"RTN","ORCACT1",135,0)
 . N ORRX,ORGRP,I,IFN,DG S ORALL=1
"RTN","ORCACT1",136,0)
 . S ORRX=+$O(^ORD(100.98,"B","RX",0)) D GRP^ORQ1(ORRX)
"RTN","ORCACT1",137,0)
 . S I=0 F  S I=$O(^TMP("ORR",$J,ORLIST,I)) Q:I'>0  S IFN=+^(I),DG=+$P($G(^OR(100,IFN,0)),U,11) I $D(ORGRP(DG)) S ORMEDS=1 Q
"RTN","ORCACT1",138,0)
 D:'$G(ORALL) DELALRT("UNVERIFIED ORDER")
"RTN","ORCACT1",139,0)
 D:'$G(ORMEDS) DELALRT("UNVERIFIED MEDICATION ORDER")
"RTN","ORCACT1",140,0)
 Q
"RTN","ORCACT1",141,0)
 ;
"RTN","ORCACT1",142,0)
DELALRT(X) ; -- delete alert X
"RTN","ORCACT1",143,0)
 N ORNIFN,XQAKILL,XQAID
"RTN","ORCACT1",144,0)
 S ORNIFN=+$O(^ORD(100.9,"B",X,0)) Q:ORNIFN'>0
"RTN","ORCACT1",145,0)
 S XQAKILL=$$XQAKILL^ORB3F1(ORNIFN)
"RTN","ORCACT1",146,0)
 S XQAID=$P($G(^ORD(100.9,ORNIFN,0)),U,2)_","_+ORVP_","_ORNIFN
"RTN","ORCACT1",147,0)
 D DELETEA^XQALERT
"RTN","ORCACT1",148,0)
 Q
"RTN","ORCACT1",149,0)
 ;
"RTN","ORCACT1",150,0)
UNLOCK ; -- Unlock orders in ORES(ORIFN) [from VR1]
"RTN","ORCACT1",151,0)
 F  S ORIFN=$O(ORES(ORIFN)) Q:ORIFN'>0  D UNLK1^ORX2(+ORIFN)
"RTN","ORCACT1",152,0)
 Q
"RTN","ORCACT1",153,0)
 ;
"RTN","ORCACT1",154,0)
SIGNREQD(IFN) ; -- Returns 2, 1, or 0, if order/actions need ES
"RTN","ORCACT1",155,0)
 Q +$P($G(^OR(100,IFN,0)),U,16)
"RTN","ORCACT1",156,0)
 ;
"RTN","ORCACT1",157,0)
SIGN ; -- Sign orders [no longer used]
"RTN","ORCACT1",158,0)
 D EN^ORCSIGN
"RTN","ORCACT1",159,0)
 Q
"RTN","ORCACT1",160,0)
 ;
"RTN","ORCACT1",161,0)
COMPLETE ; -- complete orders
"RTN","ORCACT1",162,0)
 N ORLK,ORI,NMBR,IDX,ORIFN,ORDITM,ORES,ORERR,ORSIG,ORSTOP
"RTN","ORCACT1",163,0)
 I '$G(ORNMBR) S ORNMBR=$$ORDERS^ORCHART("complete") Q:'ORNMBR
"RTN","ORCACT1",164,0)
 D FREEZE^ORCMENU S VALMBCK="R" K OREBUILD
"RTN","ORCACT1",165,0)
 F ORI=1:1:$L(ORNMBR) S NMBR=$P(ORNMBR,",",ORI) D:NMBR  Q:$D(ORQUIT)
"RTN","ORCACT1",166,0)
 . S IDX=$G(^TMP("OR",$J,ORTAB,"IDX",NMBR)),ORIFN=$P(IDX,U)
"RTN","ORCACT1",167,0)
 . Q:'ORIFN  S:'$P(ORIFN,";",2) ORIFN=+ORIFN_";1"
"RTN","ORCACT1",168,0)
 . I '$$VALID^ORCACT0(ORIFN,"CP",.ORERR) W !!,$$ORDITEM^ORCACT(ORIFN)_" invalid.",!,"  >> "_ORERR H 1 Q
"RTN","ORCACT1",169,0)
 . S ORLK=$$LOCK1^ORX2(+ORIFN) I 'ORLK W !!,$$ORDITEM^ORCACT(ORIFN)_" invalid.",!,"  >> "_$P(ORLK,U,2) H 1 Q
"RTN","ORCACT1",170,0)
 . S ORES(ORIFN)=""
"RTN","ORCACT1",171,0)
CP1 Q:'$O(ORES(0))  S ORSIG=$S($$ESIG^ORCSIGN:1,1:0)
"RTN","ORCACT1",172,0)
 I 'ORSIG W !,"Nothing completed!" D UNLOCK H 1 Q
"RTN","ORCACT1",173,0)
 W !!,"Completing orders ..." S ORSTOP=+$E($$NOW^XLFDT,1,12),ORIFN=0
"RTN","ORCACT1",174,0)
 F  S ORIFN=$O(ORES(ORIFN)) Q:ORIFN'>0  D
"RTN","ORCACT1",175,0)
 . D COMP^ORCSAVE2(ORIFN,DUZ,ORSTOP),UNLK1^ORX2(+ORIFN)
"RTN","ORCACT1",176,0)
 . D COMP^ORMBLDOR(ORIFN)
"RTN","ORCACT1",177,0)
 S OREBUILD=1
"RTN","ORCACT1",178,0)
CPQ Q
"RTN","ORCSEND")
0^2^B65938879
"RTN","ORCSEND",1,0)
ORCSEND ;SLC/MKB-Release orders ; 11/8/2006
"RTN","ORCSEND",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**4,27,45,79,92,141,165,195,228,243,303,296,390**;Dec 17, 1997;Build 110
"RTN","ORCSEND",3,0)
 ;
"RTN","ORCSEND",4,0)
EN(ORIFN,ACTION,SIGSTS,RELSTS,NATURE,REASON,ORERR) ; -- Release [actions on] orders
"RTN","ORCSEND",5,0)
 N ORDA,ORNOW,SIGNREQD,SIGNED,SIGNER
"RTN","ORCSEND",6,0)
 S SIGNREQD=+$P($G(^OR(100,+ORIFN,0)),U,16),ORERR=""
"RTN","ORCSEND",7,0)
 S SIGNED=$S(SIGSTS=2:0,1:1),SIGNER=$S(SIGSTS=1:DUZ,SIGSTS=7:DUZ,1:"")
"RTN","ORCSEND",8,0)
 S ORDA=+$P(ORIFN,";",2),ORIFN=+ORIFN,ORNOW=+$E($$NOW^XLFDT,1,12)
"RTN","ORCSEND",9,0)
 S:"ES"[$G(ACTION) ACTION=$P($G(^OR(100,ORIFN,8,ORDA,0)),U,2)
"RTN","ORCSEND",10,0)
 I SIGNREQD,ORDA,"^NW^RW^XX^RN^DC^HD^RL^"[(U_ACTION_U) D  ; sign/alert
"RTN","ORCSEND",11,0)
 . I 'SIGNED D NOTIF^ORCSIGN Q
"RTN","ORCSEND",12,0)
 . D:SIGSTS'="" SIGN^ORCSAVE2(ORIFN,SIGNER,ORNOW,SIGSTS,ORDA)
"RTN","ORCSEND",13,0)
 . D:SIGSTS=4 CHART^ORCSIGN ; not used anymore
"RTN","ORCSEND",14,0)
 I '$L(ACTION) S ORERR="1^Invalid order action" Q
"RTN","ORCSEND",15,0)
 I $$READY(ORIFN,ORDA) D:$L($T(@ACTION)) @ACTION I 'ORERR,ACTION="NW" D
"RTN","ORCSEND",16,0)
 . N OREVT S OREVT=+$P($G(^OR(100,ORIFN,0)),U,17) Q:OREVT<1
"RTN","ORCSEND",17,0)
 . I '$$EVTORDER^OREVNTX(ORIFN) D SAVE^ORMEVNT1(ORIFN,OREVT,2,"ES")
"RTN","ORCSEND",18,0)
 ; If order originated from the back door, send Dx and TxF back to ancil.
"RTN","ORCSEND",19,0)
 I SIGNED,$P($G(^OR(100,+ORIFN,3)),U,11)="P" D BDOEDIT^ORWDBA7
"RTN","ORCSEND",20,0)
 Q
"RTN","ORCSEND",21,0)
 ;
"RTN","ORCSEND",22,0)
EN1(ORDER,ORERR) ; -- Delayed Release [from RELEASE^ORMEVNT]
"RTN","ORCSEND",23,0)
 ;
"RTN","ORCSEND",24,0)
 Q:$P($G(^OR(100,+ORDER,3)),U,3)'=10
"RTN","ORCSEND",25,0)
 N ORPKG,ORA0,ORNOW,ORIFN,ORDA,ORNP,ORNATR,ORQUIT,ORDUZ,SIGSTS,RELSTS
"RTN","ORCSEND",26,0)
 S ORPKG=$P($G(^OR(100,+ORDER,0)),U,14),ORA0=$G(^(8,1,0))
"RTN","ORCSEND",27,0)
 S ORNOW=+$E($$NOW^XLFDT,1,12),ORIFN=+ORDER,ORDA=1,ORNP=$P(ORA0,U,3)
"RTN","ORCSEND",28,0)
 S SIGSTS=$P(ORA0,U,4),ORNATR=$P($G(^ORD(100.02,+$P(ORA0,U,12),0)),U,2)
"RTN","ORCSEND",29,0)
 S RELSTS=$S(SIGSTS'=2:1,"^V^P^"[(U_ORNATR_U):1,1:0)
"RTN","ORCSEND",30,0)
 I RELSTS D
"RTN","ORCSEND",31,0)
 . D STARTDT^ORCSAVE2(ORIFN),PKGSTUFF^ORCSEND1(ORPKG) Q:$G(ORQUIT)
"RTN","ORCSEND",32,0)
 . S ORDUZ=$S(SIGSTS=0:$P(ORA0,U,7),SIGSTS=1:$P(ORA0,U,5),SIGSTS=2:$P(ORA0,U,17),SIGSTS=3:$P(ORA0,U,13),1:DUZ)
"RTN","ORCSEND",33,0)
 . D EDO1^ORWPFSS1  ;PFSS Event Delayed Orders
"RTN","ORCSEND",34,0)
 . D RELEASE^ORCSAVE2(ORIFN,ORDA,ORNOW,ORDUZ),NEW^ORMBLD(ORIFN)
"RTN","ORCSEND",35,0)
 . I "^10^13^"[(U_$P($G(^OR(100,ORIFN,3)),U,3)_U) S ORERR=1 ;error
"RTN","ORCSEND",36,0)
 I 'RELSTS!$G(ORERR),$P($G(^OR(100,ORIFN,3)),U,3)=10 D STATUS^ORCSAVE2(ORIFN,11) S $P(^OR(100,ORIFN,8,1,0),U,15)=11
"RTN","ORCSEND",37,0)
 Q
"RTN","ORCSEND",38,0)
 ;
"RTN","ORCSEND",39,0)
EN2(ORIFN,SIGSTS,NATURE,ORERR) ; -- Manual Release [from OREVNT1,SENDED^ORWDX]
"RTN","ORCSEND",40,0)
 N ORDA,ORNOW,OREVT,ORA0,ORNP,SIGNREQD,SIGNED,RELSTS
"RTN","ORCSEND",41,0)
 S ORDA=+$P(ORIFN,";",2),ORIFN=+ORIFN S:ORDA<1 ORDA=1
"RTN","ORCSEND",42,0)
 S OREVT=+$P($G(^OR(100,ORIFN,0)),U,17),ORA0=$G(^(8,ORDA,0))
"RTN","ORCSEND",43,0)
 S ORNP=$P(ORA0,U,3),SIGNREQD=($P(ORA0,U,4)'=3),(SIGNED,RELSTS)=1
"RTN","ORCSEND",44,0)
 S ORNOW=+$E($$NOW^XLFDT,1,12),ORERR=""
"RTN","ORCSEND",45,0)
 I $P(ORA0,U,4)=2 D  ;needs ES
"RTN","ORCSEND",46,0)
 . N SIGNER S SIGNER=$S(SIGSTS=1:DUZ,1:"")
"RTN","ORCSEND",47,0)
 . I SIGSTS=2 D NOTIF^ORCSIGN S SIGNED=0 Q  ;still unsigned
"RTN","ORCSEND",48,0)
 . D:SIGSTS'="" SIGN^ORCSAVE2(ORIFN,SIGNER,ORNOW,SIGSTS,ORDA)
"RTN","ORCSEND",49,0)
 D EDO2^ORWPFSS1  ;PFSS Event Delayed Orders
"RTN","ORCSEND",50,0)
 D NW I 'ORERR D SAVE^ORMEVNT1(+ORIFN,OREVT,2,"MN")
"RTN","ORCSEND",51,0)
 Q
"RTN","ORCSEND",52,0)
 ;
"RTN","ORCSEND",53,0)
NW ; -- New order ORIFN
"RTN","ORCSEND",54,0)
RW ; -- Rewritten order ORIFN
"RTN","ORCSEND",55,0)
XX ; -- Changed order ORIFN
"RTN","ORCSEND",56,0)
RN ; -- Renewed order ORIFN
"RTN","ORCSEND",57,0)
 N ORQUIT,STS,TYPE,OR0,OR3,CODE,ORIG,ORSAVE
"RTN","ORCSEND",58,0)
 N IVDIEN,IVPKGM
"RTN","ORCSEND",59,0)
 S IVPKGM=0
"RTN","ORCSEND",60,0)
 S IVDIEN=$O(^ORD(101.41,"B","PSJI OR PAT FLUID OE",""))
"RTN","ORCSEND",61,0)
 I SIGNREQD,'SIGNED,'RELSTS S ORERR=$$NEEDSIG,OREBUILD=1 Q
"RTN","ORCSEND",62,0)
 S:'ORDA ORDA=1 S ORSAVE=ORIFN
"RTN","ORCSEND",63,0)
 S OR0=$G(^OR(100,ORIFN,0)),OR3=$G(^(3)) D STARTDT^ORCSAVE2(ORIFN)
"RTN","ORCSEND",64,0)
 S TYPE=$P(OR3,U,11),ORIG=+$P(OR3,U,5),CODE="NW"
"RTN","ORCSEND",65,0)
 I TYPE=1,ORIG,$D(^OR(100,ORIG,4)) S CODE="XO",^OR(100,ORIG,6)=$O(^ORD(100.02,"C","C",0))_U_DUZ_U_ORNOW
"RTN","ORCSEND",66,0)
 I $$GET1^DIQ(9.4,+$P(OR0,U,14)_",",1)="PSJ" S IVPKGM=1
"RTN","ORCSEND",67,0)
 I IVPKGM=1,$P($P(OR0,U,5),";")=IVDIEN D PSJI^ORCSEND3 Q:$G(ORQUIT)
"RTN","ORCSEND",68,0)
 I IVPKGM=0!($P($P(OR0,U,5),";")'=IVDIEN) D PKGSTUFF^ORCSEND1(+$P(OR0,U,14)) Q:$G(ORQUIT)
"RTN","ORCSEND",69,0)
 D RELEASE^ORCSAVE2(ORIFN,ORDA,ORNOW,DUZ,$G(NATURE))
"RTN","ORCSEND",70,0)
 D NEW^ORMBLD(ORIFN,CODE) S ORIFN=ORSAVE,STS=$P($G(^OR(100,ORIFN,3)),U,3)
"RTN","ORCSEND",71,0)
 I (STS=1)!(STS=13) S ORERR="1^"_$$WHY(ORIFN,1) D:'SIGNED&SIGNREQD NOSIG K:ORIG ^OR(100,ORIG,6)
"RTN","ORCSEND",72,0)
 I STS=11 S ORERR="1^ERROR"
"RTN","ORCSEND",73,0)
 Q
"RTN","ORCSEND",74,0)
 ;
"RTN","ORCSEND",75,0)
DC ; -- DC order ORIFN
"RTN","ORCSEND",76,0)
 N PKG,CODE,ORCHLD,ORCHDA,STS,ORIDA,ORSAVE,OR3,OR6,DCNATURE
"RTN","ORCSEND",77,0)
 I '$G(REASON),$G(NATURE)="D" S REASON=+$O(^ORD(100.03,"C","ORDUP",0))
"RTN","ORCSEND",78,0)
 S:$G(REASON) $P(^OR(100,ORIFN,6),U,1,5)=$S($G(NATURE):NATURE,$L($G(NATURE)):$O(^ORD(100.02,"C",NATURE,0)),1:"")_"^^^"_+REASON_U_$P(^ORD(100.03,+REASON,0),U)
"RTN","ORCSEND",79,0)
 I SIGNREQD,'SIGNED,'RELSTS S ORERR=$$NEEDSIG Q
"RTN","ORCSEND",80,0)
 S $P(^OR(100,ORIFN,6),U,2,3)=$S($G(DGPMT):"",1:DUZ)_U_ORNOW,ORSAVE=ORIFN S:'$G(REASON) REASON=$P(^(6),U,4)
"RTN","ORCSEND",81,0)
 S STS=$P($G(^OR(100,ORIFN,3)),U,3),PKG=$P($G(^(0)),U,14),PKG=$$NMSP^ORCD(PKG),CODE=$S(PKG="LR":"CA",(PKG="PS")&(STS=5):"CA",(PKG="FH")&(STS=8):"CA",1:"DC")
"RTN","ORCSEND",82,0)
 D:ORDA RELEASE^ORCSAVE2(ORIFN,ORDA,ORNOW,DUZ,$G(NATURE))
"RTN","ORCSEND",83,0)
DC1 I $O(^OR(100,ORIFN,2,0)) D  G DC2 ; DC children
"RTN","ORCSEND",84,0)
 . S ORCHLD=0 F  S ORCHLD=$O(^OR(100,ORIFN,2,ORCHLD)) Q:ORCHLD'>0  I $$VALID^ORCACT0(ORCHLD,"DC") D  Q:$G(ORERR)
"RTN","ORCSEND",85,0)
 . . S ORCHDA=$S(ORDA:$$ACTION^ORCSAVE("DC",ORCHLD,ORNP),1:0)
"RTN","ORCSEND",86,0)
 . . D:ORCHDA SIGN^ORCSAVE2(ORCHLD,,,8,ORCHDA) ;Sig on Parent only
"RTN","ORCSEND",87,0)
 . . D MSG^ORMBLD((ORCHLD_";"_ORCHDA),CODE,$G(REASON))
"RTN","ORCSEND",88,0)
 . . I "^1^13^"'[(U_$P(^OR(100,ORCHLD,3),U,3)_U) S ORERR="1^"_$$WHY(ORCHLD,ORCHDA)
"RTN","ORCSEND",89,0)
 . ;D:'$G(ORERR) STATUS^ORCSAVE2(ORIFN,1)
"RTN","ORCSEND",90,0)
 . S:$G(ORERR) ^OR(100,ORIFN,8,ORDA,1)=$P(ORERR,U,2)
"RTN","ORCSEND",91,0)
 D MSG^ORMBLD((ORIFN_";"_ORDA),CODE,$G(REASON))
"RTN","ORCSEND",92,0)
DC2 S ORIFN=ORSAVE,OR3=$G(^OR(100,ORIFN,3)),STS=$P(OR3,U,3)
"RTN","ORCSEND",93,0)
 S OR6=$G(^OR(100,ORIFN,6))
"RTN","ORCSEND",94,0)
 I STS'=1,STS'=13,STS'=2 D  Q
"RTN","ORCSEND",95,0)
 . S ORERR="1^"_$S(ORDA:$$WHY(ORIFN,ORDA),1:"Unable to discontinue")
"RTN","ORCSEND",96,0)
 . I ORDA,'SIGNED&SIGNREQD D NOSIG ; sig no longer reqd
"RTN","ORCSEND",97,0)
 . K ^OR(100,ORIFN,6)
"RTN","ORCSEND",98,0)
 S DCNATURE=$S(+OR6:+OR6,1:$G(NATURE))
"RTN","ORCSEND",99,0)
 S $P(^OR(100,ORIFN,3),U,7)=$S('$$ACTV^ORX1($G(DCNATURE)):0,ORDA:ORDA,1:$P(OR3,U,7))
"RTN","ORCSEND",100,0)
 D CANCEL(ORIFN),SETALL^ORDD100(ORIFN)
"RTN","ORCSEND",101,0)
 I $P(OR3,U,11)=2 D  ; dc a renewal
"RTN","ORCSEND",102,0)
 . N ORIG,ORIG3,NATR S ORIG=$P(OR3,U,5),ORIG3=$G(^OR(100,ORIG,3)) Q:'ORIG
"RTN","ORCSEND",103,0)
 . ;I CODE="CA",+$P(OR6,U,9)'>0 S $P(^OR(100,ORIG,3),U,6)="" Q  ;pend - remove fwd ptr
"RTN","ORCSEND",104,0)
 . I +$P(OR6,U,9)'>0 S $P(^OR(100,ORIG,3),U,6)="" Q  ;pend - remove fwd ptr
"RTN","ORCSEND",105,0)
 . Q:"^1^7^12^13^"[(U_$P(ORIG3,U,3)_U)  S NATR=$O(^ORD(100.02,"C","A",0))
"RTN","ORCSEND",106,0)
 . S ^OR(100,ORIG,6)=NATR_U_DUZ_U_ORNOW_"^^Renewal cancelled"
"RTN","ORCSEND",107,0)
 . D MSG^ORMBLD(ORIG,"DC") I "^1^13^"'[$P(^OR(100,ORIG,3),U,3) K ^(6) Q
"RTN","ORCSEND",108,0)
 . S:'$$ACTV^ORX1(NATR) $P(^OR(100,ORIG,3),U,7)=0
"RTN","ORCSEND",109,0)
 Q
"RTN","ORCSEND",110,0)
 ;
"RTN","ORCSEND",111,0)
CANCEL(IFN) ; -- Cancel any outstanding actions for order IFN 
"RTN","ORCSEND",112,0)
 N I S I=0
"RTN","ORCSEND",113,0)
 F  S I=$O(^OR(100,IFN,8,I)) Q:I'>0  I $P(^(I,0),U,15)=11 S $P(^(0),U,15)=13 D:$P(^(0),U,4)=2 SIGN^ORCSAVE2(IFN,"","",5,I) ; cancelled, sig not reqd now
"RTN","ORCSEND",114,0)
 Q
"RTN","ORCSEND",115,0)
 ;
"RTN","ORCSEND",116,0)
HD ; -- Hold order ORIFN
"RTN","ORCSEND",117,0)
 N STS,ORSAVE I 'ORDA S ORERR="1^Unable to hold" Q
"RTN","ORCSEND",118,0)
 I SIGNREQD,'SIGNED,'RELSTS S ORERR=$$NEEDSIG Q
"RTN","ORCSEND",119,0)
 D RELEASE^ORCSAVE2(ORIFN,ORDA,ORNOW,DUZ,$G(NATURE))
"RTN","ORCSEND",120,0)
 S ORSAVE=ORIFN D MSG^ORMBLD((ORIFN_";"_ORDA),"HD") S ORIFN=ORSAVE
"RTN","ORCSEND",121,0)
 S STS=$P($G(^OR(100,ORIFN,3)),U,3) I STS=3 S $P(^(3),U,7)=ORDA D SET^ORDD100(ORIFN,ORDA)
"RTN","ORCSEND",122,0)
 I STS'=3 S ORERR="1^"_$$WHY(ORIFN,ORDA) D:'SIGNED&SIGNREQD NOSIG
"RTN","ORCSEND",123,0)
 Q
"RTN","ORCSEND",124,0)
 ;
"RTN","ORCSEND",125,0)
RL ; -- Release hold on order ORIFN
"RTN","ORCSEND",126,0)
 N STS,ORSAVE,ORHD I 'ORDA S ORERR="1^Unable to release hold" Q
"RTN","ORCSEND",127,0)
 I SIGNREQD,'SIGNED,'RELSTS S ORERR=$$NEEDSIG Q
"RTN","ORCSEND",128,0)
 D RELEASE^ORCSAVE2(ORIFN,ORDA,ORNOW,DUZ,$G(NATURE))
"RTN","ORCSEND",129,0)
 S ORSAVE=ORIFN D MSG^ORMBLD((ORIFN_";"_ORDA),"RL") S ORIFN=ORSAVE
"RTN","ORCSEND",130,0)
 S STS=$P($G(^OR(100,ORIFN,3)),U,3),ORHD=+$P($G(^(3)),U,7)
"RTN","ORCSEND",131,0)
 I STS'=3 S $P(^OR(100,ORIFN,3),U,7)=ORDA,$P(^(8,ORHD,2),U,1,2)=ORNOW_U_DUZ D SET^ORDD100(ORIFN,ORDA)
"RTN","ORCSEND",132,0)
 I STS=3 S ORERR="1^"_$$WHY(ORIFN,ORDA) D:'SIGNED&SIGNREQD NOSIG
"RTN","ORCSEND",133,0)
 Q
"RTN","ORCSEND",134,0)
 ;
"RTN","ORCSEND",135,0)
FL ; -- Flag order ORIFN
"RTN","ORCSEND",136,0)
 Q
"RTN","ORCSEND",137,0)
 ;
"RTN","ORCSEND",138,0)
UF ; -- Unflag order ORIFN
"RTN","ORCSEND",139,0)
 Q
"RTN","ORCSEND",140,0)
 ;
"RTN","ORCSEND",141,0)
CM ; -- Add Ward comments to order ORIFN
"RTN","ORCSEND",142,0)
 Q
"RTN","ORCSEND",143,0)
 ;
"RTN","ORCSEND",144,0)
VR ; -- Verify order ORIFN
"RTN","ORCSEND",145,0)
 I 'ORDA!(SIGSTS=2) S ORERR="1^Unable to verify" Q
"RTN","ORCSEND",146,0)
 I "^N^C^R^"'[(U_$G(ORVER)_U) S ORERR="1^Unable to verify" Q
"RTN","ORCSEND",147,0)
 D VERIFY^ORCSAVE2(ORIFN,ORDA,ORVER,DUZ,ORNOW)
"RTN","ORCSEND",148,0)
 ; -- send HL7 msg to Pharmacy if Nurse-Verified, [Sts=pending]
"RTN","ORCSEND",149,0)
 Q:ORVER'="N"  N ORSTS,ORPKG,ORX
"RTN","ORCSEND",150,0)
 S ORX=$P($G(^OR(100,ORIFN,8,ORDA,0)),U,2) Q:ORX'="NW"&(ORX'="XX")
"RTN","ORCSEND",151,0)
 S ORPKG=+$P($G(^OR(100,ORIFN,0)),U,14),ORSTS=$P($G(^(3)),U,3)
"RTN","ORCSEND",152,0)
 ;I ORSTS=5!$L($T(ZV^ORMPS)),$$NMSP^ORCD(ORPKG)="PS" D VER^ORMBLDPS(ORIFN)
"RTN","ORCSEND",153,0)
 I $$NMSP^ORCD(ORPKG)="PS" D VER^ORMBLDPS(ORIFN) Q
"RTN","ORCSEND",154,0)
 D VER^ORMBLDOR(ORIFN)
"RTN","ORCSEND",155,0)
 Q
"RTN","ORCSEND",156,0)
 ;
"RTN","ORCSEND",157,0)
NEEDSIG() ; -- Msg
"RTN","ORCSEND",158,0)
 Q "1^This order requires a signature."
"RTN","ORCSEND",159,0)
 ;
"RTN","ORCSEND",160,0)
WHY(IFN,DA) ; -- Return reason request was rejected
"RTN","ORCSEND",161,0)
 N X S X=$G(^OR(100,IFN,8,DA,1))
"RTN","ORCSEND",162,0)
 S:'$L(X) X="Unable to "_$S(ACTION="HD":"hold",ACTION="RL":"release hold",ACTION="DC":"discontinue",ACTION="XX":"change",ACTION="RN":"renew",1:"release")
"RTN","ORCSEND",163,0)
 Q X
"RTN","ORCSEND",164,0)
 ;
"RTN","ORCSEND",165,0)
NOSIG ; -- Mark order as Sig not Req'd due to cancel/reject
"RTN","ORCSEND",166,0)
 D SIGN^ORCSAVE2(ORIFN,"","",5,ORDA) S SIGNREQD=0
"RTN","ORCSEND",167,0)
 Q
"RTN","ORCSEND",168,0)
 ;
"RTN","ORCSEND",169,0)
READY(IFN,ACT) ; -- Ready to release?
"RTN","ORCSEND",170,0)
 N X,Y,OR0,OR3,ORA
"RTN","ORCSEND",171,0)
 I ACTION="VR" S Y=1 G RQ ; no action to release
"RTN","ORCSEND",172,0)
 I 'ACT,ACTION="DC" S Y=1 G RQ ; cancel a duplicate
"RTN","ORCSEND",173,0)
 S Y=0,OR0=$G(^OR(100,IFN,0)),OR3=$G(^(3)),ORA=$G(^(8,ACT,0))
"RTN","ORCSEND",174,0)
 I $P(ORA,U,15)=11 S Y=1 G RQ ; unreleased
"RTN","ORCSEND",175,0)
 I $P(ORA,U,15)=10 D  G RQ ; delayed
"RTN","ORCSEND",176,0)
 . I $G(^DPT(+ORVP,.105)),$$GET1^DIQ(9.4,+$P(OR0,U,14)_",",1)="PSO" S Y=1 Q
"RTN","ORCSEND",177,0)
 . Q:'RELSTS  N ORIG S ORIG=+$P(OR3,U,5)
"RTN","ORCSEND",178,0)
 . I 'SIGNED,$L($G(NATURE)) S $P(ORA,U,17)=DUZ,$P(ORA,U,12)=$S(NATURE:NATURE,1:+$O(^ORD(100.02,"C",NATURE,0))),^OR(100,IFN,8,ACT,0)=ORA
"RTN","ORCSEND",179,0)
 . Q:$P(OR3,U,11)'=1!('ORIG)  ;dc original if signed edit
"RTN","ORCSEND",180,0)
 . D STATUS^ORCSAVE2(ORIG,12)
"RTN","ORCSEND",181,0)
 . S ^OR(100,ORIG,6)=+$O(^ORD(100.02,"C","C",0))_U_DUZ_U_ORNOW
"RTN","ORCSEND",182,0)
 . S $P(^OR(100,ORIG,3),U,7)=0,$P(^(8,1,0),U,15)=12 D:$P($G(^(0)),U,4)=2 SIGN^ORCSAVE2(ORIG,,,5,1)
"RTN","ORCSEND",183,0)
 I $P(OR3,U,3)=11,$P(ORA,U,2)="NW" S Y=1 ; Action Sts = "" (old)
"RTN","ORCSEND",184,0)
RQ I +$$SWSTAT^IBBAPI() D:Y=1 EN^ORWPFSS4(+IFN) ; Associate PFSS Account Reference with order, Patch OR*3.0*228 IA #4663
"RTN","ORCSEND",185,0)
 Q Y
"RTN","ORMBLDOR")
0^3^B5650360
"RTN","ORMBLDOR",1,0)
ORMBLDOR ; SLC/MKB - Build outgoing OR msgs ;11/17/00  11:11
"RTN","ORMBLDOR",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**97,390**;Dec 17, 1997;Build 110
"RTN","ORMBLDOR",3,0)
EN ; -- Generic orders: Activity, Nursing, Diagnosis, Condition, Vitals
"RTN","ORMBLDOR",4,0)
 N OI,START,STOP,SCH,TXT
"RTN","ORMBLDOR",5,0)
 S OI=$G(ORDIALOG($$PTR("ORDERABLE ITEM"),1))
"RTN","ORMBLDOR",6,0)
 S TXT=$G(ORDIALOG($$PTR("FREE TEXT 1"),1))
"RTN","ORMBLDOR",7,0)
 S START=$P(OR0,U,8),STOP=$P(OR0,U,9),SCH=""
"RTN","ORMBLDOR",8,0)
 S:ORDG=$O(^ORD(100.98,"B","V/M",0)) SCH=$$VALUE^ORCSAVE2(IFN,"SCHEDULE")
"RTN","ORMBLDOR",9,0)
 S $P(ORMSG(4),"|",8)=U_SCH_"^^"_$$HL7DATE(START)_U_$$HL7DATE(STOP) ; QT
"RTN","ORMBLDOR",10,0)
 S ORMSG(5)="OBR||||"_$$USID^ORMBLD(OI)
"RTN","ORMBLDOR",11,0)
 S:$L(TXT) ORMSG(6)="NTE|1|L|"_TXT ; order text?
"RTN","ORMBLDOR",12,0)
 Q
"RTN","ORMBLDOR",13,0)
 ;
"RTN","ORMBLDOR",14,0)
ADT ; -- M.A.S. event requests
"RTN","ORMBLDOR",15,0)
 Q  N PROV,PROV1,ORIFN
"RTN","ORMBLDOR",16,0)
 S PROV=+$G(ORDIALOG($$PTR("PROVIDER"),1)) I 'PROV D EN Q
"RTN","ORMBLDOR",17,0)
 S PROV1=+$G(ORDIALOG($$PTR("PROVIDER 1"),1)),PKG="DGPM"
"RTN","ORMBLDOR",18,0)
 S $P(ORMSG(1),"|",5)="M.A.S.",$P(ORMSG(1),"|",9)="ADT"
"RTN","ORMBLDOR",19,0)
 K ORMSG(4) S ORMSG(4)=ORMSG(3),ORMSG(3)=ORMSG(2)
"RTN","ORMBLDOR",20,0)
 S ORMSG(2)="EVN|A08|"_$$HL7DATE($$NOW^XLFDT)
"RTN","ORMBLDOR",21,0)
 S $P(ORMSG(4),"|",8)=PROV
"RTN","ORMBLDOR",22,0)
 S:PROV1 ORMSG(5)="ZDG|"_PROV1
"RTN","ORMBLDOR",23,0)
 S ORIFN=+IFN D NW^ORMORG ; set status, start date
"RTN","ORMBLDOR",24,0)
 Q
"RTN","ORMBLDOR",25,0)
 ;
"RTN","ORMBLDOR",26,0)
PTR(X) ; -- Returns ptr value of prompt X in #101.41
"RTN","ORMBLDOR",27,0)
 Q +$O(^ORD(101.41,"AB",$E("OR GTX "_X,1,63),0))
"RTN","ORMBLDOR",28,0)
 ;
"RTN","ORMBLDOR",29,0)
HL7DATE(D) ; -- FM->HL7 format
"RTN","ORMBLDOR",30,0)
 Q $$FMTHL7^XLFDT(D)  ;**97
"RTN","ORMBLDOR",31,0)
 ;
"RTN","ORMBLDOR",32,0)
COMP(IFN) ; -- send message for completed orders
"RTN","ORMBLDOR",33,0)
 N OR0,ORMSG S OR0=$G(^OR(100,+IFN,0))
"RTN","ORMBLDOR",34,0)
 S ORMSG(1)=$$MSH^ORMBLD("ORM","OR"),ORMSG(2)=$$PID^ORMBLD($P(OR0,U,2))
"RTN","ORMBLDOR",35,0)
 S ORMSG(3)=$$PV1^ORMBLD($P(OR0,U,2),$P(OR0,U,12),+$P(OR0,U,10))
"RTN","ORMBLDOR",36,0)
 S ORMSG(4)="ORC|SC|"_+IFN_"^OR|"_+IFN_"^OR||CM||||||"_DUZ_"||||"_$$FMTHL7^XLFDT($$NOW^XLFDT)
"RTN","ORMBLDOR",37,0)
 D MSG^XQOR("OR EVSEND VPR",.ORMSG)
"RTN","ORMBLDOR",38,0)
 Q
"RTN","ORMBLDOR",39,0)
 ;
"RTN","ORMBLDOR",40,0)
VER(IFN) ; -- Send msg for verified orders
"RTN","ORMBLDOR",41,0)
 N OR0,ORMSG S OR0=$G(^OR(100,+IFN,0))
"RTN","ORMBLDOR",42,0)
 S ORMSG(1)=$$MSH^ORMBLD("ORM","OR"),ORMSG(2)=$$PID^ORMBLD($P(OR0,U,2))
"RTN","ORMBLDOR",43,0)
 S ORMSG(3)=$$PV1^ORMBLD($P(OR0,U,2),$P(OR0,U,12),+$P(OR0,U,10))
"RTN","ORMBLDOR",44,0)
 S ORMSG(4)="ORC|ZV|"_IFN_"^OR|"_$G(^OR(100,+IFN,4))_U_$$NMSP^ORCD($P(OR0,U,14))_"||||||||"_DUZ_"||||"_$$FMTHL7^XLFDT($$NOW^XLFDT)
"RTN","ORMBLDOR",45,0)
 D MSG^XQOR("OR EVSEND VPR",.ORMSG)
"RTN","ORMBLDOR",46,0)
 Q
"RTN","ORWDXA")
0^4^B83177974
"RTN","ORWDXA",1,0)
ORWDXA ; SLC/KCM/JLI - Utilites for Order Actions ;12/14/12  13:38
"RTN","ORWDXA",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**10,85,116,132,148,141,149,187,213,195,215,243,280,306,390**;Dec 17, 1997;Build 110
"RTN","ORWDXA",3,0)
 ;
"RTN","ORWDXA",4,0)
VALID(VAL,ORID,ACTION,ORNP,ORWNAT) ; Is action valid for order?
"RTN","ORWDXA",5,0)
 N ORACT,ORVP,ORVER,ORIFN,PRTID S VAL="",PRTID=0
"RTN","ORWDXA",6,0)
 I +ORID=0 S VAL="This order has been deleted." Q
"RTN","ORWDXA",7,0)
 I '$D(^OR(100,+ORID,0)) S VAL="This order has been deleted!" Q
"RTN","ORWDXA",8,0)
 I ACTION="XFR",'$L($T(XFR^ORCACT01)) S ACTION="RW" ; for pre-POE
"RTN","ORWDXA",9,0)
 N ORNSS S ORNSS=1
"RTN","ORWDXA",10,0)
 I (ACTION="RN") D VALSCH^ORWNSS(.ORNSS,ORID)
"RTN","ORWDXA",11,0)
 I ORNSS=0 S VAL="This order contains an invalid administration schedule." Q
"RTN","ORWDXA",12,0)
 I (ACTION="RN") D ISVALIV^ORWDPS33(.VAL,ORID,ACTION) I $L(VAL)>0 Q
"RTN","ORWDXA",13,0)
 S ORIFN=ORID,ORVP=$P(^OR(100,+ORID,0),U,2)  ; ORCACT0 expects
"RTN","ORWDXA",14,0)
 I (ACTION="RN") D  Q:$L(VAL)
"RTN","ORWDXA",15,0)
 . N DLG S DLG=$P(^OR(100,+ORID,0),U,5) Q:DLG'[";ORD(101.41,"
"RTN","ORWDXA",16,0)
 . I $G(^ORD(101.41,+DLG,3))'["PROVIDER^ORCDPSIV" Q
"RTN","ORWDXA",17,0)
 . D AUTH^ORWDPS32(.VAL,ORNP)
"RTN","ORWDXA",18,0)
 . I VAL S VAL=$P(VAL,U,2)
"RTN","ORWDXA",19,0)
 . E  S VAL=""
"RTN","ORWDXA",20,0)
 S ORVER=$S(ACTION="CR":"R",$D(^XUSEC("ORELSE",DUZ)):"N",$D(^XUSEC("OREMAS",DUZ)):"C",1:"^")
"RTN","ORWDXA",21,0)
 I ACTION="CR" S ACTION="VR"
"RTN","ORWDXA",22,0)
 I (ACTION="ES")!(ACTION="OC")!(ACTION="RS") S ORACT=ACTION ; why not defined???
"RTN","ORWDXA",23,0)
 I (ACTION="VR"),'($D(^XUSEC("ORELSE",DUZ))!$D(^XUSEC("OREMAS",DUZ))) D  Q
"RTN","ORWDXA",24,0)
 . S VAL="You are not authorized to verify these orders."
"RTN","ORWDXA",25,0)
 I $L(VAL) Q
"RTN","ORWDXA",26,0)
 N OIIEN,ISIV,IVOD
"RTN","ORWDXA",27,0)
 S (ISIV,OIIEN,IVOD)=0
"RTN","ORWDXA",28,0)
 I (ACTION="RW")!(ACTION="XX")!(ACTION="XFR") D  Q:$L(VAL)
"RTN","ORWDXA",29,0)
 . S ISIV=$P(^OR(100,+ORID,0),U,11)
"RTN","ORWDXA",30,0)
 . I ISIV,($P(^ORD(100.98,ISIV,0),U,3)="IV RX") S IVOD=1
"RTN","ORWDXA",31,0)
 . D:'IVOD GTORITM^ORWDXR(.OIIEN,+ORID)
"RTN","ORWDXA",32,0)
 . D:OIIEN ISACTOI(.VAL,OIIEN) I $L(VAL)>0 Q
"RTN","ORWDXA",33,0)
 . N DLG,FRM
"RTN","ORWDXA",34,0)
 . S DLG=$P(^OR(100,+ORID,0),U,5),FRM=0
"RTN","ORWDXA",35,0)
 . I $P(DLG,";",2)'="ORD(101.41," S DLG=0
"RTN","ORWDXA",36,0)
 . I DLG D FORMID^ORWDXM(.FRM,+DLG)
"RTN","ORWDXA",37,0)
 . I '(DLG&FRM) D
"RTN","ORWDXA",38,0)
 . . S VAL="Copy & Change are not implemented for this order that predates CPRS."
"RTN","ORWDXA",39,0)
 N OREBUILD
"RTN","ORWDXA",40,0)
 ;I (ACTION="RW")!(ACTION="XFR")!(ACTION="RN") D ISVALIV^ORWDPS33(.VAL,ORID,ACTION) I $L(VAL)>0 Q
"RTN","ORWDXA",41,0)
 I $$VALID^ORCACT0(ORID,ACTION,.VAL,$G(ORWNAT)) S VAL="" ; VAL=error
"RTN","ORWDXA",42,0)
 I ACTION="RN",$$UPCTCHK(ORID) S VAL="Cannot renew this order due to an illegal character ""^"" in the comments or patient instructions."
"RTN","ORWDXA",43,0)
 I ACTION="RW",$$UPCTCHK(ORID) S VAL="Cannot copy this order due to an illegal character ""^"" in the comments or patient instructions."
"RTN","ORWDXA",44,0)
 Q
"RTN","ORWDXA",45,0)
 ;
"RTN","ORWDXA",46,0)
HOLD(REC,ORID,ORNP) ; Place order on hold
"RTN","ORWDXA",47,0)
 N ACTDA
"RTN","ORWDXA",48,0)
 S ACTDA=$$ACTION^ORCSAVE("HD",+ORID,ORNP)
"RTN","ORWDXA",49,0)
 D GETBYIFN^ORWORR(.REC,+ORID_";"_ACTDA)
"RTN","ORWDXA",50,0)
 Q
"RTN","ORWDXA",51,0)
UNHOLD(REC,ORID,ORNP) ; Release order from hold
"RTN","ORWDXA",52,0)
 N ACTDA
"RTN","ORWDXA",53,0)
 S ACTDA=$$ACTION^ORCSAVE("RL",+ORID,ORNP)
"RTN","ORWDXA",54,0)
 D GETBYIFN^ORWORR(.REC,+ORID_";"_ACTDA)
"RTN","ORWDXA",55,0)
 Q
"RTN","ORWDXA",56,0)
DC(REC,ORID,ORNP,ORL,REASON,DCORIG,ISNEWORD) ; Discontinue/Cancel/Delete order
"RTN","ORWDXA",57,0)
 N NATURE,CREATE,PRINT,STATUS,ACTDA,SIGSTS
"RTN","ORWDXA",58,0)
 N X3,X8,CURRACT
"RTN","ORWDXA",59,0)
 Q:'+ORID
"RTN","ORWDXA",60,0)
 I $G(DCORIG)="" S DCORIG=0
"RTN","ORWDXA",61,0)
 S CURRACT=0
"RTN","ORWDXA",62,0)
 S ORL(2)=ORL_";SC(",ORL=ORL(2),NATURE=""
"RTN","ORWDXA",63,0)
 I REASON S NATURE=$P(^ORD(100.02,$P(^ORD(100.03,REASON,0),U,7),0),U,2)
"RTN","ORWDXA",64,0)
 S:NATURE="" NATURE="W"  ; S:ORNP=DUZ NATURE="E"
"RTN","ORWDXA",65,0)
 ;change the way create work to support forcing signature for all DC
"RTN","ORWDXA",66,0)
 ;reasons
"RTN","ORWDXA",67,0)
 S CREATE=1,PRINT=$$PRINT^ORCACT2(NATURE)
"RTN","ORWDXA",68,0)
 ;S CREATE=$$CREATE^ORX1(NATURE)
"RTN","ORWDXA",69,0)
 S X3=$G(^OR(100,+ORID,3))
"RTN","ORWDXA",70,0)
 S CURRACT=$P(X3,U,7) S:CURRACT<1 CURRACT=+$O(^OR(100,+ORID,8,"?"),-1)
"RTN","ORWDXA",71,0)
 I '$D(^OR(100,+ORID,8,+$P(ORID,";",2),0)) D
"RTN","ORWDXA",72,0)
 . S X8=$G(^OR(100,+ORID,8,CURRACT,0))
"RTN","ORWDXA",73,0)
 . S SIGSTS=$P(X8,U,4)
"RTN","ORWDXA",74,0)
 . S $P(ORID,";",2)=CURRACT
"RTN","ORWDXA",75,0)
 E  D
"RTN","ORWDXA",76,0)
 . S X8=^OR(100,+ORID,8,+$P(ORID,";",2),0)
"RTN","ORWDXA",77,0)
 . S SIGSTS=$P(X8,U,4)
"RTN","ORWDXA",78,0)
 I '$D(SIGSTS) S SIGSTS=1
"RTN","ORWDXA",79,0)
 S STATUS=$P($G(^OR(100,+ORID,8,+$P(ORID,";",2),0)),U,15)
"RTN","ORWDXA",80,0)
 I (STATUS=10)!(STATUS=11) D  Q   ; delete/cancel unreleased order
"RTN","ORWDXA",81,0)
 . N RPLORD
"RTN","ORWDXA",82,0)
 . S RPLORD=$P($G(^OR(100,+ORID,3)),U,5)    ; replaced order
"RTN","ORWDXA",83,0)
 . D GETBYIFN^ORWORR(.REC,ORID)
"RTN","ORWDXA",84,0)
 . I STATUS=10,($P(X8,U,4)'=2) D  ; CANCEL signed, delayed, unreleased
"RTN","ORWDXA",85,0)
 . . ; taken from CLRDLY^ORCACT2
"RTN","ORWDXA",86,0)
 . . I REASON D SET^ORCACT2(+ORID,NATURE,REASON,,DCORIG)
"RTN","ORWDXA",87,0)
 . . I 'REASON D SET^ORCACT2(+ORID,"M","","Delayed Order Cancelled",DCORIG)
"RTN","ORWDXA",88,0)
 . . D STATUS^ORCSAVE2(+ORID,13) S $P(^OR(100,+ORID,8,1,0),U,15)=13
"RTN","ORWDXA",89,0)
 . E  D                           ; CANCEL OR DELETE unsigned, unreleased
"RTN","ORWDXA",90,0)
 . . I $P(X8,U,2)="DC" K ^OR(100,+ORID,6)
"RTN","ORWDXA",91,0)
 . . ; delete fwd ptr to order about to be deleted
"RTN","ORWDXA",92,0)
 . . I RPLORD,$P(X8,U,2)="NW" S $P(^OR(100,RPLORD,3),U,6)=""
"RTN","ORWDXA",93,0)
 . . ; delete ptr to order in Patient Event file #100.2
"RTN","ORWDXA",94,0)
 . . N EVT S EVT=$P($G(^OR(100,+ORID,0)),U,17) I EVT,EVT=+$O(^ORE(100.2,"AO",+ORID,0)) S $P(^ORE(100.2,EVT,0),U,4)="" K ^ORE(100.2,"AO",+ORID,EVT)
"RTN","ORWDXA",95,0)
 . . I $G(ISNEWORD) D DELETE^ORCSAVE2(ORID)
"RTN","ORWDXA",96,0)
 . . I '$G(ISNEWORD) D CANCEL^ORCSAVE2(ORID)
"RTN","ORWDXA",97,0)
 . I RPLORD,'(SIGSTS=1) S ORID=RPLORD  ; for Renews & Changes, show replaced order
"RTN","ORWDXA",98,0)
 . I '$D(^OR(100,+ORID)) D
"RTN","ORWDXA",99,0)
 . . S $P(REC(1),U)="~0",REC(2)="tDELETED: "_$E(REC(2),2,245)
"RTN","ORWDXA",100,0)
 . E  D
"RTN","ORWDXA",101,0)
 . . K REC
"RTN","ORWDXA",102,0)
 . . D GETBYIFN^ORWORR(.REC,+ORID_";"_$P($G(^OR(100,+ORID,3)),U,7))
"RTN","ORWDXA",103,0)
 . S $P(REC(1),U,14)=2 ; DCType = deletion
"RTN","ORWDXA",104,0)
 S ACTDA=$$ACTION^ORCSAVE("DC",+ORID,ORNP)
"RTN","ORWDXA",105,0)
 D SET^ORCACT2(+ORID,NATURE,REASON,,DCORIG)
"RTN","ORWDXA",106,0)
 D GETBYIFN^ORWORR(.REC,+ORID_";"_ACTDA)
"RTN","ORWDXA",107,0)
 S $P(REC(1),U,14)=$S(CREATE:1,1:3)  ;DCType - 1=NewOrder, 3=NewStatus
"RTN","ORWDXA",108,0)
 N PKG
"RTN","ORWDXA",109,0)
 S PKG=$P($G(^OR(100,+ORID,0)),U,14)
"RTN","ORWDXA",110,0)
 S PKG=$$NMSP^ORCD(PKG)
"RTN","ORWDXA",111,0)
 I REASON=16&(PKG="PS") D
"RTN","ORWDXA",112,0)
 . N XMB
"RTN","ORWDXA",113,0)
 . S XMB="OR DRUG ORDER CANCELLED"
"RTN","ORWDXA",114,0)
 . S XMB(1)=$P($G(REC(2)),"tDiscontinue",2),XMB(4)=$P($G(^VA(200,DUZ,0)),U)
"RTN","ORWDXA",115,0)
 . S XMB(2)=+ORID
"RTN","ORWDXA",116,0)
 . S XMB(3)=+$P($G(^OR(100,+ORID,0)),U,2)
"RTN","ORWDXA",117,0)
 . S XMB(3)=$P($G(^DPT(XMB(3),0)),U)
"RTN","ORWDXA",118,0)
 . D ^XMB
"RTN","ORWDXA",119,0)
 Q
"RTN","ORWDXA",120,0)
DCREQIEN(VAL) ; Return IEN for Req Phys Cancelled reason
"RTN","ORWDXA",121,0)
 S VAL=$O(^ORD(100.03,"S","REQ",0))
"RTN","ORWDXA",122,0)
 Q
"RTN","ORWDXA",123,0)
COMPLETE(REC,ORID,ESCODE) ; Complete order (generic)
"RTN","ORWDXA",124,0)
 ;N X S X=+$E($$NOW^XLFDT,1,12)
"RTN","ORWDXA",125,0)
 ;D DATES^ORCSAVE2(+ORID,,X)
"RTN","ORWDXA",126,0)
 ;D STATUS^ORCSAVE2(+ORID,2)
"RTN","ORWDXA",127,0)
 ; validate ESCode
"RTN","ORWDXA",128,0)
 D COMP^ORCSAVE2(ORID)
"RTN","ORWDXA",129,0)
 D COMP^ORMBLDOR(ORID)
"RTN","ORWDXA",130,0)
 D GETBYIFN^ORWORR(.REC,ORID)
"RTN","ORWDXA",131,0)
 Q
"RTN","ORWDXA",132,0)
VERIFY(REC,ORID,ESCODE,ORVER) ; Verify order
"RTN","ORWDXA",133,0)
 ; validate ESCode
"RTN","ORWDXA",134,0)
 S ORVER=$G(ORVER,$S($D(^XUSEC("ORELSE",DUZ)):"N",$D(^XUSEC("OREMAS",DUZ)):"C",1:U))
"RTN","ORWDXA",135,0)
 I ORVER'=U D
"RTN","ORWDXA",136,0)
 . N ORIFN,ORES,ORI
"RTN","ORWDXA",137,0)
 . ; VERIFY any replaced orders:
"RTN","ORWDXA",138,0)
 . S ORIFN=ORID,ORES(ORIFN)="" D REPLCD^ORCACT1
"RTN","ORWDXA",139,0)
 . S ORI="" F  S ORI=$O(ORES(ORI)) Q:ORI=""  D EN^ORCSEND(ORI,"VR","",""),UNLK1^ORX2(+ORI):ORI'=ORID ;ORID locked prior
"RTN","ORWDXA",140,0)
 D GETBYIFN^ORWORR(.REC,ORID)
"RTN","ORWDXA",141,0)
 Q
"RTN","ORWDXA",142,0)
ALERT(DUMMY,ORID,ORDUZ) ; alert user (ORDUZ) when order (ORID) resulted
"RTN","ORWDXA",143,0)
 ;if no user passed, use ordering provider:
"RTN","ORWDXA",144,0)
 I $G(ORDUZ)<1 S ORDUZ=+$$ORDERER^ORQOR2(+ORID)
"RTN","ORWDXA",145,0)
 I $L($G(ORDUZ))<1 S ORDUZ=DUZ
"RTN","ORWDXA",146,0)
 S DUMMY=1,$P(^OR(100,+ORID,3),U,10)=ORDUZ
"RTN","ORWDXA",147,0)
 Q
"RTN","ORWDXA",148,0)
FLAG(REC,ORIFN,OREASON,ORNP) ; Flag order
"RTN","ORWDXA",149,0)
 N ORB,ORVP,DA,ORPS
"RTN","ORWDXA",150,0)
 D BULLETIN
"RTN","ORWDXA",151,0)
 S DA=$P(ORIFN,";",2),ORVP=+$P(^OR(100,+ORIFN,0),U,2)
"RTN","ORWDXA",152,0)
 K ^OR(100,+ORIFN,8,DA,3) S ^(3)="1^"_$G(XMZ)_U_+$E($$NOW^XLFDT,1,12)_U_DUZ_U_OREASON_$S($G(ORNP):"^^^^"_+ORNP,1:"")
"RTN","ORWDXA",153,0)
 D KILL^XM,MSG^ORCFLAG(ORIFN)
"RTN","ORWDXA",154,0)
 S $P(^OR(100,+ORIFN,3),U)=$$NOW^XLFDT ; Last Activity
"RTN","ORWDXA",155,0)
 I +$G(ORNP)<1 S ORNP=+$P($G(^OR(100,+ORIFN,8,DA,0)),U,3)
"RTN","ORWDXA",156,0)
 S ORB=+ORVP_U_+ORIFN_U_ORNP_"^1" D EN^OCXOERR(ORB) ; notification
"RTN","ORWDXA",157,0)
 D GETBYIFN^ORWORR(.REC,ORIFN)
"RTN","ORWDXA",158,0)
 Q
"RTN","ORWDXA",159,0)
BULLETIN ; flagged order bulletin
"RTN","ORWDXA",160,0)
 N OR0,OR3,ORDTXT,XMB,XMY,XMDUZ,ORENT,BULL,ORSRV,ORUSR
"RTN","ORWDXA",161,0)
 S OR0=$G(^OR(100,+ORIFN,0)),OR3=$G(^(3))
"RTN","ORWDXA",162,0)
 ;CLA - 3/21/96:
"RTN","ORWDXA",163,0)
 S ORUSR=+$P(OR0,U,4)
"RTN","ORWDXA",164,0)
 S ORSRV=$G(^VA(200,ORUSR,5)) I +ORSRV>0 S ORSRV=$P(ORSRV,U)
"RTN","ORWDXA",165,0)
 S ORENT="USR.`"_ORUSR_"^SRV.`"_$G(ORSRV)_"^DIV^SYS^PKG"
"RTN","ORWDXA",166,0)
 S BULL=$$GET^XPAR(ORENT,"ORB FLAGGED ORDERS BULLETIN",1,"Q")
"RTN","ORWDXA",167,0)
 Q:$G(BULL)'="Y"   ;quit if parm val not 'Y'es
"RTN","ORWDXA",168,0)
 ;
"RTN","ORWDXA",169,0)
 S XMB="OR FLAGGED ORDER",XMDUZ=DUZ,XMY(+$P(OR0,U,4))=""
"RTN","ORWDXA",170,0)
 S XMB(1)=$P(^DPT(+$P(OR0,U,2),0),U),XMB(2)=$P(^(0),U,9),XMB(3)="" ;sb AGE
"RTN","ORWDXA",171,0)
 S XMB(4)=$$FMTE^XLFDT($P(OR0,U,7))
"RTN","ORWDXA",172,0)
 D TEXT^ORQ12(.ORDTXT,+ORIFN,80)
"RTN","ORWDXA",173,0)
 S XMB(5)=$G(ORDTXT(1)),XMB(6)=$G(ORDTXT(2)),XMB(7)=$G(ORDTXT(3))
"RTN","ORWDXA",174,0)
 S XMB(8)=$$FMTE^XLFDT($P(OR0,U,8)),XMB(9)=$$FMTE^XLFDT($P(OR0,U,9)),XMB(10)=OREASON
"RTN","ORWDXA",175,0)
 S XMB(11)=$P($G(^ORD(100.01,+$P(OR3,U,3),0)),U)
"RTN","ORWDXA",176,0)
 D EN^XMB
"RTN","ORWDXA",177,0)
 Q
"RTN","ORWDXA",178,0)
UNFLAG(REC,ORIFN,OREASON) ; Unflag order
"RTN","ORWDXA",179,0)
 N DA,ORB,ORNP,ORVP,ORPS
"RTN","ORWDXA",180,0)
 S DA=$P(ORIFN,";",2),ORVP=+$P(^OR(100,+ORIFN,0),U,2)
"RTN","ORWDXA",181,0)
 S $P(^OR(100,+ORIFN,8,DA,3),U)=0,$P(^(3),U,6,8)=+$E($$NOW^XLFDT,1,12)_U_DUZ_U_OREASON D MSG^ORCFLAG(ORIFN)
"RTN","ORWDXA",182,0)
 S $P(^OR(100,+ORIFN,3),U)=$$NOW^XLFDT  ; Last Activity
"RTN","ORWDXA",183,0)
 S ORNP=+$P($G(^OR(100,+ORIFN,8,DA,0)),U,3)
"RTN","ORWDXA",184,0)
 S ORB=+ORVP_U_+ORIFN_U_ORNP_"^0" D EN^OCXOERR(ORB) ; notification
"RTN","ORWDXA",185,0)
 D GETBYIFN^ORWORR(.REC,ORIFN)
"RTN","ORWDXA",186,0)
 Q
"RTN","ORWDXA",187,0)
FLAGTXT(LST,ORID) ; flag reason
"RTN","ORWDXA",188,0)
 N FLAG
"RTN","ORWDXA",189,0)
 S FLAG=$G(^OR(100,+ORID,8,$P(ORID,";",2),3))
"RTN","ORWDXA",190,0)
 S LST(1)="FLAGGED: "_$$FMTE^XLFDT($P(FLAG,U,3))_" by "_$P($G(^VA(200,+$P(FLAG,U,4),0)),U)
"RTN","ORWDXA",191,0)
 S LST(2)=$P(FLAG,U,5) ; reason
"RTN","ORWDXA",192,0)
 Q
"RTN","ORWDXA",193,0)
WCGET(LST,ORID) ; ward comments
"RTN","ORWDXA",194,0)
 N I,ORIFN,ACT S ORIFN=+ORID,ACT=+$P(ORID,";",2)
"RTN","ORWDXA",195,0)
 S I=0 F  S I=$O(^OR(100,ORIFN,8,ACT,5,I)) Q:'I  S LST(I)=$G(^(I,0))
"RTN","ORWDXA",196,0)
 Q
"RTN","ORWDXA",197,0)
WCPUT(ERR,ORID,WCLST) ; Set ward comments
"RTN","ORWDXA",198,0)
 N DIERR,ERRLST,ORIFN,ACT S ORIFN=+ORID,ACT=+$P(ORID,";",2)
"RTN","ORWDXA",199,0)
 D WP^DIE(100.008,ACT_","_ORIFN_",",50,"","WCLST","ERRLST")
"RTN","ORWDXA",200,0)
 S ERR="" I $D(DIERR) S ERR="An error occurred while saving comments."
"RTN","ORWDXA",201,0)
 Q
"RTN","ORWDXA",202,0)
OFCPLX(ORY,ORID,PRTORDER) ; is ORID child of PRTORDER
"RTN","ORWDXA",203,0)
 N NUMCHDS,NOWID,NOWVAL,X3,ORDA,ISNOW
"RTN","ORWDXA",204,0)
 Q:'$D(^OR(100,+ORID,0))
"RTN","ORWDXA",205,0)
 S ISNOW=0
"RTN","ORWDXA",206,0)
 D ISNOW^ORWDXR(.ISNOW,+ORID)
"RTN","ORWDXA",207,0)
 Q:ISNOW
"RTN","ORWDXA",208,0)
 N PKG
"RTN","ORWDXA",209,0)
 S PKG=$P($G(^OR(100,+ORID,0)),U,14)
"RTN","ORWDXA",210,0)
 S PKG=$$NMSP^ORCD(PKG)
"RTN","ORWDXA",211,0)
 I PKG'="PS" Q
"RTN","ORWDXA",212,0)
 I $L($G(^OR(100,+ORID,3))),('$L($P(^(3),U,9))) Q
"RTN","ORWDXA",213,0)
 S (NUMCHDS,NOWID,NOWVAL,X3,ORDA)=0
"RTN","ORWDXA",214,0)
 S PRTORDER=+$P(^(3),U,9)
"RTN","ORWDXA",215,0)
 S X3=$G(^OR(100,PRTORDER,3)),ORDA=$P(X3,U,7)
"RTN","ORWDXA",216,0)
 S PRTORDER=PRTORDER_";"_ORDA
"RTN","ORWDXA",217,0)
 S NUMCHDS=$P($G(^OR(100,+PRTORDER,2,0)),U,4)
"RTN","ORWDXA",218,0)
 I NUMCHDS>2 S ORY="COMPLEX-PSI"_U_PRTORDER
"RTN","ORWDXA",219,0)
 S:$D(^OR(100,+PRTORDER,4.5,"ID","NOW")) NOWID=$O(^("NOW",0))
"RTN","ORWDXA",220,0)
 S:NOWID NOWVAL=$G(^OR(100,+PRTORDER,4.5,NOWID,1))
"RTN","ORWDXA",221,0)
 I NOWVAL=1 Q
"RTN","ORWDXA",222,0)
 E  S ORY="COMPLEX-PSI"_U_PRTORDER
"RTN","ORWDXA",223,0)
 Q
"RTN","ORWDXA",224,0)
ISACTOI(ORY,OI) ; Is ord item active?
"RTN","ORWDXA",225,0)
 I $G(^ORD(101.43,+OI,.1)),^(.1)'>$$NOW^XLFDT D
"RTN","ORWDXA",226,0)
 . S ORY=$P($G(^ORD(101.43,OI,0)),U)_" has been inactivated and may not be ordered anymore."
"RTN","ORWDXA",227,0)
 Q
"RTN","ORWDXA",228,0)
UPCTCHK(ORID) ;
"RTN","ORWDXA",229,0)
 ;ORID=ORDER NUMBER
"RTN","ORWDXA",230,0)
 ;RETURNS 1 IF THERE IS AN UPCARET IN THE ORDER'S COMMENTS
"RTN","ORWDXA",231,0)
 N RET,COMMID,WPCNT,PIID S RET=0
"RTN","ORWDXA",232,0)
 S COMMID=$O(^OR(100,+ORID,4.5,"ID","COMMENT",0))
"RTN","ORWDXA",233,0)
 I COMMID S WPCNT=0 F  S WPCNT=$O(^OR(100,+ORID,4.5,COMMID,2,WPCNT)) Q:'WPCNT!(RET)  D
"RTN","ORWDXA",234,0)
 .I $G(^OR(100,+ORID,4.5,COMMID,2,WPCNT,0))["^" S RET=1
"RTN","ORWDXA",235,0)
 S PIID=$O(^OR(100,+ORID,4.5,"ID","PI",0))
"RTN","ORWDXA",236,0)
 I PIID S WPCNT=0 F  S WPCNT=$O(^OR(100,+ORID,4.5,PIID,2,WPCNT)) Q:'WPCNT!(RET)  D
"RTN","ORWDXA",237,0)
 .I $G(^OR(100,+ORID,4.5,PIID,2,WPCNT,0))["^" S RET=1
"RTN","ORWDXA",238,0)
 Q RET
"VER")
8.0^22.0
**INSTALL NAME**
PSB*3.0*79
"BLD",8918,0)
PSB*3.0*79^BAR CODE MED ADMIN^0^3140611^y
"BLD",8918,1,0)
^^1^1^3140411^
"BLD",8918,1,1,0)
See patch description for details.
"BLD",8918,4,0)
^9.64PA^^
"BLD",8918,6)
1^
"BLD",8918,6.3)
59
"BLD",8918,"ABPKG")
n
"BLD",8918,"KRN",0)
^9.67PA^779.2^20
"BLD",8918,"KRN",.4,0)
.4
"BLD",8918,"KRN",.401,0)
.401
"BLD",8918,"KRN",.402,0)
.402
"BLD",8918,"KRN",.403,0)
.403
"BLD",8918,"KRN",.5,0)
.5
"BLD",8918,"KRN",.84,0)
.84
"BLD",8918,"KRN",3.6,0)
3.6
"BLD",8918,"KRN",3.8,0)
3.8
"BLD",8918,"KRN",9.2,0)
9.2
"BLD",8918,"KRN",9.8,0)
9.8
"BLD",8918,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",8918,"KRN",9.8,"NM",1,0)
PSBML^^0^B125339367
"BLD",8918,"KRN",9.8,"NM",2,0)
PSBVPR^^0^B2149221
"BLD",8918,"KRN",9.8,"NM","B","PSBML",1)

"BLD",8918,"KRN",9.8,"NM","B","PSBVPR",2)

"BLD",8918,"KRN",19,0)
19
"BLD",8918,"KRN",19.1,0)
19.1
"BLD",8918,"KRN",101,0)
101
"BLD",8918,"KRN",101,"NM",0)
^9.68A^1^1
"BLD",8918,"KRN",101,"NM",1,0)
PSB EVSEND VPR^^0
"BLD",8918,"KRN",101,"NM","B","PSB EVSEND VPR",1)

"BLD",8918,"KRN",409.61,0)
409.61
"BLD",8918,"KRN",771,0)
771
"BLD",8918,"KRN",779.2,0)
779.2
"BLD",8918,"KRN",870,0)
870
"BLD",8918,"KRN",8989.51,0)
8989.51
"BLD",8918,"KRN",8989.52,0)
8989.52
"BLD",8918,"KRN",8994,0)
8994
"BLD",8918,"KRN","B",.4,.4)

"BLD",8918,"KRN","B",.401,.401)

"BLD",8918,"KRN","B",.402,.402)

"BLD",8918,"KRN","B",.403,.403)

"BLD",8918,"KRN","B",.5,.5)

"BLD",8918,"KRN","B",.84,.84)

"BLD",8918,"KRN","B",3.6,3.6)

"BLD",8918,"KRN","B",3.8,3.8)

"BLD",8918,"KRN","B",9.2,9.2)

"BLD",8918,"KRN","B",9.8,9.8)

"BLD",8918,"KRN","B",19,19)

"BLD",8918,"KRN","B",19.1,19.1)

"BLD",8918,"KRN","B",101,101)

"BLD",8918,"KRN","B",409.61,409.61)

"BLD",8918,"KRN","B",771,771)

"BLD",8918,"KRN","B",779.2,779.2)

"BLD",8918,"KRN","B",870,870)

"BLD",8918,"KRN","B",8989.51,8989.51)

"BLD",8918,"KRN","B",8989.52,8989.52)

"BLD",8918,"KRN","B",8994,8994)

"BLD",8918,"QUES",0)
^9.62^^
"BLD",8918,"REQB",0)
^9.611^1^1
"BLD",8918,"REQB",1,0)
PSB*3.0*70^2
"BLD",8918,"REQB","B","PSB*3.0*70",1)

"KRN",101,6063,-1)
0^1
"KRN",101,6063,0)
PSB EVSEND VPR^MEDICATION ADMINISTRATION EVENTS^^X^^^^^^^^
"KRN",101,6063,1,0)
^101.06^2^2^3140415^^
"KRN",101,6063,1,1,0)
The purpose of this protocol is to send notification of events that modify
"KRN",101,6063,1,2,0)
the BCMA MEDICATION LOG file (#53.79).
"KRN",101,6063,10,0)
^101.01PA^2^1
"KRN",101,6063,99)
63349,2443
"MBREQ")
1
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",533,-1)
1^1
"PKG",533,0)
BAR CODE MED ADMIN^PSB^BAR CODE MEDICATION ADMINISTRATION
"PKG",533,20,0)
^9.402P^^
"PKG",533,22,0)
^9.49I^1^1
"PKG",533,22,1,0)
3.0^3040224^3040329^10000000020
"PKG",533,22,1,"PAH",1,0)
79^3140611^1085
"PKG",533,22,1,"PAH",1,1,0)
^^1^1^3140611
"PKG",533,22,1,"PAH",1,1,1,0)
See patch description for details.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","PSBML")
0^1^B125339367
"RTN","PSBML",1,0)
PSBML ;BIRMINGHAM/EFC-BCMA MED LOG FUNCTIONS ;10/23/12 12:14pm
"RTN","PSBML",2,0)
 ;;3.0;BAR CODE MED ADMIN;**6,3,4,9,11,13,25,45,33,52,70,79**;Mar 2004;Build 59
"RTN","PSBML",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PSBML",4,0)
 ; Reference/IA
"RTN","PSBML",5,0)
 ; ^DPT/10035
"RTN","PSBML",6,0)
 ; DIC(42/10039
"RTN","PSBML",7,0)
 ; DIC(42/2440
"RTN","PSBML",8,0)
 ; File 200/10060
"RTN","PSBML",9,0)
 ; EN^PSJBCMA3/3320
"RTN","PSBML",10,0)
 ; $$SITE^VASITE/10112
"RTN","PSBML",11,0)
 ; ^XUSEC(/10076
"RTN","PSBML",12,0)
 ;
"RTN","PSBML",13,0)
 ;*70 - store clinic name to admin location if exists.
"RTN","PSBML",14,0)
 ;    - add witness duz, dt/tm for high risk/alert drug, Order level
"RTN","PSBML",15,0)
 ;      HR code, and a witnesssed y/n flag to MEDLOG file.
"RTN","PSBML",16,0)
 ;
"RTN","PSBML",17,0)
RPC(RESULTS,PSBHDR,PSBREC) ;BCMA MedLog Filing
"RTN","PSBML",18,0)
 S PSBEDTFL=0
"RTN","PSBML",19,0)
 N PSBORD,PSBTRAN,PSBFDA,PSBMES ;Add PSBMES variable for PSB*3*52
"RTN","PSBML",20,0)
 N PSBCLIN,PSBWITN,PSBWITCM,PSBWITHR,PSBWITFL,LOC                 ;*70
"RTN","PSBML",21,0)
 K PSBIEN,PSBHL7
"RTN","PSBML",22,0)
 S PSBIEN=$P(PSBHDR,U,1)
"RTN","PSBML",23,0)
 S PSBTRAN=$P(PSBHDR,U,2),PSBHL7=PSBTRAN
"RTN","PSBML",24,0)
 S PSBINST=$P($G(PSBHDR),U,3)
"RTN","PSBML",25,0)
 ;*70 witness fields
"RTN","PSBML",26,0)
 S PSBWITN=+$P(PSBHDR,U,4)                   ;init witness duz var
"RTN","PSBML",27,0)
 S PSBWITCM=$P(PSBHDR,U,5)                   ;init witness comment
"RTN","PSBML",28,0)
 S PSBWITHR=+$P(PSBHDR,U,6)                  ;init witn HR order level
"RTN","PSBML",29,0)
 S PSBWITFL=$S(PSBWITN:1,1:0)             ;init witnessed?
"RTN","PSBML",30,0)
 I PSBWITN="",PSBWITHR=3 D  Q
"RTN","PSBML",31,0)
 .S RESULTS(0)=1
"RTN","PSBML",32,0)
 .S RESULTS(1)="-1^A Witness is required, however Witness information was null."
"RTN","PSBML",33,0)
 ;PSB*3*45 We should be recording the first entry in the audit log.
"RTN","PSBML",34,0)
 ;S PSBAUDIT=$S(PSBIEN="+1":0,1:1)
"RTN","PSBML",35,0)
 S PSBAUDIT=1
"RTN","PSBML",36,0)
 D NOW^%DTC S PSBNOW=%
"RTN","PSBML",37,0)
 I $D(^XUSEC("PSB STUDENT",DUZ)),PSBINST="" S RESULTS(0)=1,RESULTS(1)="-1^Instructor not present" Q
"RTN","PSBML",38,0)
 I $D(^XUSEC("PSB STUDENT",DUZ)),'$D(^XUSEC("PSB INSTRUCTOR",PSBINST)) S RESULTS(0)=1,RESULTS(1)="-1^Instructor doesn't have authority" Q
"RTN","PSBML",39,0)
 S PSBINST(0)=$$GET1^DIQ(200,PSBINST_",",.01)
"RTN","PSBML",40,0)
 I PSBTRAN="ADD COMMENT" D COMMENT^PSBML1 Q
"RTN","PSBML",41,0)
 I PSBTRAN="PRN EFFECTIVENESS" D PRN^PSBML1 Q
"RTN","PSBML",42,0)
 ;
"RTN","PSBML",43,0)
 ;update medlog rec
"RTN","PSBML",44,0)
UPD I PSBTRAN="UPDATE STATUS" D  Q
"RTN","PSBML",45,0)
 .I '$D(^PSB(53.79,PSBIEN)) D  Q
"RTN","PSBML",46,0)
 ..S RESULTS(0)=1
"RTN","PSBML",47,0)
 ..S RESULTS(1)="-1^Administration is at an UNKNOWN STATUS"
"RTN","PSBML",48,0)
 .D UPDATED^PSBML2
"RTN","PSBML",49,0)
 ;
"RTN","PSBML",50,0)
 ;edit Medlog rec
"RTN","PSBML",51,0)
 I PSBTRAN="EDIT" D EDIT^PSBML2 Q
"RTN","PSBML",52,0)
 ;
"RTN","PSBML",53,0)
 ;SAGG
"RTN","PSBML",54,0)
 N PSBWARD S PSBWARD=$G(^DPT(+$G(PSBREC(0)),.1),"UNKNOWN"),^PSB("SAGG",PSBWARD,DT)=$G(^PSB("SAGG",PSBWARD,DT))+1
"RTN","PSBML",55,0)
 ;*70 save clinic name if exists before manipulating PSBREC(1) param
"RTN","PSBML",56,0)
 S PSBCLIN=$P(PSBREC(1),U,2) I PSBCLIN="" S PSBCLIN=$S($G(PSBCLIEN):$P($G(^SC(+PSBCLIEN,0)),"^"),($G(PSBCLORD)]""):PSBCLORD,1:"")
"RTN","PSBML",57,0)
 S PSBREC(1)=$P(PSBREC(1),U)
"RTN","PSBML",58,0)
 ;
"RTN","PSBML",59,0)
 ;pre-existing psbrec(1) manipulation logic to *70
"RTN","PSBML",60,0)
 I PSBREC(1)?1U1";"1.6N S PSBREC(1)=$P(PSBREC(1),";",1)_$E(PSBREC(1))
"RTN","PSBML",61,0)
 D PSJ1^PSBVT(PSBREC(0),$P(PSBREC(1),";",2)_$P(PSBREC(1),";",1))
"RTN","PSBML",62,0)
 S PSBTAB=$P(PSBREC(9),U,1),PSBUID=$P(PSBREC(9),U,2)
"RTN","PSBML",63,0)
MEDP D:PSBTRAN="MEDPASS"
"RTN","PSBML",64,0)
 .I (PSBDOSEF["PATCH"),(PSBREC(3)="G") D  Q:+$G(RESULTS(1))<0
"RTN","PSBML",65,0)
 ..S PSBXDT="" F  S PSBXDT=$O(^PSB(53.79,"AORDX",PSBDFN,PSBONX,PSBXDT)) Q:PSBXDT=""  D  Q:+$G(RESULTS(1))<0
"RTN","PSBML",66,0)
 ...S PSBYZ="" F  S PSBYZ=$O(^PSB(53.79,"AORDX",PSBDFN,PSBONX,PSBXDT,PSBYZ)) Q:'PSBYZ  I ("G"[$$GET1^DIQ(53.79,PSBYZ,.09,"I")) D  Q
"RTN","PSBML",67,0)
 ....S:($$GET1^DIQ(53.79,PSBYZ,.09,"I")="G") RESULTS(0)=1,RESULTS(1)="-1^Previous Patch has not been removed. Administration canceled."
"RTN","PSBML",68,0)
 ....S:($$GET1^DIQ(53.79,PSBYZ,.09,"I")="")&(($$GET1^DIQ(53.79,PSBYZ,.07,"I")'=DUZ)&('$D(^XUSEC("PSB MANAGER",DUZ)))) RESULTS(0)=1,RESULTS(1)="-1^Patch status ""*UNKNOWN*"". Administration canceled."
"RTN","PSBML",69,0)
 .I PSBREC(7)="BCMA/CPRS Interface Entry." S PSBNOW=PSBREC(5)  ;MOB
"RTN","PSBML",70,0)
 .F X=0:1:9 S PSBREC(X)=$G(PSBREC(X))
"RTN","PSBML",71,0)
 .I PSBREC(1)?1U1";".N S PSBREC(1)=$P(PSBREC(1),";",2)_$P(PSBREC(1),";",1)
"RTN","PSBML",72,0)
 .I PSBREC(1)["V",+PSBREC(5)>0,+$P(PSBREC(5),".",2)=0,PSBIVT'["P" D NOW^%DTC S PSBREC(5)=$P(PSBREC(5),".",1)_"."_$P(%,".",2)
"RTN","PSBML",73,0)
 .I $P(PSBREC(9),U,1)="IVTAB",$P(PSBREC(9),U,2)="" S PSBUID=$$GETWSID^PSBVDLU2(PSBREC(0),PSBREC(1))
"RTN","PSBML",74,0)
 .I $P(PSBREC(9),U,1)="PBTAB",$P(PSBREC(9),U,2)="",PSBREC(1)'["U",PSBREC(3)'="M",PSBREC(3)'="R",PSBREC(3)'="H" S PSBUID=$$GETWSID^PSBVDLU2(PSBREC(0),PSBREC(1))
"RTN","PSBML",75,0)
 .;OnCal
"RTN","PSBML",76,0)
 .D:PSBREC(2)="OC"
"RTN","PSBML",77,0)
 ..S X=$O(^PSB(53.79,"AORD",PSBREC(0),PSBREC(1),"")) Q:X=""
"RTN","PSBML",78,0)
 ..S Y=$O(^PSB(53.79,"AORD",PSBREC(0),PSBREC(1),X,0))
"RTN","PSBML",79,0)
 ..I $P(^PSB(53.79,Y,0),U,9)="G"&('$$GET^XPAR("DIV","PSB ADMIN MULTIPLE ONCALL")) D ERR(1,"On-Call already given")
"RTN","PSBML",80,0)
 .;1x
"RTN","PSBML",81,0)
 .D:PSBREC(2)="O"
"RTN","PSBML",82,0)
 ..S X=$O(^PSB(53.79,"AORD",PSBREC(0),PSBREC(1),"")) Q:X=""
"RTN","PSBML",83,0)
 ..S Y=$O(^PSB(53.79,"AORD",PSBREC(0),PSBREC(1),X,0))
"RTN","PSBML",84,0)
 ..I $P(^PSB(53.79,Y,0),U,9)="G" D ERR(1,"One Time already Given")
"RTN","PSBML",85,0)
 .;PRN
"RTN","PSBML",86,0)
 .I PSBREC(2)="P",PSBREC(3)'="M",$P(PSBREC(9),U,1)'="IVTAB" D
"RTN","PSBML",87,0)
 ..I PSBREC(6)="" D ERR(1,"PRN Medications MUST Have a PRN Reason")
"RTN","PSBML",88,0)
 ..I PSBREC(5)]"" D ERR(1,"PRN Orders don't have scheduled times")
"RTN","PSBML",89,0)
 ..I PSBREC(3)'="G" D ERR(1,"PRN Orders cannot be marked NOT Given")
"RTN","PSBML",90,0)
 .;Cnt
"RTN","PSBML",91,0)
 .I PSBREC(2)="C",PSBTAB'="IVTAB" D
"RTN","PSBML",92,0)
 ..D:PSBREC(5)="" ERR(1,"Continuous Order needs admin time")
"RTN","PSBML",93,0)
 ..D:PSBREC(6)]"" ERR(1,"No PRN Reason allowed on Continuous Orders")
"RTN","PSBML",94,0)
 .I PSBREC(2)="C",$D(^PSB(53.79,"AORD",PSBREC(0),PSBREC(1),+PSBREC(5))),PSBIEN="+1" D  K PSBADMBY,PSBADMAT Q:PSBSIEN=""  Q:$P(^PSB(53.79,PSBSIEN,0),U,9)'="N"
"RTN","PSBML",95,0)
 ..S PSBSIEN=$O(^PSB(53.79,"AORD",PSBREC(0),PSBREC(1),PSBREC(5),""))
"RTN","PSBML",96,0)
 ..I PSBSIEN]"" I '(($P(^PSB(53.79,PSBSIEN,0),U,7)=DUZ)!($D(^XUSEC("PSB MANAGER",DUZ)))) S PSBSIEN=""
"RTN","PSBML",97,0)
 ..I PSBSIEN']"" S RESULTS(0)=2,RESULTS(1)="-2^Error Filing Transaction MEDPASS",RESULTS(2)="The PSB MANAGER key is required to modify this scheduled admin" Q
"RTN","PSBML",98,0)
 ..D:$P(^PSB(53.79,PSBSIEN,0),U,9)'="N"
"RTN","PSBML",99,0)
 ...K PSBINCX I $P(^PSB(53.79,PSBSIEN,0),U,9)="" S PSBINCX=PSBSIEN L +^PSB(53.79,PSBINCX):1 Q:'$T  L -^PSB(53.79,PSBINCX)
"RTN","PSBML",100,0)
 ...S Y=$P(^PSB(53.79,PSBSIEN,0),U,6) D DD^%DT S PSBADMAT=Y
"RTN","PSBML",101,0)
 ...S PSBADMBY=$$GET1^DIQ(200,$P(^PSB(53.79,PSBSIEN,0),U,7),.01,)
"RTN","PSBML",102,0)
 ...S RESULTS(0)=3,RESULTS(1)="-2^Error Filing Transaction MEDPASS"
"RTN","PSBML",103,0)
 ...S RESULTS(2)="Continuous Administration Date/Time already on file."
"RTN","PSBML",104,0)
 ...S RESULTS(3)="Administered by "_PSBADMBY_" at "_PSBADMAT_"."
"RTN","PSBML",105,0)
 ...I $D(XWB) S RESULTS(0)=RESULTS(0)+2,RESULTS(4)="                                         ",RESULTS(5)="            VDL will now be updated."
"RTN","PSBML",106,0)
 .;Non Given
"RTN","PSBML",107,0)
 .I PSBREC(3)'="G",PSBREC(3)'="M",PSBUID'["V",PSBUID'["W" D
"RTN","PSBML",108,0)
 ..I PSBREC(7)="",PSBTAB'="IVTAB" D ERR(1,"Comment needed if Not Marked Given")
"RTN","PSBML",109,0)
 ..I PSBREC(7)="",PSBTAB="IVTAB" D ERR(1,"Comment needed if Not Marked Completed")
"RTN","PSBML",110,0)
 .S:PSBREC(3)="H" PSBREC(7)="Held: "_PSBREC(7)    ;.3
"RTN","PSBML",111,0)
 .S:PSBREC(3)="R" PSBREC(7)="Refused: "_PSBREC(7) ;.3
"RTN","PSBML",112,0)
 .S:PSBREC(3)="S" PSBREC(7)="Stopped: "_PSBREC(7) ;.3
"RTN","PSBML",113,0)
 .;Valid?
"RTN","PSBML",114,0)
 .I $G(PSBSIEN)'="" I $D(^PSB(53.79,PSBSIEN,0)) I $P(^PSB(53.79,PSBSIEN,0),U,9)="N" S PSBIEN=+PSBSIEN_",",$P(PSBHDR,U)=PSBIEN,PSBTRAN="UPDATE STATUS",PSBAUDIT=1                   ;do UPDATE
"RTN","PSBML",115,0)
 .D:PSBIEN="+1"                          ;New fields only?
"RTN","PSBML",116,0)
 ..D VAL(53.79,PSBIEN,.01,"`"_PSBREC(0))           ;Patn
"RTN","PSBML",117,0)
 ..S LOC=$G(^DPT(PSBREC(0),.1))_" "_$G(^(.101))    ;Ward Room/Bed LOC
"RTN","PSBML",118,0)
 ..S:PSBCLIN]"" LOC=PSBCLIN         ;If clinic order use clin name *70
"RTN","PSBML",119,0)
 ..D VAL(53.79,PSBIEN,.02,LOC)                     ;Patn Location LOC
"RTN","PSBML",120,0)
 ..D:$G(^DPT(PSBREC(0),.1))'=""
"RTN","PSBML",121,0)
 ...S Y=$O(^DIC(42,"B",$G(^DPT(PSBREC(0),.1)),"")),Y=$$GET1^DIQ(42,Y,.015,"I"),PSBDIV=$$SITE^VASITE(DT,Y)
"RTN","PSBML",122,0)
 ...D VAL(53.79,PSBIEN,.03,"`"_$P(PSBDIV,U,1))     ;Div
"RTN","PSBML",123,0)
 ..D VAL(53.79,PSBIEN,.04,PSBNOW)                  ;Entered dt/tm
"RTN","PSBML",124,0)
 ..D VAL(53.79,PSBIEN,.05,"`"_DUZ)                 ;Entered by duz
"RTN","PSBML",125,0)
 ..D VAL(53.79,PSBIEN,.06,PSBNOW)                  ;Admin dt/tm
"RTN","PSBML",126,0)
 ..D VAL(53.79,PSBIEN,.07,"`"_DUZ)                 ;Admin By duz
"RTN","PSBML",127,0)
 ..D VAL(53.79,PSBIEN,.08,"`"_PSBREC(4))           ;Orderable Item
"RTN","PSBML",128,0)
 ..D VAL(53.79,PSBIEN,.11,PSBREC(1))               ;Ord file 55 IEN
"RTN","PSBML",129,0)
 ..D VAL(53.79,PSBIEN,.12,PSBREC(2))               ;Ord Schd Type
"RTN","PSBML",130,0)
 ..D VAL(53.79,PSBIEN,.13,PSBREC(5))               ;Schd Adm dt/tm
"RTN","PSBML",131,0)
 ..D:PSBTAB'="UDTAB" VAL(53.79,PSBIEN,.26,PSBUID)  ;IV Bag ID
"RTN","PSBML",132,0)
 ..D:PSBTAB="IVTAB" VAL(53.79,PSBIEN,.13,"")       ;Schd Admdt/tm null
"RTN","PSBML",133,0)
 ..D:PSBREC(1)?.N1"U" VAL(53.79,PSBIEN,.15,PSBDOSE)  ;UD Dosage
"RTN","PSBML",134,0)
 ..D:PSBREC(1)?.N1"V" VAL(53.79,PSBIEN,.35,PSBIFR)   ;IV Infuse Rate
"RTN","PSBML",135,0)
 ..I PSBWITHR>1,(PSBREC(3)="G")!(PSBREC(3)="I") D          ;Witness logic and Give?  *70
"RTN","PSBML",136,0)
 ...D:PSBWITN VAL(53.79,PSBIEN,.28,PSBNOW)        ;Witness dt/time
"RTN","PSBML",137,0)
 ...D:PSBWITN VAL(53.79,PSBIEN,.29,"`"_PSBWITN)   ;Witness duz
"RTN","PSBML",138,0)
 ...D:PSBWITCM]"" VAL(53.79,PSBIEN,.31,PSBWITCM)  ;Witness comment
"RTN","PSBML",139,0)
 ...D VAL(53.79,PSBIEN,.32,PSBWITHR)              ;Witness HR ord code
"RTN","PSBML",140,0)
 ...D VAL(53.79,PSBIEN,.33,PSBWITFL)              ;Witnessed? flag
"RTN","PSBML",141,0)
 .;
"RTN","PSBML",142,0)
 .;Overwrite fields below, rec already exsts
"RTN","PSBML",143,0)
 .I PSBREC(3)="G"!(PSBREC(3))="C" D                ;Gvn/Completed?
"RTN","PSBML",144,0)
 ..D VAL(53.79,PSBIEN,.06,PSBNOW)                    ;Admin dt/tm
"RTN","PSBML",145,0)
 ..D VAL(53.79,PSBIEN,.07,"`"_DUZ)                   ;Admin By duz
"RTN","PSBML",146,0)
 .D:PSBREC(8)]"" VAL(53.79,PSBIEN,.16,PSBREC(8))   ;InjctSte
"RTN","PSBML",147,0)
 .D:'$G(PSBMMEN) VAL(53.79,PSBIEN,.09,PSBREC(3))   ;AStats
"RTN","PSBML",148,0)
 .I PSBREC(6)]"" D                                 ;PRN reason?
"RTN","PSBML",149,0)
 ..D VAL(53.79,PSBIEN,.21,$P(PSBREC(6),U))           ;reason dt/tm
"RTN","PSBML",150,0)
 ..D VAL(53.79,PSBIEN,.27,$P(PSBREC(6),U,2))         ;PRN reason
"RTN","PSBML",151,0)
 .D:PSBREC(7)]""
"RTN","PSBML",152,0)
 ..D VAL(53.793,"+2,"_PSBIEN,.01,PSBREC(7))        ;Comment
"RTN","PSBML",153,0)
 ..D VAL(53.793,"+2,"_PSBIEN,.02,"`"_DUZ)          ;comnt person duz
"RTN","PSBML",154,0)
 ..D VAL(53.793,"+2,"_PSBIEN,.03,PSBNOW)           ;comnt dt/time
"RTN","PSBML",155,0)
 .;DD/SOL/ADD
"RTN","PSBML",156,0)
 .I PSBREC(3)="G"!(PSBREC(3)="I")!(PSBREC(3)="H")!(PSBREC(3)="R")!(PSBREC(3)="M") D     ;given/action stat codes?
"RTN","PSBML",157,0)
 ..I PSBTRAN="UPDATE STATUS" K ^PSB(53.79,+PSBIEN,.5),^PSB(53.79,+PSBIEN,.6),^PSB(53.79,+PSBIEN,.7)
"RTN","PSBML",158,0)
 ..F PSBCNT=10:1 Q:'$D(PSBREC(PSBCNT))  D
"RTN","PSBML",159,0)
 ...S Y=$P(PSBREC(PSBCNT),U)
"RTN","PSBML",160,0)
 ...S PSBDD=$S(Y="DD":53.795,Y="ADD":53.796,Y="SOL":53.797,1:0)
"RTN","PSBML",161,0)
 ...Q:'PSBDD
"RTN","PSBML",162,0)
 ...S PSBIENS="+"_PSBCNT_","_PSBIEN
"RTN","PSBML",163,0)
 ...D VAL(PSBDD,PSBIENS,.01,"`"_$P(PSBREC(PSBCNT),U,2))
"RTN","PSBML",164,0)
 ...D VAL(PSBDD,PSBIENS,.02,$P(PSBREC(PSBCNT),U,3))
"RTN","PSBML",165,0)
 ...D VAL(PSBDD,PSBIENS,.03,$P(PSBREC(PSBCNT),U,4))
"RTN","PSBML",166,0)
 ...D:(PSBTAB="UDTAB")!(PSBTAB="PBTAB") VAL(PSBDD,PSBIENS,.04,$E($P(PSBREC(PSBCNT),U,5),1,40))
"RTN","PSBML",167,0)
 ...D VAL(PSBDD,PSBIENS,.05,$P(PSBREC(PSBCNT),U,7))        ;HR ind *70
"RTN","PSBML",168,0)
 .;Modify Filing Transaction Medpass error message too inclde details - PSB*3*52
"RTN","PSBML",169,0)
 .I $O(RESULTS("")) D  Q
"RTN","PSBML",170,0)
 ..N PSBERR
"RTN","PSBML",171,0)
 ..I $D(PSBMES) D
"RTN","PSBML",172,0)
 ...S RESULTS(1)="-2^***Your documentation is NOT being recorded in the patient record.***",RESULTS(2)=""
"RTN","PSBML",173,0)
 ...S RESULTS(3)="Please write down the information (below) AND contact your BCMA Coordinator or IT Support for assistance:",RESULTS(4)=""
"RTN","PSBML",174,0)
 ...S RESULTS(5)="Error(s) Filing Transaction MEDPASS"
"RTN","PSBML",175,0)
 ..S PSBERR=0 F  S PSBERR=$O(PSBMES(PSBERR)) Q:PSBERR=""  D
"RTN","PSBML",176,0)
 ...S RESULTS($O(RESULTS(""),-1)+1)=PSBMES(PSBERR),RESULTS(0)=$O(RESULTS(""),-1)
"RTN","PSBML",177,0)
 .;
"RTN","PSBML",178,0)
 .D FILEIT
"RTN","PSBML",179,0)
 .;
"RTN","PSBML",180,0)
 .;PSB*3*33
"RTN","PSBML",181,0)
 .D:((PSBREC(2)="O")!($$ONE^PSJBCMA(PSBREC(0),PSBREC(1))="O"))&(PSBREC(3)="G") EXPIRE^PSBML1  ;1x exp?
"RTN","PSBML",182,0)
 .D:(PSBREC(2)="O")&(PSBREC(3)="G") EXPIRE^PSBML1  ;1x exp?
"RTN","PSBML",183,0)
 .I $P(RESULTS(0),U,1)=1,PSBTAB'="UDTAB",PSBUID]"",PSBUID'["WS" S PSBON=+PSBREC(1) D EN^PSJBCMA3(PSBREC(0),PSBON,PSBUID,PSBREC(3),PSBNOW)
"RTN","PSBML",184,0)
 Q
"RTN","PSBML",185,0)
BCBU ;HL7,NatContng
"RTN","PSBML",186,0)
 Q:+$G(RESULTS(0))'>0
"RTN","PSBML",187,0)
 N PSBIEN1 S PSBIEN1=$S($P(PSBIEN,",",2)'="":+$P(PSBIEN,",",2),$G(PSBIEN)="+1":PSBIEN(1),1:+$G(PSBIEN))
"RTN","PSBML",188,0)
 I $G(PSBIEN1)="" S RESULTS(0)=1,RESULTS(1)="-1^Contingency NOT processed" Q
"RTN","PSBML",189,0)
 I $G(PSBIEN)="+1" S PSBHL7="MEDPASS"
"RTN","PSBML",190,0)
 E  S:$G(PSBHL7)="" PSBHL7="UPDATE STATUS"
"RTN","PSBML",191,0)
 D:('$D(Y(0))!($G(Y(0))="SAVE")!($G(Y(0))="YES")) EN^PSBSVHL7(+PSBIEN1,PSBHL7),MEDL^ALPBCBU(+PSBIEN1) K PSBHL7
"RTN","PSBML",192,0)
 ;<<HDR-VDEF(frm *3)
"RTN","PSBML",193,0)
 Q
"RTN","PSBML",194,0)
VAL(PSBDD,PSBIEN,PSBFLD,PSBVAL) ;
"RTN","PSBML",195,0)
 K ^TMP("DIERR",$J),PSBRET
"RTN","PSBML",196,0)
 D VAL^DIE(PSBDD,PSBIEN,PSBFLD,"F",PSBVAL,.PSBRET,"PSBFDA")
"RTN","PSBML",197,0)
 I PSBRET="^" F X=0:0 S X=$O(^TMP("DIERR",$J,X)) Q:'X  D ERR(2,^TMP("DIERR",$J,X)_": "_$G(^(X,"TEXT",1),"**"))
"RTN","PSBML",198,0)
 K ^TMP("DIERR",$J),PSBRET
"RTN","PSBML",199,0)
 Q
"RTN","PSBML",200,0)
FILEIT ;Updt
"RTN","PSBML",201,0)
 N PSBMSG,PSBAUD
"RTN","PSBML",202,0)
 S (PSB1,PSB2)=""
"RTN","PSBML",203,0)
 D APATCH^PSBML3
"RTN","PSBML",204,0)
 D CLEAN^DILF
"RTN","PSBML",205,0)
 D RESETADM^PSBUTL
"RTN","PSBML",206,0)
 D UPDATE^DIE("","PSBFDA","PSBIEN","PSBMSG")
"RTN","PSBML",207,0)
 I '$G(PSBMMEN) S X=+PSBIEN I $F("HR",$P(^PSB(53.79,X,0),U,9))>1 F Y=.5,.6,.7 S Z=0 F  S Z=$O(^PSB(53.79,+X,Y,Z)) Q:+Z=0  S $P(^PSB(53.79,+X,Y,Z,0),U,3)=0
"RTN","PSBML",208,0)
 I $D(PSBMSG("DIERR")) S RESULTS(0)=1,RESULTS(1)="-1^"_PSBMSG("DIERR",1)_": "_PSBMSG("DIERR",1,"TEXT",1)  Q
"RTN","PSBML",209,0)
 I $G(PSB1)]"" X PSB1 I $G(PSB2)]"" X PSB2
"RTN","PSBML",210,0)
 I $D(PSBHDR) D:"NHMR"[$P(^PSB(53.79,$S($P(PSBHDR,"^",1)="+1":PSBIEN(1),1:+PSBIEN),0),U,9)
"RTN","PSBML",211,0)
 .N PSBINDX S PSBINDX=$S($P(PSBHDR,"^",1)="+1":PSBIEN(1),1:+PSBIEN)
"RTN","PSBML",212,0)
 .K ^PSB(53.79,"APATCH",$P(^PSB(53.79,PSBINDX,0),U),$P(^PSB(53.79,PSBINDX,0),U,6),PSBINDX)
"RTN","PSBML",213,0)
 S RESULTS(0)=1,RESULTS(1)="1^Data Successfully Filed^"_$S($G(PSBIEN(1))'="":$G(PSBIEN(1)),1:+$G(PSBIEN))
"RTN","PSBML",214,0)
 D BCBU  ;NatContng
"RTN","PSBML",215,0)
 D  ;
"RTN","PSBML",216,0)
 . N X,DIC
"RTN","PSBML",217,0)
 . S X="PSB EVSEND VPR",DIC=101 D EN^XQOR ;should handle all BCMA Med Log events for VPR
"RTN","PSBML",218,0)
 I $G(PSBINST,0) S PSBAUD=$S($P(PSBHDR,"^",1)="+1":PSBIEN(1),1:$P(PSBHDR,"^",1)) D AUDIT^PSBMLU(PSBAUD,"Instructor "_PSBINST(0)_" present.",PSBTRAN)
"RTN","PSBML",219,0)
 Q
"RTN","PSBML",220,0)
ERR(X,Y) ;
"RTN","PSBML",221,0)
 S X=$P("Business Logic Error^Data Validation Error",U,X)
"RTN","PSBML",222,0)
 S RESULTS($O(RESULTS(""),-1)+1)=X_": "_Y
"RTN","PSBML",223,0)
 S PSBMES($O(PSBMES(""),-1)+1)=X_": "_Y
"RTN","PSBML",224,0)
 Q
"RTN","PSBML",225,0)
COMMENT(DA,PSBCMT) ;
"RTN","PSBML",226,0)
 N PSBFDA,PSBIEN,PSBNOW
"RTN","PSBML",227,0)
 S PSBIEN="+1,"_DA_","
"RTN","PSBML",228,0)
 D NOW^%DTC S PSBNOW=%
"RTN","PSBML",229,0)
 D VAL(53.793,PSBIEN,.01,PSBCMT)
"RTN","PSBML",230,0)
 S PSBFDA(53.793,PSBIEN,.02)=DUZ
"RTN","PSBML",231,0)
 S PSBFDA(53.793,PSBIEN,.03)=PSBNOW
"RTN","PSBML",232,0)
 D FILEIT
"RTN","PSBML",233,0)
 Q
"RTN","PSBVPR")
0^2^B2149221
"RTN","PSBVPR",1,0)
PSBVPR ;SLC/JLC- BCMA-VPR UTILITIES ;11/15/12 2:40pm
"RTN","PSBVPR",2,0)
 ;;3.0;BAR CODE MED ADMIN;**79**;Mar 2004;Build 59
"RTN","PSBVPR",3,0)
 ;Per VHA Directive 2004-038 (or future revisions regarding same), this routine should not be modified.
"RTN","PSBVPR",4,0)
 ;
"RTN","PSBVPR",5,0)
 ;
"RTN","PSBVPR",6,0)
ADMIN(RESULTS,PSBVDFN,PSBORDNO,PSBVADT) ;
"RTN","PSBVPR",7,0)
 I $G(PSBVDFN)="" Q -1
"RTN","PSBVPR",8,0)
 I $G(PSBORDNO)="" Q -2
"RTN","PSBVPR",9,0)
 K ^TMP("PSB",$J) N PSBI,A,PSBA,S1,X1,X2,X
"RTN","PSBVPR",10,0)
 I '$G(PSBVADT) D NOW^%DTC S PSBVADT=%
"RTN","PSBVPR",11,0)
 D GETINFO
"RTN","PSBVPR",12,0)
 S RESULTS=$O(PSBA(PSBVADT-.0001)) I 'RESULTS S X1=PSBVADT,X2=1 D C^%DTC S PSBVADT=X D GETINFO
"RTN","PSBVPR",13,0)
 S RESULTS=$O(PSBA(PSBVADT-.0001))
"RTN","PSBVPR",14,0)
 Q
"RTN","PSBVPR",15,0)
GETINFO ;
"RTN","PSBVPR",16,0)
 I PSBORDNO?.E1"U" D RPC^PSBVDLTB(,PSBVDFN,"UDTAB",PSBVADT) M ^TMP("PSBVPR",$J)=^TMP("PSB",$J,"UDTAB")
"RTN","PSBVPR",17,0)
 I PSBORDNO?.E1"V" F PSBI="IVTAB","PBTAB" D RPC^PSBVDLTB(,PSBVDFN,PSBI,$G(PSBVADT)) M ^TMP("PSBVPR",$J)=^TMP("PSB",$J,PSBI)
"RTN","PSBVPR",18,0)
 S S1=0 F  S S1=$O(^TMP("PSBVPR",$J,S1)) Q:'S1  D
"RTN","PSBVPR",19,0)
 . S A=^TMP("PSBVPR",$J,S1) I $P(A,"^")'=PSBVDFN Q
"RTN","PSBVPR",20,0)
 . I $P(A,"^",2)'=PSBORDNO Q
"RTN","PSBVPR",21,0)
 . S PSBA($P(A,"^",14))=""
"RTN","PSBVPR",22,0)
 Q
"VER")
8.0^22.0
**INSTALL NAME**
VPR*1.0*3
"BLD",8470,0)
VPR*1.0*3^VIRTUAL PATIENT RECORD^0^3140611^y
"BLD",8470,1,0)
^9.61A^2^2^3130717^^^
"BLD",8470,1,1,0)
The Virtual Patient Record (VPR) monitors a VistA system for new data
"BLD",8470,1,2,0)
and activity, and makes that data available to a subscribing client.
"BLD",8470,4,0)
^9.64PA^100.98^7
"BLD",8470,4,100.98,0)
100.98
"BLD",8470,4,100.98,222)
n^n^f^^n^^y^o^n
"BLD",8470,4,100.98,223)

"BLD",8470,4,100.98,224)
I $P(^(0),U,3)="NTX"
"BLD",8470,4,101.41,0)
101.41
"BLD",8470,4,101.41,222)
n^n^f^^n^^y^o^n
"BLD",8470,4,101.41,224)
I $P(^(0),U)="OR GXMISC TREATMENTS"
"BLD",8470,4,560,0)
560
"BLD",8470,4,560,222)
y^y^f^^^^n
"BLD",8470,4,560.1,0)
560.1
"BLD",8470,4,560.1,222)
y^y^f^^^^n
"BLD",8470,4,560.11,0)
560.11
"BLD",8470,4,560.11,222)
y^y^f^^^^n
"BLD",8470,4,561,0)
561
"BLD",8470,4,561,222)
y^y^f^^^^n
"BLD",8470,4,561.2,0)
561.2
"BLD",8470,4,561.2,222)
y^y^f
"BLD",8470,4,"B",100.98,100.98)

"BLD",8470,4,"B",101.41,101.41)

"BLD",8470,4,"B",560,560)

"BLD",8470,4,"B",560.1,560.1)

"BLD",8470,4,"B",560.11,560.11)

"BLD",8470,4,"B",561,561)

"BLD",8470,4,"B",561.2,561.2)

"BLD",8470,6.3)
283
"BLD",8470,"ABPKG")
n
"BLD",8470,"INI")
PRE^VPRP3I
"BLD",8470,"INIT")
POST^VPRP3I
"BLD",8470,"KRN",0)
^9.67PA^779.2^20
"BLD",8470,"KRN",.4,0)
.4
"BLD",8470,"KRN",.401,0)
.401
"BLD",8470,"KRN",.402,0)
.402
"BLD",8470,"KRN",.403,0)
.403
"BLD",8470,"KRN",.5,0)
.5
"BLD",8470,"KRN",.84,0)
.84
"BLD",8470,"KRN",3.6,0)
3.6
"BLD",8470,"KRN",3.8,0)
3.8
"BLD",8470,"KRN",9.2,0)
9.2
"BLD",8470,"KRN",9.8,0)
9.8
"BLD",8470,"KRN",9.8,"NM",0)
^9.68A^103^75
"BLD",8470,"KRN",9.8,"NM",1,0)
VPRIDX^^0^B14476451
"BLD",8470,"KRN",9.8,"NM",2,0)
VPREVNT^^0^B104223314
"BLD",8470,"KRN",9.8,"NM",3,0)
VPRPATS^^0^B44568818
"BLD",8470,"KRN",9.8,"NM",4,0)
VPRSR^^0^B406288
"BLD",8470,"KRN",9.8,"NM",5,0)
VPRHTTP^^0^B14174140
"BLD",8470,"KRN",9.8,"NM",6,0)
VPRCORD^^0^B7459309
"BLD",8470,"KRN",9.8,"NM",7,0)
VPRCORD1^^0^B195234236
"BLD",8470,"KRN",9.8,"NM",8,0)
VPRCORD2^^0^B67716889
"BLD",8470,"KRN",9.8,"NM",9,0)
VPRCPAT^^0^B18789518
"BLD",8470,"KRN",9.8,"NM",10,0)
VPRCPAT1^^0^B7071755
"BLD",8470,"KRN",9.8,"NM",11,0)
VPRPANEL^^0^B9307129
"BLD",8470,"KRN",9.8,"NM",12,0)
VPRFPTC^^0^B14576966
"BLD",8470,"KRN",9.8,"NM",13,0)
VPRROS2^^0^B106516600
"BLD",8470,"KRN",9.8,"NM",14,0)
VPRROS3^^0^B86684006
"BLD",8470,"KRN",9.8,"NM",15,0)
VPRROS4^^0^B91302550
"BLD",8470,"KRN",9.8,"NM",16,0)
VPRROS5^^0^B9679013
"BLD",8470,"KRN",9.8,"NM",18,0)
VPRPRODC^^0^B2553308
"BLD",8470,"KRN",9.8,"NM",19,0)
VPRCRPC^^0^B13037791
"BLD",8470,"KRN",9.8,"NM",20,0)
VPRCRPC1^^0^B115158851
"BLD",8470,"KRN",9.8,"NM",43,0)
VPRDX^^1^
"BLD",8470,"KRN",9.8,"NM",45,0)
VPRCORD3^^0^B151371865
"BLD",8470,"KRN",9.8,"NM",46,0)
VPRCORD4^^0^B140128091
"BLD",8470,"KRN",9.8,"NM",47,0)
VPRCPRS^^0^B4945756
"BLD",8470,"KRN",9.8,"NM",49,0)
VPRDJ04E^^0^B10170703
"BLD",8470,"KRN",9.8,"NM",50,0)
VPRDJ1^^0^B18149314
"BLD",8470,"KRN",9.8,"NM",51,0)
VPRDJ2^^0^B21100510
"BLD",8470,"KRN",9.8,"NM",52,0)
VPRDJX^^0^B36169855
"BLD",8470,"KRN",9.8,"NM",53,0)
VPREASU^^0^B59801408
"BLD",8470,"KRN",9.8,"NM",54,0)
VPREF^^0^B160851666
"BLD",8470,"KRN",9.8,"NM",55,0)
VPREFX^^0^B8552882
"BLD",8470,"KRN",9.8,"NM",56,0)
VPRENSZ^^0^B68594142
"BLD",8470,"KRN",9.8,"NM",57,0)
VPRENSZ1^^0^B10686788
"BLD",8470,"KRN",9.8,"NM",58,0)
VPRMDUTL^^0^B50949812
"BLD",8470,"KRN",9.8,"NM",59,0)
VPRPARAM^^0^B15436113
"BLD",8470,"KRN",9.8,"NM",60,0)
VPRPXRM^^0^B12244143
"BLD",8470,"KRN",9.8,"NM",61,0)
VPRROS6^^0^B26492527
"BLD",8470,"KRN",9.8,"NM",62,0)
VPRROS7^^0^B23838606
"BLD",8470,"KRN",9.8,"NM",63,0)
VPRTRPC^^0^B3739499
"BLD",8470,"KRN",9.8,"NM",64,0)
VPRTRPC1^^0^B41518784
"BLD",8470,"KRN",9.8,"NM",65,0)
VPRDJ09M^^0^B10204859
"BLD",8470,"KRN",9.8,"NM",66,0)
VPRYFRP^^0^B93175404
"BLD",8470,"KRN",9.8,"NM",67,0)
VPRYPAR^^0^B3971880
"BLD",8470,"KRN",9.8,"NM",68,0)
VPRDJ^^0^B33552080
"BLD",8470,"KRN",9.8,"NM",70,0)
VPRDJ00^^0^B82191194
"BLD",8470,"KRN",9.8,"NM",71,0)
VPRDJ01^^0^B41209021
"BLD",8470,"KRN",9.8,"NM",72,0)
VPRDJ02^^0^B65003415
"BLD",8470,"KRN",9.8,"NM",73,0)
VPRDJ03^^0^B54346353
"BLD",8470,"KRN",9.8,"NM",74,0)
VPRDJ04^^0^B48300621
"BLD",8470,"KRN",9.8,"NM",75,0)
VPRDJ05^^0^B78637701
"BLD",8470,"KRN",9.8,"NM",77,0)
VPRDJ06^^0^B58927484
"BLD",8470,"KRN",9.8,"NM",78,0)
VPRDJ07^^0^B21890653
"BLD",8470,"KRN",9.8,"NM",79,0)
VPRDJ08^^0^B69321777
"BLD",8470,"KRN",9.8,"NM",80,0)
VPRDJ09^^0^B39174048
"BLD",8470,"KRN",9.8,"NM",81,0)
VPRDJ04A^^0^B36007346
"BLD",8470,"KRN",9.8,"NM",82,0)
VPRDJ08A^^0^B44517876
"BLD",8470,"KRN",9.8,"NM",83,0)
VPRUPD^^0^B20368971
"BLD",8470,"KRN",9.8,"NM",84,0)
VPRELAB^^0^B5640555
"BLD",8470,"KRN",9.8,"NM",85,0)
VPRDJFS^^0^B54169565
"BLD",8470,"KRN",9.8,"NM",86,0)
VPRDJFSG^^0^B97049334
"BLD",8470,"KRN",9.8,"NM",87,0)
VPRDJFSP^^0^B140822334
"BLD",8470,"KRN",9.8,"NM",88,0)
VPRDJFST^^0^B45475446
"BLD",8470,"KRN",9.8,"NM",89,0)
VPREFSG^^0^B7186739
"BLD",8470,"KRN",9.8,"NM",90,0)
VPREFSP^^0^B44858817
"BLD",8470,"KRN",9.8,"NM",91,0)
VPREFST^^0^B5375002
"BLD",8470,"KRN",9.8,"NM",92,0)
VPRCAC^^0^B93748801
"BLD",8470,"KRN",9.8,"NM",93,0)
VPRUTILS^^0^B18659956
"BLD",8470,"KRN",9.8,"NM",94,0)
VPRJSON^^0^B11235996
"BLD",8470,"KRN",9.8,"NM",95,0)
VPRJSOND^^0^B70232279
"BLD",8470,"KRN",9.8,"NM",96,0)
VPRJSONE^^0^B24349845
"BLD",8470,"KRN",9.8,"NM",97,0)
VPREHL7^^0^B3241775
"BLD",8470,"KRN",9.8,"NM",99,0)
VPRDJFSM^^0^B49639419
"BLD",8470,"KRN",9.8,"NM",100,0)
VPRDJ0^^0^B87535759
"BLD",8470,"KRN",9.8,"NM",101,0)
VPRDJFSD^^0^B4802393
"BLD",8470,"KRN",9.8,"NM",102,0)
VPRYCSI^^0^B16364707
"BLD",8470,"KRN",9.8,"NM",103,0)
VPRYFRP1^^0^B46398226
"BLD",8470,"KRN",9.8,"NM","B","VPRCAC",92)

"BLD",8470,"KRN",9.8,"NM","B","VPRCORD",6)

"BLD",8470,"KRN",9.8,"NM","B","VPRCORD1",7)

"BLD",8470,"KRN",9.8,"NM","B","VPRCORD2",8)

"BLD",8470,"KRN",9.8,"NM","B","VPRCORD3",45)

"BLD",8470,"KRN",9.8,"NM","B","VPRCORD4",46)

"BLD",8470,"KRN",9.8,"NM","B","VPRCPAT",9)

"BLD",8470,"KRN",9.8,"NM","B","VPRCPAT1",10)

"BLD",8470,"KRN",9.8,"NM","B","VPRCPRS",47)

"BLD",8470,"KRN",9.8,"NM","B","VPRCRPC",19)

"BLD",8470,"KRN",9.8,"NM","B","VPRCRPC1",20)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ",68)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ0",100)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ00",70)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ01",71)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ02",72)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ03",73)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ04",74)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ04A",81)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ04E",49)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ05",75)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ06",77)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ07",78)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ08",79)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ08A",82)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ09",80)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ09M",65)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ1",50)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJ2",51)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJFS",85)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJFSD",101)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJFSG",86)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJFSM",99)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJFSP",87)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJFST",88)

"BLD",8470,"KRN",9.8,"NM","B","VPRDJX",52)

"BLD",8470,"KRN",9.8,"NM","B","VPRDX",43)

"BLD",8470,"KRN",9.8,"NM","B","VPREASU",53)

"BLD",8470,"KRN",9.8,"NM","B","VPREF",54)

"BLD",8470,"KRN",9.8,"NM","B","VPREFSG",89)

"BLD",8470,"KRN",9.8,"NM","B","VPREFSP",90)

"BLD",8470,"KRN",9.8,"NM","B","VPREFST",91)

"BLD",8470,"KRN",9.8,"NM","B","VPREFX",55)

"BLD",8470,"KRN",9.8,"NM","B","VPREHL7",97)

"BLD",8470,"KRN",9.8,"NM","B","VPRELAB",84)

"BLD",8470,"KRN",9.8,"NM","B","VPRENSZ",56)

"BLD",8470,"KRN",9.8,"NM","B","VPRENSZ1",57)

"BLD",8470,"KRN",9.8,"NM","B","VPREVNT",2)

"BLD",8470,"KRN",9.8,"NM","B","VPRFPTC",12)

"BLD",8470,"KRN",9.8,"NM","B","VPRHTTP",5)

"BLD",8470,"KRN",9.8,"NM","B","VPRIDX",1)

"BLD",8470,"KRN",9.8,"NM","B","VPRJSON",94)

"BLD",8470,"KRN",9.8,"NM","B","VPRJSOND",95)

"BLD",8470,"KRN",9.8,"NM","B","VPRJSONE",96)

"BLD",8470,"KRN",9.8,"NM","B","VPRMDUTL",58)

"BLD",8470,"KRN",9.8,"NM","B","VPRPANEL",11)

"BLD",8470,"KRN",9.8,"NM","B","VPRPARAM",59)

"BLD",8470,"KRN",9.8,"NM","B","VPRPATS",3)

"BLD",8470,"KRN",9.8,"NM","B","VPRPRODC",18)

"BLD",8470,"KRN",9.8,"NM","B","VPRPXRM",60)

"BLD",8470,"KRN",9.8,"NM","B","VPRROS2",13)

"BLD",8470,"KRN",9.8,"NM","B","VPRROS3",14)

"BLD",8470,"KRN",9.8,"NM","B","VPRROS4",15)

"BLD",8470,"KRN",9.8,"NM","B","VPRROS5",16)

"BLD",8470,"KRN",9.8,"NM","B","VPRROS6",61)

"BLD",8470,"KRN",9.8,"NM","B","VPRROS7",62)

"BLD",8470,"KRN",9.8,"NM","B","VPRSR",4)

"BLD",8470,"KRN",9.8,"NM","B","VPRTRPC",63)

"BLD",8470,"KRN",9.8,"NM","B","VPRTRPC1",64)

"BLD",8470,"KRN",9.8,"NM","B","VPRUPD",83)

"BLD",8470,"KRN",9.8,"NM","B","VPRUTILS",93)

"BLD",8470,"KRN",9.8,"NM","B","VPRYCSI",102)

"BLD",8470,"KRN",9.8,"NM","B","VPRYFRP",66)

"BLD",8470,"KRN",9.8,"NM","B","VPRYFRP1",103)

"BLD",8470,"KRN",9.8,"NM","B","VPRYPAR",67)

"BLD",8470,"KRN",19,0)
19
"BLD",8470,"KRN",19,"NM",0)
^9.68A^15^15
"BLD",8470,"KRN",19,"NM",1,0)
VPR APPOINTMENTS^^0
"BLD",8470,"KRN",19,"NM",2,0)
VPR PATIENT DATA MONITOR^^0
"BLD",8470,"KRN",19,"NM",3,0)
VPR UI CONTEXT^^0
"BLD",8470,"KRN",19,"NM",4,0)
VPR SYNCHRONIZATION CONTEXT^^0
"BLD",8470,"KRN",19,"NM",5,0)
VPR APPLICATION PROXY^^0
"BLD",8470,"KRN",19,"NM",6,0)
VPR XU EVENTS^^0
"BLD",8470,"KRN",19,"NM",7,0)
XU USER ADD^^2
"BLD",8470,"KRN",19,"NM",8,0)
XU USER CHANGE^^2
"BLD",8470,"KRN",19,"NM",9,0)
XU USER TERMINATE^^2
"BLD",8470,"KRN",19,"NM",10,0)
VPRM ADD HMP USER^^0
"BLD",8470,"KRN",19,"NM",11,0)
VPRM EMERGENCY STOP^^0
"BLD",8470,"KRN",19,"NM",12,0)
VPRM EXTRACT MONITOR^^0
"BLD",8470,"KRN",19,"NM",13,0)
VPRM ADD HMP PATIENT^^0
"BLD",8470,"KRN",19,"NM",14,0)
VPRMGR^^0
"BLD",8470,"KRN",19,"NM",15,0)
VPRM RESTART FRESHNESS^^0
"BLD",8470,"KRN",19,"NM","B","VPR APPLICATION PROXY",5)

"BLD",8470,"KRN",19,"NM","B","VPR APPOINTMENTS",1)

"BLD",8470,"KRN",19,"NM","B","VPR PATIENT DATA MONITOR",2)

"BLD",8470,"KRN",19,"NM","B","VPR SYNCHRONIZATION CONTEXT",4)

"BLD",8470,"KRN",19,"NM","B","VPR UI CONTEXT",3)

"BLD",8470,"KRN",19,"NM","B","VPR XU EVENTS",6)

"BLD",8470,"KRN",19,"NM","B","VPRM ADD HMP PATIENT",13)

"BLD",8470,"KRN",19,"NM","B","VPRM ADD HMP USER",10)

"BLD",8470,"KRN",19,"NM","B","VPRM EMERGENCY STOP",11)

"BLD",8470,"KRN",19,"NM","B","VPRM EXTRACT MONITOR",12)

"BLD",8470,"KRN",19,"NM","B","VPRM RESTART FRESHNESS",15)

"BLD",8470,"KRN",19,"NM","B","VPRMGR",14)

"BLD",8470,"KRN",19,"NM","B","XU USER ADD",7)

"BLD",8470,"KRN",19,"NM","B","XU USER CHANGE",8)

"BLD",8470,"KRN",19,"NM","B","XU USER TERMINATE",9)

"BLD",8470,"KRN",19.1,0)
19.1
"BLD",8470,"KRN",19.1,"NM",0)
^9.68A^2^2
"BLD",8470,"KRN",19.1,"NM",1,0)
VPR EXPERIMENTAL^^0
"BLD",8470,"KRN",19.1,"NM",2,0)
VPR ADMIN^^0
"BLD",8470,"KRN",19.1,"NM","B","VPR ADMIN",2)

"BLD",8470,"KRN",19.1,"NM","B","VPR EXPERIMENTAL",1)

"BLD",8470,"KRN",101,0)
101
"BLD",8470,"KRN",101,"NM",0)
^9.68A^40^35
"BLD",8470,"KRN",101,"NM",1,0)
VPR APPT EVENTS^^0
"BLD",8470,"KRN",101,"NM",2,0)
VPR DG UPDATES^^0
"BLD",8470,"KRN",101,"NM",3,0)
VPR INPT EVENTS^^0
"BLD",8470,"KRN",101,"NM",4,0)
VPR PCE EVENTS^^0
"BLD",8470,"KRN",101,"NM",5,0)
VPR XQOR EVENTS^^0
"BLD",8470,"KRN",101,"NM",7,0)
DG FIELD MONITOR^^2
"BLD",8470,"KRN",101,"NM",8,0)
DGPM MOVEMENT EVENTS^^2
"BLD",8470,"KRN",101,"NM",9,0)
LR7O CH EVSEND OR^^2
"BLD",8470,"KRN",101,"NM",10,0)
PS EVSEND OR^^2
"BLD",8470,"KRN",101,"NM",11,0)
PXK VISIT DATA EVENT^^2
"BLD",8470,"KRN",101,"NM",12,0)
RA EVSEND OR^^2
"BLD",8470,"KRN",101,"NM",13,0)
SDAM APPOINTMENT EVENTS^^2
"BLD",8470,"KRN",101,"NM",14,0)
VPR GMRA EVENTS^^0
"BLD",8470,"KRN",101,"NM",15,0)
GMRA ENTERED IN ERROR^^2
"BLD",8470,"KRN",101,"NM",16,0)
GMRA SIGN-OFF ON DATA^^2
"BLD",8470,"KRN",101,"NM",17,0)
GMRC EVSEND OR^^2
"BLD",8470,"KRN",101,"NM",20,0)
OR EVSEND GMRC^^2
"BLD",8470,"KRN",101,"NM",23,0)
OR EVSEND LRCH^^2
"BLD",8470,"KRN",101,"NM",24,0)
OR EVSEND ORG^^2
"BLD",8470,"KRN",101,"NM",25,0)
OR EVSEND PS^^2
"BLD",8470,"KRN",101,"NM",26,0)
OR EVSEND RA^^2
"BLD",8470,"KRN",101,"NM",27,0)
GMPL EVENT^^2
"BLD",8470,"KRN",101,"NM",28,0)
VPR GMPL EVENT^^0
"BLD",8470,"KRN",101,"NM",29,0)
VPR NA EVENTS^^0
"BLD",8470,"KRN",101,"NM",30,0)
MDC OBSERVATION UPDATE^^2
"BLD",8470,"KRN",101,"NM",31,0)
OR EVSEND FH^^2
"BLD",8470,"KRN",101,"NM",32,0)
VPR MDC EVENT^^0
"BLD",8470,"KRN",101,"NM",33,0)
FH EVSEND OR^^2
"BLD",8470,"KRN",101,"NM",34,0)
OR EVSEND VPR^^2
"BLD",8470,"KRN",101,"NM",35,0)
VPR ADT-A04 CLIENT^^0
"BLD",8470,"KRN",101,"NM",36,0)
VAFC ADT-A04 SERVER^^2
"BLD",8470,"KRN",101,"NM",37,0)
VPR PSB EVENTS^^0
"BLD",8470,"KRN",101,"NM",38,0)
PSB EVSEND VPR^^2
"BLD",8470,"KRN",101,"NM",39,0)
VPR ADT-A08 CLIENT^^0
"BLD",8470,"KRN",101,"NM",40,0)
VAFC ADT-A08 SERVER^^2
"BLD",8470,"KRN",101,"NM","B","DG FIELD MONITOR",7)

"BLD",8470,"KRN",101,"NM","B","DGPM MOVEMENT EVENTS",8)

"BLD",8470,"KRN",101,"NM","B","FH EVSEND OR",33)

"BLD",8470,"KRN",101,"NM","B","GMPL EVENT",27)

"BLD",8470,"KRN",101,"NM","B","GMRA ENTERED IN ERROR",15)

"BLD",8470,"KRN",101,"NM","B","GMRA SIGN-OFF ON DATA",16)

"BLD",8470,"KRN",101,"NM","B","GMRC EVSEND OR",17)

"BLD",8470,"KRN",101,"NM","B","LR7O CH EVSEND OR",9)

"BLD",8470,"KRN",101,"NM","B","MDC OBSERVATION UPDATE",30)

"BLD",8470,"KRN",101,"NM","B","OR EVSEND FH",31)

"BLD",8470,"KRN",101,"NM","B","OR EVSEND GMRC",20)

"BLD",8470,"KRN",101,"NM","B","OR EVSEND LRCH",23)

"BLD",8470,"KRN",101,"NM","B","OR EVSEND ORG",24)

"BLD",8470,"KRN",101,"NM","B","OR EVSEND PS",25)

"BLD",8470,"KRN",101,"NM","B","OR EVSEND RA",26)

"BLD",8470,"KRN",101,"NM","B","OR EVSEND VPR",34)

"BLD",8470,"KRN",101,"NM","B","PS EVSEND OR",10)

"BLD",8470,"KRN",101,"NM","B","PSB EVSEND VPR",38)

"BLD",8470,"KRN",101,"NM","B","PXK VISIT DATA EVENT",11)

"BLD",8470,"KRN",101,"NM","B","RA EVSEND OR",12)

"BLD",8470,"KRN",101,"NM","B","SDAM APPOINTMENT EVENTS",13)

"BLD",8470,"KRN",101,"NM","B","VAFC ADT-A04 SERVER",36)

"BLD",8470,"KRN",101,"NM","B","VAFC ADT-A08 SERVER",40)

"BLD",8470,"KRN",101,"NM","B","VPR ADT-A04 CLIENT",35)

"BLD",8470,"KRN",101,"NM","B","VPR ADT-A08 CLIENT",39)

"BLD",8470,"KRN",101,"NM","B","VPR APPT EVENTS",1)

"BLD",8470,"KRN",101,"NM","B","VPR DG UPDATES",2)

"BLD",8470,"KRN",101,"NM","B","VPR GMPL EVENT",28)

"BLD",8470,"KRN",101,"NM","B","VPR GMRA EVENTS",14)

"BLD",8470,"KRN",101,"NM","B","VPR INPT EVENTS",3)

"BLD",8470,"KRN",101,"NM","B","VPR MDC EVENT",32)

"BLD",8470,"KRN",101,"NM","B","VPR NA EVENTS",29)

"BLD",8470,"KRN",101,"NM","B","VPR PCE EVENTS",4)

"BLD",8470,"KRN",101,"NM","B","VPR PSB EVENTS",37)

"BLD",8470,"KRN",101,"NM","B","VPR XQOR EVENTS",5)

"BLD",8470,"KRN",409.61,0)
409.61
"BLD",8470,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",8470,"KRN",771,0)
771
"BLD",8470,"KRN",771,"NM",0)
^9.68A^1^1
"BLD",8470,"KRN",771,"NM",1,0)
VPR HL7^^0
"BLD",8470,"KRN",771,"NM","B","VPR HL7",1)

"BLD",8470,"KRN",779.2,0)
779.2
"BLD",8470,"KRN",870,0)
870
"BLD",8470,"KRN",8989.51,0)
8989.51
"BLD",8470,"KRN",8989.51,"NM",0)
^9.68A^4^4
"BLD",8470,"KRN",8989.51,"NM",1,0)
VPR LOCATIONS^^0
"BLD",8470,"KRN",8989.51,"NM",2,0)
VPR TASK WAIT TIME^^0
"BLD",8470,"KRN",8989.51,"NM",3,0)
VPR PARAMETERS^^0
"BLD",8470,"KRN",8989.51,"NM",4,0)
VPR CPRS PATH^^0
"BLD",8470,"KRN",8989.51,"NM","B","VPR CPRS PATH",4)

"BLD",8470,"KRN",8989.51,"NM","B","VPR LOCATIONS",1)

"BLD",8470,"KRN",8989.51,"NM","B","VPR PARAMETERS",3)

"BLD",8470,"KRN",8989.51,"NM","B","VPR TASK WAIT TIME",2)

"BLD",8470,"KRN",8989.52,0)
8989.52
"BLD",8470,"KRN",8994,0)
8994
"BLD",8470,"KRN",8994,"NM",0)
^9.68A^28^27
"BLD",8470,"KRN",8994,"NM",1,0)
VPR APPOINTMENTS^^0
"BLD",8470,"KRN",8994,"NM",2,0)
VPR INPATIENTS^^0
"BLD",8470,"KRN",8994,"NM",3,0)
VPR SUBSCRIBE^^0
"BLD",8470,"KRN",8994,"NM",4,0)
VPRCORD RPC^^0
"BLD",8470,"KRN",8994,"NM",5,0)
VPRCPAT RPC^^0
"BLD",8470,"KRN",8994,"NM",7,0)
VPRFPTC CHKS^^0
"BLD",8470,"KRN",8994,"NM",8,0)
VPRFPTC LOG^^0
"BLD",8470,"KRN",8994,"NM",9,0)
VPR ROSTER PATIENTS^^0
"BLD",8470,"KRN",8994,"NM",10,0)
VPR ROSTERS^^0
"BLD",8470,"KRN",8994,"NM",11,0)
VPR UPDATE ROSTER^^0
"BLD",8470,"KRN",8994,"NM",12,0)
VPR PREVIEW ROSTER^^0
"BLD",8470,"KRN",8994,"NM",13,0)
VPR GET SOURCE^^0
"BLD",8470,"KRN",8994,"NM",14,0)
VPR DELETE ROSTER^^0
"BLD",8470,"KRN",8994,"NM",15,0)
VPRCRPC RPC^^0
"BLD",8470,"KRN",8994,"NM",16,0)
VPR DELETE OBJECT^^0
"BLD",8470,"KRN",8994,"NM",17,0)
VPR GET OBJECT^^0
"BLD",8470,"KRN",8994,"NM",18,0)
VPR GET OPERATIONAL DATA^^0
"BLD",8470,"KRN",8994,"NM",19,0)
VPR GET ROSTER LIST^^0
"BLD",8470,"KRN",8994,"NM",20,0)
VPR PUT OBJECT^^0
"BLD",8470,"KRN",8994,"NM",21,0)
VPR PUT PATIENT DATA^^0
"BLD",8470,"KRN",8994,"NM",22,0)
VPR GET REFERENCE DATA^^0
"BLD",8470,"KRN",8994,"NM",23,0)
VPR SUBSCRIBE ROSTERS^^0
"BLD",8470,"KRN",8994,"NM",24,0)
VPRCPRS RPC^^0
"BLD",8470,"KRN",8994,"NM",25,0)
VPRCRPC RPCCHAIN^^0
"BLD",8470,"KRN",8994,"NM",26,0)
VPR PUT DEMOGRAPHICS^^0
"BLD",8470,"KRN",8994,"NM",27,0)
VPRDJFS API^^0
"BLD",8470,"KRN",8994,"NM",28,0)
VPRDJFS DELSUB^^0
"BLD",8470,"KRN",8994,"NM","B","VPR APPOINTMENTS",1)

"BLD",8470,"KRN",8994,"NM","B","VPR DELETE OBJECT",16)

"BLD",8470,"KRN",8994,"NM","B","VPR DELETE ROSTER",14)

"BLD",8470,"KRN",8994,"NM","B","VPR GET OBJECT",17)

"BLD",8470,"KRN",8994,"NM","B","VPR GET OPERATIONAL DATA",18)

"BLD",8470,"KRN",8994,"NM","B","VPR GET REFERENCE DATA",22)

"BLD",8470,"KRN",8994,"NM","B","VPR GET ROSTER LIST",19)

"BLD",8470,"KRN",8994,"NM","B","VPR GET SOURCE",13)

"BLD",8470,"KRN",8994,"NM","B","VPR INPATIENTS",2)

"BLD",8470,"KRN",8994,"NM","B","VPR PREVIEW ROSTER",12)

"BLD",8470,"KRN",8994,"NM","B","VPR PUT DEMOGRAPHICS",26)

"BLD",8470,"KRN",8994,"NM","B","VPR PUT OBJECT",20)

"BLD",8470,"KRN",8994,"NM","B","VPR PUT PATIENT DATA",21)

"BLD",8470,"KRN",8994,"NM","B","VPR ROSTER PATIENTS",9)

"BLD",8470,"KRN",8994,"NM","B","VPR ROSTERS",10)

"BLD",8470,"KRN",8994,"NM","B","VPR SUBSCRIBE",3)

"BLD",8470,"KRN",8994,"NM","B","VPR SUBSCRIBE ROSTERS",23)

"BLD",8470,"KRN",8994,"NM","B","VPR UPDATE ROSTER",11)

"BLD",8470,"KRN",8994,"NM","B","VPRCORD RPC",4)

"BLD",8470,"KRN",8994,"NM","B","VPRCPAT RPC",5)

"BLD",8470,"KRN",8994,"NM","B","VPRCPRS RPC",24)

"BLD",8470,"KRN",8994,"NM","B","VPRCRPC RPC",15)

"BLD",8470,"KRN",8994,"NM","B","VPRCRPC RPCCHAIN",25)

"BLD",8470,"KRN",8994,"NM","B","VPRDJFS API",27)

"BLD",8470,"KRN",8994,"NM","B","VPRDJFS DELSUB",28)

"BLD",8470,"KRN",8994,"NM","B","VPRFPTC CHKS",7)

"BLD",8470,"KRN",8994,"NM","B","VPRFPTC LOG",8)

"BLD",8470,"KRN","B",.4,.4)

"BLD",8470,"KRN","B",.401,.401)

"BLD",8470,"KRN","B",.402,.402)

"BLD",8470,"KRN","B",.403,.403)

"BLD",8470,"KRN","B",.5,.5)

"BLD",8470,"KRN","B",.84,.84)

"BLD",8470,"KRN","B",3.6,3.6)

"BLD",8470,"KRN","B",3.8,3.8)

"BLD",8470,"KRN","B",9.2,9.2)

"BLD",8470,"KRN","B",9.8,9.8)

"BLD",8470,"KRN","B",19,19)

"BLD",8470,"KRN","B",19.1,19.1)

"BLD",8470,"KRN","B",101,101)

"BLD",8470,"KRN","B",409.61,409.61)

"BLD",8470,"KRN","B",771,771)

"BLD",8470,"KRN","B",779.2,779.2)

"BLD",8470,"KRN","B",870,870)

"BLD",8470,"KRN","B",8989.51,8989.51)

"BLD",8470,"KRN","B",8989.52,8989.52)

"BLD",8470,"KRN","B",8994,8994)

"BLD",8470,"PRE")

"BLD",8470,"QUES",0)
^9.62^^
"BLD",8470,"REQB",0)
^9.611^4^2
"BLD",8470,"REQB",3,0)
SD*5.3*575^2
"BLD",8470,"REQB",4,0)
VPR*1.0*2^2
"BLD",8470,"REQB","B","SD*5.3*575",3)

"BLD",8470,"REQB","B","VPR*1.0*2",4)

"DATA",100.98,67,0)
TREATMENTS^Treatments^NTX
"DATA",101.41,15917,0)
OR GXMISC TREATMENTS^Nursing Treatment Order^^D^67^1^170^1^
"DATA",101.41,15917,5)
^^^Nursing Treatment^^^^
"DATA",101.41,15917,10,0)
^101.412IA^5^5
"DATA",101.41,15917,10,1,0)
1^4^^Treatment: ^^1^^^^S.NTX
"DATA",101.41,15917,10,1,1)
Enter a treatment item.
"DATA",101.41,15917,10,1,2)
1
"DATA",101.41,15917,10,1,4)
I $$ACTIVE^ORDD43(Y)
"DATA",101.41,15917,10,1,6)
N IDX,SCR S IDX=$G(ORDIALOG(PROMPT,"D")),SCR=$G(ORDIALOG(PROMPT,"S")) D XHELP^ORDD43(IDX,SCR)
"DATA",101.41,15917,10,1,10)
N OI S OI=+$G(ORDIALOG(PROMPT,INST)) D:OI ORDMSG^ORCD(OI)
"DATA",101.41,15917,10,1,"W")
cboNursing
"DATA",101.41,15917,10,2,0)
2^19^^Instructions: ^^^^^C
"DATA",101.41,15917,10,2,1)
Enter the instructions for this order, up to 240 characters of text.
"DATA",101.41,15917,10,2,2)
2^^^^^1
"DATA",101.41,15917,10,3,0)
4^6^^^^1^^1^RCW
"DATA",101.41,15917,10,3,1)
Enter the date/time to begin this order.
"DATA",101.41,15917,10,3,7)
S Y="NOW"
"DATA",101.41,15917,10,4,0)
5^24^^^^^^^RCW
"DATA",101.41,15917,10,4,1)
Enter the date/time to end this order.
"DATA",101.41,15917,10,4,5)
I $$FTDCOMP^ORCD("START DATE/TIME","STOP DATE/TIME",">") K DONE W $C(7),!,"Cannot end before start date/time!",!
"DATA",101.41,15917,10,5,0)
3^29^^^^^^^^
"DATA",101.41,15917,10,5,1)
^
"DATA",101.41,15917,10,5,2)
3
"DATA",101.41,15917,99)
63349,2442
"FIA",100.98)
DISPLAY GROUP
"FIA",100.98,0)
^ORD(100.98,
"FIA",100.98,0,0)
100.98I
"FIA",100.98,0,1)
n^n^f^^n^^y^o^n
"FIA",100.98,0,10)

"FIA",100.98,0,11)
I $P(^(0),U,3)="NTX"
"FIA",100.98,0,"RLRO")

"FIA",100.98,0,"VR")
1.0^VPR
"FIA",100.98,100.98)
0
"FIA",100.98,100.981)
0
"FIA",101.41)
ORDER DIALOG
"FIA",101.41,0)
^ORD(101.41,
"FIA",101.41,0,0)
101.41I
"FIA",101.41,0,1)
n^n^f^^n^^y^o^n
"FIA",101.41,0,10)

"FIA",101.41,0,11)
I $P(^(0),U)="OR GXMISC TREATMENTS"
"FIA",101.41,0,"RLRO")

"FIA",101.41,0,"VR")
1.0^VPR
"FIA",101.41,101.41)
0
"FIA",101.41,101.411)
0
"FIA",101.41,101.412)
0
"FIA",101.41,101.41218)
0
"FIA",101.41,101.415)
0
"FIA",101.41,101.416)
0
"FIA",101.41,101.4162)
0
"FIA",560)
VPR SUBSCRIPTION
"FIA",560,0)
^VPR(560,
"FIA",560,0,0)
560
"FIA",560,0,1)
y^y^f^^^^n
"FIA",560,0,10)

"FIA",560,0,11)

"FIA",560,0,"RLRO")

"FIA",560,0,"VR")
1.0^VPR
"FIA",560,560)
0
"FIA",560,560.01)
0
"FIA",560,560.02)
0
"FIA",560.1)
VPR PATIENT OBJECT
"FIA",560.1,0)
^VPR(560.1,
"FIA",560.1,0,0)
560.1
"FIA",560.1,0,1)
y^y^f^^^^n
"FIA",560.1,0,10)

"FIA",560.1,0,11)

"FIA",560.1,0,"RLRO")

"FIA",560.1,0,"VR")
1.0^VPR
"FIA",560.1,560.1)
0
"FIA",560.1,560.101)
0
"FIA",560.11)
VPR OBJECT
"FIA",560.11,0)
^VPR(560.11,
"FIA",560.11,0,0)
560.11
"FIA",560.11,0,1)
y^y^f^^^^n
"FIA",560.11,0,10)

"FIA",560.11,0,11)

"FIA",560.11,0,"RLRO")

"FIA",560.11,0,"VR")
1.0^VPR
"FIA",560.11,560.11)
0
"FIA",560.11,560.111)
0
"FIA",561)
VPR PANEL
"FIA",561,0)
^VPRPANEL(
"FIA",561,0,0)
561P
"FIA",561,0,1)
y^y^f^^^^n
"FIA",561,0,10)

"FIA",561,0,11)

"FIA",561,0,"RLRO")

"FIA",561,0,"VR")
1.0^VPR
"FIA",561,561)
0
"FIA",561,561.05)
0
"FIA",561.2)
VPROSTER
"FIA",561.2,0)
^VPROSTER(
"FIA",561.2,0,0)
561.2
"FIA",561.2,0,1)
y^y^f
"FIA",561.2,0,10)

"FIA",561.2,0,11)

"FIA",561.2,0,"RLRO")

"FIA",561.2,0,"VR")
1.0^VPR
"FIA",561.2,561.2)
0
"FIA",561.2,561.21)
0
"FIA",561.2,561.23)
0
"INI")
PRE^VPRP3I
"INIT")
POST^VPRP3I
"IX",101.41,101.41,"B",0)
101.41^B^Regular B index using full field length^R^^F^IR^I^101.41^^^^^LS
"IX",101.41,101.41,"B",1)
S ^ORD(101.41,"B",$E(X,1,63),DA)=""
"IX",101.41,101.41,"B",2)
K ^ORD(101.41,"B",$E(X,1,63),DA)
"IX",101.41,101.41,"B",2.5)
K ^ORD(101.41,"B")
"IX",101.41,101.41,"B",11.1,0)
^.114IA^1^1
"IX",101.41,101.41,"B",11.1,1,0)
1^F^101.41^.01^63^1^F
"IX",560,560,"ADFN",0)
560^ADFN^Patients to track in the Data Monitor^MU^^R^IR^W^560.01^^^^^S
"IX",560,560,"ADFN",1)
D VPRSET^VPRDJFS(.DA,.X)
"IX",560,560,"ADFN",1.4)
S X=0 I +X(1)>0 S X=1
"IX",560,560,"ADFN",2)
D VPRKILL^VPRDJFS(.DA,.X)
"IX",560,560,"ADFN",2.4)
S X=0 I X(1)'="" S X=1
"IX",560,560,"ADFN",2.5)
K ^VPR(560,"AITEM")
"IX",560,560,"ADFN",11.1,0)
^.114IA^2^2
"IX",560,560,"ADFN",11.1,1,0)
1^F^560.01^.01^^1^F
"IX",560,560,"ADFN",11.1,2,0)
2^F^560.01^2^^^F
"IX",560,560,"AITEM",0)
560^AITEM^AITEM TEST^MU^^F^IR^I^560^^^^^A
"IX",560,560,"AITEM",1)
D VPROSET^VPRDJFS(DA,X)
"IX",560,560,"AITEM",1.4)
I X(1)'=""
"IX",560,560,"AITEM",2)
D VPROKILL^VPRDJFS(DA)
"IX",560,560,"AITEM",2.4)
I X(1)'=""
"IX",560,560,"AITEM",2.5)
K ^VPR(560,"AITEM")
"IX",560,560,"AITEM",11.1,0)
^.114IA^1^1
"IX",560,560,"AITEM",11.1,1,0)
1^F^560^.03^^^F
"IX",560,560,"AITEM",11.1,1,3)

"IX",560,560,"AROS",0)
560^AROS^Rosters to track in the Data Monitor^MU^^R^IR^W^560.02^^^^^S
"IX",560,560,"AROS",1)
S:X2(2) ^VPR(560,"AROS",X,DA(1))=""
"IX",560,560,"AROS",2)
K:X1(2) ^VPR(560,"AROS",X,DA(1))
"IX",560,560,"AROS",2.5)
K ^VPR(560,"AROS")
"IX",560,560,"AROS",11.1,0)
^.114IA^2^2
"IX",560,560,"AROS",11.1,1,0)
1^F^560.02^.01^^1^F
"IX",560,560,"AROS",11.1,1,3)

"IX",560,560,"AROS",11.1,2,0)
2^F^560.02^2^^2^
"IX",560,560,"AROS",11.1,2,3)

"IX",560,560.01,"AP",0)
560.01^AP^Subscribed patients by server not yet initialized.^R^^R^IR^I^560.01^^^^^S
"IX",560,560.01,"AP",.1,0)
^^6^6^3140521^
"IX",560,560.01,"AP",.1,1,0)
This index lists the patients who are not yet initialized:
"IX",560,560.01,"AP",.1,2,0)
 
"IX",560,560.01,"AP",.1,3,0)
  SERVER_IEN, "AP", STATUS, STATUS TIME, DFN
"IX",560,560.01,"AP",.1,4,0)
 
"IX",560,560.01,"AP",.1,5,0)
Patients with an initialized status (STATUS = 2) do not appear in this 
"IX",560,560.01,"AP",.1,6,0)
index.
"IX",560,560.01,"AP",1)
S ^VPR(560,DA(1),1,"AP",X(1),X(2),DA)=""
"IX",560,560.01,"AP",1.4)
S X=(+X2(1)<2)
"IX",560,560.01,"AP",2)
K ^VPR(560,DA(1),1,"AP",X(1),X(2),DA)
"IX",560,560.01,"AP",2.5)
K ^VPR(560,DA(1),1,"AP")
"IX",560,560.01,"AP",11.1,0)
^.114IA^2^2
"IX",560,560.01,"AP",11.1,1,0)
1^F^560.01^2^^1^F
"IX",560,560.01,"AP",11.1,2,0)
2^F^560.01^3^^2^F
"IX",560.1,560.1,"C",0)
560.1^C^Index by patient, collection^R^^R^IR^I^560.1^^^^^LS
"IX",560.1,560.1,"C",1)
S ^VPR(560.1,"C",X(1),X(2),DA)=""
"IX",560.1,560.1,"C",2)
K ^VPR(560.1,"C",X(1),X(2),DA)
"IX",560.1,560.1,"C",2.5)
K ^VPR(560.1,"C")
"IX",560.1,560.1,"C",11.1,0)
^.114IA^2^2
"IX",560.1,560.1,"C",11.1,1,0)
1^F^560.1^.02^^1^F
"IX",560.1,560.1,"C",11.1,1,3)

"IX",560.1,560.1,"C",11.1,2,0)
2^F^560.1^.03^^2^F
"IX",560.1,560.1,"C",11.1,2,3)

"IX",561.2,561.21,"AC",0)
561.21^AC^SORT BY SEQUENCE^R^^F^IR^I^561.21^^^^^S
"IX",561.2,561.21,"AC",1)
Q
"IX",561.2,561.21,"AC",2)
Q
"KRN",19,9027,-1)
2^9
"KRN",19,9027,0)
XU USER TERMINATE^User terminate event^^X^10000000020^^^^^^^163^y^1^^^
"KRN",19,9027,10,0)
^19.01IP^8^8
"KRN",19,9027,10,8,0)
14101
"KRN",19,9027,10,8,"^")
VPR XU EVENTS
"KRN",19,9027,"U")
USER TERMINATE EVENT
"KRN",19,12365,-1)
2^7
"KRN",19,12365,0)
XU USER ADD^New User Event^^X^10000000020^^^^^^^163^y^1
"KRN",19,12365,10,0)
^19.01IP^2^2
"KRN",19,12365,10,2,0)
14101
"KRN",19,12365,10,2,"^")
VPR XU EVENTS
"KRN",19,12365,"U")
NEW USER EVENT
"KRN",19,12366,-1)
2^8
"KRN",19,12366,0)
XU USER CHANGE^User Change Event^^X^10000000020^^^^^^^163^y^1
"KRN",19,12366,10,0)
^19.01IP^2^2
"KRN",19,12366,10,2,0)
14101
"KRN",19,12366,10,2,"^")
VPR XU EVENTS
"KRN",19,12366,"U")
USER CHANGE EVENT
"KRN",19,13996,-1)
0^1
"KRN",19,13996,0)
VPR APPOINTMENTS^Return list of tomorrow's patients^^A^^^^^^^^VIRTUAL PATIENT RECORD^^1
"KRN",19,13996,1,0)
^^3^3^3110406^
"KRN",19,13996,1,1,0)
This option is intended to be scheduled to run nightly, to notify the
"KRN",19,13996,1,2,0)
AViVA Virtual Patient Record (VPR) of patients that are expected to be
"KRN",19,13996,1,3,0)
seen tomorrow.
"KRN",19,13996,20)
D APPT^VPRPATS
"KRN",19,13996,200.9)
y
"KRN",19,13996,"U")
RETURN LIST OF TOMORROW'S PATI
"KRN",19,13997,-1)
0^2
"KRN",19,13997,0)
VPR PATIENT DATA MONITOR^VPR Patient Data Monitor^^A^^^^^^^^VIRTUAL PATIENT RECORD^^1
"KRN",19,13997,1,0)
^^4^4^3110406^
"KRN",19,13997,1,1,0)
This option manages the VPR Patient Data Monitor background job.  It 
"KRN",19,13997,1,2,0)
first checks to see if the job is already running, and will prompt to
"KRN",19,13997,1,3,0)
start it if not.  It may also stop the job if running, but the AViVA
"KRN",19,13997,1,4,0)
client may not display up-to-date data until it is started up again.
"KRN",19,13997,20)
D EN^VPRHTTP
"KRN",19,13997,"U")
VPR PATIENT DATA MONITOR
"KRN",19,13998,-1)
0^4
"KRN",19,13998,0)
VPR SYNCHRONIZATION CONTEXT^Synchronize the VPR^^B^^^^^^^^
"KRN",19,13998,99.1)
63012,33265
"KRN",19,13998,"RPC",0)
^19.05P^20^20
"KRN",19,13998,"RPC",2,0)
VPR DATA VERSION
"KRN",19,13998,"RPC",4,0)
VPR SUBSCRIBE
"KRN",19,13998,"RPC",5,0)
VPR GET PATIENT DATA JSON
"KRN",19,13998,"RPC",7,0)
VPR GET OBJECT
"KRN",19,13998,"RPC",8,0)
VPR GET OPERATIONAL DATA
"KRN",19,13998,"RPC",10,0)
VPR PUT OBJECT
"KRN",19,13998,"RPC",17,0)
VPR GET CHECKSUM
"KRN",19,13998,"RPC",19,0)
VPRDJFS API
"KRN",19,13998,"RPC",20,0)
VPRDJFS DELSUB
"KRN",19,13998,"U")
SYNCHRONIZE THE VPR
"KRN",19,13999,-1)
0^5
"KRN",19,13999,0)
VPR APPLICATION PROXY^VPR Application Proxy^^B^^^^^^^^VIRTUAL PATIENT RECORD
"KRN",19,13999,1,0)
^19.06^1^1^3110602^^^^
"KRN",19,13999,1,1,0)
This option allows the VPR connector proxy access to the VistA system.
"KRN",19,13999,99.1)
62971,33865
"KRN",19,13999,"RPC",0)
^19.05P^4^4
"KRN",19,13999,"RPC",2,0)
VPR GET PATIENT DATA
"KRN",19,13999,"RPC",3,0)
VPR DATA VERSION
"KRN",19,13999,"RPC",4,0)
VPR SUBSCRIBE
"KRN",19,13999,"U")
VPR APPLICATION PROXY
"KRN",19,14005,-1)
0^3
"KRN",19,14005,0)
VPR UI CONTEXT^VPR UI CONTEXT version 0.7-S60^^B^^^^^^^^VIRTUAL PATIENT RECORD
"KRN",19,14005,1,0)
^^1^1^3110630^
"KRN",19,14005,1,1,0)
This option allows the VPR UI access to the VistA system.
"KRN",19,14005,99.1)
62990,29647
"KRN",19,14005,"RPC",0)
^19.05P^41^41
"KRN",19,14005,"RPC",1,0)
VPRCORD RPC
"KRN",19,14005,"RPC",2,0)
VPRCPAT RPC
"KRN",19,14005,"RPC",3,0)
VPRFPTC CHKS
"KRN",19,14005,"RPC",4,0)
VPRFPTC LOG
"KRN",19,14005,"RPC",5,0)
VPR APPOINTMENTS
"KRN",19,14005,"RPC",6,0)
VPR DATA VERSION
"KRN",19,14005,"RPC",7,0)
VPR DELETE ROSTER
"KRN",19,14005,"RPC",8,0)
VPR GET PATIENT DATA
"KRN",19,14005,"RPC",9,0)
VPR GET SOURCE
"KRN",19,14005,"RPC",10,0)
VPR INPATIENTS
"KRN",19,14005,"RPC",11,0)
VPR PREVIEW ROSTER
"KRN",19,14005,"RPC",12,0)
VPR ROSTER PATIENTS
"KRN",19,14005,"RPC",13,0)
VPR ROSTERS
"KRN",19,14005,"RPC",14,0)
VPR SUBSCRIBE
"KRN",19,14005,"RPC",15,0)
VPR UPDATE ROSTER
"KRN",19,14005,"RPC",16,0)
VPRCRPC RPC
"KRN",19,14005,"RPC",19,0)
XHD GET PARAMETER DEF LIST
"KRN",19,14005,"RPC",20,0)
VPR PUT PATIENT DATA
"KRN",19,14005,"RPC",21,0)
VPR PUT OBJECT
"KRN",19,14005,"RPC",22,0)
VPR DELETE OBJECT
"KRN",19,14005,"RPC",23,0)
VPR GET OBJECT
"KRN",19,14005,"RPC",24,0)
VPR GET ROSTER LIST
"KRN",19,14005,"RPC",25,0)
VPRCPRS RPC
"KRN",19,14005,"RPC",26,0)
ORQPT WARDS
"KRN",19,14005,"RPC",27,0)
ORQPT WARD PATIENTS
"KRN",19,14005,"RPC",28,0)
ORQPT SPECIALTIES
"KRN",19,14005,"RPC",29,0)
ORQPT SPECIALTY PATIENTS
"KRN",19,14005,"RPC",30,0)
ORWU CLINLOC
"KRN",19,14005,"RPC",31,0)
ORQPT CLINIC PATIENTS
"KRN",19,14005,"RPC",32,0)
ORWU NEWPERS
"KRN",19,14005,"RPC",33,0)
ORQPT PROVIDER PATIENTS
"KRN",19,14005,"RPC",34,0)
ORWRP COLUMN HEADERS
"KRN",19,14005,"RPC",35,0)
ORWLR CUMULATIVE REPORT
"KRN",19,14005,"RPC",36,0)
ORWLRR INTERIM
"KRN",19,14005,"RPC",37,0)
ORWRP REPORT TEXT
"KRN",19,14005,"RPC",38,0)
ORWRP3 EXPAND COLUMNS
"KRN",19,14005,"RPC",39,0)
VPR PUT DEMOGRAPHICS
"KRN",19,14005,"RPC",40,0)
VPRCRPC RPCCHAIN
"KRN",19,14005,"RPC",41,0)
ORQPT DEFAULT PATIENT LIST
"KRN",19,14005,"U")
VPR UI CONTEXT VERSION 0.7-S60
"KRN",19,14101,-1)
0^6
"KRN",19,14101,0)
VPR XU EVENTS^New Person events for VPR^^A^^^^^^^^VIRTUAL PATIENT RECORD^^1
"KRN",19,14101,1,0)
^^1^1^3130116^
"KRN",19,14101,1,1,0)
This protocol will track New Person updates for VPR.
"KRN",19,14101,20)
D XU^VPREVNT(XUIEN,"")
"KRN",19,14101,"U")
NEW PERSON EVENTS FOR VPR
"KRN",19,14233,-1)
0^10
"KRN",19,14233,0)
VPRM ADD HMP USER^Add Health Management Platform User^^A^^^^^^^^VIRTUAL PATIENT RECORD^^1
"KRN",19,14233,1,0)
^^4^4^3140326^
"KRN",19,14233,1,1,0)
This option allows a user to be given access to use the Health Management
"KRN",19,14233,1,2,0)
Platform.  The selected user will be given the VPR UI CONTEXT option.
"KRN",19,14233,1,3,0)
Additionally, their default patient list my be set up for automatic
"KRN",19,14233,1,4,0)
synchronization with the Health Management Platform (HMP).
"KRN",19,14233,20)
D OPTASGN^VPRCAC
"KRN",19,14233,"U")
ADD HEALTH MANAGEMENT PLATFORM
"KRN",19,14234,-1)
0^12
"KRN",19,14234,0)
VPRM EXTRACT MONITOR^Monitor HMP Server Synchronization^^A^^^^^^^^VIRTUAL PATIENT RECORD^^1
"KRN",19,14234,1,0)
^^2^2^3140402^
"KRN",19,14234,1,1,0)
This option allow one to monitor the polls from an HMP server and any 
"KRN",19,14234,1,2,0)
currently executing VPR extracts.
"KRN",19,14234,20)
D EN^VPRDJFSM
"KRN",19,14234,"U")
MONITOR HMP SERVER SYNCHRONIZA
"KRN",19,14235,-1)
0^11
"KRN",19,14235,0)
VPRM EMERGENCY STOP^Emergency Stop VPR Freshness Updates^^A^^^^^^^^VIRTUAL PATIENT RECORD^^1
"KRN",19,14235,1,0)
^^5^5^3140403^
"KRN",19,14235,1,1,0)
This option should be used with caution.  It will stop the freshness 
"KRN",19,14235,1,2,0)
events for the Virtual Patient Record (VPR) from being called.  Once the 
"KRN",19,14235,1,3,0)
freshness events are stopped, patient data must be re-synchronized with
"KRN",19,14235,1,4,0)
the VPR to ensure completeness.  Only stop freshness updates if there is a
"KRN",19,14235,1,5,0)
problem with system operation.
"KRN",19,14235,20)
D EMERSTOP^VPRDJFSM
"KRN",19,14235,"U")
EMERGENCY STOP VPR FRESHNESS U
"KRN",19,14236,-1)
0^13
"KRN",19,14236,0)
VPRM ADD HMP PATIENT^Manually Add Patient to VPR^^A^^^^^^^^VIRTUAL PATIENT RECORD^^1
"KRN",19,14236,1,0)
^^2^2^3140404^
"KRN",19,14236,1,1,0)
Use this patient to manually add a patient for synchronization with the 
"KRN",19,14236,1,2,0)
Virtual Patient Record (VPR).
"KRN",19,14236,20)
D ADDPT^VPRDJFSM
"KRN",19,14236,"U")
MANUALLY ADD PATIENT TO VPR
"KRN",19,14237,-1)
0^14
"KRN",19,14237,0)
VPRMGR^HMP Technical Management^^M^^^^^^^^VIRTUAL PATIENT RECORD
"KRN",19,14237,1,0)
^^1^1^3140404^
"KRN",19,14237,1,1,0)
This menu contains various options to help with the management of HMP.
"KRN",19,14237,10,0)
^19.01IP^3^3
"KRN",19,14237,10,1,0)
14233
"KRN",19,14237,10,1,"^")
VPRM ADD HMP USER
"KRN",19,14237,10,2,0)
14236
"KRN",19,14237,10,2,"^")
VPRM ADD HMP PATIENT
"KRN",19,14237,10,3,0)
14234
"KRN",19,14237,10,3,"^")
VPRM EXTRACT MONITOR
"KRN",19,14237,99)
63349,2444
"KRN",19,14237,"U")
HMP TECHNICAL MANAGEMENT
"KRN",19,14245,-1)
0^15
"KRN",19,14245,0)
VPRM RESTART FRESHNESS^Resume Freshness Updates that have been stopped^^A^^^^^^^^VIRTUAL PATIENT RECORD^^1
"KRN",19,14245,1,0)
^^4^4^3140604^
"KRN",19,14245,1,1,0)
This option will remove the flags that cause freshness updates to be 
"KRN",19,14245,1,2,0)
stopped.  It will likely be necessary to re-synchronized patients after 
"KRN",19,14245,1,3,0)
freshness has been stopped, since updates will be missing from the time 
"KRN",19,14245,1,4,0)
that freshness updates were not being recieved.
"KRN",19,14245,20)
D RSTRTFR^VPRDJFSM
"KRN",19,14245,"U")
RESUME FRESHNESS UPDATES THAT 
"KRN",19.1,646,-1)
0^1
"KRN",19.1,646,0)
VPR EXPERIMENTAL
"KRN",19.1,685,-1)
0^2
"KRN",19.1,685,0)
VPR ADMIN
"KRN",101,1240,-1)
2^8
"KRN",101,1240,0)
DGPM MOVEMENT EVENTS^MOVEMENT EVENTS v 5.0^^X^1085^^^^^^^114
"KRN",101,1240,10,0)
^101.01PA^38^38
"KRN",101,1240,10,38,0)
5869^^^
"KRN",101,1240,10,38,"^")
VPR INPT EVENTS
"KRN",101,1302,-1)
2^13
"KRN",101,1302,0)
SDAM APPOINTMENT EVENTS^Appointment Event Driver^^X^1085^^^^^^^16
"KRN",101,1302,10,0)
^101.01PA^20^20
"KRN",101,1302,10,20,0)
5870^^^
"KRN",101,1302,10,20,"^")
VPR APPT EVENTS
"KRN",101,2690,-1)
2^12
"KRN",101,2690,0)
RA EVSEND OR^Radiology event sent to OE/RR^^X^1085^^^^^^^31
"KRN",101,2690,10,0)
^101.01PA^4^4
"KRN",101,2690,10,4,0)
5872^^^
"KRN",101,2690,10,4,"^")
VPR XQOR EVENTS
"KRN",101,2700,-1)
2^11
"KRN",101,2700,0)
PXK VISIT DATA EVENT^VISIT RELATED DATA^^X^1085^^^^^^^
"KRN",101,2700,10,0)
^101.01PA^6^6
"KRN",101,2700,10,6,0)
5871^^^
"KRN",101,2700,10,6,"^")
VPR PCE EVENTS
"KRN",101,2894,-1)
2^16
"KRN",101,2894,0)
GMRA SIGN-OFF ON DATA^Sign-off on Reaction Data^^X^1085^^^^^^^247
"KRN",101,2894,10,0)
^101.01PA^2^2
"KRN",101,2894,10,2,0)
5873^^^
"KRN",101,2894,10,2,"^")
VPR GMRA EVENTS
"KRN",101,2896,-1)
2^15
"KRN",101,2896,0)
GMRA ENTERED IN ERROR^Reaction Data Entered in Error^^X^1085^^^^^^^247
"KRN",101,2896,10,0)
^101.01PA^2^2
"KRN",101,2896,10,2,0)
5873^^^
"KRN",101,2896,10,2,"^")
VPR GMRA EVENTS
"KRN",101,3336,-1)
2^9
"KRN",101,3336,0)
LR7O CH EVSEND OR^LAB => OE/RR ORDER MESSAGE EVENT^^X^1085^^^^^^^
"KRN",101,3336,10,0)
^101.01PA^4^4
"KRN",101,3336,10,4,0)
5872^^^
"KRN",101,3336,10,4,"^")
VPR XQOR EVENTS
"KRN",101,3373,-1)
2^10
"KRN",101,3373,0)
PS EVSEND OR^Send Pharmacy orders to CPRS.^^X^1085^^^^^^^18
"KRN",101,3373,10,0)
^101.01PA^6^6
"KRN",101,3373,10,6,0)
5872^^^
"KRN",101,3373,10,6,"^")
VPR XQOR EVENTS
"KRN",101,3392,-1)
2^17
"KRN",101,3392,0)
GMRC EVSEND OR^Consults event sent to OE/RR^^X^1085^^^^^^^294
"KRN",101,3392,10,0)
^101.01PA^6^6
"KRN",101,3392,10,6,0)
5872^^^
"KRN",101,3392,10,6,"^")
VPR XQOR EVENTS
"KRN",101,3411,-1)
2^33
"KRN",101,3411,0)
FH EVSEND OR^FH --> OR event messages^^X^1085^^^^^^^
"KRN",101,3411,10,0)
^101.01PA^4^4
"KRN",101,3411,10,4,0)
5872^^^
"KRN",101,3411,10,4,"^")
VPR XQOR EVENTS
"KRN",101,3417,-1)
2^36
"KRN",101,3417,0)
VAFC ADT-A04 SERVER^This protocol fires off of the PIMS Registration option^^E^1085^^^^^^^114
"KRN",101,3417,775,0)
^101.0775PA^6^6
"KRN",101,3417,775,6,0)
6054
"KRN",101,3417,775,6,"^")
VPR ADT-A04 CLIENT
"KRN",101,3418,-1)
2^40
"KRN",101,3418,0)
VAFC ADT-A08 SERVER^Registration's ADT-A08 Server Protocol^^E^1085^^^^^^^114
"KRN",101,3418,775,0)
^101.0775PA^6^6
"KRN",101,3418,775,6,0)
6065
"KRN",101,3418,775,6,"^")
VPR ADT-A08 CLIENT
"KRN",101,3529,-1)
2^26
"KRN",101,3529,0)
OR EVSEND RA^OE/RR => RAD/NM MESSAGE EVENT^^X^1085^^^^^^^
"KRN",101,3529,10,0)
^101.01PA^4^4
"KRN",101,3529,10,4,0)
5874^^^
"KRN",101,3529,10,4,"^")
VPR NA EVENTS
"KRN",101,3530,-1)
2^23
"KRN",101,3530,0)
OR EVSEND LRCH^OE/RR => LAB MESSAGE EVENT^^X^1085^^^^^^^
"KRN",101,3530,10,0)
^101.01PA^4^4
"KRN",101,3530,10,4,0)
5874^^^
"KRN",101,3530,10,4,"^")
VPR NA EVENTS
"KRN",101,3535,-1)
2^31
"KRN",101,3535,0)
OR EVSEND FH^OE/RR => DIET MESSAGE EVENT^^X^1085^^^^^^^
"KRN",101,3535,10,0)
^101.01PA^4^4
"KRN",101,3535,10,4,0)
5874^^^
"KRN",101,3535,10,4,"^")
VPR NA EVENTS
"KRN",101,3536,-1)
2^24
"KRN",101,3536,0)
OR EVSEND ORG^OE/RR => GENERIC MESSAGE EVENT^^X^1085^^^^^^^
"KRN",101,3536,10,0)
^101.01PA^4^4
"KRN",101,3536,10,4,0)
5872^^^
"KRN",101,3536,10,4,"^")
VPR XQOR EVENTS
"KRN",101,3537,-1)
2^25
"KRN",101,3537,0)
OR EVSEND PS^OE/RR => PHARMACY MESSAGE EVENT^^X^1085^^^^^^^
"KRN",101,3537,10,0)
^101.01PA^4^4
"KRN",101,3537,10,4,0)
5874^^^
"KRN",101,3537,10,4,"^")
VPR NA EVENTS
"KRN",101,3539,-1)
2^20
"KRN",101,3539,0)
OR EVSEND GMRC^OE/RR => CONSULTS MESSAGE EVENT^^X^1085^^^^^^^
"KRN",101,3539,10,0)
^101.01PA^6^6
"KRN",101,3539,10,6,0)
5874^^^
"KRN",101,3539,10,6,"^")
VPR NA EVENTS
"KRN",101,4717,-1)
2^7
"KRN",101,4717,0)
DG FIELD MONITOR^DG Field Monitor^^X^1085^^^^^^^114
"KRN",101,4717,10,0)
^101.01PA^5^5
"KRN",101,4717,10,5,0)
5868^^^
"KRN",101,4717,10,5,"^")
VPR DG UPDATES
"KRN",101,5868,-1)
0^2
"KRN",101,5868,0)
VPR DG UPDATES^DG updates for VPR^^A^^^^^^^^
"KRN",101,5868,1,0)
^101.06^1^1^3101129^^^^
"KRN",101,5868,1,1,0)
This protocol will track Patient file changes for VPR.
"KRN",101,5868,20)
D DG^VPREVNT
"KRN",101,5868,99)
63349,2443
"KRN",101,5869,-1)
0^3
"KRN",101,5869,0)
VPR INPT EVENTS^Inpatient Movement events for VPR^^A^^^^^^^^
"KRN",101,5869,1,0)
^101.06^1^1^3101202^^^^
"KRN",101,5869,1,1,0)
This protocol will track patient admissions and discharges for VPR.
"KRN",101,5869,20)
D DGPM^VPREVNT
"KRN",101,5869,99)
63349,2443
"KRN",101,5870,-1)
0^1
"KRN",101,5870,0)
VPR APPT EVENTS^Appointment events for VPR^^A^^^^^^^^
"KRN",101,5870,1,0)
^101.06^1^1^3101129^^^^
"KRN",101,5870,1,1,0)
This protocol will track appointments for VPR.
"KRN",101,5870,20)
D SDAM^VPREVNT
"KRN",101,5870,99)
63349,2443
"KRN",101,5871,-1)
0^4
"KRN",101,5871,0)
VPR PCE EVENTS^PCE events for VPR^^A^^^^^^^^
"KRN",101,5871,1,0)
^101.06^1^1^3101129^^^
"KRN",101,5871,1,1,0)
This protocol will track PCE visit data for VPR.
"KRN",101,5871,20)
D PCE^VPREVNT
"KRN",101,5871,99)
63349,2443
"KRN",101,5872,-1)
0^5
"KRN",101,5872,0)
VPR XQOR EVENTS^XQOR HL7 events for VPR^^A^^^^^^^^
"KRN",101,5872,1,0)
^101.06^3^3^3101129^^
"KRN",101,5872,1,1,0)
This protocol monitors order events for VPR.  It is placed on the 
"KRN",101,5872,1,2,0)
* EVSEND OR protocols to check for updates being sent from ancillary
"KRN",101,5872,1,3,0)
packages to Order Entry; it monitors when orders are completed.
"KRN",101,5872,20)
D XQOR^VPREVNT(.XQORMSG)
"KRN",101,5872,99)
63349,2443
"KRN",101,5873,-1)
0^14
"KRN",101,5873,0)
VPR GMRA EVENTS^Allergy Events for VPR^^A^^^^^^^^
"KRN",101,5873,1,0)
^101.06^1^1^3120822^^
"KRN",101,5873,1,1,0)
This protocol will track Allergy data updates for VPR.
"KRN",101,5873,20)
D GMRA^VPREVNT("")
"KRN",101,5873,99)
63349,2443
"KRN",101,5874,-1)
0^29
"KRN",101,5874,0)
VPR NA EVENTS^XQOR HL7 events for VPR^^A^^^^^^^^
"KRN",101,5874,1,0)
^101.06^3^3^3110818^^^
"KRN",101,5874,1,1,0)
This protocol monitors order events for VPR.  It is placed on the 
"KRN",101,5874,1,2,0)
OR EVSEND * protocols to check for order numbers assigned to new orders
"KRN",101,5874,1,3,0)
placed from the ancillary packages.
"KRN",101,5874,20)
D NA^VPREVNT(.XQORMSG)
"KRN",101,5874,99)
63349,2443
"KRN",101,5875,-1)
2^27
"KRN",101,5875,0)
GMPL EVENT^Problem List Update Event^^X^1085^^^^^^^402
"KRN",101,5875,10,0)
^101.01PA^1^1
"KRN",101,5875,10,1,0)
5876^^1^
"KRN",101,5875,10,1,"^")
VPR GMPL EVENT
"KRN",101,5876,-1)
0^28
"KRN",101,5876,0)
VPR GMPL EVENT^Problem List events for VPR^^A^^^^^^^^
"KRN",101,5876,1,0)
^101.06^1^1^3110823^^^^
"KRN",101,5876,1,1,0)
This protocol will track new and updated problems for VPR.
"KRN",101,5876,20)
D GMPL^VPREVNT(DFN,GMPIFN)
"KRN",101,5876,99)
63349,2443
"KRN",101,5982,-1)
2^30
"KRN",101,5982,0)
MDC OBSERVATION UPDATE^Observation update notification^^X^1085^^^^^^^557
"KRN",101,5982,10,0)
^101.01PA^5^1
"KRN",101,5982,10,5,0)
5983^^^
"KRN",101,5982,10,5,"^")
VPR MDC EVENT
"KRN",101,5982,775,0)
^101.0775PA^^
"KRN",101,5983,-1)
0^32
"KRN",101,5983,0)
VPR MDC EVENT^CLiO events for VPR^^A^^^^^^^^
"KRN",101,5983,1,0)
^101.06^1^1^3120830^^^^
"KRN",101,5983,1,1,0)
This protocol will track new and updated observations for VPR.
"KRN",101,5983,20)
D MDC^VPREVNT(.MDCOBS)
"KRN",101,5983,99)
63349,2443
"KRN",101,6053,-1)
2^34
"KRN",101,6053,0)
OR EVSEND VPR^OE/RR => VPR MESSAGE EVENT^^X^1085^^^^^^^
"KRN",101,6053,10,0)
^101.01PA^7^1
"KRN",101,6053,10,7,0)
5872^^^
"KRN",101,6053,10,7,"^")
VPR XQOR EVENTS
"KRN",101,6054,-1)
0^35
"KRN",101,6054,0)
VPR ADT-A04 CLIENT^VPR HL7 ADT-A04 Client^^S^^^^^^^^VIRTUAL PATIENT RECORD
"KRN",101,6054,1,0)
^^10^10^3140326^
"KRN",101,6054,1,1,0)
This client protocol is used to process HL7 ADT/A04 messages published by 
"KRN",101,6054,1,2,0)
the VAFC ADT-A04 SERVER protocol.
"KRN",101,6054,1,3,0)
 
"KRN",101,6054,1,4,0)
The client causes a VPR 'freshness' event for each new patient 
"KRN",101,6054,1,5,0)
registration that occurs. This is especially important for new patients, 
"KRN",101,6054,1,6,0)
as it is the only MAS event mechanism available that can be used to 
"KRN",101,6054,1,7,0)
discover new patient entries.
"KRN",101,6054,1,8,0)
 
"KRN",101,6054,1,9,0)
Note: The ROUTING LOGIC does not send any HL7 messages. As mentioned 
"KRN",101,6054,1,10,0)
above, It adds a HMP (Health Management Platform) 'freshness' event.
"KRN",101,6054,99)
63349,2443
"KRN",101,6054,770)
^VPR HL7^^^^^^^^^ADT
"KRN",101,6054,774)
D ADT^VPREHL7
"KRN",101,6063,-1)
2^38
"KRN",101,6063,0)
PSB EVSEND VPR^MEDICATION ADMINISTRATION EVENTS^^X^1085^^^^^^^
"KRN",101,6063,10,0)
^101.01PA^2^1
"KRN",101,6063,10,2,0)
6064^^^
"KRN",101,6063,10,2,"^")
VPR PSB EVENTS
"KRN",101,6064,-1)
0^37
"KRN",101,6064,0)
VPR PSB EVENTS^BCMA events for VPR^^A^^^^^^^^
"KRN",101,6064,1,0)
^101.06^1^1^3140415^^^^
"KRN",101,6064,1,1,0)
This protocol will track medication administrations for VPR.
"KRN",101,6064,20)
D PSB^VPREVNT
"KRN",101,6064,99)
63349,2443
"KRN",101,6065,-1)
0^39
"KRN",101,6065,0)
VPR ADT-A08 CLIENT^VPR HL7 ADT-A08 Client^^S^^^^^^^^VIRTUAL PATIENT RECORD
"KRN",101,6065,1,0)
^^10^10^3140604^
"KRN",101,6065,1,1,0)
This client protocol is used to process HL7 ADT/A08 messages published by 
"KRN",101,6065,1,2,0)
the VAFC ADT-A08 SERVER protocol.
"KRN",101,6065,1,3,0)
 
"KRN",101,6065,1,4,0)
The client filters A08 events. It adds to the VPR 'freshness' queue only
"KRN",101,6065,1,5,0)
if the A08 was the result of the patient's sensitivity being modified via
"KRN",101,6065,1,6,0)
the DG SECURITY EDIT/EDIT option. All other A08 events are ignored and
"KRN",101,6065,1,7,0)
should not add to the 'freshness' queue.
"KRN",101,6065,1,8,0)
 
"KRN",101,6065,1,9,0)
Note: The ROUTING LOGIC does not send any HL7 messages. As mentioned 
"KRN",101,6065,1,10,0)
above, It adds a HMP (Health Management Platform) 'freshness' event.
"KRN",101,6065,4)
^^^
"KRN",101,6065,99)
63349,2443
"KRN",101,6065,770)
^VPR HL7^^^^^^^^^ADT
"KRN",101,6065,774)
D ADT^VPREHL7
"KRN",771,238,-1)
0^1
"KRN",771,238,0)
VPR HL7^a^^^^^USA
"KRN",8989.5,13424,0)
571;DIC(9.4,^VPR TASK WAIT TIME^1
"KRN",8989.5,13424,1)
99
"KRN",8989.51,651,-1)
0^2
"KRN",8989.51,651,0)
VPR TASK WAIT TIME^Hang time until next cycle^^^#SECONDS
"KRN",8989.51,651,1)
N^1:9999^Enter the number of seconds to wait before the VPR Data Monitor re-queues.
"KRN",8989.51,651,20,0)
^^2^2^3110317^
"KRN",8989.51,651,20,1,0)
This is the number of seconds that the system will wait before re-queuing
"KRN",8989.51,651,20,2,0)
the VPR Data Monitor background job.
"KRN",8989.51,651,30,0)
^8989.513I^2^2
"KRN",8989.51,651,30,1,0)
1^9.4
"KRN",8989.51,651,30,2,0)
2^4.2
"KRN",8989.51,652,-1)
0^1
"KRN",8989.51,652,0)
VPR LOCATIONS^VPR Locations^1^Clinic^Syncronized
"KRN",8989.51,652,1)
Y
"KRN",8989.51,652,6)
P^44^Enter clinic to synch with VPR
"KRN",8989.51,652,30,0)
^8989.513I^1^1
"KRN",8989.51,652,30,1,0)
5^4
"KRN",8989.51,656,-1)
0^3
"KRN",8989.51,656,0)
VPR PARAMETERS^VPR SYSTEM PARAMETERS^1^System Parameters^System Parameters Name
"KRN",8989.51,656,1)
W
"KRN",8989.51,656,6)
F
"KRN",8989.51,656,20,0)
^8989.512^2^2^3120125^^^
"KRN",8989.51,656,20,1,0)
This parameter stores a list of parameters used by the VPR middle teir 
"KRN",8989.51,656,20,2,0)
and the VPR UI.
"KRN",8989.51,656,30,0)
^8989.513I^2^2
"KRN",8989.51,656,30,1,0)
6^4.2
"KRN",8989.51,656,30,2,0)
1^200
"KRN",8989.51,740,-1)
0^4
"KRN",8989.51,740,0)
VPR CPRS PATH^CPRS Location^0
"KRN",8989.51,740,1)
F
"KRN",8989.51,740,6)
F
"KRN",8989.51,740,30,0)
^8989.513I^2^2
"KRN",8989.51,740,30,1,0)
4^4.2
"KRN",8989.51,740,30,2,0)
1^200
"KRN",8994,815,-1)
0^22
"KRN",8994,815,0)
VPR GET REFERENCE DATA^GET^VPREF^4^S^^^0^1^^1
"KRN",8994,815,1,0)
^^2^2^3131105
"KRN",8994,815,1,1,0)
This RPC retrieves the requested data from VistA, and returns it in
"KRN",8994,815,1,2,0)
^TMP("VPR",$J,n) as JSON.
"KRN",8994,815,2,0)
^8994.02A^1^1
"KRN",8994,815,2,1,0)
FILTER^2^^0^1
"KRN",8994,815,2,1,1,0)
^^1^1^3131105
"KRN",8994,815,2,1,1,1,0)
List of name-value pairs defining the search.
"KRN",8994,815,2,"B","FILTER",1)

"KRN",8994,815,2,"PARAMSEQ",1,1)

"KRN",8994,815,3,0)
^^1^1^3131105
"KRN",8994,815,3,1,0)
Text array formatted as JSON
"KRN",8994,818,-1)
0^26
"KRN",8994,818,0)
VPR PUT DEMOGRAPHICS^PUT^VPRUPD^4^S^^^0^1^^1
"KRN",8994,818,1,0)
^8994.01^2^2^3131119^^
"KRN",8994,818,1,1,0)
This RPC receives updated phone numbers from the client and calls
"KRN",8994,818,1,2,0)
VAFCPTED to save them in the Patient file #2.
"KRN",8994,818,2,0)
^8994.02A^3^3
"KRN",8994,818,2,1,0)
OBJECT^3^^^3
"KRN",8994,818,2,1,1,0)
^8994.021^1^1^3131120^^^
"KRN",8994,818,2,1,1,1,0)
The data, as a JSON object
"KRN",8994,818,2,2,0)
COMMAND^1^^^2
"KRN",8994,818,2,2,1,0)
^8994.021^1^1^3131120^^
"KRN",8994,818,2,2,1,1,0)
The action to take on the object in VistA
"KRN",8994,818,2,3,0)
PATIENT^1^^^1
"KRN",8994,818,2,3,1,0)
^^1^1^3131120^
"KRN",8994,818,2,3,1,1,0)
Patient file #2 ien
"KRN",8994,818,2,"B","COMMAND",2)

"KRN",8994,818,2,"B","OBJECT",1)

"KRN",8994,818,2,"B","PATIENT",3)

"KRN",8994,818,2,"PARAMSEQ",1,3)

"KRN",8994,818,2,"PARAMSEQ",2,2)

"KRN",8994,818,2,"PARAMSEQ",3,1)

"KRN",8994,818,3,0)
^8994.03^1^1^3131120^^^^
"KRN",8994,818,3,1,0)
Text array formatted as JSON
"KRN",8994,821,-1)
0^25
"KRN",8994,821,0)
VPRCRPC RPCCHAIN^CHAINRPC^VPRCRPC^3^P^0^^0^1^^1
"KRN",8994,821,2,0)
^8994.02A^1^1
"KRN",8994,821,2,1,0)
PARAMS^2^32000^1^1
"KRN",8994,821,2,"B","PARAMS",1)

"KRN",8994,821,2,"PARAMSEQ",1,1)

"KRN",8994,839,-1)
0^3
"KRN",8994,839,0)
VPR SUBSCRIBE^SUBS^VPRPATS^4^S^^^1^^^1
"KRN",8994,839,1,0)
^8994.01^3^3^3130417^^^^
"KRN",8994,839,1,1,0)
This RPC will maintain a list of patients & events to monitor for new data.
"KRN",8994,839,1,2,0)
The LIST of patients passed into this RPC is returned in ^TMP($J,"VPR",n)
"KRN",8994,839,1,3,0)
as XML, with a subscription status of 'on', 'off', or 'error'.
"KRN",8994,839,2,0)
^8994.02A^3^3
"KRN",8994,839,2,1,0)
SYS^1^^0^1
"KRN",8994,839,2,1,1,0)
^8994.021^3^3^3130417^^^^
"KRN",8994,839,2,1,1,1,0)
This is the name of the system calling the RPC; it is used to create
"KRN",8994,839,2,1,1,2,0)
an entry in the VPR SUBSCRIPTION file, and link a system to a list of
"KRN",8994,839,2,1,1,3,0)
patients and/or events.
"KRN",8994,839,2,2,0)
LIST^2^^0^3
"KRN",8994,839,2,2,1,0)
^8994.021^2^2^3110310^^^
"KRN",8994,839,2,2,1,1,0)
This is the list of patient identifiers, in the form 'dfn;icn', that
"KRN",8994,839,2,2,1,2,0)
are to be either added to or removed from the monitor.
"KRN",8994,839,2,3,0)
STS^1^^0^2
"KRN",8994,839,2,3,1,0)
^^2^2^3110310^
"KRN",8994,839,2,3,1,1,0)
This is a boolean value, 1 or 0, indicating if the patient should be
"KRN",8994,839,2,3,1,2,0)
added to or removed from the data monitor.
"KRN",8994,839,2,"B","LIST",2)

"KRN",8994,839,2,"B","STS",3)

"KRN",8994,839,2,"B","SYS",1)

"KRN",8994,839,2,"PARAMSEQ",1,1)

"KRN",8994,839,2,"PARAMSEQ",2,3)

"KRN",8994,839,2,"PARAMSEQ",3,2)

"KRN",8994,839,3,0)
^8994.03^1^1^3130417^^^^
"KRN",8994,839,3,1,0)
Text array formatted as XML.
"KRN",8994,846,-1)
0^1
"KRN",8994,846,0)
VPR APPOINTMENTS^OUT^VPRPATS^4^S^^^1^^^1
"KRN",8994,846,1,0)
^8994.01^2^2^3101129^^
"KRN",8994,846,1,1,0)
This RPC finds a list of patients that have scheduled appointments during
"KRN",8994,846,1,2,0)
the requested timeframe, as XML in ^TMP($J,"VPR",n).
"KRN",8994,846,2,0)
^8994.02A^2^2
"KRN",8994,846,2,1,0)
START^1^20^0^1
"KRN",8994,846,2,1,1,0)
^8994.021^2^2^3101129^^^
"KRN",8994,846,2,1,1,1,0)
The date/time from which to begin searching for appointments; optional,
"KRN",8994,846,2,1,1,2,0)
will default to tomorrow if not defined.
"KRN",8994,846,2,2,0)
STOP^1^20^0^2
"KRN",8994,846,2,2,1,0)
^8994.021^2^2^3101129^^
"KRN",8994,846,2,2,1,1,0)
The date/time at which to end searching for appointments; optional,
"KRN",8994,846,2,2,1,2,0)
will default to tomorrow if not defined.
"KRN",8994,846,2,"B","START",1)

"KRN",8994,846,2,"B","STOP",2)

"KRN",8994,846,2,"PARAMSEQ",1,1)

"KRN",8994,846,2,"PARAMSEQ",2,2)

"KRN",8994,846,3,0)
^8994.03^1^1^3101129^^
"KRN",8994,846,3,1,0)
Text array formatted XML
"KRN",8994,848,-1)
0^2
"KRN",8994,848,0)
VPR INPATIENTS^IN^VPRPATS^4^S^^^1^^^1
"KRN",8994,848,1,0)
^8994.01^2^2^3101129^^^
"KRN",8994,848,1,1,0)
This RPC finds a list of patients that are currently admitted,
"KRN",8994,848,1,2,0)
as XML in ^TMP($J,"VPR",n).
"KRN",8994,848,2,0)
^8994.02A^^0
"KRN",8994,848,3,0)
^8994.03^1^1^3101129^^^
"KRN",8994,848,3,1,0)
Text array formatted XML
"KRN",8994,849,-1)
0^27
"KRN",8994,849,0)
VPRDJFS API^API^VPRDJFS^4^^^^0
"KRN",8994,1342,-1)
0^28
"KRN",8994,1342,0)
VPRDJFS DELSUB^DELSUB^VPRDJFS^1^P^0
"KRN",8994,1345,-1)
0^4
"KRN",8994,1345,0)
VPRCORD RPC^RPC^VPRCORD^3^^^^0
"KRN",8994,1345,2,0)
^8994.02A^1^1
"KRN",8994,1345,2,1,0)
PARAMS^2^^1^1
"KRN",8994,1345,2,"B","PARAMS",1)

"KRN",8994,1345,2,"PARAMSEQ",1,1)

"KRN",8994,1346,-1)
0^5
"KRN",8994,1346,0)
VPRCPAT RPC^RPC^VPRCPAT^4
"KRN",8994,1346,2,0)
^8994.02A^1^1
"KRN",8994,1346,2,1,0)
PARAMS^2^^1^1
"KRN",8994,1346,2,"B","PARAMS",1)

"KRN",8994,1346,2,"PARAMSEQ",1,1)

"KRN",8994,1347,-1)
0^9
"KRN",8994,1347,0)
VPR ROSTER PATIENTS^COMPILE^VPRROS2^4^P^^^1^1^^1
"KRN",8994,1347,1,0)
^8994.01^1^1^3120105^^^^
"KRN",8994,1347,1,1,0)
Provides patients associated with requested Roster.
"KRN",8994,1347,2,0)
^8994.02A^2^2
"KRN",8994,1347,2,1,0)
ROSTER^1^15^0^1
"KRN",8994,1347,2,1,1,0)
^8994.021^1^1^3120105^^^^
"KRN",8994,1347,2,1,1,1,0)
IEN of Roster you are requesting patients for.
"KRN",8994,1347,2,2,0)
OWNER^1^15^0^2
"KRN",8994,1347,2,2,1,0)
^^1^1^3120105^
"KRN",8994,1347,2,2,1,1,0)
Compile all rosters for this owner.
"KRN",8994,1347,2,"B","OWNER",2)

"KRN",8994,1347,2,"B","ROSTER",1)

"KRN",8994,1347,2,"PARAMSEQ",1,1)

"KRN",8994,1347,2,"PARAMSEQ",2,2)

"KRN",8994,1347,3,0)
^8994.03^1^1^3120105^^^^
"KRN",8994,1347,3,1,0)
Text array formated XML.
"KRN",8994,1350,-1)
0^10
"KRN",8994,1350,0)
VPR ROSTERS^GETROS^VPRROS2^4^P^^^1^1^^1
"KRN",8994,1350,1,0)
^8994.01^1^1^3111110^^^^
"KRN",8994,1350,1,1,0)
Creates XML list of all Rosters.
"KRN",8994,1350,2,0)
^8994.02A^1^1
"KRN",8994,1350,2,1,0)
VPRFILT^1^30^0^1
"KRN",8994,1350,2,1,1,0)
^8994.021^1^1^3111110^^
"KRN",8994,1350,2,1,1,1,0)
Filter rosters if filter not null.
"KRN",8994,1350,2,"B","VPRFILT",1)

"KRN",8994,1350,2,"PARAMSEQ",1,1)

"KRN",8994,1350,3,0)
^8994.03^1^1^3111110^^^^
"KRN",8994,1350,3,1,0)
Text array formatted in XML.
"KRN",8994,1351,-1)
0^12
"KRN",8994,1351,0)
VPR PREVIEW ROSTER^PREVIEW^VPRROS3^4^P^^^1^1^^1
"KRN",8994,1351,1,0)
^8994.01^1^1^3120131^^^^
"KRN",8994,1351,1,1,0)
Compiles Roster based on data passed from GUI Interface.
"KRN",8994,1351,2,0)
^8994.02A^1^1
"KRN",8994,1351,2,1,0)
VPRARRAY^2^32000^1^1
"KRN",8994,1351,2,1,1,0)
^8994.021^1^1^3111022^^^^
"KRN",8994,1351,2,1,1,1,0)
Roster data from GUI.
"KRN",8994,1351,2,"B","VPRARRAY",1)

"KRN",8994,1351,2,"PARAMSEQ",1,1)

"KRN",8994,1351,3,0)
^8994.03^1^1^3111022^^^^
"KRN",8994,1351,3,1,0)
XML formatted Roster.
"KRN",8994,1352,-1)
0^11
"KRN",8994,1352,0)
VPR UPDATE ROSTER^UPDATE^VPRROS3^4^P^^^1^1^^1
"KRN",8994,1352,1,0)
^8994.01^1^1^3111031^^
"KRN",8994,1352,1,1,0)
Udates roster data editted by GUI into VistA.
"KRN",8994,1352,2,0)
^8994.02A^1^1
"KRN",8994,1352,2,1,0)
VPRARRAY^2^32000^1^1
"KRN",8994,1352,2,"B","VPRARRAY",1)

"KRN",8994,1352,2,"PARAMSEQ",1,1)

"KRN",8994,1360,-1)
0^13
"KRN",8994,1360,0)
VPR GET SOURCE^GETSRC^VPRROS4^4^P^^^1^1^^1
"KRN",8994,1360,1,0)
^8994.01^2^2^3111101^^
"KRN",8994,1360,1,1,0)
Get all source information for requested source.  For example, Request is for Clinics.  Transmit all active clinics
"KRN",8994,1360,1,2,0)
include name and ien.
"KRN",8994,1360,2,0)
^8994.02A^2^2
"KRN",8994,1360,2,1,0)
VPRSRC^1^30^1^1
"KRN",8994,1360,2,1,1,0)
^^1^1^3111031^
"KRN",8994,1360,2,1,1,1,0)
Identifies which source information to send to the GUI.
"KRN",8994,1360,2,2,0)
VPRFILT^1^30^0^2
"KRN",8994,1360,2,2,1,0)
^8994.021^1^1^3111103^^
"KRN",8994,1360,2,2,1,1,0)
Text identifying what you are looking for.  Will be used when matching for details.
"KRN",8994,1360,2,"B","VPRFILT",2)

"KRN",8994,1360,2,"B","VPRSRC",1)

"KRN",8994,1360,2,"PARAMSEQ",1,1)

"KRN",8994,1360,2,"PARAMSEQ",2,2)

"KRN",8994,1360,3,0)
^8994.03^1^1^3111101^^
"KRN",8994,1360,3,1,0)
An array containing names and ien's of source data.
"KRN",8994,1464,-1)
0^7
"KRN",8994,1464,0)
VPRFPTC CHKS^CHKS^VPRFPTC^3^^^^0
"KRN",8994,1464,1,0)
^8994.01^2^2^3120629^^^
"KRN",8994,1464,1,1,0)
This RPC returns the patient selection checks for a sensitive patient, 
"KRN",8994,1464,1,2,0)
deceased, and PRF.
"KRN",8994,1464,2,0)
^8994.02A^1^1
"KRN",8994,1464,2,1,0)
ICN^1^^1^1
"KRN",8994,1464,2,1,1,0)
^8994.021^1^1^3120629^^
"KRN",8994,1464,2,1,1,1,0)
This is the patient ICN
"KRN",8994,1464,2,"B","ICN",1)

"KRN",8994,1464,2,"PARAMSEQ",1,1)

"KRN",8994,1466,-1)
0^15
"KRN",8994,1466,0)
VPRCRPC RPC^RPC^VPRCRPC^3^^^^0
"KRN",8994,1466,1,0)
^8994.01^2^2^3120515^^
"KRN",8994,1466,1,1,0)
This RPC is used to save and get data to/from the VPR PARAMETERS in the 
"KRN",8994,1466,1,2,0)
parameter file.
"KRN",8994,1466,2,0)
^8994.02A^1^1
"KRN",8994,1466,2,1,0)
PARAMS^2^^1^1
"KRN",8994,1466,2,"B","PARAMS",1)

"KRN",8994,1466,2,"PARAMSEQ",1,1)

"KRN",8994,1467,-1)
0^8
"KRN",8994,1467,0)
VPRFPTC LOG^LOG^VPRFPTC^3^^^^0
"KRN",8994,1467,1,0)
^8994.01^2^2^3120124^
"KRN",8994,1467,1,1,0)
This RPC is used to log a patient when a provider is accessing a 
"KRN",8994,1467,1,2,0)
sensitive record.
"KRN",8994,1467,2,0)
^8994.02A^1^1
"KRN",8994,1467,2,1,0)
ICN^1^^1^1
"KRN",8994,1467,2,"B","ICN",1)

"KRN",8994,1467,2,"PARAMSEQ",1,1)

"KRN",8994,1468,-1)
0^14
"KRN",8994,1468,0)
VPR DELETE ROSTER^DELROS^VPRROS3^1^^^^^1.2
"KRN",8994,1468,2,0)
^8994.02A^1^1
"KRN",8994,1468,2,1,0)
VPRIEN^1^100^1^1
"KRN",8994,1468,2,1,1,0)
^8994.021^1^1^3131210^^
"KRN",8994,1468,2,1,1,1,0)
Roster IEN.
"KRN",8994,1468,2,"B","VPRIEN",1)

"KRN",8994,1468,2,"PARAMSEQ",1,1)

"KRN",8994,2949,-1)
0^21
"KRN",8994,2949,0)
VPR PUT PATIENT DATA^PUT^VPRDJ1^1^S^^^1^1^^1
"KRN",8994,2949,1,0)
^8994.01^2^2^3121129^^^^
"KRN",8994,2949,1,1,0)
This RPC receives data from the client and saves it in the VPR Patient
"KRN",8994,2949,1,2,0)
Object file #560.1 as JSON.
"KRN",8994,2949,2,0)
^8994.02A^3^3
"KRN",8994,2949,2,1,0)
DFN^1^20^1^1
"KRN",8994,2949,2,1,1,0)
^8994.021^2^2^3121010^^^
"KRN",8994,2949,2,1,1,1,0)
Internal entry number from Patient file #2
"KRN",8994,2949,2,1,1,2,0)
[optionally DFN;ICN for remote calls]
"KRN",8994,2949,2,2,0)
TYPE^1^100^0^2
"KRN",8994,2949,2,2,1,0)
^8994.021^1^1^3121010^^^^
"KRN",8994,2949,2,2,1,1,0)
The kind of data being stored.
"KRN",8994,2949,2,3,0)
OBJECT^3^^0^3
"KRN",8994,2949,2,3,1,0)
^8994.021^1^1^3121129^^^^
"KRN",8994,2949,2,3,1,1,0)
The content of the object, as JSON
"KRN",8994,2949,2,"B","DFN",1)

"KRN",8994,2949,2,"B","OBJECT",3)

"KRN",8994,2949,2,"B","TYPE",2)

"KRN",8994,2949,2,"PARAMSEQ",1,1)

"KRN",8994,2949,2,"PARAMSEQ",2,2)

"KRN",8994,2949,2,"PARAMSEQ",3,3)

"KRN",8994,2949,3,0)
^8994.03^1^1^3121129^^^^
"KRN",8994,2949,3,1,0)
Text array formatted as JSON
"KRN",8994,2950,-1)
0^20
"KRN",8994,2950,0)
VPR PUT OBJECT^PUT^VPRDJ2^1^S^^^1^1^^1
"KRN",8994,2950,1,0)
^8994.01^2^2^3131216^^^^
"KRN",8994,2950,1,1,0)
This RPC receives data from the client and saves it in the VPR Object
"KRN",8994,2950,1,2,0)
file #560.11 as JSON.
"KRN",8994,2950,2,0)
^8994.02A^3^2
"KRN",8994,2950,2,2,0)
TYPE^1^100^0^1
"KRN",8994,2950,2,2,1,0)
^8994.021^1^1^3121129^^^^
"KRN",8994,2950,2,2,1,1,0)
The kind of data being stored.
"KRN",8994,2950,2,3,0)
OBJECT^3^^0^2
"KRN",8994,2950,2,3,1,0)
^8994.021^1^1^3121129^^^^
"KRN",8994,2950,2,3,1,1,0)
The content of the object, as JSON
"KRN",8994,2950,2,"B","OBJECT",3)

"KRN",8994,2950,2,"B","TYPE",2)

"KRN",8994,2950,2,"PARAMSEQ",1,2)

"KRN",8994,2950,2,"PARAMSEQ",2,3)

"KRN",8994,2950,3,0)
^8994.03^1^1^3121129^^^^
"KRN",8994,2950,3,1,0)
Text array formatted as JSON
"KRN",8994,2953,-1)
0^17
"KRN",8994,2953,0)
VPR GET OBJECT^GET^VPRDJ2^4^S^^^0^1^^1
"KRN",8994,2953,1,0)
^8994.01^2^2^3121219^^^^
"KRN",8994,2953,1,1,0)
This RPC retrieves the requested data from VistA, and returns it in
"KRN",8994,2953,1,2,0)
^TMP("VPR",$J,n) as JSON.
"KRN",8994,2953,2,0)
^8994.02A^1^1
"KRN",8994,2953,2,1,0)
FILTER^2^^0^1
"KRN",8994,2953,2,1,1,0)
^8994.021^1^1^3121219^^^^
"KRN",8994,2953,2,1,1,1,0)
List of name-value pairs defining the search.
"KRN",8994,2953,2,"B","FILTER",1)

"KRN",8994,2953,2,"PARAMSEQ",1,1)

"KRN",8994,2953,3,0)
^8994.03^1^1^3121219^^^^
"KRN",8994,2953,3,1,0)
Text array formatted as JSON
"KRN",8994,2954,-1)
0^16
"KRN",8994,2954,0)
VPR DELETE OBJECT^DEL^VPRDJ2^1^S^^^1^1^^1
"KRN",8994,2954,1,0)
^8994.01^2^2^3130103^^^^
"KRN",8994,2954,1,1,0)
This RPC receives a Uid from the client and deletes the object from the
"KRN",8994,2954,1,2,0)
VPR Object file #560.11.
"KRN",8994,2954,2,0)
^8994.02A^2^1
"KRN",8994,2954,2,2,0)
UID^1^100^1^1
"KRN",8994,2954,2,2,1,0)
^8994.021^1^1^3130103^^^^
"KRN",8994,2954,2,2,1,1,0)
The Uid of the object being deleted.
"KRN",8994,2954,2,"B","UID",2)

"KRN",8994,2954,2,"PARAMSEQ",1,2)

"KRN",8994,2954,3,0)
^8994.03^1^1^3130103^^^^
"KRN",8994,2954,3,1,0)
Text array formatted as JSON
"KRN",8994,2955,-1)
0^19
"KRN",8994,2955,0)
VPR GET ROSTER LIST^GET^VPRROS7^4^S^^^^1^^1
"KRN",8994,2955,1,0)
^8994.01^2^2^3130221^^
"KRN",8994,2955,1,1,0)
Patient identification data passed in and roster identification returned.
"KRN",8994,2955,1,2,0)
List will contain all rosters associated with patient.
"KRN",8994,2955,2,0)
^8994.02A^2^2
"KRN",8994,2955,2,1,0)
VPR^2^3200^1^1
"KRN",8994,2955,2,2,0)
VPRARRAY^2^3200^1^1
"KRN",8994,2955,2,"B","VPR",1)

"KRN",8994,2955,2,"B","VPRARRAY",2)

"KRN",8994,2955,2,"PARAMSEQ",1,1)

"KRN",8994,2955,2,"PARAMSEQ",1,2)

"KRN",8994,2956,-1)
0^18
"KRN",8994,2956,0)
VPR GET OPERATIONAL DATA^GET^VPREF^4^S^^^0^1^^1
"KRN",8994,2956,1,0)
^8994.01^2^2^3130507^^^^
"KRN",8994,2956,1,1,0)
This RPC retrieves the requested data from VistA, and returns it in
"KRN",8994,2956,1,2,0)
^TMP("VPR",$J,n) as JSON.
"KRN",8994,2956,2,0)
^8994.02A^1^1
"KRN",8994,2956,2,1,0)
FILTER^2^^0^1
"KRN",8994,2956,2,1,1,0)
^8994.021^1^1^3130507^^^^
"KRN",8994,2956,2,1,1,1,0)
List of name-value pairs defining the search.
"KRN",8994,2956,2,"B","FILTER",1)

"KRN",8994,2956,2,"PARAMSEQ",1,1)

"KRN",8994,2956,3,0)
^8994.03^1^1^3130507^^^^
"KRN",8994,2956,3,1,0)
Text array formatted as JSON
"KRN",8994,2965,-1)
0^23
"KRN",8994,2965,0)
VPR SUBSCRIBE ROSTERS^SUBS^VPRROS7^4^S^^^1^^^1
"KRN",8994,2965,1,0)
^8994.01^3^3^3130417^^^^
"KRN",8994,2965,1,1,0)
This RPC will maintain a list of rosters to monitor for new patients.
"KRN",8994,2965,1,2,0)
The LIST of rosters passed into this RPC is returned in ^TMP($J,"VPR",n)
"KRN",8994,2965,1,3,0)
as XML, with a subscription status of 'on', 'off', or 'error'.
"KRN",8994,2965,2,0)
^8994.02A^3^3
"KRN",8994,2965,2,1,0)
SYS^1^^0^1
"KRN",8994,2965,2,1,1,0)
^8994.021^3^3^3130417^^^^
"KRN",8994,2965,2,1,1,1,0)
This is the name of the system calling the RPC; it is used to create
"KRN",8994,2965,2,1,1,2,0)
an entry in the VPR SUBSCRIPTION file, and link a system to a list of
"KRN",8994,2965,2,1,1,3,0)
rosters.
"KRN",8994,2965,2,2,0)
LIST^2^^0^3
"KRN",8994,2965,2,2,1,0)
^8994.021^2^2^3130417^^^^
"KRN",8994,2965,2,2,1,1,0)
This is the list of roster identifiers that are to be either added to or
"KRN",8994,2965,2,2,1,2,0)
removed from the monitor.
"KRN",8994,2965,2,3,0)
STS^1^^0^2
"KRN",8994,2965,2,3,1,0)
^8994.021^2^2^3130417^^
"KRN",8994,2965,2,3,1,1,0)
This is a boolean value, 1 or 0, indicating if the roster should be
"KRN",8994,2965,2,3,1,2,0)
added to or removed from the data monitor.
"KRN",8994,2965,2,"B","LIST",2)

"KRN",8994,2965,2,"B","STS",3)

"KRN",8994,2965,2,"B","SYS",1)

"KRN",8994,2965,2,"PARAMSEQ",1,1)

"KRN",8994,2965,2,"PARAMSEQ",2,3)

"KRN",8994,2965,2,"PARAMSEQ",3,2)

"KRN",8994,2965,3,0)
^8994.03^1^1^3130417^^^^
"KRN",8994,2965,3,1,0)
Text array formatted as XML.
"KRN",8994,2973,-1)
0^24
"KRN",8994,2973,0)
VPRCPRS RPC^RPC^VPRCPRS^3^^^^0
"KRN",8994,2973,2,0)
^8994.02A^1^1
"KRN",8994,2973,2,1,0)
PARAMS^2^^1^1
"KRN",8994,2973,2,"B","PARAMS",1)

"KRN",8994,2973,2,"PARAMSEQ",1,1)

"MBREQ")
1
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PKG",571,-1)
1^1
"PKG",571,0)
VIRTUAL PATIENT RECORD^VPR^Utilities to manage a virtual copy of the patient record
"PKG",571,20,0)
^9.402P^^
"PKG",571,22,0)
^9.49I^1^1
"PKG",571,22,1,0)
1.0^3110804^3110525^1085
"PKG",571,22,1,"PAH",1,0)
3^3140611^1085
"PKG",571,22,1,"PAH",1,1,0)
^^2^2^3140611
"PKG",571,22,1,"PAH",1,1,1,0)
The Virtual Patient Record (VPR) monitors a VistA system for new data
"PKG",571,22,1,"PAH",1,1,2,0)
and activity, and makes that data available to a subscribing client.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
76
"RTN","VPRCAC")
0^92^B93748801
"RTN","VPRCAC",1,0)
VPRCAC ;SLC/AGP-- VPR CAC Tools
"RTN","VPRCAC",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Feb 06, 2014;Build 283
"RTN","VPRCAC",3,0)
 ;
"RTN","VPRCAC",4,0)
 Q
"RTN","VPRCAC",5,0)
 ;
"RTN","VPRCAC",6,0)
ASK(YESNO,PROMPT)      ;
"RTN","VPRCAC",7,0)
 N X,Y,TEXT
"RTN","VPRCAC",8,0)
 K DIROUT,DIRUT,DTOUT,DUOUT
"RTN","VPRCAC",9,0)
 S DIR(0)="YA0"
"RTN","VPRCAC",10,0)
 S DIR("A")=PROMPT
"RTN","VPRCAC",11,0)
 S DIR("B")="N"
"RTN","VPRCAC",12,0)
 S DIR("?")="Enter Y or N. For detailed help type ??"
"RTN","VPRCAC",13,0)
 ;S DIR("??")=U_"D HELP^PXRMLCR("_NUM_")"
"RTN","VPRCAC",14,0)
 W !
"RTN","VPRCAC",15,0)
 D ^DIR K DIR
"RTN","VPRCAC",16,0)
 I $D(DIROUT) S DTOUT=1
"RTN","VPRCAC",17,0)
 I $D(DTOUT)!($D(DUOUT)) Q
"RTN","VPRCAC",18,0)
 S YESNO=$E(Y(0))
"RTN","VPRCAC",19,0)
 Q
"RTN","VPRCAC",20,0)
 ;
"RTN","VPRCAC",21,0)
ADDSVR() ;
"RTN","VPRCAC",22,0)
 N DIC,DLAYGO,Y
"RTN","VPRCAC",23,0)
 S DIC="^VPR(560,",DIC(0)="AEMQL",DIC("A")="Select HMP server instance: ",DLAYGO=560
"RTN","VPRCAC",24,0)
 D ^DIC
"RTN","VPRCAC",25,0)
 Q Y
"RTN","VPRCAC",26,0)
 ;
"RTN","VPRCAC",27,0)
OPTASGN() ;
"RTN","VPRCAC",28,0)
 N ARGS,DIC,DLAYGO,FDA,HASOPT,IEN,LIST,MSG,OPTNAME,PAT,RESULT,SVR,VPRERR,VPROPT,Y,YESNO
"RTN","VPRCAC",29,0)
 S OPTNAME="VPR UI CONTEXT"
"RTN","VPRCAC",30,0)
 S VPROPT=$$FIND1^DIC(19,"","B",OPTNAME,,,"MSG") I VPROPT'>0 W !,"Error: Could not find 'VPR UI CONTEXT' option." Q
"RTN","VPRCAC",31,0)
 ;
"RTN","VPRCAC",32,0)
 S Y=$$ADDSVR() I +Y<0 Q
"RTN","VPRCAC",33,0)
 S SVR=$P($G(^VPR(560,+Y,0)),U)
"RTN","VPRCAC",34,0)
 ;
"RTN","VPRCAC",35,0)
 K DLAYGO
"RTN","VPRCAC",36,0)
 S DIC="^VA(200,",DIC(0)="AEMQ",DIC("A")="Select user to provide access to HMP: "
"RTN","VPRCAC",37,0)
 D ^DIC
"RTN","VPRCAC",38,0)
 I +Y<0 Q
"RTN","VPRCAC",39,0)
 S IEN=+Y
"RTN","VPRCAC",40,0)
 ;
"RTN","VPRCAC",41,0)
 S HASOPT=$$ACCESS^XQCHK(IEN,VPROPT)
"RTN","VPRCAC",42,0)
 I +HASOPT>0 D  Q
"RTN","VPRCAC",43,0)
 .W !,"User has 'VPR UI CONTEXT' already assigned." D ASK(.YESNO,"Sync user default CPRS patient list: ") I YESNO'="Y" Q
"RTN","VPRCAC",44,0)
 .I $G(YESNO)="Y" D GETPATS(.RESULT,IEN,SVR)
"RTN","VPRCAC",45,0)
 ;
"RTN","VPRCAC",46,0)
 K YESNO
"RTN","VPRCAC",47,0)
 D ASK(.YESNO,"Assign 'VPR UI CONTEXT': ")
"RTN","VPRCAC",48,0)
 I YESNO'="Y" Q
"RTN","VPRCAC",49,0)
 S FDA(200.03,"+2,"_IEN_",",.01)=VPROPT
"RTN","VPRCAC",50,0)
 D UPDATE^DIE("","FDA","","VPRERR")
"RTN","VPRCAC",51,0)
 I $D(VPRERR) D  Q
"RTN","VPRCAC",52,0)
 .D EN^DDIOL("Update failed, UPDATE^DIE returned the following error message.")
"RTN","VPRCAC",53,0)
 .S IC="VPRERR"
"RTN","VPRCAC",54,0)
 .F  S IC=$Q(@IC) Q:IC=""  W !,IC,"=",@IC
"RTN","VPRCAC",55,0)
 D GETPATS(.RESULT,IEN,SVR)
"RTN","VPRCAC",56,0)
 Q
"RTN","VPRCAC",57,0)
 ;
"RTN","VPRCAC",58,0)
GETPATS(RESULT,IEN,SRV) ;
"RTN","VPRCAC",59,0)
 N ARGS,LIST,PAT
"RTN","VPRCAC",60,0)
 D GETDFLST(.LIST,IEN)
"RTN","VPRCAC",61,0)
 I '$D(LIST) W !,"No default patient list found." Q
"RTN","VPRCAC",62,0)
 S ARGS("command")="putPtSubscription"
"RTN","VPRCAC",63,0)
 S ARGS("server")=SRV
"RTN","VPRCAC",64,0)
 S PAT=0 F  S PAT=$O(LIST(PAT)) Q:PAT'>0  D
"RTN","VPRCAC",65,0)
 .;check to see if patient is already sync for the server.
"RTN","VPRCAC",66,0)
 .I $G(^VPR(560,"AITEM",PAT,SRV))>0 W !,"Patient "_PAT_" already synced." Q
"RTN","VPRCAC",67,0)
 .S ARGS("localId")=PAT
"RTN","VPRCAC",68,0)
 .W !,"Starting sync on patient: "_PAT
"RTN","VPRCAC",69,0)
 .D API^VPRDJFS(.RESULT,.ARGS)
"RTN","VPRCAC",70,0)
 Q
"RTN","VPRCAC",71,0)
 ;
"RTN","VPRCAC",72,0)
 ;
"RTN","VPRCAC",73,0)
BLDLIST(LIST,VPRY) ;
"RTN","VPRCAC",74,0)
 N I,CNT,NODE
"RTN","VPRCAC",75,0)
 S I=0 F  S I=$O(VPRY(I)) Q:I'>0  D
"RTN","VPRCAC",76,0)
 .S NODE=$G(VPRY(I)) I +NODE'>0 Q
"RTN","VPRCAC",77,0)
 .;S CNT=$O(VPRY(I),-1)+1
"RTN","VPRCAC",78,0)
 .S LIST(+$P(NODE,U))=""
"RTN","VPRCAC",79,0)
 Q
"RTN","VPRCAC",80,0)
 ;
"RTN","VPRCAC",81,0)
 ;The appointment list date range is designed to query for full dates, 
"RTN","VPRCAC",82,0)
 ;so when the search result exceeds 200 appointments, 
"RTN","VPRCAC",83,0)
 ;the display will end with the last appointment of the last day before the maximum was reached. 
"RTN","VPRCAC",84,0)
CLINPTS2(Y,USER,CLIN,BDATE,EDATE) ; WRAPPER FUNCTION FOR USE BY RPC CALL ORQPT CLINIC PATIENTS
"RTN","VPRCAC",85,0)
 N MAXAPPTS,APPTBGN,APPTEND,NUMAPPTS
"RTN","VPRCAC",86,0)
 S MAXAPPTS=200 I BDATE=EDATE S MAXAPPTS=0  ; if we only want one day, don't limit answer.
"RTN","VPRCAC",87,0)
 D CLINPTS(.Y,USER,CLIN,BDATE,EDATE,MAXAPPTS,.APPTBGN,.APPTEND)
"RTN","VPRCAC",88,0)
 S NUMAPPTS=$O(Y(""),-1)
"RTN","VPRCAC",89,0)
 I MAXAPPTS,NUMAPPTS'<MAXAPPTS D
"RTN","VPRCAC",90,0)
 . N ORI
"RTN","VPRCAC",91,0)
 . S ORI=0 S APPTEND=$P(APPTEND,".")
"RTN","VPRCAC",92,0)
 . F  S ORI=$O(Y(ORI)) Q:'ORI  D  ;erase last day's appts since we assume it to be partial
"RTN","VPRCAC",93,0)
 .. I APPTEND<$P(Y(ORI),U,4) K Y(ORI) S NUMAPPTS=NUMAPPTS-1 ;erase an appointment
"RTN","VPRCAC",94,0)
 . S Y(MAXAPPTS+1)="^ *** UNABLE TO SHOW ALL APPOINTMENTS ***"
"RTN","VPRCAC",95,0)
 . S Y(MAXAPPTS+2)="^ Showing the first "_NUMAPPTS_" appointments from "_$$FMTE^XLFDT(APPTBGN,"D")_" to "_$$FMTE^XLFDT(APPTEND-1,"D")
"RTN","VPRCAC",96,0)
 . S Y(MAXAPPTS+3)="^"_$C(160)_" Modify the appointment list date range to start on "_$$FMTE^XLFDT(APPTEND,"D")_" to see additional appointments." ;add blank line
"RTN","VPRCAC",97,0)
 . S Y(MAXAPPTS+4)="^"_$C(160)_$C(160) ;add blank line
"RTN","VPRCAC",98,0)
 ;
"RTN","VPRCAC",99,0)
CLINPTS(Y,USER,CLIN,BDATE,EDATE,MAXAPPTS,APPTBGN,APPTEND) ; RETURN LIST OF PTS W/CLINIC APPT W/IN BEGINNING AND END DATES
"RTN","VPRCAC",100,0)
 ; PKS-8/2003: Modified for new scheduling pkg APIs.
"RTN","VPRCAC",101,0)
 I +$G(CLIN)<1 S Y(1)="^No clinic identified" Q 
"RTN","VPRCAC",102,0)
 I $$ACTLOC^ORWU(CLIN)'=1 S Y(1)="^Clinic is inactive or Occasion Of Service" Q
"RTN","VPRCAC",103,0)
 N ORSRV,ORRESULT,ORERR,ORI,ORPT,ORPTSTAT,ORAPPT,ORCLIN,SDARRAY,NODE
"RTN","VPRCAC",104,0)
 I $L($G(MAXAPPTS))=0 S MAXAPPTS=200
"RTN","VPRCAC",105,0)
 S ORSRV=$G(^VA(200,USER,5)) I +ORSRV>0 S ORSRV=$P(ORSRV,U)
"RTN","VPRCAC",106,0)
 I BDATE="" S BDATE=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))
"RTN","VPRCAC",107,0)
 I EDATE="" S EDATE=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))
"RTN","VPRCAC",108,0)
 ;
"RTN","VPRCAC",109,0)
 ; Convert BDATE, EDATE to FM Date/Time:
"RTN","VPRCAC",110,0)
 D DT^DILF("T",BDATE,.BDATE,"","")
"RTN","VPRCAC",111,0)
 D DT^DILF("T",EDATE,.EDATE,"","")
"RTN","VPRCAC",112,0)
 I (BDATE=-1)!(EDATE=-1) S Y(1)="^Error in date range." Q 
"RTN","VPRCAC",113,0)
 S EDATE=$P(EDATE,".")_.5 ; Add 1/2 day to end date.
"RTN","VPRCAC",114,0)
 ;
"RTN","VPRCAC",115,0)
 K ^TMP($J,"SDAMA301") ; Clean house before starting.
"RTN","VPRCAC",116,0)
 S ORRESULT=""
"RTN","VPRCAC",117,0)
 S ORCLIN=+CLIN
"RTN","VPRCAC",118,0)
 S SDARRAY(1)=BDATE_";"_EDATE
"RTN","VPRCAC",119,0)
 S SDARRAY(2)=+CLIN
"RTN","VPRCAC",120,0)
 S SDARRAY(3)="R;I;NT"
"RTN","VPRCAC",121,0)
 S SDARRAY("SORT")="P" ;no clinic index
"RTN","VPRCAC",122,0)
 S SDARRAY("FLDS")="3;4"  ;ApptStatus^IEN;PtName
"RTN","VPRCAC",123,0)
 I MAXAPPTS S SDARRAY("MAX")=MAXAPPTS
"RTN","VPRCAC",124,0)
 ;
"RTN","VPRCAC",125,0)
 S ORRESULT=$$SDAPI^SDAMA301(.SDARRAY) ; DBIA 4433
"RTN","VPRCAC",126,0)
 ;
"RTN","VPRCAC",127,0)
 ; Deal with server errors:
"RTN","VPRCAC",128,0)
 I ORRESULT<0 D  S Y(1)=U_ORERR Q
"RTN","VPRCAC",129,0)
 .S ORERR=""
"RTN","VPRCAC",130,0)
 .N IDXERR S IDXERR=$O(^TMP($J,"SDAMA301","")) Q:IDXERR'>0
"RTN","VPRCAC",131,0)
 .S ORERR=^TMP($J,"SDAMA301",IDXERR)
"RTN","VPRCAC",132,0)
 ;
"RTN","VPRCAC",133,0)
 ; Reassign ^TMP array to local array:
"RTN","VPRCAC",134,0)
 S (ORPT,ORI)=0
"RTN","VPRCAC",135,0)
 I ORRESULT'>0 S Y(1)="^No appointments." Q
"RTN","VPRCAC",136,0)
 F  S ORPT=$O(^TMP($J,"SDAMA301",ORPT)) Q:ORPT=""  D
"RTN","VPRCAC",137,0)
 .S ORAPPT=""
"RTN","VPRCAC",138,0)
 .F  S ORAPPT=$O(^TMP($J,"SDAMA301",ORPT,ORAPPT)) Q:ORAPPT=""  D
"RTN","VPRCAC",139,0)
 ..S ORI=ORI+1
"RTN","VPRCAC",140,0)
 ..S NODE=^TMP($J,"SDAMA301",ORPT,ORAPPT)
"RTN","VPRCAC",141,0)
 ..S Y(ORI)=$TR($P(NODE,U,4),";","^") ; IEN^Name.
"RTN","VPRCAC",142,0)
 ..S Y(ORI)=Y(ORI)_U_ORCLIN ; ^Clinic IEN.
"RTN","VPRCAC",143,0)
 ..S Y(ORI)=Y(ORI)_U_ORAPPT ; App't.
"RTN","VPRCAC",144,0)
 ..I $L($G(APPTEND))=0 S APPTEND=ORAPPT,APPTBGN=ORAPPT
"RTN","VPRCAC",145,0)
 ..I ORAPPT>APPTEND S APPTEND=ORAPPT
"RTN","VPRCAC",146,0)
 ..I ORAPPT<APPTBGN S APPTBGN=ORAPPT
"RTN","VPRCAC",147,0)
 ..S ORPTSTAT=$P($P(NODE,U,3),";",1) ;appt status, will be transformed to pt status.
"RTN","VPRCAC",148,0)
 ..S ORPTSTAT=$S(ORPTSTAT="I":"IPT",ORPTSTAT="R":"OPT",ORPTSTAT="NT":"OPT",1:"") ; Pt Status.
"RTN","VPRCAC",149,0)
 ..S Y(ORI)=Y(ORI)_U_U_U_U_U_ORPTSTAT ; Pt I or O status (or "NT").
"RTN","VPRCAC",150,0)
 K ^TMP($J,"SDAMA301") ; Clean house after finishing.
"RTN","VPRCAC",151,0)
 ;
"RTN","VPRCAC",152,0)
 Q
"RTN","VPRCAC",153,0)
 ;
"RTN","VPRCAC",154,0)
COMBPTS(LIST,USER,PTR,BDATE,EDATE) ;
"RTN","VPRCAC",155,0)
 N FILE,MAXAPPTS,MSG,PTR,RTN,SRC,TXT,VPRERR,VPRY
"RTN","VPRCAC",156,0)
 ;
"RTN","VPRCAC",157,0)
 ; Do preliminary settings, cleanup, look for an existing user record:
"RTN","VPRCAC",158,0)
 S MSG=""                                       ; Default.
"RTN","VPRCAC",159,0)
 S MAXAPPTS=$S(BDATE=EDATE:0,1:200)         ; If date range is only one day then no max, otherwise 200
"RTN","VPRCAC",160,0)
 S RTN=$$FIND1^DIC(100.24,"","QX",USER,"","","VPRERR")
"RTN","VPRCAC",161,0)
 K VPRERR
"RTN","VPRCAC",162,0)
 D CLEAN^DILF ; Clean up after DB call.
"RTN","VPRCAC",163,0)
 ;
"RTN","VPRCAC",164,0)
 ; If no combination record, then punt:
"RTN","VPRCAC",165,0)
 I +RTN<1 D
"RTN","VPRCAC",166,0)
 .S MSG="No combination entry."
"RTN","VPRCAC",167,0)
 .Q
"RTN","VPRCAC",168,0)
 ;
"RTN","VPRCAC",169,0)
 ; Order through the user's combination source entries:
"RTN","VPRCAC",170,0)
 S SORT="A" ; Required variable for PTSCOMBO^ORQPTQ5.
"RTN","VPRCAC",171,0)
 S SRC=0
"RTN","VPRCAC",172,0)
 F  S SRC=$O(^OR(100.24,RTN,.01,SRC)) Q:'SRC  D
"RTN","VPRCAC",173,0)
 .K ORY                                         ; Clean up each time.
"RTN","VPRCAC",174,0)
 .S TXT=""                                   ; Initialize.
"RTN","VPRCAC",175,0)
 .S TXT=$G(^OR(100.24,RTN,.01,SRC,0))  ; Get record's value.
"RTN","VPRCAC",176,0)
 .;
"RTN","VPRCAC",177,0)
 .; In case of error, punt:
"RTN","VPRCAC",178,0)
 .I TXT="" S MSG="Combination source entry error."
"RTN","VPRCAC",179,0)
 .I TXT="" Q
"RTN","VPRCAC",180,0)
 .S PTR=$P(TXT,";")                       ; Get pointer.
"RTN","VPRCAC",181,0)
 .S FILE="^"_$P(TXT,";",2)                ; Get file.
"RTN","VPRCAC",182,0)
 .;
"RTN","VPRCAC",183,0)
 .; Get info for each source entry and build VPRY array accordingly.
"RTN","VPRCAC",184,0)
 .I FILE="^DIC(42," D  Q                     ; Wards.
"RTN","VPRCAC",185,0)
 ..D WARDPTS^ORQPTQ2(.VPRY,PTR)
"RTN","VPRCAC",186,0)
 ..I $D(VPRY) D BLDLIST(.LIST,.VPRY)
"RTN","VPRCAC",187,0)
 .I FILE="^VA(200," D  Q                     ; Providers.
"RTN","VPRCAC",188,0)
 ..D PROVPTS^ORQPTQ2(.VPRY,PTR)
"RTN","VPRCAC",189,0)
 ..I $D(VPRY) D BLDLIST(.LIST,.VPRY)
"RTN","VPRCAC",190,0)
 .I FILE="^DIC(45.7," D  Q                   ; Specialties.
"RTN","VPRCAC",191,0)
 ..D SPECPTS^ORQPTQ2(.VPRY,PTR)
"RTN","VPRCAC",192,0)
 ..I $D(VPRY) D BLDLIST(.LIST,.VPRY)
"RTN","VPRCAC",193,0)
 .I FILE="^OR(100.21," D  Q                  ; Team Lists
"RTN","VPRCAC",194,0)
 ..D TEAMPTS^ORQPTQ1(.VPRY,PTR)
"RTN","VPRCAC",195,0)
 ..I $D(VPRY) D BLDLIST(.LIST,.VPRY)
"RTN","VPRCAC",196,0)
 .I FILE="^SC(" D  Q                         ; Clinics.
"RTN","VPRCAC",197,0)
 ..N APPTBGN,APPTEND S (APPTBGN,APPTEND)=""
"RTN","VPRCAC",198,0)
 ..D CLINPTS^ORQPTQ2(.VPRY,PTR,BDATE,EDATE,MAXAPPTS,.APPTBGN,.APPTEND)
"RTN","VPRCAC",199,0)
 ..I $D(VPRY) D BLDLIST(.LIST,.VPRY)
"RTN","VPRCAC",200,0)
 Q
"RTN","VPRCAC",201,0)
 ;
"RTN","VPRCAC",202,0)
GETDFLST(LIST,USER) ;
"RTN","VPRCAC",203,0)
 N API,BEG,END,IEN,SRC,SRV,VPRSRC,VPRY,X
"RTN","VPRCAC",204,0)
 S SRV=$G(^VA(200,USER,5)) I +SRV>0 S SRV=$P(SRV,U)
"RTN","VPRCAC",205,0)
 S SRC=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT LIST SOURCE",1,"Q")
"RTN","VPRCAC",206,0)
 ;
"RTN","VPRCAC",207,0)
 I SRC="T" S IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT TEAM",1,"Q") D:+$G(IEN)>0 TEAMPTS^ORQPTQ1(.VPRY,IEN)
"RTN","VPRCAC",208,0)
 I SRC="W" S IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT WARD",1,"Q") D:+$G(IEN)>0 BYWARD^ORWPT(.VPRY,IEN)
"RTN","VPRCAC",209,0)
 I SRC="P" S IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT PROVIDER",1,"Q") D:+$G(IEN)>0 PROVPTS^ORQPTQ2(.VPRY,IEN)
"RTN","VPRCAC",210,0)
 I SRC="S" S IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),"ORLP DEFAULT SPECIALTY",1,"Q") D:+$G(IEN)>0 SPECPTS^ORQPTQ2(.VPRY,IEN)
"RTN","VPRCAC",211,0)
 I SRC'="C",SRC'="M" D BLDLIST(.LIST,.VPRY) Q
"RTN","VPRCAC",212,0)
 ;
"RTN","VPRCAC",213,0)
  I SRC="C" D  Q
"RTN","VPRCAC",214,0)
 .F X="Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday" D
"RTN","VPRCAC",215,0)
 ..S API="ORLP DEFAULT CLINIC "_$$UP^XLFSTR($$DOW^XLFDT(DT)),IEN=$$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV),API,1,"Q") I +$G(IEN)>0 D
"RTN","VPRCAC",216,0)
 ...S BEG=$$UP^XLFSTR($$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))
"RTN","VPRCAC",217,0)
 ...I BEG="T+0" S BEG=$$FMTE^XLFDT(DT,BEG)
"RTN","VPRCAC",218,0)
 ...S END=$$UP^XLFSTR($$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))
"RTN","VPRCAC",219,0)
 ...I END="T+0" S END=$$FMTE^XLFDT(DT,END)
"RTN","VPRCAC",220,0)
 ...D CLINPTS2(.VPRY,USER,+$G(IEN),BEG,END)
"RTN","VPRCAC",221,0)
 ...D BLDLIST(.LIST,.VPRY)
"RTN","VPRCAC",222,0)
 I SRC="M" D  Q
"RTN","VPRCAC",223,0)
 .S IEN=$D(^OR(100.24,USER,0)) I +$G(IEN)>0 S IEN=USER D
"RTN","VPRCAC",224,0)
 ..S BEG=$$UP^XLFSTR($$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))
"RTN","VPRCAC",225,0)
 ..I BEG="T+0" S BEG=$$FMTE^XLFDT(DT,BEG)
"RTN","VPRCAC",226,0)
 ..S END=$$UP^XLFSTR($$GET^XPAR("USR.`"_USER_"^SRV.`"_+$G(SRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))
"RTN","VPRCAC",227,0)
 ..I END="T+0" S END=$$FMTE^XLFDT(DT,END)
"RTN","VPRCAC",228,0)
 ..D COMBPTS(.LIST,USER,+$G(IEN),BEG,END) ; "0"= GUI RPC call.
"RTN","VPRCAC",229,0)
 Q
"RTN","VPRCAC",230,0)
 ;
"RTN","VPRCAC",231,0)
REMOPT(IEN,OPT) ;
"RTN","VPRCAC",232,0)
 Q
"RTN","VPRCAC",233,0)
 ;
"RTN","VPRCORD")
0^6^B7459309
"RTN","VPRCORD",1,0)
VPRCORD ;SLC/AGP - Ordering Controller for VPR ; 9/21/12 5:57pm
"RTN","VPRCORD",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCORD",3,0)
 ;
"RTN","VPRCORD",4,0)
 ;
"RTN","VPRCORD",5,0)
RPC(VPROUT,PARAMS) ; Process request via RPC instead of CSP
"RTN","VPRCORD",6,0)
 N X,REQ,VPRCNT,VPRSITE,VPRUSER,VPRDBUG,VPRSTA
"RTN","VPRCORD",7,0)
 S VPRCNT=0
"RTN","VPRCORD",8,0)
 S VPRUSER=DUZ,VPRSITE=DUZ(2),VPRSTA=$$STA^XUAF4(DUZ(2))
"RTN","VPRCORD",9,0)
 S X="" F  S X=$O(PARAMS(X)) Q:X=""  S REQ(X,1)=PARAMS(X)
"RTN","VPRCORD",10,0)
 ;
"RTN","VPRCORD",11,0)
COMMON ; Come here for both CSP and RPC Mode
"RTN","VPRCORD",12,0)
 ;
"RTN","VPRCORD",13,0)
 N CMD
"RTN","VPRCORD",14,0)
 S CMD=$G(REQ("command",1))
"RTN","VPRCORD",15,0)
 ;
"RTN","VPRCORD",16,0)
 ; returns an order structure for change orders
"RTN","VPRCORD",17,0)
 ; or places an order if auto-accept QO
"RTN","VPRCORD",18,0)
 I CMD="ordering" D  G OUT
"RTN","VPRCORD",19,0)
 . D ORDERING^VPRCORD1(.VPROUT,$$VAL("uid"),$$VAL("qoIen"),$$VAL("patient"),$$VAL("location"),$$VAL("provider"),$$VAL("orderAction"),0,$$VAL("snippet"),$$VAL("name"))
"RTN","VPRCORD",20,0)
 ;
"RTN","VPRCORD",21,0)
 ;
"RTN","VPRCORD",22,0)
 I CMD="listQuickOrders" D  G OUT
"RTN","VPRCORD",23,0)
 . D QOL^VPRCORD1(.VPROUT,$$VAL("location"),$$VAL("provider"),$$VAL("panelNumber"),$$VAL("patient"))
"RTN","VPRCORD",24,0)
 ;
"RTN","VPRCORD",25,0)
 I CMD="renewOrder" D  G OUT
"RTN","VPRCORD",26,0)
 . D RENEW^VPRCORD1(.VPROUT,$$VAL("uid"),$$VAL("provider"),0,$$VAL("snippet"),$$VAL("name"))
"RTN","VPRCORD",27,0)
 ;
"RTN","VPRCORD",28,0)
 I CMD="dcReasonsList" D  G OUT
"RTN","VPRCORD",29,0)
 . D DCLREAS^VPRCORD1(.VPROUT,$$VAL("uid"),$$VAL("provider"))
"RTN","VPRCORD",30,0)
 ;
"RTN","VPRCORD",31,0)
 I CMD="discontinue" D  G OUT
"RTN","VPRCORD",32,0)
 . D DC^VPRCORD1(.VPROUT,$$VAL("uid"),$$VAL("provider"),$$VAL("location"),$$VAL("patient"),$$VAL("snippet"),$$VAL("name"))
"RTN","VPRCORD",33,0)
 ;
"RTN","VPRCORD",34,0)
 I CMD="cancel" D  G OUT
"RTN","VPRCORD",35,0)
 . D CANCEL^VPRCORD1(.VPROUT,$$VAL("uid"))
"RTN","VPRCORD",36,0)
 ;
"RTN","VPRCORD",37,0)
 I CMD="performOrderChecks" D  G OUT
"RTN","VPRCORD",38,0)
 . D ORDERING^VPRCORD1(.VPROUT,$$VAL("uid"),$$VAL("qoIen"),$$VAL("patient"),$$VAL("location"),$$VAL("provider"),$$VAL("orderAction"),1)
"RTN","VPRCORD",39,0)
 ;
"RTN","VPRCORD",40,0)
 I CMD="getSnippets" D  G OUT
"RTN","VPRCORD",41,0)
 .D GETSNIPS^VPRCORD1(.VPROUT,$$VAL("patient"),$$VAL("provider"))
"RTN","VPRCORD",42,0)
 ;
"RTN","VPRCORD",43,0)
 I CMD="saveOrder" D  G OUT
"RTN","VPRCORD",44,0)
 .;M ^XTMP("AGP INFO","PARAMS")=PARAMS
"RTN","VPRCORD",45,0)
 .D EN^VPRCORD3(.VPROUT,.PARAMS)
"RTN","VPRCORD",46,0)
 ;
"RTN","VPRCORD",47,0)
 I CMD="orderAction" D  G OUT
"RTN","VPRCORD",48,0)
 .N INFO
"RTN","VPRCORD",49,0)
 .;M ^XTMP("AGP PARAMS")=REQ
"RTN","VPRCORD",50,0)
 .D BLDINFO(.INFO)
"RTN","VPRCORD",51,0)
 .D ORDERUID^VPRCORD1(.VPROUT,.INFO)
"RTN","VPRCORD",52,0)
 ;
"RTN","VPRCORD",53,0)
OUT ;
"RTN","VPRCORD",54,0)
END ;
"RTN","VPRCORD",55,0)
 ;
"RTN","VPRCORD",56,0)
BLDINFO(INFO) ;
"RTN","VPRCORD",57,0)
 N X
"RTN","VPRCORD",58,0)
 S X="" F  S X=$O(REQ(X)) Q:X=""  D
"RTN","VPRCORD",59,0)
 .S INFO(X)=REQ(X,1)
"RTN","VPRCORD",60,0)
 Q
"RTN","VPRCORD",61,0)
 ;
"RTN","VPRCORD",62,0)
VAL(X) ; return value from request
"RTN","VPRCORD",63,0)
 Q $G(REQ(X,1))
"RTN","VPRCORD",64,0)
 ;
"RTN","VPRCORD1")
0^7^B195234236
"RTN","VPRCORD1",1,0)
VPRCORD1 ; SLC/AGP,JLC - Process Order Request from AVIVA System. ; 9/21/12 5:59pm
"RTN","VPRCORD1",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCORD1",3,0)
 Q
"RTN","VPRCORD1",4,0)
 ;
"RTN","VPRCORD1",5,0)
ADD(X,VPRVALUE) ; Add a line @NHIN@(n)=X
"RTN","VPRCORD1",6,0)
 N RESULT
"RTN","VPRCORD1",7,0)
 S RESULT("success")="false"
"RTN","VPRCORD1",8,0)
 S RESULT("error")=X
"RTN","VPRCORD1",9,0)
 D ENCODE^VPRJSON("RESULT","VPRVALUE","VPRERR")
"RTN","VPRCORD1",10,0)
 Q
"RTN","VPRCORD1",11,0)
 ;
"RTN","VPRCORD1",12,0)
AE(TEXT,VPRVALUE) ;
"RTN","VPRCORD1",13,0)
 ;N RESULT
"RTN","VPRCORD1",14,0)
 ;S RESULT("success")="false"
"RTN","VPRCORD1",15,0)
 ;S RESULT("error")=TEXT
"RTN","VPRCORD1",16,0)
 ;D ENCODE^VPRJSON("RESULT","VPRVALUE","VPRERR")
"RTN","VPRCORD1",17,0)
 N DATA,TXT
"RTN","VPRCORD1",18,0)
 S TXT(1)=TEXT
"RTN","VPRCORD1",19,0)
 D SETERROR^VPRUTILS(.VPRVALUE,.TXT,.TXT,.DATA)
"RTN","VPRCORD1",20,0)
 Q
"RTN","VPRCORD1",21,0)
 ;
"RTN","VPRCORD1",22,0)
AEM(TEXT,VPRVALUE) ;
"RTN","VPRCORD1",23,0)
 ;N NUM,RESULT
"RTN","VPRCORD1",24,0)
 ;S RESULT("success")="false"
"RTN","VPRCORD1",25,0)
 ;S NUM=0 F  S NUM=$O(TEXT(NUM)) Q:NUM'>0  D
"RTN","VPRCORD1",26,0)
 ;.I $G(RESULT("error"))="" S RESULT("error")=TEXT(NUM)
"RTN","VPRCORD1",27,0)
 ;.S RESULT("error")=RESULT("error")_$C(13,10)_TEXT(NUM)
"RTN","VPRCORD1",28,0)
 ;D ENCODE^VPRJSON("RESULT","VPRVALUE","VPRERR")
"RTN","VPRCORD1",29,0)
 N DATA
"RTN","VPRCORD1",30,0)
 D SETERROR^VPRUTILS(.VPRVALUE,.TEXT,.TEXT,.DATA)
"RTN","VPRCORD1",31,0)
 Q
"RTN","VPRCORD1",32,0)
 ;
"RTN","VPRCORD1",33,0)
CANCEL(UID) ;
"RTN","VPRCORD1",34,0)
 N VPRERARR,VPRERCNT,VPRRES,VPRISORD,VPROIFN,VPROK,VPRPOSS
"RTN","VPRCORD1",35,0)
 S VPRERCNT=0,VPROUT=0
"RTN","VPRCORD1",36,0)
 I UID'["orderID" D AE("UID does not contain an order ID") G EXIT
"RTN","VPRCORD1",37,0)
 S DFN=$P(UID,":",5),VPROIFN=$P(UID,"D",2),VPRISORD=1
"RTN","VPRCORD1",38,0)
 G UNO
"RTN","VPRCORD1",39,0)
 Q
"RTN","VPRCORD1",40,0)
 ;
"RTN","VPRCORD1",41,0)
 ;DC(VPRVALUE,UID,USER,LOC,ICN,REAS,NAME) ;
"RTN","VPRCORD1",42,0)
DC(VPRVALUE,DFN,ID,USER,LOC,REAS,NAME) ;
"RTN","VPRCORD1",43,0)
 N RESULT,VPRDIEN,VPRERCNT,VPRFILL,VPRISORD,VPROK,VPRRES
"RTN","VPRCORD1",44,0)
 S VPRISORD=1
"RTN","VPRCORD1",45,0)
 ;I $$VALIDUID(UID)=0  D AE("UID is not valid UID",.VPRVALUE) G DCX
"RTN","VPRCORD1",46,0)
 ;S DFN=$P(UID,":",5)
"RTN","VPRCORD1",47,0)
 S VPROIFN=ID
"RTN","VPRCORD1",48,0)
 S VPRDIEN=+$P($G(^OR(100,VPROIFN,0)),U,5)
"RTN","VPRCORD1",49,0)
 D FILLID^ORWDXC(.VPRFILL,VPRDIEN)
"RTN","VPRCORD1",50,0)
 D DC^ORWDXA(.VPRRES,VPROIFN,USER,LOC,REAS,0,0)
"RTN","VPRCORD1",51,0)
 ;D UNO
"RTN","VPRCORD1",52,0)
 D KILLALRT^VPRCORD2(DFN,VPRFILL)
"RTN","VPRCORD1",53,0)
 I $D(VPRVALUE)>0 G DCX
"RTN","VPRCORD1",54,0)
 S REAS="Discontinue "_NAME_" "_REAS
"RTN","VPRCORD1",55,0)
 D BLDJSON^VPRCORD2(.VPRVALUE,.RESULT,.VPRPOSS,.VPRVALUE,$G(REAS),UID)
"RTN","VPRCORD1",56,0)
DCX ;
"RTN","VPRCORD1",57,0)
 Q
"RTN","VPRCORD1",58,0)
 ;
"RTN","VPRCORD1",59,0)
 ;D DCLREAS(.VPRVALUE,DFN,ID,ORPROV)
"RTN","VPRCORD1",60,0)
DCLREAS(RESULT,DFN,VPROIFN,USER) ;
"RTN","VPRCORD1",61,0)
 N CNT,NODE,NUM,VPRHSKEY,VPRERARR,VPRISORD,VPROARRY,VPROUT,VPRRES,VPRPOSS
"RTN","VPRCORD1",62,0)
 S VPRERCNT=0,VPROUT=0,VPRISORD=1
"RTN","VPRCORD1",63,0)
 K VPROUT D OFCPLX^ORWDXA(.VPROUT,VPROIFN) I $D(VPROUT)>0 S RESULT("complexOrder")="true"
"RTN","VPRCORD1",64,0)
 K VPROUT D DCREN^ORWDX1(.VPROUT,VPROIFN) I $D(VPROUT) S RESULT("pendingRenewal")="true"
"RTN","VPRCORD1",65,0)
 K VPROUT D DCREASON^ORWDX2(.VPROUT) I $D(VPROUT) D
"RTN","VPRCORD1",66,0)
 .S CNT=1,NUM=1 F  S CNT=$O(VPROUT(CNT)) Q:CNT'>0  D
"RTN","VPRCORD1",67,0)
 ..S NODE=$E(VPROUT(CNT),2,$L(VPROUT(CNT)))
"RTN","VPRCORD1",68,0)
 ..S RESULT("lists",NUM,"value")=$P(NODE,U,2),RESULT("lists",NUM,"id")=$P(NODE,U),NUM=NUM+1
"RTN","VPRCORD1",69,0)
 Q
"RTN","VPRCORD1",70,0)
 ;
"RTN","VPRCORD1",71,0)
EN(IEN,DFN,LOC,USER,RSPID,ORDTYPE,CHKONLY,VARSARR,ORDIALOG,ERRARR,VPRPOSS,RESULT,VPRVALUE) ;
"RTN","VPRCORD1",72,0)
 N CHECKS,CNT,DEFDLF,DLGDEF,DLGNAME,DIEN,DRUG,EXT,FILLER,INST,ISCLOZ,INT,NUM
"RTN","VPRCORD1",73,0)
 N ODIEN,ORDCHKOT,ORDERCHK,SAVEARR,STR,TEMP,TEXT
"RTN","VPRCORD1",74,0)
 I ORDTYPE="E" S DIEN=+$P($G(^OR(100,IEN,0)),U,5)
"RTN","VPRCORD1",75,0)
 I ORDTYPE="Q" S DIEN=IEN
"RTN","VPRCORD1",76,0)
 S VARSARR("DISPLAY GROUP IEN")=$P($G(^ORD(101.41,$$DEFDLG^ORCD(DIEN),0)),U,5)
"RTN","VPRCORD1",77,0)
 S VARSARR("DISPLAY GROUP")=$P($G(^ORD(101.98,VARSARR("DISPLAY GROUP IEN"),0)),U)
"RTN","VPRCORD1",78,0)
 D FILLID^ORWDXC(.FILLER,DIEN)
"RTN","VPRCORD1",79,0)
 S VARSARR("FILLER ID")=FILLER
"RTN","VPRCORD1",80,0)
 K ^TMP($J,"ORDER CHECKS")
"RTN","VPRCORD1",81,0)
 I $$GET^XPAR("DIV^SYS^PKG","ORK SYSTEM ENABLE/DISABLE")="E" D
"RTN","VPRCORD1",82,0)
 .D DISPLAY^ORWDXC(.CHECKS,DUZ,VARSARR("FILLER ID")) I $D(CHECKS) D INFO^VPRCORD2(.CHECKS)
"RTN","VPRCORD1",83,0)
 S DLGNAME=$P($G(^ORD(101.41,DIEN,0)),U)
"RTN","VPRCORD1",84,0)
 I ORDTYPE="Q" S DLGNAME=$P($G(^ORD(101.41,ORDIALOG,0)),U)
"RTN","VPRCORD1",85,0)
 I DLGNAME="" D AE("INVALID DEFAULT DIALOG",.VPRVALUE) G ENX
"RTN","VPRCORD1",86,0)
 S VARSARR("DIALOG NAME")=DLGNAME
"RTN","VPRCORD1",87,0)
 D DLGDEF^ORWDX(.DLGDEF,DLGNAME)
"RTN","VPRCORD1",88,0)
 ;build order check array,build dialog structure and build save array
"RTN","VPRCORD1",89,0)
 D BLDARRS^VPRCORD2(.RESULT,.ORDIALOG,.VARSARR,DFN,LOC,.ORDERCHK,.SAVEARR,.VPRPOSS)
"RTN","VPRCORD1",90,0)
 D ACCEPT^ORWDXC(.ORDCHKOT,DFN,VARSARR("FILLER ID"),"",LOC,.ORDERCHK,"",0) D INFO^VPRCORD2(.ORDCHKOT)
"RTN","VPRCORD1",91,0)
 I CHKONLY=1 Q
"RTN","VPRCORD1",92,0)
 S SAVEARR("ORCHECK")=0,SAVEARR("ORTS")=0
"RTN","VPRCORD1",93,0)
 I ORDTYPE="Q"!(ACTION="C") D SAVE(.RESULT,DFN,USER,LOC,VARSARR("DIALOG NAME"),VARSARR("DISPLAY GROUP IEN"),DIEN,0,.SAVEARR)
"RTN","VPRCORD1",94,0)
ENX ;
"RTN","VPRCORD1",95,0)
 Q
"RTN","VPRCORD1",96,0)
 ;
"RTN","VPRCORD1",97,0)
GETSNIPS(VPRVALUE,ICN,USER) ;
"RTN","VPRCORD1",98,0)
 N CNT,DFN,RESULT
"RTN","VPRCORD1",99,0)
 I +$G(DFN)'>0 S DFN=$$GETDFN^MPIF001(ICN)
"RTN","VPRCORD1",100,0)
 S CNT=0 F  S CNT=$O(^XTMP("VPR SNIPPET",DFN,USER,DT,CNT)) Q:CNT'>0  D
"RTN","VPRCORD1",101,0)
 .I $G(RESULT("text"))'="" S RESULT=$G(RESULT("text"))_$C(13,10)_$G(^XTMP("VPR SNIPPET",DFN,USER,DT,CNT,"text")) Q
"RTN","VPRCORD1",102,0)
 .S RESULT("text")=$G(^XTMP("VPR SNIPPET",DFN,USER,DT,CNT,"text"))
"RTN","VPRCORD1",103,0)
 S RESULT("success")=$S($D(RESULT):"true",1:"false")
"RTN","VPRCORD1",104,0)
 D ENCODE^VPRJSON("RESULT","VPRVALUE","ERROR")
"RTN","VPRCORD1",105,0)
 Q
"RTN","VPRCORD1",106,0)
 ;
"RTN","VPRCORD1",107,0)
GETEXT(NAME,VALUE) ;
"RTN","VPRCORD1",108,0)
 N RESULT
"RTN","VPRCORD1",109,0)
 I NAME="ORDERABLE" Q $P(^ORD(101.43,VALUE,0),U)
"RTN","VPRCORD1",110,0)
 I NAME="URGENCY" Q $P(^ORD(101.42,VALUE,0),U)
"RTN","VPRCORD1",111,0)
 I NAME="ROUTE" Q $$GET1^DIQ(51.2,+VALUE_",",.01)
"RTN","VPRCORD1",112,0)
 I NAME="DRUG" Q $$GET1^DIQ(50,+VALUE_",",.01)
"RTN","VPRCORD1",113,0)
 Q VALUE
"RTN","VPRCORD1",114,0)
 ;
"RTN","VPRCORD1",115,0)
 ;entry point for RPC for QO and editing an existing order
"RTN","VPRCORD1",116,0)
 ;ORDERING(.OUT,"",15833,10103,240,1089,"",1,"")
"RTN","VPRCORD1",117,0)
ORDERING(VPRVALUE,UID,QIEN,ICN,LOC,USER,ACTION,CHKONLY,REAS,NAME,VPRPOSS) ;
"RTN","VPRCORD1",118,0)
 N DFN,FAIL,ORDTYPE,RESULT,TEMP,VPRERCNT,VPRISORD,VPROIFN
"RTN","VPRCORD1",119,0)
 N VARSARR,VPRERARR,VPRRES,VPRBLT
"RTN","VPRCORD1",120,0)
 S VPRBLT=0
"RTN","VPRCORD1",121,0)
 K ^TMP($J,"ORDER CHECKS")
"RTN","VPRCORD1",122,0)
 S VPRERCNT=0,VPRISORD=0
"RTN","VPRCORD1",123,0)
 S FAIL=0
"RTN","VPRCORD1",124,0)
 I $L($G(UID))>0 D
"RTN","VPRCORD1",125,0)
 . ;I UID'["orderID" D AE("UID does not contain an order ID") S FAIL=1
"RTN","VPRCORD1",126,0)
 . S VPROIFN=$P(UID,":",6)
"RTN","VPRCORD1",127,0)
 I ACTION="R" D RENEW(UID,USER,ICN,CHKONLY) Q:VPRBLT=1  G ORDERUNO
"RTN","VPRCORD1",128,0)
 I FAIL=1 G EXIT
"RTN","VPRCORD1",129,0)
 I +$G(DFN)'>0 S DFN=$$GETDFN^MPIF001(ICN) I DFN'>0 D AE("Cannot find patient dfn from ICN") G EXIT
"RTN","VPRCORD1",130,0)
 ;I QIEN>0 S VPROIFN=QIEN
"RTN","VPRCORD1",131,0)
 I QIEN>0 D QOSET(QIEN,ACTION,DFN,CHKONLY,.RESULT,.VPRVALUE)
"RTN","VPRCORD1",132,0)
 I +QIEN=0 D PROCESS(VPROIFN,ACTION,CHKONLY,.RESULT,.VPRVALUE)
"RTN","VPRCORD1",133,0)
 I CHKONLY=1 Q
"RTN","VPRCORD1",134,0)
 S TEMP=REAS
"RTN","VPRCORD1",135,0)
 I QIEN>0 D
"RTN","VPRCORD1",136,0)
 .S NAME="quick order "_$P($G(^ORD(101.41,QIEN,0)),U,2)
"RTN","VPRCORD1",137,0)
 .S REAS="Place "_"qo"_" "_TEMP
"RTN","VPRCORD1",138,0)
 I ACTION="C" S REAS="Copy "_NAME_" "_TEMP
"RTN","VPRCORD1",139,0)
ORDERUNO ;
"RTN","VPRCORD1",140,0)
 Q
"RTN","VPRCORD1",141,0)
 ;
"RTN","VPRCORD1",142,0)
QOSET(QIEN,ACTION,DFN,CHKONLY,RESULT,VPRVALUE) ;
"RTN","VPRCORD1",143,0)
 N NUM,VPROIFN
"RTN","VPRCORD1",144,0)
 I $P($G(^ORD(101.41,QIEN,0)),U,4)'="O" S VPROIFN=QIEN D PROCESS(VPROIFN,ACTION,CHKONLY,.RESULT,.VPRVALUE) Q
"RTN","VPRCORD1",145,0)
 S NUM=0 F  S NUM=$O(^ORD(101.41,QIEN,10,NUM)) Q:NUM'>0  D
"RTN","VPRCORD1",146,0)
 .S VPROIFN=$P($G(^ORD(101.41,QIEN,10,NUM,0)),U,2) I +$G(VPROIFN)'>0 Q
"RTN","VPRCORD1",147,0)
 .D PROCESS(VPROIFN,ACTION,CHKONLY,.RESULT,.VPRVALUE)
"RTN","VPRCORD1",148,0)
 Q
"RTN","VPRCORD1",149,0)
PROCESS(VPROIFN,ACTION,CHKONLY,RESULT,VPRVALUE,VPROK) ;
"RTN","VPRCORD1",150,0)
 N BLDRES,ORCAT,ORDARR,ORDIALOG,RSPID,TEMP,TEXT
"RTN","VPRCORD1",151,0)
 S TEMP=$G(ACTION)_VPROIFN
"RTN","VPRCORD1",152,0)
 I $$BEG^VPRCORD2(DFN,LOC,TEMP,USER,.VARSARR,.BLDRES)=0 G PROCESSX
"RTN","VPRCORD1",153,0)
 I $P(BLDRES(0),U,4)="Q" D
"RTN","VPRCORD1",154,0)
 .S ORDTYPE="Q"
"RTN","VPRCORD1",155,0)
 .I $P(BLDRES(0),U)'=1,$P(BLDRES(0),U)'=2 D AE("Quick Order is not set to Auto-Accept",.VPRVALUE) G PROCESSX
"RTN","VPRCORD1",156,0)
 I $G(ORDTYPE)="" S ORDTYPE=$S(ACTION="C":"E",ACTION="X":"E",1:"N")
"RTN","VPRCORD1",157,0)
 S RSPID=$P(BLDRES(0),U,2)
"RTN","VPRCORD1",158,0)
 I ACTION="X" I $$CHANGE^VPRCORD2(VPROIFN,DFN,LOC,USER,.ERRARR,.VPRVALUE)=0 G PROCESSX
"RTN","VPRCORD1",159,0)
 I ORDTYPE="Q" D
"RTN","VPRCORD1",160,0)
 .D GETQDLG^ORCD(VPROIFN)
"RTN","VPRCORD1",161,0)
 .S ORCAT=$S(+$G(^DPT(DFN,.1))>0:"I",1:"O"),PROMPT=$$PTR("SIG")
"RTN","VPRCORD1",162,0)
 .D SIG^ORCDPS2
"RTN","VPRCORD1",163,0)
 I '$D(ORDIALOG) D
"RTN","VPRCORD1",164,0)
 .S ORDIALOG=+$P($G(^OR(100,+VPROIFN,0)),U,5)
"RTN","VPRCORD1",165,0)
 .D GETDLG1^ORCD(ORDIALOG)
"RTN","VPRCORD1",166,0)
 .D GETORDER^ORCD(+VPROIFN)
"RTN","VPRCORD1",167,0)
 D EN(+VPROIFN,DFN,LOC,USER,RSPID,ORDTYPE,CHKONLY,.VARSARR,.ORDIALOG,.ERRARR,.VPRPOSS,.RESULT,.VPRVALUE)
"RTN","VPRCORD1",168,0)
PROCESSX ;
"RTN","VPRCORD1",169,0)
 Q
"RTN","VPRCORD1",170,0)
 ;
"RTN","VPRCORD1",171,0)
QOL(RESULT,LOC,PROV,IEN) ;
"RTN","VPRCORD1",172,0)
 N CNT,BLDRES,DIEN,NAME,NODE,NUM,TEXT,TYPE,VARSARR,VPRERCNT,VPRERARR,VPROARRY,VPRPOSS
"RTN","VPRCORD1",173,0)
 S VPRERCNT=0
"RTN","VPRCORD1",174,0)
 S DIEN="",NUM=0,TEXT=""
"RTN","VPRCORD1",175,0)
 F  S NUM=$O(^VPRPANEL(IEN,"ORDER DIALOGS",NUM)) Q:NUM'>0  D
"RTN","VPRCORD1",176,0)
 .S DIEN=$G(^VPRPANEL(IEN,"ORDER DIALOGS",NUM,0)) Q:+DIEN'>0
"RTN","VPRCORD1",177,0)
 .S NAME=$P($G(^ORD(101.41,+DIEN,0)),U) I NAME="" Q
"RTN","VPRCORD1",178,0)
 .I $$BEG^VPRCORD2(DFN,LOC,DIEN,PROV,.VARSARR,.BLDRES)=0 G QOLX
"RTN","VPRCORD1",179,0)
 .S TYPE=$P(BLDRES(0),U,4)
"RTN","VPRCORD1",180,0)
 .S RESULT("qo",NUM,"name")=NAME,RESULT("qo",NUM,"id")=DIEN,RESULT("qo",NUM,"type")=TYPE
"RTN","VPRCORD1",181,0)
 I $D(VPRVALUE)>0 G QOLX
"RTN","VPRCORD1",182,0)
QOLX ;
"RTN","VPRCORD1",183,0)
 Q
"RTN","VPRCORD1",184,0)
 ;
"RTN","VPRCORD1",185,0)
RENEW(VPRVALUE,DFN,ID,ORPROV,CHKONLY,REAS,NAME,LOC) ;
"RTN","VPRCORD1",186,0)
 ;RENEW(VPRVALUE,UID,PROVP,CHKONLY,REAS,NAME) ;
"RTN","VPRCORD1",187,0)
 ;Input - DFN of the patient
"RTN","VPRCORD1",188,0)
 ;        RX to be renewed
"RTN","VPRCORD1",189,0)
 ;
"RTN","VPRCORD1",190,0)
 N X,ORY,ORPKG,ORITM,PSOSTAT,A,PDET,ORFLDS,DRUG,DISPLAY,FAIL,LIST,OCHKS,OCO,OCLIST,ORCPLX,ORINFO,ORPVSTS
"RTN","VPRCORD1",191,0)
 N ORL,PCP,PCPN,RESULT,RNWFLDS,SPACES,Y,ORUSR,NEWIFN,PNM,RXE,VPROIFN
"RTN","VPRCORD1",192,0)
 N VPRERARR,VPRERCNT,VPRRES,VPRISORD,VPROK
"RTN","VPRCORD1",193,0)
 K ^TMP($J,"ORDER CHECKS")
"RTN","VPRCORD1",194,0)
 S VPRERCNT=0,VPRISORD=1
"RTN","VPRCORD1",195,0)
 S VPROIFN=ID
"RTN","VPRCORD1",196,0)
 D RNWFLDS^ORWDXR(.RNWFLDS,VPROIFN) S ORFLDS(1)=RNWFLDS(0)
"RTN","VPRCORD1",197,0)
 D ISCPLX^ORWDXR(.ORCPLX,VPROIFN) S ORCPLX=+$G(ORCPLX)
"RTN","VPRCORD1",198,0)
 I CHKONLY=1 Q
"RTN","VPRCORD1",199,0)
 D RENEW^ORWDXR(.RESULT,VPROIFN,DFN,ORPROV,LOC,.ORFLDS,ORCPLX,0)
"RTN","VPRCORD1",200,0)
 S NEWIFN=$P(^OR(100,VPROIFN,3),"^",6)
"RTN","VPRCORD1",201,0)
 S $P(^OR(100,NEWIFN,8,1,0),"^",13)=ORPROV
"RTN","VPRCORD1",202,0)
 I $D(VPRVALUE)>0 G RENEWX
"RTN","VPRCORD1",203,0)
 S REAS="Renew "_NAME_" "_REAS
"RTN","VPRCORD1",204,0)
RENEWUNO ;
"RTN","VPRCORD1",205,0)
 ;I VPRISORD=1 D UNLKORD^ORWDX(.VPROK,VPROIFN) I 'VPROK D AE("Order unlock Failed") K VPROK
"RTN","VPRCORD1",206,0)
RENEWUNL ;
"RTN","VPRCORD1",207,0)
 ;D UNLOCK^ORWDX(.VPROK,DFN) I 'VPROK D AE("Chart unlock Failed")
"RTN","VPRCORD1",208,0)
RENEWX ;
"RTN","VPRCORD1",209,0)
 ;D ENCODE^VPRJSON("RESULT","VPRVALUE","VPRERR")
"RTN","VPRCORD1",210,0)
 Q
"RTN","VPRCORD1",211,0)
 ;
"RTN","VPRCORD1",212,0)
PTR(NAME) ; -- Returns ptr value of prompt in Dialog file
"RTN","VPRCORD1",213,0)
 Q +$O(^ORD(101.41,"AB",$E("OR GTX "_NAME,1,63),0))
"RTN","VPRCORD1",214,0)
 ;
"RTN","VPRCORD1",215,0)
SAVE(VPRRES,DFN,USER,LOC,DLGNAME,DGIEN,QOIEN,ORIFN,SAVEARR) ;
"RTN","VPRCORD1",216,0)
 N CNT,NUM,VPROREST
"RTN","VPRCORD1",217,0)
 I QOIEN>0 D SAVE^ORWDX(.VPROREST,DFN,USER,LOC,DLGNAME,DGIEN,QOIEN,"",.SAVEARR,"",DT,"",0)
"RTN","VPRCORD1",218,0)
 I ORIFN>0 D SAVE^ORWDX(.VPROREST,DFN,USER,LOC,DLGNAME,DGIEN,"",ORIFN,.SAVEARR,"",DT,"C",0)
"RTN","VPRCORD1",219,0)
 S CNT=$O(VPRRES(""),-1)
"RTN","VPRCORD1",220,0)
 S NUM=0 F  S NUM=$O(VPROREST(NUM)) Q:NUM'>0  D
"RTN","VPRCORD1",221,0)
 .S CNT=CNT+1,VPRRES("resultText")=$G(VPRRES("resultText"))_$C(13,10)_VPROREST(NUM)
"RTN","VPRCORD1",222,0)
 Q
"RTN","VPRCORD1",223,0)
 ;
"RTN","VPRCORD1",224,0)
UNO ;
"RTN","VPRCORD1",225,0)
 ;I VPRISORD=1 D UNLKORD^ORWDX(.VPROK,VPROIFN) I 'VPROK D AE("Order unlock Failed") K VPROK
"RTN","VPRCORD1",226,0)
UNLOCK ;
"RTN","VPRCORD1",227,0)
 ;D UNLOCK^ORWDX(.VPROK,DFN) I 'VPROK D AE("Chart unlock Failed")
"RTN","VPRCORD1",228,0)
EXIT ;
"RTN","VPRCORD1",229,0)
 S VPRBLT=1
"RTN","VPRCORD1",230,0)
 ;D BLDXMLD^VPRCORD2(.VPRERARR,.VPRRES,.VPRPOSS)
"RTN","VPRCORD1",231,0)
 K ^TMP($J,"ORDER CHECKS")
"RTN","VPRCORD1",232,0)
 Q
"RTN","VPRCORD1",233,0)
 ;
"RTN","VPRCORD1",234,0)
VAL(REQ,X) ; return value from request
"RTN","VPRCORD1",235,0)
 Q $G(REQ(X,1))
"RTN","VPRCORD1",236,0)
 ;
"RTN","VPRCORD1",237,0)
VALIDUID(UID) ;
"RTN","VPRCORD1",238,0)
 I UID["med" Q 1
"RTN","VPRCORD1",239,0)
 Q 0
"RTN","VPRCORD1",240,0)
 ;
"RTN","VPRCORD1",241,0)
PRECHK(VPROK,DFN,LOC,VPROIFN,ORPROV,ACTION,PACTION,VARSARR,SAVEARR,VPROARRY,ERROR) ;
"RTN","VPRCORD1",242,0)
 N ORDERCHK,ORDTYPE,TEMP,VPRPKG
"RTN","VPRCORD1",243,0)
 I PACTION'="N" D GETPKG^ORWDXR(.VPRPKG,VPROIFN) I '$D(VPRPKG) D AE("Invalid Order Number",.ERROR) S VPROK=2 Q
"RTN","VPRCORD1",244,0)
 I VPRPKG["PS" D  I VPROK>0 Q
"RTN","VPRCORD1",245,0)
 .S ORDTYPE=$S(ACTION="R":"E",PACTION="C":"E",PACTION="X":"E",PACTION="N":"N",1:"Q")
"RTN","VPRCORD1",246,0)
 .D ALLWORD^ORALWORD(.VPROK,DFN,VPROIFN,ORDTYPE,ORPROV) I $G(VPROK)>0 D AEM(.VPROK,.ERROR) Q
"RTN","VPRCORD1",247,0)
 .I ACTION="DL"!(ACTION="RENEW") D  I VPROK>0 Q
"RTN","VPRCORD1",248,0)
 .. S ORTYPE=$S(ACTION="DL":"DC",ACTION="RENEW":"RN",1:"") I ORTYPE="" Q
"RTN","VPRCORD1",249,0)
 .. D VALID^ORWDXA(.VPROK,VPROIFN,ORTYPE,ORPROV) I $G(VPROK)'="" D AE(VPROK,.ERROR) S VPROK=2 Q
"RTN","VPRCORD1",250,0)
 ..I ACTION="DL" Q
"RTN","VPRCORD1",251,0)
 ..D GTORITM^ORWDXR(.ORITM,VPROIFN)
"RTN","VPRCORD1",252,0)
 ..I VPRPKG="PSO" D FAILDEA^ORWDPS1(.FAIL,ORITM,ORPROV,"O") I FAIL D AE("Failed DEA Check",.ERROR) S VPROK=2 Q
"RTN","VPRCORD1",253,0)
 ..D RNWFLDS^ORWDXR(.RNWFLDS,VPROIFN) S ORFLDS(1)=RNWFLDS(0)
"RTN","VPRCORD1",254,0)
 ..D CHKGRP^ORWDPS2(.DISPLAY,VPROIFN) ;I DISPLAY'=2 D AE("Package Problem on Order") G UNO
"RTN","VPRCORD1",255,0)
 ;
"RTN","VPRCORD1",256,0)
 I ACTION="P" D  I VPROK>0 Q 
"RTN","VPRCORD1",257,0)
 .D BLDPORD(VPROIFN,DFN,LOC,PACTION,ORPROV,.VARSARR,.VPROK,.VPROARRY,.ORDERCHK,.SAVEARR)
"RTN","VPRCORD1",258,0)
 ;
"RTN","VPRCORD1",259,0)
 W !,VPRPKG
"RTN","VPRCORD1",260,0)
 W !,VPROIFN
"RTN","VPRCORD1",261,0)
 D PEROC(.VPROK,DFN,VPROIFN,VPRPKG,ACTION,LOC,.ORDERCHK,.VARSARR,.ORDIALOG,.SAVEARR,.VPROARRY)
"RTN","VPRCORD1",262,0)
 Q
"RTN","VPRCORD1",263,0)
 ;
"RTN","VPRCORD1",264,0)
BLDPORD(VPROIFN,DFN,LOC,PACTION,ORPROV,VARSARR,VPROK,ORDIALOG,ORDERCHK,SAVEARR,ERROR) ;
"RTN","VPRCORD1",265,0)
 N BLDRES,DIEN,ORDTYPE,TEMP
"RTN","VPRCORD1",266,0)
 S TEMP=$G(PACTION)_VPROIFN
"RTN","VPRCORD1",267,0)
 I $$BEG^VPRCORD2(DFN,LOC,TEMP,ORPROV,.VARSARR,.BLDRES)=0 S VPROK=2 Q
"RTN","VPRCORD1",268,0)
 I $P(BLDRES(0),U,4)="Q" D
"RTN","VPRCORD1",269,0)
 .S ORDTYPE="Q"
"RTN","VPRCORD1",270,0)
 .I $P(BLDRES(0),U)'=1,$P(BLDRES(0),U)'=2 D AE("Quick Order is not set to Auto-Accept",.VPRVALUE) S VPROK=2 Q
"RTN","VPRCORD1",271,0)
 I $G(ORDTYPE)="" S ORDTYPE=$S(PACTION="C":"E",PACTION="X":"E",1:"N")
"RTN","VPRCORD1",272,0)
 S RSPID=$P(BLDRES(0),U,2)
"RTN","VPRCORD1",273,0)
 I PACTION="X" I $$CHANGE^VPRCORD2(VPROIFN,DFN,LOC,USER,.ERRARR,.VPRVALUE)=0 G PROCESSX
"RTN","VPRCORD1",274,0)
 S VARSARR("DISPLAY GROUP IEN")=$S(ORDTYPE="Q":$P($G(^ORD(101.41,$$DEFDLG^ORCD(VPROIFN),0)),U,5),1:+$P(^OR(100,VPROIFN,0),U,11))
"RTN","VPRCORD1",275,0)
 S VARSARR("DISPLAY GROUP")=$P($G(^ORD(101.98,VARSARR("DISPLAY GROUP IEN"),0)),U)
"RTN","VPRCORD1",276,0)
 D BLDORDLG(.ORDIALOG,VPROIFN,DFN,RSPID,ORDTYPE)
"RTN","VPRCORD1",277,0)
 S DIEN=VARSARR("DISPLAY GROUP IEN")
"RTN","VPRCORD1",278,0)
 D FILLID^ORWDXC(.FILLER,DIEN)
"RTN","VPRCORD1",279,0)
 S VARSARR("FILLER ID")=FILLER
"RTN","VPRCORD1",280,0)
 I ORDTYPE="E" S DIEN=+$P($G(^OR(100,VPROIFN,0)),U,5)
"RTN","VPRCORD1",281,0)
 I ORDTYPE="Q" S DIEN=VPROIFN
"RTN","VPRCORD1",282,0)
 S DLGNAME=$P($G(^ORD(101.41,DIEN,0)),U)
"RTN","VPRCORD1",283,0)
 I DLGNAME="" D AE("INVALID DEFAULT DIALOG",.ERROR) S VPROK=2 Q
"RTN","VPRCORD1",284,0)
 S VARSARR("DIALOG NAME")=DLGNAME
"RTN","VPRCORD1",285,0)
 D DLGDEF^ORWDX(.DLGDEF,DLGNAME)
"RTN","VPRCORD1",286,0)
 ;build order check array,build dialog structure and build save array
"RTN","VPRCORD1",287,0)
 D BLDARRS^VPRCORD2(.RESULT,.ORDIALOG,.VARSARR,DFN,LOC,.ORDERCHK,.SAVEARR,.VPRPOSS)
"RTN","VPRCORD1",288,0)
 Q
"RTN","VPRCORD1",289,0)
 ;
"RTN","VPRCORD1",290,0)
BLDORDLG(ORDIALOG,VPROIFN,DFN,RSPID,ORDTYPE) ;
"RTN","VPRCORD1",291,0)
 N PROMPT
"RTN","VPRCORD1",292,0)
 I ORDTYPE="Q" D
"RTN","VPRCORD1",293,0)
 .D GETQDLG^ORCD(VPROIFN)
"RTN","VPRCORD1",294,0)
 .S ORCAT=$S(+$G(^DPT(DFN,.1))>0:"I",1:"O"),PROMPT=$$PTR("SIG")
"RTN","VPRCORD1",295,0)
 .D SIG^ORCDPS2
"RTN","VPRCORD1",296,0)
 I '$D(ORDIALOG) D
"RTN","VPRCORD1",297,0)
 .S ORDIALOG=+$P($G(^OR(100,+VPROIFN,0)),U,5)
"RTN","VPRCORD1",298,0)
 .D GETDLG1^ORCD(ORDIALOG)
"RTN","VPRCORD1",299,0)
 .D GETORDER^ORCD(+VPROIFN)
"RTN","VPRCORD1",300,0)
 Q
"RTN","VPRCORD1",301,0)
 ;
"RTN","VPRCORD1",302,0)
 ;PEROC(.VPROK,DFN,VPROIFN,VPRPKG,ACTION)
"RTN","VPRCORD1",303,0)
PEROC(VPROK,DFN,VPROIFN,VPRPKG,ACTION,LOC,ORDERCHK,VARSARR,ORDIALOG,SAVEARR,VPROARRY) ;
"RTN","VPRCORD1",304,0)
 N A,OCO,OCLIST,ORINFO,ORL,OCHKS,PATTYPE,VPRREN,VPRPOSS
"RTN","VPRCORD1",305,0)
 W !,VPRPKG
"RTN","VPRCORD1",306,0)
 W !,VPROIFN
"RTN","VPRCORD1",307,0)
 S PATTYPE=$S(+$G(^DPT(DFN,.1))>0:"I",1:"O")
"RTN","VPRCORD1",308,0)
 D ON^ORWDXC(.OCO)
"RTN","VPRCORD1",309,0)
 D DISPLAY^ORWDXC(.OCLIST,DFN,VPRPKG) I $D(OCLIST) D INFO^VPRCORD2(.OCLIST)
"RTN","VPRCORD1",310,0)
 S VPRREN=0
"RTN","VPRCORD1",311,0)
 I ACTION="RENEW" D  I VPROK>0 Q
"RTN","VPRCORD1",312,0)
 .D OXDATA^ORWDXR01(.ORINFO,VPROIFN)
"RTN","VPRCORD1",313,0)
 .S A=$G(^OR(100,VPROIFN,0)) I A="" D AE("Order missing from ORDERS file",.VPRVALUE) S VPROK=2 Q
"RTN","VPRCORD1",314,0)
 .S ORPROV=+$P(A,"^",4),ORL=+$P(A,"^",10)
"RTN","VPRCORD1",315,0)
 .S VPRREN=1
"RTN","VPRCORD1",316,0)
 D ACCEPT^ORWDXC(.OCHKS,DFN,VPRPKG,PATTYPE,LOC,.ORDERCHK,VPROIFN,VPRREN) I $D(OCHKS) D INFO^VPRCORD2(.OCHKS)
"RTN","VPRCORD1",317,0)
 Q
"RTN","VPRCORD1",318,0)
 ;
"RTN","VPRCORD1",319,0)
ORDERUID(VPRVALUE,INFO) ;
"RTN","VPRCORD1",320,0)
ENORDER ;
"RTN","VPRCORD1",321,0)
 N ACTION,CHKONLY,DFN,ERROR,ID,ISQO,LOC,NAME,ORDIALOG,ORPROV,PACTION,PATIENT,RESULT,SAVEARR,SNIPPET,TEMP,TYPE,UID,USER,VPROARRY,VPROK,VPRPOSS
"RTN","VPRCORD1",322,0)
 S UID=$G(INFO("uid")),DFN=""
"RTN","VPRCORD1",323,0)
 S ACTION=$G(INFO("action")),SNIPPET=$G(INFO("snippet")),ORPROV=$G(INFO("user")),PATIENT=$G(INFO("patient")),NAME=$G(INFO("name"))
"RTN","VPRCORD1",324,0)
 S LOC=$G(INFO("location")),CHKONLY=$G(INFO("orderChecksOnly")),ISQO=$G(INFO("isQO")),PACTION=$G(INFO("orderAction")),ID=$G(INFO("qoListId"))
"RTN","VPRCORD1",325,0)
 S ID=$G(INFO("qoId"))
"RTN","VPRCORD1",326,0)
 S TEMP=$S(PACTION="RENEW":"Order can be renew to new order.",PACTION="C":"Order cannot be renew it can be copy to a new order.",1:"")
"RTN","VPRCORD1",327,0)
 S VPROK=0
"RTN","VPRCORD1",328,0)
 I PACTION'="" D  I VPROK>0 G ORDERX
"RTN","VPRCORD1",329,0)
 .I $$VALIDUID(UID)=0  D AE("UID is not valid UID",.ERROR)
"RTN","VPRCORD1",330,0)
 .S DFN=$P(UID,":",5)
"RTN","VPRCORD1",331,0)
 .S ID=$P(UID,":",6)
"RTN","VPRCORD1",332,0)
 I DFN="" S DFN=PATIENT
"RTN","VPRCORD1",333,0)
 ;perform Inital Checks
"RTN","VPRCORD1",334,0)
 I PACTION'="" D PRECHK(.VPROK,LOC,DFN,ID,ORPROV,ACTION,PACTION,.VARSARR,.SAVEARR,.VPROARRY,.ERROR)
"RTN","VPRCORD1",335,0)
 I VPROK>1,ACTION="RENEW" K ^TMP($J,"ORDER CHECKS") S INFO("action")="P",INFO("orderAction")="C",INFO("orderChecksOnly")="true" G ENORDER
"RTN","VPRCORD1",336,0)
 I VPROK>1 G ORDERX
"RTN","VPRCORD1",337,0)
 I CHKONLY="true" S RESULT("resultText")=TEMP G ORDERX
"RTN","VPRCORD1",338,0)
 ;
"RTN","VPRCORD1",339,0)
 ;list Discontinue Reason List
"RTN","VPRCORD1",340,0)
 I ACTION="DL" D  G ORDERX
"RTN","VPRCORD1",341,0)
 .D DCLREAS(.RESULT,DFN,ID,ORPROV)
"RTN","VPRCORD1",342,0)
 ;Discontinue Order
"RTN","VPRCORD1",343,0)
 I ACTION="D" D  G ORDERX
"RTN","VPRCORD1",344,0)
 .S REAS=INFO("dcReason")
"RTN","VPRCORD1",345,0)
 .D DC(.RESULT,DFN,ID,ORPROV,LOC,.SNIPPET,NAME)
"RTN","VPRCORD1",346,0)
 ;Renew Order
"RTN","VPRCORD1",347,0)
 I ACTION="RENEW" D  G ORDERX
"RTN","VPRCORD1",348,0)
 .D RENEW(.RESULT,DFN,ID,ORPROV,CHKONLY,.SNIPPET,NAME,LOC)
"RTN","VPRCORD1",349,0)
 ;
"RTN","VPRCORD1",350,0)
 I ACTION="P" D  G ORDERX
"RTN","VPRCORD1",351,0)
 .N ORDIALOG
"RTN","VPRCORD1",352,0)
 .M ORDIALOG=VPROARRY
"RTN","VPRCORD1",353,0)
 .S SAVEARR("ORCHECK")=0,SAVEARR("ORTS")=0
"RTN","VPRCORD1",354,0)
 .I PACTION="Q" D SAVE(.RESULT,DFN,ORPROV,LOC,VARSARR("DIALOG NAME"),VARSARR("DISPLAY GROUP IEN"),ID,0,.SAVEARR)
"RTN","VPRCORD1",355,0)
 .i PACTION="C" D SAVE(.RESULT,DFN,ORPROV,LOC,VARSARR("DIALOG NAME"),VARSARR("DISPLAY GROUP IEN"),0,ID,.SAVEARR)
"RTN","VPRCORD1",356,0)
 .I $L($G(RESULT("resultText")))>0 S RESULT("resultText")=TEMP_$C(13,10)_RESULT("resultText")
"RTN","VPRCORD1",357,0)
 ;
"RTN","VPRCORD1",358,0)
 I ACTION="QL" D  G ORDERX
"RTN","VPRCORD1",359,0)
 .D QOL(.RESULT,LOC,ORPROV,ID)
"RTN","VPRCORD1",360,0)
 ;
"RTN","VPRCORD1",361,0)
ORDERX ;
"RTN","VPRCORD1",362,0)
 I '$D(ERROR) D BLDJSON^VPRCORD2(.RESULT,.VPROARRY,.VPRPOSS,.VPRVALUE,SNIPPET,UID)
"RTN","VPRCORD1",363,0)
 ;I $D(ERROR) M VPRVALUE=ERROR
"RTN","VPRCORD1",364,0)
 I $D(ERROR) D ENCODE^VPRJSON("ERROR","VPRVALUE","VPRERR")
"RTN","VPRCORD1",365,0)
 ;M ^XTMP("AGP INFO")=VPRVALUE
"RTN","VPRCORD1",366,0)
 Q
"RTN","VPRCORD1",367,0)
 ;
"RTN","VPRCORD2")
0^8^B67716889
"RTN","VPRCORD2",1,0)
VPRCORD2 ;;SLC/AGP - Process Order Request from AVIVA System ; 11/2/10 11:39am
"RTN","VPRCORD2",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCORD2",3,0)
 ;
"RTN","VPRCORD2",4,0)
 ;The purpose of this API is to process a request to renew an
"RTN","VPRCORD2",5,0)
 ;Outpatient Prescription
"RTN","VPRCORD2",6,0)
 ;
"RTN","VPRCORD2",7,0)
 Q
"RTN","VPRCORD2",8,0)
 ;
"RTN","VPRCORD2",9,0)
 ;add possible values from the dialog to XML List return for each prompt
"RTN","VPRCORD2",10,0)
ADDPOSS(POSS,RESULT) ;
"RTN","VPRCORD2",11,0)
 N CNT,ISFIRST,NUM,LAST,PROMPT,TEMP
"RTN","VPRCORD2",12,0)
 ;S RESULT("possibleValues")=""
"RTN","VPRCORD2",13,0)
 M RESULT=POSS
"RTN","VPRCORD2",14,0)
 S ISFIRST=1,LAST="",PROMPT=""
"RTN","VPRCORD2",15,0)
 ;F  S PROMPT=$O(POSS(PROMPT)) Q:PROMPT=""  D
"RTN","VPRCORD2",16,0)
 ;.S TEMP=PROMPT_"s",LAST=PROMPT
"RTN","VPRCORD2",17,0)
 ;.S RESULT("possibleValues",TEMP)=""
"RTN","VPRCORD2",18,0)
 ;.S CNT="",NUM=0 F  S CNT=$O(POSS(PROMPT,CNT)) Q:CNT=""  
"RTN","VPRCORD2",19,0)
 ;..S RESULT("possibleValues",TEMP,NUM,"value")=POSS(PROMPT,CNT),NUM=NUM+1
"RTN","VPRCORD2",20,0)
 Q
"RTN","VPRCORD2",21,0)
 ;
"RTN","VPRCORD2",22,0)
ARRREAS(REAS,UID) ;
"RTN","VPRCORD2",23,0)
 I '$D(^XTMP("VPR SNIPPET",DFN,DT)) S ^XTMP("VPR SNIPPET",0)=""
"RTN","VPRCORD2",24,0)
 N CNT S CNT=$O(^XTMP("VPR SNIPPET",DFN,DT,""),-1)
"RTN","VPRCORD2",25,0)
 S CNT=CNT+1
"RTN","VPRCORD2",26,0)
 S ^XTMP("VPR SNIPPET",DFN,DT,CNT)=""
"RTN","VPRCORD2",27,0)
 S ^XTMP("VPR SNIPPET",DFN,DT,CNT,"text")=REAS
"RTN","VPRCORD2",28,0)
 I $G(UID)'="" S ^XTMP("VPR SNIPPET",DFN,DT,CNT,"uid")=UID
"RTN","VPRCORD2",29,0)
 Q
"RTN","VPRCORD2",30,0)
 ;
"RTN","VPRCORD2",31,0)
 ;initial API needed for order actions and QO
"RTN","VPRCORD2",32,0)
BEG(DFN,LOC,IEN,USER,VARSARR,BLDRES,VPRVALUE) ;
"RTN","VPRCORD2",33,0)
 N CNT,FLDS,HASKEY,TEXT,VPRLST
"RTN","VPRCORD2",34,0)
 D BLDVAR(DFN,LOC,DT,.VARSARR) I VARSARR("PATIENT")="" D AE^VPRCORD1("Invalid Patient",.VPRVALUE) Q 0
"RTN","VPRCORD2",35,0)
 D NPHASKEY^ORWU(.HASKEY,USER,"PROVIDER") I HASKEY=0 D AE^VPRCORD1("DOES NOT HOLD THE PROVIDER KEY",.VPRVALUE) Q 0
"RTN","VPRCORD2",36,0)
 S FLDS=DFN_U_LOC_U_USER_U_VARSARR("ISINP")_U_VARSARR("SEX")_U_VARSARR("AGE")_U_"0;C;0;0^0^^^"
"RTN","VPRCORD2",37,0)
 I $P($G(^ORD(101.41,IEN,0)),U,4)="O" D  Q 1
"RTN","VPRCORD2",38,0)
 .S BLDRES(0)="^^^O"
"RTN","VPRCORD2",39,0)
 .D LOADSET^ORWDXM(.VPRLST,IEN)
"RTN","VPRCORD2",40,0)
 .S CNT=0 F  S CNT=$O(VPRLST(CNT)) Q:CNT'>0  D
"RTN","VPRCORD2",41,0)
 ..S BLDRES(CNT)=VPRLST(CNT)
"RTN","VPRCORD2",42,0)
 D BLDQRSP^ORWDXM1(.BLDRES,IEN,FLDS,VARSARR("ISIMO"),LOC)
"RTN","VPRCORD2",43,0)
 K ^TMP("ORWDXMQ",$J)
"RTN","VPRCORD2",44,0)
 I +BLDRES(0)=8 D AE^VPRCORD1(BLDRES(.5),.VPRVALUE) Q 0
"RTN","VPRCORD2",45,0)
 Q 1
"RTN","VPRCORD2",46,0)
 ;
"RTN","VPRCORD2",47,0)
 ;builds multiple arrays from the ORDIALOG array.
"RTN","VPRCORD2",48,0)
 ;builds XML return structure of the dialog,
"RTN","VPRCORD2",49,0)
 ;ORDERCHK array for order checks when placing an order
"RTN","VPRCORD2",50,0)
 ;SAVEARR array for saving an order for QO
"RTN","VPRCORD2",51,0)
BLDARRS(RESULT,ORDIALOG,VARSARR,DFN,LOC,ORDERCHK,SAVEARR,POSS) ;
"RTN","VPRCORD2",52,0)
 ;D ADD("<dialog>")
"RTN","VPRCORD2",53,0)
 N CNT,DEF,DRUG,EXT,FILLER,INC,IEN,INST,NODE,PROMPT,SCH,STR,TEMP,VALUE,X,ZERO
"RTN","VPRCORD2",54,0)
 D SCHALL^ORWDPS1(.SCH,DFN,LOC)
"RTN","VPRCORD2",55,0)
 S RESULT("name")=VARSARR("DIALOG NAME"),RESULT("displayGroup")=VARSARR("DISPLAY GROUP")
"RTN","VPRCORD2",56,0)
 S IEN=$$PTR("ORDERABLE ITEM")
"RTN","VPRCORD2",57,0)
 S OI=ORDIALOG(IEN,1),FILLER=VARSARR("FILLER ID")
"RTN","VPRCORD2",58,0)
 D LOADPOSS(DFN,LOC,OI,FILLER,.VARSARR,.POSS)
"RTN","VPRCORD2",59,0)
 S CNT=0,IEN=0,INC=0 F  S IEN=$O(ORDIALOG(IEN)) Q:IEN'>0  D
"RTN","VPRCORD2",60,0)
 .S NODE=$G(ORDIALOG(IEN)),ZERO=ORDIALOG(IEN,0)
"RTN","VPRCORD2",61,0)
 .S PROMPT=$P(NODE,U,2),CNT=CNT+1,INC=INC+1
"RTN","VPRCORD2",62,0)
 .S RESULT("structure",INC,"name")=PROMPT,RESULT("structure",INC,"id")=$P(NODE,U)
"RTN","VPRCORD2",63,0)
 .S TEMP=$S(PROMPT="DOSE":"ALLDOSES",PROMPT="DRUG":"DISPENSE",1:PROMPT)
"RTN","VPRCORD2",64,0)
 .;I $D(POSS(TEMP)) D ADDPOSS(TEMP,.POSS)
"RTN","VPRCORD2",65,0)
 .I $P(ZERO,U)="S" D LOADPOSC(PROMPT,$P(ZERO,U,2),.POSS)
"RTN","VPRCORD2",66,0)
 .;D ADD("<instances>")
"RTN","VPRCORD2",67,0)
 .S X=$O(ORDIALOG(IEN,99),-1)
"RTN","VPRCORD2",68,0)
 .;I X=0 D  Q
"RTN","VPRCORD2",69,0)
 .;.S VALUE=$O(POSS(PROMPT,"DEFAULT","")) I VALUE="" D  Q
"RTN","VPRCORD2",70,0)
 .;..D ADD("</instances>")
"RTN","VPRCORD2",71,0)
 .;..D ADD("</prompt>")
"RTN","VPRCORD2",72,0)
 .;.D ADD("<default value='"_$$ESC^VPRD(VALUE)_"'/>")
"RTN","VPRCORD2",73,0)
 .;.D ADD("</instances>")
"RTN","VPRCORD2",74,0)
 .;.D ADD("</prompt>")
"RTN","VPRCORD2",75,0)
 .F INST=1:1:X D
"RTN","VPRCORD2",76,0)
 ..S VALUE=ORDIALOG(IEN,INST)
"RTN","VPRCORD2",77,0)
 ..I VALUE["^TMP(" D  Q
"RTN","VPRCORD2",78,0)
 ... I $G(@VALUE@(1,0))="" Q
"RTN","VPRCORD2",79,0)
 ...S SAVEARR(IEN,INST)="ORDIALOG(""WP"","_IEN_",1)"
"RTN","VPRCORD2",80,0)
 ...S SAVEARR("WP",IEN,INST,1,0)=@VALUE@(1,0)
"RTN","VPRCORD2",81,0)
 ..S SAVEARR(IEN,INST)=VALUE
"RTN","VPRCORD2",82,0)
 ..S EXT=$$EXT^ORCD(IEN,INST)
"RTN","VPRCORD2",83,0)
 ..S ORDERCHK(CNT)=FILLER_U_PROMPT_U_VALUE_U_EXT,CNT=CNT+1
"RTN","VPRCORD2",84,0)
 ..S RESULT("structure",INC,"instance",INST,"number")=INST
"RTN","VPRCORD2",85,0)
 ..S RESULT("structure",INC,"instance",INST,"value")=VALUE
"RTN","VPRCORD2",86,0)
 ..S RESULT("structure",INC,"instance",INST,"external")=EXT
"RTN","VPRCORD2",87,0)
 ..I PROMPT="ORDERABLE" S OI=VALUE
"RTN","VPRCORD2",88,0)
 ..W !,PROMPT_" "_$G(VALUE)
"RTN","VPRCORD2",89,0)
 ..I PROMPT="DRUG" S DRUG=$G(VALUE)
"RTN","VPRCORD2",90,0)
 W !,FILLER
"RTN","VPRCORD2",91,0)
 S ORDERCHK(1)=OI_U_FILLER_U_$S(FILLER["PS":$G(DRUG),1:"")
"RTN","VPRCORD2",92,0)
 Q
"RTN","VPRCORD2",93,0)
 ;
"RTN","VPRCORD2",94,0)
 ;build patient demographic variables
"RTN","VPRCORD2",95,0)
BLDVAR(DFN,LOC,DATE,OUTPUT) ;
"RTN","VPRCORD2",96,0)
 N IMO,TEMP
"RTN","VPRCORD2",97,0)
 I $L(DFN)'>0 S OUTPUT("PATIENT")="" Q
"RTN","VPRCORD2",98,0)
 S TEMP=$G(^DPT(DFN,0))
"RTN","VPRCORD2",99,0)
 I TEMP="" S OUTPUT("PATIENT")="" Q
"RTN","VPRCORD2",100,0)
 S OUTPUT("PATIENT")=$P(TEMP,U,1)
"RTN","VPRCORD2",101,0)
 S OUTPUT("SEX")=$P(TEMP,U,2)
"RTN","VPRCORD2",102,0)
 S OUTPUT("DOB")=$P(TEMP,U,3)
"RTN","VPRCORD2",103,0)
 S OUTPUT("SSN")=$P(TEMP,U,9)
"RTN","VPRCORD2",104,0)
 S OUTPUT("DOD")=$P($G(^DPT(DFN,.35)),U,1)
"RTN","VPRCORD2",105,0)
 I OUTPUT("DOD")>DATE S OUTPUT("DOD")=""
"RTN","VPRCORD2",106,0)
 S OUTPUT("DFN")=DFN
"RTN","VPRCORD2",107,0)
 S OUTPUT("AGE")=$$AGE^PXRMAGE(OUTPUT("DOB"),OUTPUT("DOD"),DATE)
"RTN","VPRCORD2",108,0)
 S OUTPUT("ISINP")=$S(+$G(^DPT(DFN,.1))>0:1,1:0)
"RTN","VPRCORD2",109,0)
 D IMOLOC^ORIMO(.IMO,LOC,DFN)
"RTN","VPRCORD2",110,0)
 S OUTPUT("ISIMO")=$S(IMO>0:1,1:0)
"RTN","VPRCORD2",111,0)
 Q
"RTN","VPRCORD2",112,0)
 ;
"RTN","VPRCORD2",113,0)
BLDJSON(RESULT,ORDARR,VPRPOSS,VPRVALUE,REAS,UID,DATA) ;
"RTN","VPRCORD2",114,0)
 N CNT,ERROR,STR,TEMP,TEXT
"RTN","VPRCORD2",115,0)
 S RESULT("success")="true"
"RTN","VPRCORD2",116,0)
 I REAS'="",UID'="" D ARRREAS(REAS,UID)
"RTN","VPRCORD2",117,0)
 I $D(VPRPOSS) D ADDPOSS(.VPRPOSS)
"RTN","VPRCORD2",118,0)
 I $D(ORDARR) D
"RTN","VPRCORD2",119,0)
 .S RESULT("ordered placed")="true"
"RTN","VPRCORD2",120,0)
 .S CNT=0 F  S CNT=$O(ORDARR(CNT)) Q:CNT'>0  D
"RTN","VPRCORD2",121,0)
 ..S TEMP=ORDARR(CNT),STR=""
"RTN","VPRCORD2",122,0)
 ..I $E(TEMP)="t" S STR=$E(TEMP,2,$L(TEMP))
"RTN","VPRCORD2",123,0)
 ..I STR'="" S RESULT("text")=$G(RESULT("text"))_STR_$C(13,10)
"RTN","VPRCORD2",124,0)
 I $D(^TMP($J,"ORDER CHECKS")) D
"RTN","VPRCORD2",125,0)
 .S CNT=0 F  S CNT=$O(^TMP($J,"ORDER CHECKS",CNT)) Q:CNT'>0  D
"RTN","VPRCORD2",126,0)
 ..S RESULT("orderChecks")=$G(RESULT("orderChecks"))_^TMP($J,"ORDER CHECKS",CNT)_$C(13,10)
"RTN","VPRCORD2",127,0)
 I $D(DATA) M RESULT("data")=DATA
"RTN","VPRCORD2",128,0)
 D ENCODE^VPRJSON("RESULT","VPRVALUE","VPRERR")
"RTN","VPRCORD2",129,0)
 I $D(VPRERR) D
"RTN","VPRCORD2",130,0)
 .K VPRVALUE S TEXT(1)="Problem encoding save order array. Check CPRS to see if the order was saved."
"RTN","VPRCORD2",131,0)
 .D SETERROR^VPRUTILS(.ERROR,.VPRERR,.TEXT,.DATA)
"RTN","VPRCORD2",132,0)
 .D ENCODE^VPRJSON("ERROR","VPRVALUE","VPRERR")
"RTN","VPRCORD2",133,0)
 Q
"RTN","VPRCORD2",134,0)
 ;
"RTN","VPRCORD2",135,0)
CHANGE(ORDIEN,DFN,LOC,USER,ERRARR) ;
"RTN","VPRCORD2",136,0)
 N TEXT,VALUE
"RTN","VPRCORD2",137,0)
 D VALID^ORWDXA(.VALUE,ORDIEN,"XX",USER) I VALUE'="" D AE^VPRCORD1(VALUE,.VPRVALUE) Q 0
"RTN","VPRCORD2",138,0)
 D OFCPLX^ORWDXA(.VALUE,ORDIEN) I VALUE'="" D AE^VPRCORD1("CANNOT CHANGE A COMPLEX ORDER",.VPRVALUE) Q 0
"RTN","VPRCORD2",139,0)
 Q 1
"RTN","VPRCORD2",140,0)
 ;
"RTN","VPRCORD2",141,0)
INFO(OCHKS) ;
"RTN","VPRCORD2",142,0)
 N INC,CNT,NUM,NODE,TEMP,VPRORCK
"RTN","VPRCORD2",143,0)
 S NUM=0,CNT=+$O(^TMP($J,"ORDER CHECKS",""),-1)
"RTN","VPRCORD2",144,0)
 F  S NUM=$O(OCHKS(NUM)) Q:NUM'>0  D
"RTN","VPRCORD2",145,0)
 .S NODE=$P(OCHKS(NUM),U,4)
"RTN","VPRCORD2",146,0)
 .I NODE="" S NODE=OCHKS(NUM)
"RTN","VPRCORD2",147,0)
 .S TEMP=""
"RTN","VPRCORD2",148,0)
 .I NODE["||",NODE["&" D
"RTN","VPRCORD2",149,0)
 ..S TEMP=$P(NODE,"&")
"RTN","VPRCORD2",150,0)
 ..S NODE=$P(NODE,"&",2)
"RTN","VPRCORD2",151,0)
 .S CNT=CNT+1
"RTN","VPRCORD2",152,0)
 .S ^TMP($J,"ORDER CHECKS",CNT)=NODE
"RTN","VPRCORD2",153,0)
 .I TEMP'="" D
"RTN","VPRCORD2",154,0)
 ..D GETXTRA^ORCHECK(.VPRORCK,$P(TEMP,"||",2),NODE)
"RTN","VPRCORD2",155,0)
 ..S INC=0 F  S INC=$O(VPRORCK(INC)) Q:INC'>0  D
"RTN","VPRCORD2",156,0)
 ...S CNT=CNT+1
"RTN","VPRCORD2",157,0)
 ...S ^TMP($J,"ORDER CHECKS",CNT)=VPRORCK(INC)
"RTN","VPRCORD2",158,0)
 Q
"RTN","VPRCORD2",159,0)
 ;
"RTN","VPRCORD2",160,0)
KILLALRT(DFN,TYPE) ;
"RTN","VPRCORD2",161,0)
 N VPROUT
"RTN","VPRCORD2",162,0)
 D KILUNSNO^ORWORB(.VPROUT,DFN) K VPROUT
"RTN","VPRCORD2",163,0)
 I TYPE["PS" D
"RTN","VPRCORD2",164,0)
 . D KILEXMED^ORWORB(.VPROUT,DFN) K VPROUT
"RTN","VPRCORD2",165,0)
 . D KILUNVMD^ORWORB(.VPROUT,DFN) K VPROUT
"RTN","VPRCORD2",166,0)
 D KILUNVOR^ORWORB(.VPROUT,DFN) K VPROUT
"RTN","VPRCORD2",167,0)
 Q
"RTN","VPRCORD2",168,0)
 ;build a list of possible selection items for a prompt
"RTN","VPRCORD2",169,0)
LOADPOSS(DFN,LOC,OI,FILLER,VARSARR,POSS) ;
"RTN","VPRCORD2",170,0)
 N CNT,DGIEN,ID,NUM,PROMPT,STR,TYPE,VPRPOSS
"RTN","VPRCORD2",171,0)
 S TYPE=$S(FILLER="PSO":"O",1:"I")
"RTN","VPRCORD2",172,0)
 S NUM=0
"RTN","VPRCORD2",173,0)
 S DGIEN=VARSARR("DISPLAY GROUP IEN")
"RTN","VPRCORD2",174,0)
 I FILLER["PS" D OISLCT^ORWDPS2(.VPRPOSS,OI,TYPE,DFN,"Y","N")
"RTN","VPRCORD2",175,0)
 I FILLER["LR" D DEF^ORWDLR32(.VPRPOSS,LOC,"")
"RTN","VPRCORD2",176,0)
 I FILLER["RA" D DEF^ORWDRA32(.VPRPOSS,DFN,"",DGIEN)
"RTN","VPRCORD2",177,0)
 S CNT=0
"RTN","VPRCORD2",178,0)
 F  S CNT=$O(VPRPOSS(CNT)) Q:CNT'>0  D
"RTN","VPRCORD2",179,0)
 .S NODE=VPRPOSS(CNT)
"RTN","VPRCORD2",180,0)
 .S TEMP=$E($G(NODE),2,$L(NODE))
"RTN","VPRCORD2",181,0)
 .I $E(NODE)="~" D  Q
"RTN","VPRCORD2",182,0)
 ..S NUM=0,PROMPT=$$LOW^XLFSTR(TEMP)
"RTN","VPRCORD2",183,0)
 ..S PROMPT=$TR(PROMPT," ","_")
"RTN","VPRCORD2",184,0)
 ..S POSS(PROMPT)=""
"RTN","VPRCORD2",185,0)
 ..S NUM=0
"RTN","VPRCORD2",186,0)
 .I PROMPT="alldoses"!(PROMPT="route") D  Q
"RTN","VPRCORD2",187,0)
 ..S ID=TEMP
"RTN","VPRCORD2",188,0)
 ..S TEMP=$S(PROMPT="alldoses":$P(TEMP,U),PROMPT="route":$P(TEMP,U,2),1:TEMP)
"RTN","VPRCORD2",189,0)
 ..S POSS($$LOW^XLFSTR(PROMPT),NUM,"value")=TEMP
"RTN","VPRCORD2",190,0)
 ..S POSS($$LOW^XLFSTR(PROMPT),NUM,"id")=ID
"RTN","VPRCORD2",191,0)
 ..S POSS($$LOW^XLFSTR(PROMPT),NUM,"default")=$S($E(NODE)="d":"true",1:"false")
"RTN","VPRCORD2",192,0)
 ..S NUM=NUM+1
"RTN","VPRCORD2",193,0)
 .S POSS($$LOW^XLFSTR(PROMPT),NUM,"value")=TEMP
"RTN","VPRCORD2",194,0)
 .;S POSS($$LOW^XLFSTR(PROMPT),NUM,"id")=ID
"RTN","VPRCORD2",195,0)
 .S POSS($$LOW^XLFSTR(PROMPT),NUM,"default")=$S($E(NODE)="d":"true",1:"false")
"RTN","VPRCORD2",196,0)
 .S NUM=NUM+1
"RTN","VPRCORD2",197,0)
 ;build list of possible schedules
"RTN","VPRCORD2",198,0)
 I FILLER["PS" D
"RTN","VPRCORD2",199,0)
 .D SCHALL^ORWDPS1(.SCH,DFN,LOC)
"RTN","VPRCORD2",200,0)
 .S NUM=0
"RTN","VPRCORD2",201,0)
 .S CNT=0 F  S CNT=$O(SCH(CNT)) Q:CNT'>0  D
"RTN","VPRCORD2",202,0)
 ..S TEMP=SCH(CNT)
"RTN","VPRCORD2",203,0)
 ..S POSS("schedule",NUM,"value")=$P(TEMP,U)
"RTN","VPRCORD2",204,0)
 ..S POSS("schedule",NUM,"external")=$P(TEMP,U,2)
"RTN","VPRCORD2",205,0)
 ..S POSS("schedule",NUM,"type")=$P(TEMP,U,3)
"RTN","VPRCORD2",206,0)
 ..S POSS("schedule",NUM,"admin")=$P(TEMP,U,4)
"RTN","VPRCORD2",207,0)
 ..S NUM=NUM+1
"RTN","VPRCORD2",208,0)
 Q
"RTN","VPRCORD2",209,0)
 ;
"RTN","VPRCORD2",210,0)
 ;;add possible code values from the dialog to XML return for each prompt
"RTN","VPRCORD2",211,0)
LOADPOSC(PROMPT,CODES,POSS) ;
"RTN","VPRCORD2",212,0)
 N CNT,STR,NUM,TEMP
"RTN","VPRCORD2",213,0)
 S TEMP=$$LOW^XLFSTR(PROMPT),POSS(TEMP)="",NUM=0,CNT=0
"RTN","VPRCORD2",214,0)
 F X=1:1:$L(CODES) I $E(CODES,X)=";" D
"RTN","VPRCORD2",215,0)
 .S CNT=CNT+1,STR=$P(CODES,";",CNT) Q:STR=""
"RTN","VPRCORD2",216,0)
 .S POSS(TEMP,NUM,"value")=$P(STR,":",2),POSS(TEMP,NUM,"id")=$P(STR,":"),NUM=NUM+1
"RTN","VPRCORD2",217,0)
 Q
"RTN","VPRCORD2",218,0)
PTR(NAME) ; -- Returns ptr value of prompt in Dialog file
"RTN","VPRCORD2",219,0)
 Q +$O(^ORD(101.41,"AB",$E("OR GTX "_NAME,1,63),0))
"RTN","VPRCORD2",220,0)
 ;
"RTN","VPRCORD2",221,0)
UNSIGNED(UIFN) ;queue unsigned order alert
"RTN","VPRCORD2",222,0)
 N ORVP,ORIFN,ORNP,A
"RTN","VPRCORD2",223,0)
 Q:$G(UIFN)=""  S A=$G(^OR(100,UIFN,0)),ORVP=$P(A,"^",2),ORNP=$P(A,"^",4),ORIFN=UIFN_";1"
"RTN","VPRCORD2",224,0)
 D NOTIF^ORCSIGN
"RTN","VPRCORD2",225,0)
 Q
"RTN","VPRCORD3")
0^45^B151371865
"RTN","VPRCORD3",1,0)
VPRCORD3 ;;SLC/AGP - Process Order Request from AVIVA System ; 1/4/13
"RTN","VPRCORD3",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCORD3",3,0)
 ;
"RTN","VPRCORD3",4,0)
 ;
"RTN","VPRCORD3",5,0)
 Q
"RTN","VPRCORD3",6,0)
 ;
"RTN","VPRCORD3",7,0)
BLDDIAL(ORDIALOG,DG,DIAL) ;
"RTN","VPRCORD3",8,0)
 D GETDLG^ORCD(DIAL)
"RTN","VPRCORD3",9,0)
 Q
"RTN","VPRCORD3",10,0)
 ;
"RTN","VPRCORD3",11,0)
BLDROUTE(VPRROUTE) ;
"RTN","VPRCORD3",12,0)
 N IEN,NODE
"RTN","VPRCORD3",13,0)
 S IEN=0 F  S IEN=$O(^PS(51.2,IEN)) Q:IEN'>0  D
"RTN","VPRCORD3",14,0)
 .;I $L($G(^PS(51.2,IEN,1)))'="" Q
"RTN","VPRCORD3",15,0)
 .S NODE=$G(^PS(51.2,IEN,0))
"RTN","VPRCORD3",16,0)
 .S VPRROUTE($P(NODE,U))=IEN_U_$S($P(NODE,U)'="":$P(NODE,U),1:$P(NODE,U))
"RTN","VPRCORD3",17,0)
 .I $P(NODE,U,2)'="" S VPRROUTE($P(NODE,U,2))=IEN
"RTN","VPRCORD3",18,0)
 .I $P(NODE,U,3)'="" S VPRROUTE($P(NODE,U,3))=IEN
"RTN","VPRCORD3",19,0)
 Q
"RTN","VPRCORD3",20,0)
 ;
"RTN","VPRCORD3",21,0)
BLDVALS(IN,OUT,ERROR) ;
"RTN","VPRCORD3",22,0)
 N NUM,LAST,SPACES,STR,X
"RTN","VPRCORD3",23,0)
 S LAST=""
"RTN","VPRCORD3",24,0)
 S NUM=$L(IN,";")
"RTN","VPRCORD3",25,0)
 F X=1:1:NUM D
"RTN","VPRCORD3",26,0)
 .;W !,X_" "_$P(IN,":",X)
"RTN","VPRCORD3",27,0)
 .S STR=$P(IN,";",X)
"RTN","VPRCORD3",28,0)
 .I X=1 S OUT(STR)="" S LAST=STR Q
"RTN","VPRCORD3",29,0)
 .I X=NUM S OUT(LAST)=STR Q
"RTN","VPRCORD3",30,0)
 .S SPACES=$L(STR," ")
"RTN","VPRCORD3",31,0)
 .I LAST'="" S OUT(LAST)=$P(STR," ",1,SPACES-1)
"RTN","VPRCORD3",32,0)
 .S LAST=$P(STR," ",SPACES)
"RTN","VPRCORD3",33,0)
 Q
"RTN","VPRCORD3",34,0)
 ;
"RTN","VPRCORD3",35,0)
GETOCPKG(VPRTYPE) ;
"RTN","VPRCORD3",36,0)
 N RESULT
"RTN","VPRCORD3",37,0)
 S RESULT=$S(VPRTYPE="UD RX":"PSI",VPRTYPE="O RX":"PSO",VPRTYPE="NV RX":"PSH",1:VPRTYPE)
"RTN","VPRCORD3",38,0)
 Q RESULT
"RTN","VPRCORD3",39,0)
 ;
"RTN","VPRCORD3",40,0)
GETSET(TYPE) ;
"RTN","VPRCORD3",41,0)
 S RESULT=$S(TYPE="INPATIENT MEDS":"UD RX",TYPE="OUTPATIENT MEDS":"O RX",TYPE="MEDICATIONS":"RX",TYPE="NON-VA MEDS":"NV RX",1:TYPE)
"RTN","VPRCORD3",42,0)
 Q RESULT
"RTN","VPRCORD3",43,0)
 ;
"RTN","VPRCORD3",44,0)
EN(VPRVALUE,PARAMS) ;
"RTN","VPRCORD3",45,0)
 N DG,DIAL,DLGNAME,ERROR,FAIL,ISIMO,LOC,OIIEN,ORDERSTR,ORDIALOG,PAT,PARDG,TEMPTYPE,VPRCHECK,VPROREST,VPRTEMP,VPRTYPE,TYPE,VALUES
"RTN","VPRCORD3",46,0)
 K ^TMP("VPRWORD",$J),^TMP("VPRSIG",$J),^TMP($J,"ORDER CHECKS")
"RTN","VPRCORD3",47,0)
 S ORDERSTR=$$UP^XLFSTR($G(PARAMS("orderString"))) I $G(ORDERSTR)="" D AE^VPRCORD1("No order string found",.ERROR) G ENX
"RTN","VPRCORD3",48,0)
 S TYPE=$$UP^XLFSTR($G(PARAMS("type"))) I TYPE="" D AE^VPRCORD1("No order type found",.VPRVALUE) G ENX
"RTN","VPRCORD3",49,0)
 S PAT=$G(PARAMS("patient")),LOC=$G(PARAMS("location")),USER=1089
"RTN","VPRCORD3",50,0)
 ;
"RTN","VPRCORD3",51,0)
 D IMOLOC^ORIMO(.VPRTEMP,LOC,PAT) S ISIMO=VPRTEMP
"RTN","VPRCORD3",52,0)
 ;builds order order values array this code needs to be enhanced somehow
"RTN","VPRCORD3",53,0)
 D BLDVALS(ORDERSTR,.VALUES,.ERROR) I $D(ERROR) G ENX
"RTN","VPRCORD3",54,0)
 S VALUES("LOCATION")=LOC
"RTN","VPRCORD3",55,0)
 I $D(PARAMS("COMMENTS")) M VALUES("COMMENTS")=PARAMS("COMMENTS")
"RTN","VPRCORD3",56,0)
 I $D(VALUES("QO")) D QO(.ERROR,.VALUES,LOC,PAT,ISIMO,.ORD) G ENX
"RTN","VPRCORD3",57,0)
 S VPRTYPE=$$GETSET(TYPE) I VPRTYPE="" D AE^VPRCORD1("Cannot find order package.",.ERROR) G ENX
"RTN","VPRCORD3",58,0)
 S DG=$O(^ORD(100.98,"B",VPRTYPE,"")) I DG="" D AE^VPRCORD1("Cannot find display group.",.ERROR) G ENX
"RTN","VPRCORD3",59,0)
 S TEMPTYPE="" I VPRTYPE=TYPE S TEMPTYPE=$P(^ORD(100.98,DG,0),U,3)
"RTN","VPRCORD3",60,0)
 S OIIEN=+$$VALIDOI(.VALUES,$S(TEMPTYPE'="":TEMPTYPE,1:VPRTYPE)) I OIIEN<1 D AE^VPRCORD1("Cannot find valid OI",.ERROR) G ENX
"RTN","VPRCORD3",61,0)
 S VALUES("ORDERABLE ITEM")=OIIEN_U_VALUES("OI")
"RTN","VPRCORD3",62,0)
 ;
"RTN","VPRCORD3",63,0)
 ;get display group info and dialog information
"RTN","VPRCORD3",64,0)
 S FAIL=0,DIAL=+$P($G(^ORD(100.98,DG,0)),U,4) I DIAL<1 D  I FAIL=1 D AE^VPRCORD1("Cannot find dialog.",.ERROR) G ENX
"RTN","VPRCORD3",65,0)
 .S PARDG=$O(^ORD(100.98,"AD",DG,"")) I PARDG'>0 S FAIL=1 Q
"RTN","VPRCORD3",66,0)
 .S DIAL=+$P($G(^ORD(100.98,PARDG,0)),U,4) I DIAL<1 S FAIL=1
"RTN","VPRCORD3",67,0)
 S DLGNAME=$P($G(^ORD(101.41,DIAL,0)),U)
"RTN","VPRCORD3",68,0)
 ;
"RTN","VPRCORD3",69,0)
 ;get package information
"RTN","VPRCORD3",70,0)
 S PKGID=$P(^ORD(101.41,DIAL,0),U,7) I PKGID<0 D AE^VPRCORD1("Cannot find package",.ERROR) G ENX
"RTN","VPRCORD3",71,0)
 S PKGNAME=$P(^DIC(9.4,PKGID,0),U,2) I PKGNAME="" D AE^VPRCORD1("Cannot find package name",.ERROR) G ENX
"RTN","VPRCORD3",72,0)
 ;
"RTN","VPRCORD3",73,0)
 ;create ORDIALOG array
"RTN","VPRCORD3",74,0)
 D BLDDIAL(.ORDIALOG,DG,DIAL) I '$D(ORDIALOG) D AE^VPRCORD1("Could not build ORDIALOG array",.ERROR) G ENX
"RTN","VPRCORD3",75,0)
 ;populate ORDIALOG array with values
"RTN","VPRCORD3",76,0)
 I $$POPDIAL(.ERROR,.ORDIALOG,.VPRCHECK,.VALUES,VPRTYPE,OIIEN,PAT,LOC)<1 G ENX
"RTN","VPRCORD3",77,0)
 ;
"RTN","VPRCORD3",78,0)
 D PERCHCKS(.ERROR,.ORDIALOG,.VPRCHECK,PAT,LOC,USER,DIAL,DLGNAME,DG,PKGID,PKGNAME,OIIEN,"N") I $D(ERROR) G ENX
"RTN","VPRCORD3",79,0)
 ;
"RTN","VPRCORD3",80,0)
 D SAVE(.VPROREST,PAT,USER,LOC,DLGNAME,DG,OIIEN,0,.ORDIALOG,.ORD)
"RTN","VPRCORD3",81,0)
 ;
"RTN","VPRCORD3",82,0)
ENX ;
"RTN","VPRCORD3",83,0)
 I $D(ERROR) D ENCODE^VPRJSON("ERROR","VPRVALUE","VPRERR") Q
"RTN","VPRCORD3",84,0)
 ;I $D(ERROR) M VPRVALUE=ERROR Q
"RTN","VPRCORD3",85,0)
 D BLDJSON^VPRCORD2("",.VPROREST,"",.VPRVALUE,"","",.ORD)
"RTN","VPRCORD3",86,0)
 Q
"RTN","VPRCORD3",87,0)
 ;
"RTN","VPRCORD3",88,0)
ORDRCHKS(PAT,VPROIFN,VPRPKG,LOC,ORDIALOG,VPRCHECK) ;
"RTN","VPRCORD3",89,0)
 N A,OCO,OCLIST,ORINFO,ORL,OCHKS,PATTYPE,VPRREN,VPRPOSS
"RTN","VPRCORD3",90,0)
 S PATTYPE=$S(+$G(^DPT(PAT,.1))>0:"I",1:"O")
"RTN","VPRCORD3",91,0)
 D ON^ORWDXC(.OCO)
"RTN","VPRCORD3",92,0)
 D DISPLAY^ORWDXC(.OCLIST,PAT,VPRPKG) I $D(OCLIST) D INFO^VPRCORD2(.OCLIST)
"RTN","VPRCORD3",93,0)
 D ACCEPT^ORWDXC(.OCHKS,PAT,VPRPKG,PATTYPE,LOC,.VPRCHECK,VPROIFN,0) I $D(OCHKS) D INFO^VPRCORD2(.OCHKS)
"RTN","VPRCORD3",94,0)
 Q
"RTN","VPRCORD3",95,0)
 ;
"RTN","VPRCORD3",96,0)
PERCHCKS(ERROR,ORDIALOG,VPRCHECK,PAT,LOC,USER,DIAL,DLGNAME,DG,PKGID,PKGNAME,OIIEN,ORTYPE) ;
"RTN","VPRCORD3",97,0)
 D NPHASKEY^ORWU(.HASKEY,USER,"PROVIDER") I HASKEY=0 D AE^VPRCORD1("DOES NOT HOLD THE PROVIDER KEY",.ERROR) Q
"RTN","VPRCORD3",98,0)
 D ALLWORD^ORALWORD(.VPROK,USER,OIIEN,ORTYPE,USER) I $G(VPROK)>0 D AEM^VPRCORD1(.VPROK,.ERROR) Q
"RTN","VPRCORD3",99,0)
 D ORDRCHKS(PAT,OIIEN,PKGNAME,LOC,.ORDIALOG,.VPRCHECK)
"RTN","VPRCORD3",100,0)
 Q
"RTN","VPRCORD3",101,0)
 ;
"RTN","VPRCORD3",102,0)
POPDIAL(ERROR,ORDIALOG,VPRCHECK,VALUES,VPRTYPE,OIIEN,PAT,LOC) ;
"RTN","VPRCORD3",103,0)
 N CNT,NAME,NODE,NUM,OCPKG,PTR,RESULT,TEMP,WP
"RTN","VPRCORD3",104,0)
 S RESULT=0
"RTN","VPRCORD3",105,0)
 I VPRTYPE["RX" S RESULT=$$PS(.ERROR,.ORDIALOG,.VALUES,VPRTYPE,OIIEN,PAT,LOC) I RESULT=0 Q 0
"RTN","VPRCORD3",106,0)
 S RESULT=$$ORDDIAL(.ERROR,.ORDIALOG,.VALUES,VPRTYPE,OIIEN,PAT,LOC) I RESULT=0 Q 0
"RTN","VPRCORD3",107,0)
 ;
"RTN","VPRCORD3",108,0)
 S NAME="" F  S NAME=$O(VALUES(NAME)) Q:NAME=""  D
"RTN","VPRCORD3",109,0)
 .S PTR=+$$PTR(NAME) I PTR=0 Q
"RTN","VPRCORD3",110,0)
 .I '$D(ORDIALOG(PTR)) Q
"RTN","VPRCORD3",111,0)
 .S ORDIALOG(PTR,1)=$P(VALUES(NAME),U)
"RTN","VPRCORD3",112,0)
 .I NAME="SIG"!(NAME="WORD PROCESSING 1") S ORDIALOG(PTR,1)=VALUES(NAME)
"RTN","VPRCORD3",113,0)
 .S TEMP(PTR)=VALUES(NAME)
"RTN","VPRCORD3",114,0)
 ;
"RTN","VPRCORD3",115,0)
 D POPOC(.ERROR,.ORDIALOG,.TEMP,.VPRCHECK,VPRTYPE,OIIEN)
"RTN","VPRCORD3",116,0)
 Q RESULT
"RTN","VPRCORD3",117,0)
 ;
"RTN","VPRCORD3",118,0)
POPOC(ERROR,ORDIALOG,TEMP,VPRCHECK,VPRTYPE,OIIEN) ;
"RTN","VPRCORD3",119,0)
 N CNT,NAME,NODE,NUM,OCPKG,PTR,WP
"RTN","VPRCORD3",120,0)
 S OCPKG=$$GETOCPKG($G(VPRTYPE)) I OCPKG="" Q
"RTN","VPRCORD3",121,0)
 S CNT=1 S VPRCHECK(CNT)=OIIEN_U_OCPKG_U
"RTN","VPRCORD3",122,0)
 S PTR=0 F  S PTR=$O(ORDIALOG(PTR)) Q:PTR'>0  D
"RTN","VPRCORD3",123,0)
 .S NAME=$P(ORDIALOG(PTR),U,2) I NAME="COMMENT" Q
"RTN","VPRCORD3",124,0)
 .S CNT=CNT+1
"RTN","VPRCORD3",125,0)
 .S NUM=0 F  S NUM=$O(ORDIALOG(PTR,NUM)) Q:+NUM'>0  D
"RTN","VPRCORD3",126,0)
 ..S NODE=OCPKG_U_NAME_U_TEMP(PTR)
"RTN","VPRCORD3",127,0)
 ..I NAME="DRUG" S $P(VPRCHECK(1),U,3)=TEMP(PTR)
"RTN","VPRCORD3",128,0)
 ..I NAME="SIG" D
"RTN","VPRCORD3",129,0)
 ...S WP=TEMP(PTR)
"RTN","VPRCORD3",130,0)
 ...I '$D(@WP@(1,0)) Q
"RTN","VPRCORD3",131,0)
 ...S NODE=OCPKG_U_NAME_U_1_U_U_"WP"_U_U_@WP@(1,0)
"RTN","VPRCORD3",132,0)
 ..S VPRCHECK(CNT)=NODE
"RTN","VPRCORD3",133,0)
 ;
"RTN","VPRCORD3",134,0)
 Q RESULT
"RTN","VPRCORD3",135,0)
 ;
"RTN","VPRCORD3",136,0)
ORDDIAL(ERROR,ORDIALOG,VALUES,VPRTYPE,OIIEN,PAT,LOC) ;
"RTN","VPRCORD3",137,0)
 I $D(VALUES("STARTDATE")) S VALUES("START DATE/TIME")=VALUES("STARTDATE") K VALUES("STARTDATE")
"RTN","VPRCORD3",138,0)
 I $D(VALUES("PREOPDATE")) S VALUES("PRE-OP SCHEDULED DATE/TIME")=VALUES("PREOPDATE") K VALUES("PREOPDATE")
"RTN","VPRCORD3",139,0)
 I $D(VALUES("SUBMIT")) S VALUES("IMAGING LOCATION")=VALUES("SUBMIT") K VALUES("SUBMIT")
"RTN","VPRCORD3",140,0)
 I $D(VALUES("TRANSPORT")) S VALUES("MODE OF TRANSPORT")=VALUES("TRANSPORT") K VALUES("TRANSPORT")
"RTN","VPRCORD3",141,0)
 I $D(VALUES("ISOLATION")) S VALUES("YES/NO")=VALUES("ISOLATION") K VALUES("ISOLATION")
"RTN","VPRCORD3",142,0)
 I $D(VALUES("REASONSTUDY")) S VALUES("STUDY REASON")=VALUES("REASONSTUDY") K VALUES("REASONSTUDY")
"RTN","VPRCORD3",143,0)
 I '$D(VALUES("URGENCY")) S VALUES("URGENCY")=9
"RTN","VPRCORD3",144,0)
 I $D(VALUES("COMMENTS")) D
"RTN","VPRCORD3",145,0)
 .S ^TMP("VPRWORD",$J,1,0)=VALUES("COMMENTS")
"RTN","VPRCORD3",146,0)
 .S VALUES("WORD PROCESSING 1")=$NA(^TMP("VPRWORD",$J))
"RTN","VPRCORD3",147,0)
 .K VALUES("COMMENT")
"RTN","VPRCORD3",148,0)
 Q 1
"RTN","VPRCORD3",149,0)
 ;
"RTN","VPRCORD3",150,0)
PS(ERROR,ORDIALOG,VALUES,VPRTYPE,OIIEN,PAT,LOC) ;
"RTN","VPRCORD3",151,0)
 N ARRAY,CNT,DOSE,DOSENODE,DOSESTR,DRUG,FAIL,FOUND,NODE,PRIORITY,ROUTE,ROUTEIEN,SCH,TEMP,VAL,VPRLST,VPRPRIOR,VPRROUTE,VPRSCH
"RTN","VPRCORD3",152,0)
 S FAIL=0
"RTN","VPRCORD3",153,0)
 I $D(VALUES("STARTDATE")) S VALUES("START DATE/TIME")=VALUES("STARTDATE") K VALUES("STARTDATE")
"RTN","VPRCORD3",154,0)
 D SCHALL^ORWDPS1(.VPRSCH,PAT,LOC)
"RTN","VPRCORD3",155,0)
 D ODSLCT^ORWDPS1(.VPRPRIOR,$E(VPRTYPE),PAT,LOC)
"RTN","VPRCORD3",156,0)
 D OISLCT^ORWDPS2(.VPRLST,OIIEN,$E(VPRTYPE),PAT,"Y","N")
"RTN","VPRCORD3",157,0)
 D BLDROUTE(.VPRROUTE)
"RTN","VPRCORD3",158,0)
 S VALUES("INSTRUCTIONS")=$G(VALUES("DOSE"))_U_$G(VALUES("DOSE")) K VALUES("DOSES")
"RTN","VPRCORD3",159,0)
 ;
"RTN","VPRCORD3",160,0)
PSROUTE ;set route
"RTN","VPRCORD3",161,0)
 I '$D(VALUES("ROUTE")),VPRTYPE="NV RX" G PSSCH
"RTN","VPRCORD3",162,0)
 S TEMP=$G(VALUES("ROUTE"))
"RTN","VPRCORD3",163,0)
 S ROUTEIEN=+$G(VPRROUTE(TEMP)) I ROUTEIEN<1 D AE^VPRCORD1("Could not find a valid route",.ERROR) S FAIL=1
"RTN","VPRCORD3",164,0)
 S ROUTE=$S(VPRTYPE'["UD":$P(VPRROUTE(VALUES("ROUTE")),U,2),1:TEMP)
"RTN","VPRCORD3",165,0)
 I ROUTE="" S ROUTE=TEMP
"RTN","VPRCORD3",166,0)
 S VALUES("ROUTE")=ROUTEIEN_U_TEMP
"RTN","VPRCORD3",167,0)
 ;
"RTN","VPRCORD3",168,0)
PSURG ;build urgency value
"RTN","VPRCORD3",169,0)
 S CNT=0,FOUND=0,PRIOR=0 F  S CNT=$O(VPRPRIOR(CNT)) Q:CNT'>0!(FOUND=1)  D
"RTN","VPRCORD3",170,0)
 .S NODE=VPRPRIOR(CNT) I NODE="~Priority" S PRIOR=1
"RTN","VPRCORD3",171,0)
 .I PRIOR=0 Q
"RTN","VPRCORD3",172,0)
 .I $E(NODE)="~"
"RTN","VPRCORD3",173,0)
 .I $G(VALUES("URGENCY"))'="" D  Q
"RTN","VPRCORD3",174,0)
 ..I $P(NODE,U,2)'=VALUES("URGENCY") Q
"RTN","VPRCORD3",175,0)
 ..S TEMP=$P(NODE,U) S VALUES("URGENCY")=$E(TEMP,2,$L(TEMP)) S FOUND=1
"RTN","VPRCORD3",176,0)
 .I $E(NODE)="i" Q
"RTN","VPRCORD3",177,0)
 .S TEMP=$P(NODE,U) S VALUES("URGENCY")=$E(TEMP,2,$L(TEMP)) S FOUND=1
"RTN","VPRCORD3",178,0)
 ;
"RTN","VPRCORD3",179,0)
PSSCH ;populate additional schedule fields for inpatient meds
"RTN","VPRCORD3",180,0)
 ;TODO move to sub-routine to handle Days of Weeks schedules
"RTN","VPRCORD3",181,0)
 I '$D(VALUES("SCHEDULE")),VPRTYPE="NV RX" G PSSCOM
"RTN","VPRCORD3",182,0)
 S CNT=0,FOUND=0 F  S CNT=$O(VPRSCH(CNT)) Q:CNT'>0!(FOUND=1)  D
"RTN","VPRCORD3",183,0)
 .S NODE=$G(VPRSCH(CNT)) I $P(NODE,U)'=VALUES("SCHEDULE") Q
"RTN","VPRCORD3",184,0)
 .S VALUES("SCHEDULE TYPE")=$P(NODE,U,3)_U_$P(NODE,U,3),VALUES("ADMIN TIMES")=$P(NODE,U,4)_U_$P(NODE,U,4),VALUES("SCHEDULE")=VALUES("SCHEDULE")_U_VALUES("SCHEDULE")
"RTN","VPRCORD3",185,0)
 .S SCH=$S(VPRTYPE'["UD":$P(NODE,U,2),1:$P(NODE,U))
"RTN","VPRCORD3",186,0)
 .S FOUND=1
"RTN","VPRCORD3",187,0)
 ;
"RTN","VPRCORD3",188,0)
PSSCOM ;
"RTN","VPRCORD3",189,0)
 I $D(VALUES("COMMENTS")) D
"RTN","VPRCORD3",190,0)
 .S ^TMP("VPRWORD",$J,1,0)=VALUES("COMMENTS")
"RTN","VPRCORD3",191,0)
 .S VALUES("WORD PROCESSING 1")=$NA(^TMP("VPRWORD",$J))
"RTN","VPRCORD3",192,0)
 .K VALUES("COMMENT")
"RTN","VPRCORD3",193,0)
 ;
"RTN","VPRCORD3",194,0)
PSDRUG ;populate additional felds based off the dose
"RTN","VPRCORD3",195,0)
 S CNT=0,FOUND=0,DOSENODE=0 F  S CNT=$O(VPRLST(CNT)) Q:CNT'>0!(FOUND=1)  D
"RTN","VPRCORD3",196,0)
 .S NODE=VPRLST(CNT) I NODE="~AllDoses" S DOSENODE=1
"RTN","VPRCORD3",197,0)
 .I DOSENODE=0 Q
"RTN","VPRCORD3",198,0)
 .I $E(NODE)="~" Q
"RTN","VPRCORD3",199,0)
 .S DOSE=$P(NODE,U) S DOSE=$E(DOSE,2,$L(DOSE))
"RTN","VPRCORD3",200,0)
 .I $P(VALUES("INSTRUCTIONS"),U)'=DOSE Q
"RTN","VPRCORD3",201,0)
 .S VALUES("DISPENSE DRUG")=$P(NODE,U,2)
"RTN","VPRCORD3",202,0)
 .S VALUES("DOSE")=$P(NODE,U,3)
"RTN","VPRCORD3",203,0)
PSO ;handle outpatient meds
"RTN","VPRCORD3",204,0)
 I $D(VALUES("SUPPLY")) D
"RTN","VPRCORD3",205,0)
 .N CNT,DRG,PRIOR,PTR,QUANTITY,SUP,UPD,X
"RTN","VPRCORD3",206,0)
 .S DRG=$G(VALUES("DISPENSE DRUG")),SUP=VALUES("SUPPLY")
"RTN","VPRCORD3",207,0)
 .K VALUES("SUPPLY")
"RTN","VPRCORD3",208,0)
 .;get quantity do a check to determine if it is valid range or if one is not defined
"RTN","VPRCORD3",209,0)
 .;potentially need to add code to handle complex orders
"RTN","VPRCORD3",210,0)
 .S UPD=$P(VALUES("DOSE"),"&",3)
"RTN","VPRCORD3",211,0)
 .D DAY2QTY^ORWDPS2(.VAL,SUP,UPD_U,$P(VALUES("SCHEDULE"),U)_U,"~^",PAT,DRG)
"RTN","VPRCORD3",212,0)
 .S QUANTITY=+$G(VALUES("QUANTITY"))
"RTN","VPRCORD3",213,0)
 .I QUANTITY=0 S VALUES("QUANTITY")=+VAL
"RTN","VPRCORD3",214,0)
 .I QUANTITY>0 S VALUES("QUANTITY")=$S(QUANTITY<VAL:QUANTITY,+VAL=0:QUANTITY,1:VAL)
"RTN","VPRCORD3",215,0)
 .S VALUES("DAYS SUPPLY")=SUP
"RTN","VPRCORD3",216,0)
 .I +$G(VALUES("DAYS SUPPLY"))=0 D AE^VPRCORD1("Days Supply must be greater then zero",.ERROR) S FAIL=1
"RTN","VPRCORD3",217,0)
 .I +$G(VALUES("QUANTITY"))=0 D AE^VPRCORD1("Quantity must be greater then zero",.ERROR) S FAIL=1
"RTN","VPRCORD3",218,0)
 .;
"RTN","VPRCORD3",219,0)
 .;check refill values to make sure it is in range
"RTN","VPRCORD3",220,0)
 .I +$G(VALUES("REFILLS"))>0 D
"RTN","VPRCORD3",221,0)
 ..K VAL
"RTN","VPRCORD3",222,0)
 ..D MAXREF^ORWDPS2(.VAL,PAT,DRG,SUP,OIIEN,0)
"RTN","VPRCORD3",223,0)
 ..I VALUES("REFILLS")>VAL S VALUES("REFILLS")=VAL
"RTN","VPRCORD3",224,0)
 .I +$G(VALUES("REFILLS"))=0 S VALUES("REFILLS")=0
"RTN","VPRCORD3",225,0)
 .I $D(VALUES("ROUTINE")) D
"RTN","VPRCORD3",226,0)
 ..S PTR=$$PTR("ROUTING") I PTR'>0 Q
"RTN","VPRCORD3",227,0)
 ..S NODE=$P($G(^ORD(101.41,PTR,1)),U,2) I NODE="" Q
"RTN","VPRCORD3",228,0)
 ..S CNT=$L(NODE,";")-1
"RTN","VPRCORD3",229,0)
 ..F X=1:1:CNT D
"RTN","VPRCORD3",230,0)
 ...S TEMP=$P(NODE,";",X) I TEMP="" Q
"RTN","VPRCORD3",231,0)
 ...S ARRAY($P(TEMP,":",2))=$P(TEMP,":")
"RTN","VPRCORD3",232,0)
 ...I $D(ARRAY(VALUES("ROUTING"))) S VALUES("ROUTING")=ARRAY(VALUES("ROUTING"))
"RTN","VPRCORD3",233,0)
 .;
"RTN","VPRCORD3",234,0)
 .;check for valid routing value or set a default value
"RTN","VPRCORD3",235,0)
 .I '$D(VALUES("ROUTING")) D
"RTN","VPRCORD3",236,0)
 ..S CNT=0,FOUND=0,PRIOR=0 F  S CNT=$O(VPRPRIOR(CNT)) Q:CNT'>0!(FOUND=1)  D
"RTN","VPRCORD3",237,0)
 ...S NODE=VPRPRIOR(CNT) I NODE="~Pickup" S PRIOR=1
"RTN","VPRCORD3",238,0)
 ...I PRIOR=0 Q
"RTN","VPRCORD3",239,0)
 ...I $E(NODE)="~" Q
"RTN","VPRCORD3",240,0)
 ...S TEMP=$P(NODE,U) S VALUES("ROUTING")=$E(TEMP,2,$L(TEMP)) S FOUND=1
"RTN","VPRCORD3",241,0)
 ;
"RTN","VPRCORD3",242,0)
 I FAIL>0 Q 0
"RTN","VPRCORD3",243,0)
PSSIG ;build sig value
"RTN","VPRCORD3",244,0)
 N WP
"RTN","VPRCORD3",245,0)
 S ^TMP("VPRSIG",$J,0,0)=$P(VALUES("INSTRUCTIONS"),U)
"RTN","VPRCORD3",246,0)
 I $G(ROUTE)'="" S ^TMP("VPRSIG",$J,1,0)=ROUTE
"RTN","VPRCORD3",247,0)
 I $G(SCH) S ^TMP("VPRSIG",$J,1,0)=$S($G(^TMP("VPRSIG",$J,1,0))'="":^TMP("VPRSIG",$J,1,0)_" "_SCH,1:SCH)
"RTN","VPRCORD3",248,0)
 I $D(VALUES("WORD PROCESSING 1")) D
"RTN","VPRCORD3",249,0)
 .S WP=VALUES("WORD PROCESSING 1")
"RTN","VPRCORD3",250,0)
 .S CNT=1,NUM=1 F  S CNT=$O(@WP@(CNT)) Q:CNT'>0  D
"RTN","VPRCORD3",251,0)
 ..S NUM=NUM+1 S ^TMP("VPRSIG",$J,NUM,0)=@WP@(CNT,0)
"RTN","VPRCORD3",252,0)
 S VALUES("SIG")=$NA(^TMP("VPRSIG",$J))
"RTN","VPRCORD3",253,0)
 Q 1
"RTN","VPRCORD3",254,0)
 ;
"RTN","VPRCORD3",255,0)
QO(ERROR,VALUES,LOC,PAT,ISIMO,ORD) ;
"RTN","VPRCORD3",256,0)
 N BLDRES,DEFIEN,DIEN,IEN,PKGID,PKGNAME,VARSARR,VPROREST,VPRCHECK
"RTN","VPRCORD3",257,0)
 S IEN=+$O(^ORD(101.41,"B",VALUES("QO"),"")) I IEN'>0 D AE^VPRCORD1("Could not find QO",.ERROR) Q
"RTN","VPRCORD3",258,0)
 ;
"RTN","VPRCORD3",259,0)
 D BEG^VPRCORD2(PAT,LOC,IEN,USER,.VARSARR,.BLDRES,.VPRVALUE) I $D(ERROR) Q
"RTN","VPRCORD3",260,0)
 S PKGID=+$P($G(^ORD(101.41,IEN,0)),U,7) I PKGID'>0 D AE^VPRCORD1("Could not find package for the QO",.ERROR) Q
"RTN","VPRCORD3",261,0)
 S PKGNAME=$P(^DIC(9.4,PKGID,0),U,2) I PKGNAME="" D AE^VPRCORD1("Cannot find package name",.VPRVALUE) Q
"RTN","VPRCORD3",262,0)
 ;
"RTN","VPRCORD3",263,0)
 I $P(BLDRES(0),U,4)'="Q" D AE^VPRCORD1("Item is not a QO",.ERROR) Q
"RTN","VPRCORD3",264,0)
 S ORDTYPE="Q"
"RTN","VPRCORD3",265,0)
 ;I $P(BLDRES(0),U)'=1,$P(BLDRES(0),U)'=2 D AE("Quick Order is not set to Auto-Accept",.VPRVALUE) S VPROK=2 Q
"RTN","VPRCORD3",266,0)
 S RSPID=$P(BLDRES(0),U,2)
"RTN","VPRCORD3",267,0)
 S DEFIEN=$$DEFDLG^ORCD(IEN)
"RTN","VPRCORD3",268,0)
 S VARSARR("DISPLAY GROUP IEN")=$P($G(^ORD(101.41,DEFIEN,0)),U,5)
"RTN","VPRCORD3",269,0)
 S VARSARR("DISPLAY GROUP")=$P($G(^ORD(101.98,VARSARR("DISPLAY GROUP IEN"),0)),U)
"RTN","VPRCORD3",270,0)
 D BLDORDLG^VPRCORD1(.ORDIALOG,IEN,PAT,RSPID,ORDTYPE)
"RTN","VPRCORD3",271,0)
 ;S DIEN=VARSARR("DISPLAY GROUP IEN")
"RTN","VPRCORD3",272,0)
 D FILLID^ORWDXC(.FILLER,IEN)
"RTN","VPRCORD3",273,0)
 S VARSARR("FILLER ID")=FILLER
"RTN","VPRCORD3",274,0)
 ;I ORDTYPE="E" S DIEN=+$P($G(^OR(100,VPROIFN,0)),U,5)
"RTN","VPRCORD3",275,0)
 ;I ORDTYPE="Q" S DIEN=VPROIFN
"RTN","VPRCORD3",276,0)
 S DLGNAME=$P($G(^ORD(101.41,DEFIEN,0)),U)
"RTN","VPRCORD3",277,0)
 I DLGNAME="" D AE^VPRCORD1("INVALID DEFAULT DIALOG",.ERROR) Q
"RTN","VPRCORD3",278,0)
 S VARSARR("DIALOG NAME")=DLGNAME
"RTN","VPRCORD3",279,0)
 D DLGDEF^ORWDX(.DLGDEF,DLGNAME)
"RTN","VPRCORD3",280,0)
 ;build order check array,build dialog structure and build save array
"RTN","VPRCORD3",281,0)
 D BLDARRS^VPRCORD2(.RESULT,.ORDIALOG,.VARSARR,PAT,LOC,.VPRCHECK,.SAVEARR,.VPRPOSS)
"RTN","VPRCORD3",282,0)
 D PERCHCKS(.ERROR,.ORDIALOG,.VPRCHECK,PAT,LOC,USER,DEFIEN,DLGNAME,VARSARR("DISPLAY GROUP IEN"),PKGID,PKGNAME,IEN,"Q") I $D(ERROR) Q
"RTN","VPRCORD3",283,0)
 D SAVE(.VPROREST,PAT,USER,LOC,DLGNAME,VARSARR("DISPLAY GROUP IEN"),0,IEN,.ORDIALOG,.ORD)
"RTN","VPRCORD3",284,0)
 Q
"RTN","VPRCORD3",285,0)
 ;
"RTN","VPRCORD3",286,0)
SAVE(VPROREST,PAT,USER,LOC,DLGNAME,DGIEN,ORIFN,QOIEN,SAVEARR,ORD) ;
"RTN","VPRCORD3",287,0)
 ;SAVE(REC,ORVP,ORNP,ORL,DLG,ORDG,ORIT,ORIFN,ORDIALOG,ORDEA,ORAPPT,ORSRC,OREVTDF)
"RTN","VPRCORD3",288,0)
 I QOIEN>0 D SAVE^ORWDX(.VPROREST,PAT,USER,LOC,DLGNAME,DGIEN,QOIEN,"",.SAVEARR,"",DT,"",0)
"RTN","VPRCORD3",289,0)
 I ORIFN>0 D SAVE^ORWDX(.VPROREST,PAT,USER,LOC,DLGNAME,DGIEN,"","",.SAVEARR,"",DT,"",0)
"RTN","VPRCORD3",290,0)
 N CNT,DFN,IEN
"RTN","VPRCORD3",291,0)
 S CNT=0,IEN=0 F  S CNT=$O(VPROREST(CNT)) Q:CNT'>0!(IEN>0)  D
"RTN","VPRCORD3",292,0)
 .I $E(VPROREST(CNT))="~" S IEN=+$P($P(VPROREST(CNT),U),"~",2)
"RTN","VPRCORD3",293,0)
 I IEN>0 S DFN=PAT D ORX^VPRDJ01(IEN,.ORD)
"RTN","VPRCORD3",294,0)
 Q
"RTN","VPRCORD3",295,0)
 ;
"RTN","VPRCORD3",296,0)
VALIDOI(VALUES,TYPE) ;
"RTN","VPRCORD3",297,0)
 N IEN,POSSOI
"RTN","VPRCORD3",298,0)
 S IEN=$P(VALUES("OI"),":",5) I IEN'>0 Q -1
"RTN","VPRCORD3",299,0)
 ;S IEN=$P(VALUES("OI"),":",5) I IEN'>0 Q -1
"RTN","VPRCORD3",300,0)
 S POSSOI=$P(^ORD(101.43,IEN,0),U)
"RTN","VPRCORD3",301,0)
 S VALUES("OI")=POSSOI
"RTN","VPRCORD3",302,0)
 ;S SETTYPE=$$GETSET(TYPE) I SETTYPE="" Q -1
"RTN","VPRCORD3",303,0)
 S RESULT=$O(^ORD(101.43,"S."_TYPE,POSSOI,""))
"RTN","VPRCORD3",304,0)
 Q RESULT
"RTN","VPRCORD3",305,0)
 ;
"RTN","VPRCORD3",306,0)
PTR(NAME) ;
"RTN","VPRCORD3",307,0)
 Q $O(^ORD(101.41,"B","OR GTX "_NAME,""))
"RTN","VPRCORD4")
0^46^B140128091
"RTN","VPRCORD4",1,0)
VPRCORD4 ;;SLC/AGP -Retreived Orderable Items ; 1/4/13
"RTN","VPRCORD4",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCORD4",3,0)
 ;
"RTN","VPRCORD4",4,0)
 ;
"RTN","VPRCORD4",5,0)
 Q
"RTN","VPRCORD4",6,0)
 ;
"RTN","VPRCORD4",7,0)
ADDODG ;
"RTN","VPRCORD4",8,0)
 N CNT,IEN,NUM,NODE,PTR,RESULT,TEMP
"RTN","VPRCORD4",9,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extaracting display groups"
"RTN","VPRCORD4",10,0)
 S IEN=0 F  S IEN=$O(^ORD(100.98,IEN)) Q:IEN'>0  D
"RTN","VPRCORD4",11,0)
 .N $ES,$ET
"RTN","VPRCORD4",12,0)
 .S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPRCORD4",13,0)
 .I '$D(^ORD(100.98,IEN,1)) D  Q
"RTN","VPRCORD4",14,0)
 ..S NODE=$G(^ORD(100.98,IEN,0)) D SODGNODE(.RESULT,NODE)
"RTN","VPRCORD4",15,0)
 ..S RESULT("uid")=$$SETUID^VPRUTILS("displayGroup","",IEN),RESULT("internal")=IEN
"RTN","VPRCORD4",16,0)
 ..D ADD^VPREF("RESULT") S VPRCNT=+$G(VPRCNT)+1,VPRLAST=IEN
"RTN","VPRCORD4",17,0)
 .D ADDODG1(IEN,.TEMP)
"RTN","VPRCORD4",18,0)
 .M RESULT=TEMP
"RTN","VPRCORD4",19,0)
 .D ADD^VPREF("RESULT") S VPRCNT=+$G(VPRCNT)+1,VPRLAST=IEN
"RTN","VPRCORD4",20,0)
 I IEN'>0 S VPRFINI=1
"RTN","VPRCORD4",21,0)
 Q
"RTN","VPRCORD4",22,0)
 ;
"RTN","VPRCORD4",23,0)
ADDODG1(IEN,TEMP) ;
"RTN","VPRCORD4",24,0)
 N CNT,NODE,NUM,PTR
"RTN","VPRCORD4",25,0)
 S NODE=$G(^ORD(100.98,IEN,0)) D SODGNODE(.TEMP,NODE)
"RTN","VPRCORD4",26,0)
 S TEMP("uid")=$$SETUID^VPRUTILS("displayGroup","",IEN),TEMP("internal")=IEN
"RTN","VPRCORD4",27,0)
 I '$D(^ORD(100.98,IEN,1)) Q
"RTN","VPRCORD4",28,0)
 S NUM=0,CNT=0 F  S NUM=$O(^ORD(100.98,IEN,1,NUM)) Q:NUM'>0  D
"RTN","VPRCORD4",29,0)
 .N ARRAY
"RTN","VPRCORD4",30,0)
 .S PTR=$G(^ORD(100.98,IEN,1,NUM,0)) Q:PTR'>0
"RTN","VPRCORD4",31,0)
 .D ADDODG1(PTR,.ARRAY) I '$D(ARRAY) Q
"RTN","VPRCORD4",32,0)
 .S CNT=CNT+1 M TEMP("children",CNT,"item")=ARRAY
"RTN","VPRCORD4",33,0)
 Q
"RTN","VPRCORD4",34,0)
 ;
"RTN","VPRCORD4",35,0)
SODGNODE(RESULT,NODE) ;
"RTN","VPRCORD4",36,0)
 N NAME,TEMP,X
"RTN","VPRCORD4",37,0)
 F X=1:1:4 D
"RTN","VPRCORD4",38,0)
 .S TEMP=$P(NODE,U,X) I X<4,$L(TEMP)>1 S RESULT($S(X=1:"name",X=2:"displayName",X=3:"abbreviation"))=TEMP
"RTN","VPRCORD4",39,0)
 .I X=4,+TEMP>0 S NAME=$P($G(^ORD(101.41,TEMP,0)),U) S RESULT("defaultDialogUid")=$$SETUID^VPRUTILS("orderDialog","",TEMP),RESULT("defaultDialogName")=NAME
"RTN","VPRCORD4",40,0)
 Q
"RTN","VPRCORD4",41,0)
 ;
"RTN","VPRCORD4",42,0)
ADDROUTE ;
"RTN","VPRCORD4",43,0)
 N CNT,IEN,NAME,RESULT,ROUTES,X,UID,VALUE
"RTN","VPRCORD4",44,0)
 N ERRMSG
"RTN","VPRCORD4",45,0)
 S ERRMSG="A mumps error occurred while extaracting routes."
"RTN","VPRCORD4",46,0)
 S CNT=1,IEN=0
"RTN","VPRCORD4",47,0)
 I +$G(VPRLAST)>0 S IEN=VPRLAST
"RTN","VPRCORD4",48,0)
 F  S IEN=$O(^PS(51.2,IEN)) Q:IEN'>0  D
"RTN","VPRCORD4",49,0)
 .N $ES,$ET
"RTN","VPRCORD4",50,0)
 .S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPRCORD4",51,0)
 .S NODE=$P($G(^PS(51.2,IEN,0)),U,1,6)
"RTN","VPRCORD4",52,0)
 .I $P(NODE,U,5)>0 Q
"RTN","VPRCORD4",53,0)
 .S UID=$$SETUID^VPRUTILS("route","",IEN)
"RTN","VPRCORD4",54,0)
 .S RESULT("uid")=UID,RESULT("internal")=IEN
"RTN","VPRCORD4",55,0)
 .F X=1,2,3,6 D
"RTN","VPRCORD4",56,0)
 ..S VALUE=$P(NODE,U,X) Q:VALUE=""
"RTN","VPRCORD4",57,0)
 ..S NAME=$S(X=1:"name",X=2:"externalName",X=3:"abbreviation",X=6:"useInIV",1:"")
"RTN","VPRCORD4",58,0)
 ..I NAME="" Q
"RTN","VPRCORD4",59,0)
 ..I X=6 S VALUE=$S(VALUE=1:"true",1:"false")
"RTN","VPRCORD4",60,0)
 ..S RESULT(NAME)=VALUE
"RTN","VPRCORD4",61,0)
 .D ADD^VPREF("RESULT") S VPRCNT=+$G(VPRCNT)+1,VPRLAST=IEN
"RTN","VPRCORD4",62,0)
 .;S CNT=CNT+1
"RTN","VPRCORD4",63,0)
 .K RESULT
"RTN","VPRCORD4",64,0)
 I IEN'>0 S VPRFINI=1
"RTN","VPRCORD4",65,0)
 Q
"RTN","VPRCORD4",66,0)
 ;
"RTN","VPRCORD4",67,0)
ADDSCH ;
"RTN","VPRCORD4",68,0)
 N CNT,IEN,NAME,NODE,NUM,RESULT,UID,VPRSCH
"RTN","VPRCORD4",69,0)
 ;D SCHALL^ORWDPS1(.VPRSCH,0,0)
"RTN","VPRCORD4",70,0)
 D SCHED^PSS51P1(0,.VPRSCH)
"RTN","VPRCORD4",71,0)
 N ERRMSG
"RTN","VPRCORD4",72,0)
 S ERRMSG="A mumps error occurred while extaracting schedules."
"RTN","VPRCORD4",73,0)
 S CNT=0 F  S CNT=$O(VPRSCH(CNT)) Q:CNT'>0  D
"RTN","VPRCORD4",74,0)
 .N $ES,$ET
"RTN","VPRCORD4",75,0)
 .S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPRCORD4",76,0)
 .S NODE=$G(VPRSCH(CNT))
"RTN","VPRCORD4",77,0)
 .S NAME=$P(NODE,U,2)
"RTN","VPRCORD4",78,0)
 .S IEN=$P(NODE,U)
"RTN","VPRCORD4",79,0)
 .;S IEN=$O(^PS(51.1,"B",NAME,"")) I IEN'>0 Q
"RTN","VPRCORD4",80,0)
 .S UID=$$SETUID^VPRUTILS("schedule","",IEN)
"RTN","VPRCORD4",81,0)
 .S RESULT("uid")=UID,RESULT("internal")=IEN
"RTN","VPRCORD4",82,0)
 .S RESULT("name")=NAME
"RTN","VPRCORD4",83,0)
 .I $P(NODE,U,3)'="" S RESULT("externalValue")=$P(NODE,U,3)
"RTN","VPRCORD4",84,0)
 .I $P(NODE,U,4)'="" S RESULT("scheduleType")=$P(NODE,U,4)
"RTN","VPRCORD4",85,0)
 .D ADD^VPREF("RESULT") S VPRCNT=+$G(VPRCNT)+1,VPRLAST=IEN
"RTN","VPRCORD4",86,0)
 .K RESULT
"RTN","VPRCORD4",87,0)
 I CNT'>0 S VPRFINI=1
"RTN","VPRCORD4",88,0)
 Q
"RTN","VPRCORD4",89,0)
 ;
"RTN","VPRCORD4",90,0)
LAB(RESULT,OI) ;
"RTN","VPRCORD4",91,0)
 N CNT,I,IEN,NODE,SYN,TEMP,VPRLST
"RTN","VPRCORD4",92,0)
 S RESULT("dialogAdditionalInformation","sendPatientTimes",1,"internal")="LT",RESULT("dialogAdditionalInformation","sendPatientTimes",1,"name")="Today"
"RTN","VPRCORD4",93,0)
 S RESULT("dialogAdditionalInformation","sendPatientTimes",2,"internal")="LT+1",RESULT("dialogAdditionalInformation","sendPatientTimes",2,"name")="Tomorrow"
"RTN","VPRCORD4",94,0)
 ;
"RTN","VPRCORD4",95,0)
 D GETLST^XPAR(.VPRLST,"ALL","ORWD COMMON LAB INPT")  ;DBIA 2263
"RTN","VPRCORD4",96,0)
 S I=0 F  S I=$O(VPRLST(I)) Q:'I  D
"RTN","VPRCORD4",97,0)
 . S IEN=$P(VPRLST(I),U,2)
"RTN","VPRCORD4",98,0)
 . S P1="dialogAdditionalInformation"
"RTN","VPRCORD4",99,0)
 . S RESULT("dialogAdditionalInformation","common",I,"uid")=$$SETUID^VPRUTILS("orderable","",IEN)
"RTN","VPRCORD4",100,0)
 . S RESULT("dialogAdditionalInformation","common",I,"internal")=IEN
"RTN","VPRCORD4",101,0)
 . S RESULT("dialogAdditionalInformation","common",I,"name")=$P(^ORD(101.43,IEN,0),U,1)
"RTN","VPRCORD4",102,0)
 ;
"RTN","VPRCORD4",103,0)
 S NODE=$G(^ORD(101.43,OI,"LR"))
"RTN","VPRCORD4",104,0)
 S RESULT("labDetails","speciman")=$P(NODE,U),RESULT("labDetails","labCollect")=$S($P(NODE,U,2)=1:"true",1:"false"),RESULT("labDetails","sequence")=$P(NODE,U,3)
"RTN","VPRCORD4",105,0)
 S RESULT("labDetails","maxOrderFrequency")=$P(NODE,U,4),RESULT("labDetails","dailyOrderMax")=$P(NODE,U,5)
"RTN","VPRCORD4",106,0)
 ;
"RTN","VPRCORD4",107,0)
 S TEMP=$P(NODE,U,6)
"RTN","VPRCORD4",108,0)
 S RESULT("types",1,"abb")=TEMP,RESULT("types",1,"uid")=$$SETUID^VPRUTILS("labType","",TEMP),RESULT("types",1,"internal")=TEMP,RESULT("types",1,"type")=$$LABTYPE(TEMP)
"RTN","VPRCORD4",109,0)
 S TEMP=$P(NODE,U,7)
"RTN","VPRCORD4",110,0)
 I TEMP'="" S RESULT("labDetails","labTypeInternal")=TEMP,RESULT("labDetails","labTypeName")=$S(TEMP="I":"Input",TEMP="O":"Output",TEMP="B":"Both",TEMP="N":"Neither")
"RTN","VPRCORD4",111,0)
 I '$D(^ORD(101.43,OI,2)) Q
"RTN","VPRCORD4",112,0)
 S CNT=0
"RTN","VPRCORD4",113,0)
 S I=0 F  S I=$O(^ORD(101.43,OI,2,I)) Q:I'>0  D
"RTN","VPRCORD4",114,0)
 .S SYN=$G(^ORD(101.43,OI,2,I,0)) Q:SYN=""
"RTN","VPRCORD4",115,0)
 .S CNT=CNT+1,RESULT("synonym",CNT,"name")=SYN
"RTN","VPRCORD4",116,0)
 Q
"RTN","VPRCORD4",117,0)
 ;
"RTN","VPRCORD4",118,0)
LABTYPE(L) ;
"RTN","VPRCORD4",119,0)
 I L="CH" Q "Chemistry"
"RTN","VPRCORD4",120,0)
 I L="MI" Q "MICROBIOLOGY"
"RTN","VPRCORD4",121,0)
 I L="BB" Q "Blood Bank"
"RTN","VPRCORD4",122,0)
 I L="EM" Q "Electron Microscopy"
"RTN","VPRCORD4",123,0)
 I L="SP" Q "Surgical Pathology"
"RTN","VPRCORD4",124,0)
 I L="AU" Q "Autopsy"
"RTN","VPRCORD4",125,0)
 I L="CY" Q "Cytology"
"RTN","VPRCORD4",126,0)
 Q ""
"RTN","VPRCORD4",127,0)
 ;
"RTN","VPRCORD4",128,0)
OI(OITYPE) ;
"RTN","VPRCORD4",129,0)
 N CNT,ERROR,IEN,NAME,LINK,LINKTYPE,NODE,RADDET,RADTYPE,RESULT,TCNT,TYPE,UID,VPRTEMP
"RTN","VPRCORD4",130,0)
 N ERRMSG
"RTN","VPRCORD4",131,0)
 S ERRMSG="A mumps error occurred while extaracting orderable items."
"RTN","VPRCORD4",132,0)
 S CNT=1,IEN=0
"RTN","VPRCORD4",133,0)
 ;
"RTN","VPRCORD4",134,0)
 D RADTYPE(.RADTYPE,.RADDET)
"RTN","VPRCORD4",135,0)
 I +$G(VPRLAST)>0 S IEN=VPRLAST
"RTN","VPRCORD4",136,0)
 I +$G(VPRID)>0 S IEN=VPRID
"RTN","VPRCORD4",137,0)
 F  S IEN=$O(^ORD(101.43,IEN)) Q:IEN'>0  D  I VPRMAX>0,VPRI'<VPRMAX Q
"RTN","VPRCORD4",138,0)
 .N $ES,$ET
"RTN","VPRCORD4",139,0)
 .S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPRCORD4",140,0)
 .K RESULT
"RTN","VPRCORD4",141,0)
 .S TYPE=$$VALIDOI(OITYPE,IEN)
"RTN","VPRCORD4",142,0)
 .I TYPE="" Q
"RTN","VPRCORD4",143,0)
 .S NAME=$P(^ORD(101.43,IEN,0),U),LINK=$P($P(^ORD(101.43,IEN,0),U,2),";99",1),LINKTYPE=$P($P(^ORD(101.43,IEN,0),U,2),";99",2)
"RTN","VPRCORD4",144,0)
 .S UID=$$SETUID^VPRUTILS("orderable","",IEN)
"RTN","VPRCORD4",145,0)
 .S RESULT("uid")=UID,RESULT("internal")=IEN
"RTN","VPRCORD4",146,0)
 .S RESULT("name")=NAME
"RTN","VPRCORD4",147,0)
 .S RESULT("link")=LINK
"RTN","VPRCORD4",148,0)
 .S RESULT("linktype")=LINKTYPE
"RTN","VPRCORD4",149,0)
 .I TYPE["PS" D PS(.RESULT,IEN,CNT)
"RTN","VPRCORD4",150,0)
 .I TYPE["RA" D RA(.RESULT,IEN,CNT,.RADTYPE,.RADDET)
"RTN","VPRCORD4",151,0)
 .I TYPE["LR" D LAB(.RESULT,IEN)
"RTN","VPRCORD4",152,0)
 .D ADD^VPREF("RESULT") S VPRCNT=+$G(VPRCNT)+1,VPRLAST=IEN
"RTN","VPRCORD4",153,0)
 .S CNT=CNT+1
"RTN","VPRCORD4",154,0)
 I IEN'>0 S VPRFINI=1
"RTN","VPRCORD4",155,0)
 Q
"RTN","VPRCORD4",156,0)
 ;
"RTN","VPRCORD4",157,0)
PS(RESULT,IEN,PLACE) ;
"RTN","VPRCORD4",158,0)
 N CNT,COST,DOSE,DOSES,DRUG,MEDS,NAME,NODE,NUM,PSOI,SIZE,TYPE,UID,VPRDOSE
"RTN","VPRCORD4",159,0)
 S CNT=0
"RTN","VPRCORD4",160,0)
 I $D(^ORD(101.43,IEN,9,"B","NV RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="NON-VA MEDS" S MEDS("NV RX")=""
"RTN","VPRCORD4",161,0)
 I $D(^ORD(101.43,IEN,9,"B","O RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="OUTPATIENT MEDS" S MEDS("O RX")=""
"RTN","VPRCORD4",162,0)
 I $D(^ORD(101.43,IEN,9,"B","RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="MEDS" S MEDS("RX")=""
"RTN","VPRCORD4",163,0)
 I $D(^ORD(101.43,IEN,9,"B","UD RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="INPATIENT MEDS" S MEDS("UD RX")=""
"RTN","VPRCORD4",164,0)
 ;
"RTN","VPRCORD4",165,0)
 ;K DOSES
"RTN","VPRCORD4",166,0)
 S PSOI=+$P(^ORD(101.43,IEN,0),U,2)
"RTN","VPRCORD4",167,0)
 S TYPE="" F  S TYPE=$O(MEDS(TYPE)) Q:TYPE=""  D
"RTN","VPRCORD4",168,0)
 .D DOSE^PSSOPKI1(.VPRDOSE,PSOI,TYPE,0)
"RTN","VPRCORD4",169,0)
 .S CNT=0 F  S CNT=$O(VPRDOSE(CNT)) Q:CNT'>0  D
"RTN","VPRCORD4",170,0)
 ..S NODE=$G(VPRDOSE(CNT)),SIZE="",UID=0,DRUG="",COST=""
"RTN","VPRCORD4",171,0)
 ..S DOSE=$P(NODE,U,5)
"RTN","VPRCORD4",172,0)
 ..I $D(DOSES(DOSE)) Q
"RTN","VPRCORD4",173,0)
 ..I $P(NODE,U,3)'="",$P(NODE,U,4)'="" S SIZE=$P(NODE,U,3)_" "_$P(NODE,U,4)
"RTN","VPRCORD4",174,0)
 ..S DRUG=$P(NODE,U,6),COST=$P(NODE,U,7)
"RTN","VPRCORD4",175,0)
 ..S DOSES(DOSE)=$G(SIZE)_U_DRUG_U_COST
"RTN","VPRCORD4",176,0)
 ;
"RTN","VPRCORD4",177,0)
 S DOSE="",CNT=1 F  S DOSE=$O(DOSES(DOSE)) Q:DOSE=""  D
"RTN","VPRCORD4",178,0)
 .S NODE=DOSES(DOSE)
"RTN","VPRCORD4",179,0)
 .S RESULT("possibleDosages",CNT,"dose")=DOSE
"RTN","VPRCORD4",180,0)
 .I $P(NODE,U)'="" S RESULT("possibleDosages",CNT,"size")=$P(NODE,U)
"RTN","VPRCORD4",181,0)
 .I $P(NODE,U,2)>0 D
"RTN","VPRCORD4",182,0)
 ..S NAME=$P($G(^PSDRUG($P(NODE,U,2),0)),U)
"RTN","VPRCORD4",183,0)
 ..S RESULT("possibleDosages",CNT,"drugUid")=$$SETUID^VPRUTILS("drug","",$P(NODE,U,2))
"RTN","VPRCORD4",184,0)
 ..S RESULT("possibleDosages",CNT,"drugInternal")=$P(NODE,U,2)
"RTN","VPRCORD4",185,0)
 ..S RESULT("possibleDosages",CNT,"drugName")=NAME
"RTN","VPRCORD4",186,0)
 .;I $P(NODE,U,3)'="" S RESULT("possibleDosages",CNT,"cost")=$P(NODE,U,3) 
"RTN","VPRCORD4",187,0)
 .S CNT=CNT+1
"RTN","VPRCORD4",188,0)
 Q
"RTN","VPRCORD4",189,0)
 ;
"RTN","VPRCORD4",190,0)
RA(RESULT,IEN,PLACE,RADTYPE,RADDET) ;
"RTN","VPRCORD4",191,0)
 N CNT,NODE,TEMP
"RTN","VPRCORD4",192,0)
 S CNT=0
"RTN","VPRCORD4",193,0)
 S NODE=$G(^ORD(101.43,IEN,0))
"RTN","VPRCORD4",194,0)
 I $P(NODE,U,3)'="",$P(NODE,U,4)'="" S RESULT("code")=$$SETUID^VPRUTILS($$LOW^XLFSTR($P(NODE,U,4)),"",$P(NODE,U,3))
"RTN","VPRCORD4",195,0)
 S NODE=$G(^ORD(101.43,IEN,"RA"))
"RTN","VPRCORD4",196,0)
 S RESULT("imagingDetails","contractMedia")=$P(NODE,U)
"RTN","VPRCORD4",197,0)
 I $P(NODE,U,2)'="" S TEMP=$P(NODE,U,2),RESULT("imagingDetails","procedureType")=$S(TEMP="B":"Board",TEMP="D":"Detailed",TEMP="S":"Series",TEMP="P":"Parent")
"RTN","VPRCORD4",198,0)
 I $D(RADTYPE($P(NODE,U,3))) D
"RTN","VPRCORD4",199,0)
 .S TEMP=$G(RADTYPE($P(NODE,U,3))),RESULT("types",1,"type")=$P(TEMP,U,2),RESULT("types",1,"uid")=$$SETUID^VPRUTILS("radType","",$P(TEMP,U)),RESULT("internal")=$P(TEMP,U),RESULT("types",1,"abb")=$P(NODE,U,3)
"RTN","VPRCORD4",200,0)
 .S RESULT("imagingDetails","commonProcedure")=$S($P(NODE,U,4)=1:"true",1:"false")
"RTN","VPRCORD4",201,0)
 .I $D(RADTYPE($P(NODE,U,3))) M RESULT("dialogAdditionalInformation")=RADDET($P(NODE,U,3))
"RTN","VPRCORD4",202,0)
 Q
"RTN","VPRCORD4",203,0)
 ;
"RTN","VPRCORD4",204,0)
RADTYPE(RADTYPE,RADDET) ;
"RTN","VPRCORD4",205,0)
 ;build radiology type array for reused to load imaging types
"RTN","VPRCORD4",206,0)
 N ABB,CNT,IMGTYP,SUBMIT,TCNT,URG,VALUES,VPRTEMP,VPRX
"RTN","VPRCORD4",207,0)
 D IMTYPSEL^ORWDRA32(.VPRTEMP,"")
"RTN","VPRCORD4",208,0)
 D CAT(.VALUES),TRANS(.VALUES),URGENCY(.VALUES)
"RTN","VPRCORD4",209,0)
 S TCNT=""
"RTN","VPRCORD4",210,0)
 F  S TCNT=$O(VPRTEMP(TCNT)) Q:TCNT=""  D
"RTN","VPRCORD4",211,0)
 .S NODE=VPRTEMP(TCNT)
"RTN","VPRCORD4",212,0)
 .S IMGTYP=$P(NODE,U),ABB=$P(NODE,U,3)
"RTN","VPRCORD4",213,0)
 .D SUBMIT(.VALUES,ABB)
"RTN","VPRCORD4",214,0)
 .S RADTYPE(ABB)=IMGTYP_U_$P(NODE,U,2)_U_$P(NODE,U,4)
"RTN","VPRCORD4",215,0)
 .I $D(VALUES) M RADDET(ABB)=VALUES
"RTN","VPRCORD4",216,0)
 .;Radiology Modifier
"RTN","VPRCORD4",217,0)
 .S I=$O(^RA(79.2,"C",ABB,0)) Q:'I
"RTN","VPRCORD4",218,0)
 .S VPRX=0,CNT=0 F  S VPRX=$O(^RAMIS(71.2,"AB",I,VPRX)) Q:'VPRX  D
"RTN","VPRCORD4",219,0)
 ..S CNT=CNT+1
"RTN","VPRCORD4",220,0)
 ..S RADDET(ABB,"modifier",CNT,"uid")=$$SETUID^VPRUTILS("modifier","",VPRX),RADDET(ABB,"modifier",CNT,"internal")=VPRX
"RTN","VPRCORD4",221,0)
 ..S RADDET(ABB,"modifier",CNT,"name")=$P(^RAMIS(71.2,VPRX,0),U)
"RTN","VPRCORD4",222,0)
 Q
"RTN","VPRCORD4",223,0)
 ;
"RTN","VPRCORD4",224,0)
 ;Transport values
"RTN","VPRCORD4",225,0)
TRANS(RADDET) ;
"RTN","VPRCORD4",226,0)
 N CNT,VPRX
"RTN","VPRCORD4",227,0)
 S CNT=0
"RTN","VPRCORD4",228,0)
 F VPRX="A^AMBULATORY","P^PORTABLE","S^STRETCHER","W^WHEELCHAIR" D
"RTN","VPRCORD4",229,0)
 .S CNT=CNT+1,RADDET("transport",CNT,"uid")=$$SETUID^VPRUTILS("transport","",$P(VPRX,U)),RADDET("transport",CNT,"name")=$P(VPRX,U,2),RADDET("transport",CNT,"internal")=$P(VPRX,U)
"RTN","VPRCORD4",230,0)
 Q
"RTN","VPRCORD4",231,0)
 ;
"RTN","VPRCORD4",232,0)
CAT(RADDET) ;category values
"RTN","VPRCORD4",233,0)
 N CNT,VPRX
"RTN","VPRCORD4",234,0)
 S CNT=0
"RTN","VPRCORD4",235,0)
 F VPRX="I^INPATIENT","O^OUTPATIENT","E^EMPLOYEE","C^CONTRACT","S^SHARING","R^RESEARCH" D
"RTN","VPRCORD4",236,0)
 .S CNT=CNT+1,RADDET("category",CNT,"uid")=$$SETUID^VPRUTILS("transport","",$P(VPRX,U)),RADDET("category",CNT,"name")=$P(VPRX,U,2),RADDET("category",CNT,"internal")=$P(VPRX,U)
"RTN","VPRCORD4",237,0)
 Q
"RTN","VPRCORD4",238,0)
 ;
"RTN","VPRCORD4",239,0)
URGENCY(URG) ; Get the allowable urgencies and default
"RTN","VPRCORD4",240,0)
 N CNT,I,VPRX
"RTN","VPRCORD4",241,0)
 S VPRX="",I=0,CNT=0
"RTN","VPRCORD4",242,0)
 F  S ORX=$O(^ORD(101.42,"S.RA",VPRX)) Q:VPRX=""  D
"RTN","VPRCORD4",243,0)
 . S I=$O(^ORD(101.42,"S.RA",VPRX,0))
"RTN","VPRCORD4",244,0)
 . S URG("urgency",CNT,"uid")=$$SETUID^VPRUTILS("urgency","",I),URG("urgency",CNT,"internal")=I
"RTN","VPRCORD4",245,0)
 . S URG("urgency",CNT,"name")=VPRX
"RTN","VPRCORD4",246,0)
 . S URG("urgency",CNT,"default")="false"
"RTN","VPRCORD4",247,0)
 . S CNT=CNT+1
"RTN","VPRCORD4",248,0)
 S I=$O(^ORD(101.42,"B","ROUTINE",0)) I +I=0 Q
"RTN","VPRCORD4",249,0)
 S CNT=CNT+1
"RTN","VPRCORD4",250,0)
 S URG("urgency",CNT,"uid")=$$SETUID^VPRUTILS("urgency","",I),URG("urgency",CNT,"internal")=I
"RTN","VPRCORD4",251,0)
 S URG("urgency",CNT,"name")="Routine"
"RTN","VPRCORD4",252,0)
 S URG("urgency",CNT,"default")="true"
"RTN","VPRCORD4",253,0)
 Q
"RTN","VPRCORD4",254,0)
 ;
"RTN","VPRCORD4",255,0)
SUBMIT(SUBMIT,IMGTYP) ; Get the locations to which the request may be submitted
"RTN","VPRCORD4",256,0)
 N CNT,FIRST,TMPLST,ASK,VPRX
"RTN","VPRCORD4",257,0)
 S CNT=0
"RTN","VPRCORD4",258,0)
 D EN4^RAO7PC1(IMGTYP,"TMPLST")
"RTN","VPRCORD4",259,0)
 S FIRST=1
"RTN","VPRCORD4",260,0)
 S I=0 F  S I=$O(TMPLST(I)) Q:'I  D
"RTN","VPRCORD4",261,0)
 . S CNT=CNT+1,VPRX=$P(TMPLST(I),U,1,2),SUBMIT("submit",CNT,"name")=$P(VPRX,U,2)
"RTN","VPRCORD4",262,0)
 . S SUBMIT("submit",CNT,"default")=$S(FIRST=1:"true",1:"false")
"RTN","VPRCORD4",263,0)
 . S SUBMIT("submit",CNT,"uid")=$$SETUID^VPRUTILS("imagingLocation","",$P(VPRX,U)),SUBMIT("submit",CNT,"internal")=$P(VPRX,U),FIRST=0
"RTN","VPRCORD4",264,0)
 S VPRX=$$GET^XPAR("ALL","RA SUBMIT PROMPT",1,"Q")
"RTN","VPRCORD4",265,0)
 S ASK=$S($L(VPRX):VPRX,1:1)
"RTN","VPRCORD4",266,0)
 S SUBMIT("askSubmit")=$S(ASK=1:"true",ASK=0:"false",1:"true")
"RTN","VPRCORD4",267,0)
 Q
"RTN","VPRCORD4",268,0)
 ;
"RTN","VPRCORD4",269,0)
QO ;
"RTN","VPRCORD4",270,0)
 N IEN,NAME,NODE,RESULT
"RTN","VPRCORD4",271,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extaracting orderable items."
"RTN","VPRCORD4",272,0)
 S IEN=0 F  S IEN=$O(^ORD(101.41,IEN)) Q:IEN'>0  D
"RTN","VPRCORD4",273,0)
 .N $ES,$ET
"RTN","VPRCORD4",274,0)
 .S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPRCORD4",275,0)
 .S NODE=$G(^ORD(101.41,IEN,0)) I $P(NODE,U,4)'="Q" Q
"RTN","VPRCORD4",276,0)
 .S NAME=$S($P(NODE,U,2)'="":$P(NODE,U,2),1:$P(NODE,U))
"RTN","VPRCORD4",277,0)
 .S RESULT("name")=NAME
"RTN","VPRCORD4",278,0)
 .S RESULT("uid")=$$SETUID^VPRUTILS("qo","",IEN),RESULT("internal")=IEN
"RTN","VPRCORD4",279,0)
 .S VPRCNT=VPRCNT+1 D ADD^VPREF("RESULT")
"RTN","VPRCORD4",280,0)
 I IEN'>0 S VPRFINI=1
"RTN","VPRCORD4",281,0)
 Q
"RTN","VPRCORD4",282,0)
 ;
"RTN","VPRCORD4",283,0)
VALIDOI(OITYPE,IEN) ;
"RTN","VPRCORD4",284,0)
 N TEMP,TYPE
"RTN","VPRCORD4",285,0)
 I $G(^ORD(101.43,IEN,0))'=""
"RTN","VPRCORD4",286,0)
 S TEMP=$P(^ORD(101.43,IEN,0),U,2)
"RTN","VPRCORD4",287,0)
 S TYPE=$P(TEMP,";",2)
"RTN","VPRCORD4",288,0)
 S TYPE=$E(TYPE,3,$L(TYPE))
"RTN","VPRCORD4",289,0)
 I OITYPE="" Q TYPE
"RTN","VPRCORD4",290,0)
 I TYPE["PS" Q TYPE
"RTN","VPRCORD4",291,0)
 I OITYPE[TYPE Q TYPE
"RTN","VPRCORD4",292,0)
 Q ""
"RTN","VPRCORD4",293,0)
 ;
"RTN","VPRCPAT")
0^9^B18789518
"RTN","VPRCPAT",1,0)
VPRCPAT ;SLC/AGP - Patient Information Controller for VPR ; 12/12/13 8:52pm
"RTN","VPRCPAT",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCPAT",3,0)
 ;
"RTN","VPRCPAT",4,0)
ADD(X) ; Add a line @NHIN@(n)=X
"RTN","VPRCPAT",5,0)
 S VPRCNT=$G(VPRCNT)+1
"RTN","VPRCPAT",6,0)
 S @VPRXML@(VPRCNT)=X
"RTN","VPRCPAT",7,0)
 Q
"RTN","VPRCPAT",8,0)
 ;
"RTN","VPRCPAT",9,0)
RPC(VPRXML,PARAMS) ; Process request via RPC instead of CSP
"RTN","VPRCPAT",10,0)
 N X,REQ,VPRCNT,VPRSITE,VPRUSER,VPRDBUG,VPRSTA
"RTN","VPRCPAT",11,0)
 S VPRXML=$NA(^TMP($J,"VPR RESULTS")) K @VPRXML
"RTN","VPRCPAT",12,0)
 S VPRCNT=0
"RTN","VPRCPAT",13,0)
 S VPRUSER=DUZ,VPRSITE=DUZ(2),VPRSTA=$$STA^XUAF4(DUZ(2))
"RTN","VPRCPAT",14,0)
 S X="" F  S X=$O(PARAMS(X)) Q:X=""  S REQ(X,1)=PARAMS(X)
"RTN","VPRCPAT",15,0)
 ;
"RTN","VPRCPAT",16,0)
COMMON ; Come here for both CSP and RPC Mode
"RTN","VPRCPAT",17,0)
 ;
"RTN","VPRCPAT",18,0)
 N CMD
"RTN","VPRCPAT",19,0)
 S CMD=$G(REQ("command",1))
"RTN","VPRCPAT",20,0)
 D ADD("<results>")
"RTN","VPRCPAT",21,0)
 ;
"RTN","VPRCPAT",22,0)
 I CMD="getPatPcmmInfo" D  G OUT
"RTN","VPRCPAT",23,0)
 . D GETPCMM^VPRCPAT1($$VAL("patient"))
"RTN","VPRCPAT",24,0)
 ;
"RTN","VPRCPAT",25,0)
OUT ; output the XML
"RTN","VPRCPAT",26,0)
 D ADD("</results>")
"RTN","VPRCPAT",27,0)
 ;I EDPDBUG D PUTXML^EDPCDBG(EDPDBUG,.EDPXML)
"RTN","VPRCPAT",28,0)
 ;I $L($G(EDPHTTP)) D        ; if in CSP mode
"RTN","VPRCPAT",29,0)
 ;. U EDPHTTP
"RTN","VPRCPAT",30,0)
 ;. W "<results>",!
"RTN","VPRCPAT",31,0)
 ;. N I S I=0 F  S I=$O(EDPXML(I)) Q:'I  W EDPXML(I),!
"RTN","VPRCPAT",32,0)
 ;. W "</results>",!
"RTN","VPRCPAT",33,0)
END Q
"RTN","VPRCPAT",34,0)
 ;
"RTN","VPRCPAT",35,0)
VAL(X) ; return value from request
"RTN","VPRCPAT",36,0)
 Q $G(REQ(X,1))
"RTN","VPRCPAT",37,0)
 ;
"RTN","VPRCPAT",38,0)
 ;
"RTN","VPRCPAT",39,0)
 ; --- for VPRCNTRL: Expects VPRCMD(), DFN, UID, ARRAY
"RTN","VPRCPAT",40,0)
 ;
"RTN","VPRCPAT",41,0)
EN ; -- Patient data controller
"RTN","VPRCPAT",42,0)
 N CMD K VPRERR
"RTN","VPRCPAT",43,0)
 S CMD=$G(VPRCMD("command"))
"RTN","VPRCPAT",44,0)
 ;
"RTN","VPRCPAT",45,0)
 I CMD="savePhone" D PHONE G ENQ
"RTN","VPRCPAT",46,0)
 ; others ??
"RTN","VPRCPAT",47,0)
 ;
"RTN","VPRCPAT",48,0)
ENQ ; done
"RTN","VPRCPAT",49,0)
 I $D(VPRERR) D ERROR Q
"RTN","VPRCPAT",50,0)
 D POST^VPREVNT(DFN,"patient",DFN)
"RTN","VPRCPAT",51,0)
 D DPT1^VPRDJ00
"RTN","VPRCPAT",52,0)
 Q
"RTN","VPRCPAT",53,0)
 ;
"RTN","VPRCPAT",54,0)
ERROR ; -- add error info instead of updated data object
"RTN","VPRCPAT",55,0)
 N ERROR
"RTN","VPRCPAT",56,0)
 S ERROR="{""command"":"""_CMD_""",""success"":false,""error"":"""_VPRERR_"""}"
"RTN","VPRCPAT",57,0)
 S VPRI=VPRI+1 S:VPRI>1 @VPR@(VPRI,.3)=","
"RTN","VPRCPAT",58,0)
 S @VPR@(VPRI,1)=ERROR
"RTN","VPRCPAT",59,0)
 Q
"RTN","VPRCPAT",60,0)
 ;
"RTN","VPRCPAT",61,0)
PHONE ; -- update phone numbers
"RTN","VPRCPAT",62,0)
 N VPRX,VPRDR,HOME,CELL,NOK,ECON,I,J,X,OK
"RTN","VPRCPAT",63,0)
 S (VPRDR,HOME,CELL,NOK,ECON)="" D VALS("old")
"RTN","VPRCPAT",64,0)
 S I="" F  S I=$O(ARRAY("telecoms",I)) Q:I<1  D
"RTN","VPRCPAT",65,0)
 . I $G(ARRAY("telecoms",I,"usageCode"))="H" D  Q
"RTN","VPRCPAT",66,0)
 .. S HOME=$G(ARRAY("telecoms",I,"telecom"))
"RTN","VPRCPAT",67,0)
 .. I HOME=HOME("old") S HOME="" Q           ;no change
"RTN","VPRCPAT",68,0)
 .. I "@"[HOME S:$L(HOME("old")) HOME="@" Q  ;delete
"RTN","VPRCPAT",69,0)
 .. S HOME=$$FORMAT(HOME),ARRAY("telecoms",I,"telecom")=HOME
"RTN","VPRCPAT",70,0)
 . I $G(ARRAY("telecoms",I,"usageCode"))="MC" D  Q
"RTN","VPRCPAT",71,0)
 .. S CELL=$G(ARRAY("telecoms",I,"telecom"))
"RTN","VPRCPAT",72,0)
 .. I CELL=CELL("old") S CELL="" Q           ;no change
"RTN","VPRCPAT",73,0)
 .. I "@"[CELL S:$L(CELL("old")) CELL="@" Q  ;delete
"RTN","VPRCPAT",74,0)
 .. S CELL=$$FORMAT(CELL),ARRAY("telecoms",I,"telecom")=CELL
"RTN","VPRCPAT",75,0)
 S I="" F  S I=$O(ARRAY("supports",I)) Q:I<1  D
"RTN","VPRCPAT",76,0)
 . S X=$P($G(ARRAY("supports",I,"contactTypeCode")),":",4) ;NOK or ECON
"RTN","VPRCPAT",77,0)
 . S J="" F  S J=$O(ARRAY("supports",I,"telecomList",J)) Q:J<1  D
"RTN","VPRCPAT",78,0)
 .. Q:$G(ARRAY("supports",I,"telecomList",J,"usageCode"))'="H"
"RTN","VPRCPAT",79,0)
 .. S @X=$G(ARRAY("supports",I,"telecomList",J,"telecom"))
"RTN","VPRCPAT",80,0)
 .. I @X=@X@("old") S @X="" Q                ;no change
"RTN","VPRCPAT",81,0)
 .. I "@"[@X S:$L(@X@("old")) @X="@" Q       ;delete
"RTN","VPRCPAT",82,0)
 .. S @X=$$FORMAT(@X),ARRAY("supports",I,"telecomList",J,"telecom")=@X
"RTN","VPRCPAT",83,0)
 ;
"RTN","VPRCPAT",84,0)
 S:$L(HOME) VPRX(.131)=HOME,VPRDR=".131" ;@=delete
"RTN","VPRCPAT",85,0)
 S:$L(CELL) VPRX(.134)=CELL,VPRDR=VPRDR_$S($L(VPRDR):";",1:"")_".134"
"RTN","VPRCPAT",86,0)
 S:$L(ECON) VPRX(.339)=ECON,VPRDR=VPRDR_$S($L(VPRDR):";",1:"")_".339"
"RTN","VPRCPAT",87,0)
 S:$L(NOK) VPRX(.219)=NOK,VPRDR=VPRDR_$S($L(VPRDR):";",1:"")_".219"
"RTN","VPRCPAT",88,0)
 I '$O(VPRX(0)) S VPRERR="Data not changed" Q  ;$$ERR(5) Q
"RTN","VPRCPAT",89,0)
 D EDIT^VAFCPTED(DFN,"VPRX",VPRDR)
"RTN","VPRCPAT",90,0)
 S X=$G(^DPT(DFN,.13)),OK=1 D  ;check global
"RTN","VPRCPAT",91,0)
 . I $L(HOME),$S(HOME="@":$L($P(X,U)),1:(HOME'=$P(X,U))) S OK=0
"RTN","VPRCPAT",92,0)
 . I $L(CELL),$S(CELL="@":$L($P(X,U,4)),1:(CELL'=$P(X,U,4))) S OK=0
"RTN","VPRCPAT",93,0)
 . I $L(ECON) S X=$G(^DPT(DFN,.33)) I $S(ECON="@":$L($P(X,U,9)),1:(VPRX(.339)'=$P(X,U,9))) S OK=0
"RTN","VPRCPAT",94,0)
 . I $L(NOK) S X=$G(^DPT(DFN,.21)) I $S(NOK="@":$L($P(X,U,9)),1:(NOK'=$P(X,U,9))) S OK=0
"RTN","VPRCPAT",95,0)
 S:'OK VPRERR="Update failed" ;$$ERR(6)
"RTN","VPRCPAT",96,0)
 Q
"RTN","VPRCPAT",97,0)
 ;
"RTN","VPRCPAT",98,0)
FORMAT(X) ; -- enforce (xxx)xxx-xxxx phone format
"RTN","VPRCPAT",99,0)
 S X=$G(X) I X?1"("3N1")"3N1"-"4N.E Q X
"RTN","VPRCPAT",100,0)
 N P,N,I,Y S P=""
"RTN","VPRCPAT",101,0)
 F I=1:1:$L(X) S N=$E(X,I) I N=+N S P=P_N
"RTN","VPRCPAT",102,0)
 S:$L(P)<10 P=$E("0000000000",1,10-$L(P))_P
"RTN","VPRCPAT",103,0)
 S Y=$S(P:"("_$E(P,1,3)_")"_$E(P,4,6)_"-"_$E(P,7,10),1:"")
"RTN","VPRCPAT",104,0)
 Q Y
"RTN","VPRCPAT",105,0)
 ;
"RTN","VPRCPAT",106,0)
VALS(SUB) ; -- pull values from ^DPT
"RTN","VPRCPAT",107,0)
 N X S X=$G(^DPT(DFN,.13))
"RTN","VPRCPAT",108,0)
 S HOME(SUB)=$P(X,U),CELL(SUB)=$P(X,U,4)
"RTN","VPRCPAT",109,0)
 S X=$G(^DPT(DFN,.33)),ECON(SUB)=$P(X,U,9)
"RTN","VPRCPAT",110,0)
 S X=$G(^DPT(DFN,.21)),NOK(SUB)=$P(X,U,9)
"RTN","VPRCPAT",111,0)
 Q
"RTN","VPRCPAT1")
0^10^B7071755
"RTN","VPRCPAT1",1,0)
VPRCPAT1 ; SLC/AGP,JLC - Process Patient Request from AVIVA System. ; 05/27/2011
"RTN","VPRCPAT1",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCPAT1",3,0)
 Q
"RTN","VPRCPAT1",4,0)
 ;
"RTN","VPRCPAT1",5,0)
ADD(X) ; Add a line @NHIN@(n)=X
"RTN","VPRCPAT1",6,0)
 S VPRCNT=$G(VPRCNT)+1
"RTN","VPRCPAT1",7,0)
 S @VPRXML@(VPRCNT)=X
"RTN","VPRCPAT1",8,0)
 Q
"RTN","VPRCPAT1",9,0)
 ;
"RTN","VPRCPAT1",10,0)
AE(TEXT) ;
"RTN","VPRCPAT1",11,0)
 S VPRERCNT=VPRERCNT+1
"RTN","VPRCPAT1",12,0)
 S VPRERARR(VPRERCNT)=TEXT
"RTN","VPRCPAT1",13,0)
 Q
"RTN","VPRCPAT1",14,0)
 ;
"RTN","VPRCPAT1",15,0)
AEM(TEXT) ;
"RTN","VPRCPAT1",16,0)
 N NUM
"RTN","VPRCPAT1",17,0)
 S NUM=0 F  S NUM=$O(TEXT(NUM)) Q:NUM'>0  D
"RTN","VPRCPAT1",18,0)
 .S VPRERCNT=VPRERCNT+1
"RTN","VPRCPAT1",19,0)
 .S VPRERARR(VPRERCNT)=TEXT(NUM)
"RTN","VPRCPAT1",20,0)
 Q
"RTN","VPRCPAT1",21,0)
 ;
"RTN","VPRCPAT1",22,0)
GETPCMM(ICN) ;
"RTN","VPRCPAT1",23,0)
 N DFN,VPRDATA,VPRDCNT,VPRERARR,VPRERCNT
"RTN","VPRCPAT1",24,0)
 S VPRERCNT=0,VPRDCNT=0
"RTN","VPRCPAT1",25,0)
 S DFN=$$GETDFN^MPIF001(ICN) I DFN'>0 D AE("Cannot find patient dfn from ICN") G EXIT
"RTN","VPRCPAT1",26,0)
 N PCT,PCP,ATT,ASS
"RTN","VPRCPAT1",27,0)
 S PCT=$$OUTPTTM^SDUTL3(DFN,DT) I $P(PCT,U)>0 S VPRDCNT=VPRDCNT+1,VPRDATA(VPRDCNT)="<team id='"_$P(PCT,U)_"' value='"_$$ESC^VPRD($P(PCT,U,2))_"'/>"
"RTN","VPRCPAT1",28,0)
 S PCP=$$OUTPTPR^SDUTL3(DFN,DT) I $P(PCP,U)>0 S VPRDCNT=VPRDCNT+1,VPRDATA(VPRDCNT)="<primaryProvider id='"_$P(PCP,U)_"' value='"_$$ESC^VPRD($P(PCP,U,2))_"'/>"
"RTN","VPRCPAT1",29,0)
 S ATT=$G(^DPT(DFN,.1041)) I ATT S VPRDCNT=VPRDCNT+1,VPRDATA(VPRDCNT)="<attendingProvider id='"_ATT_"' value='"_$$ESC^VPRD($P($G(^VA(200,ATT,0)),U))_"'/>"
"RTN","VPRCPAT1",30,0)
 S ASS=$$OUTPTAP^SDUTL3(DFN,DT) I $P(ASS,U)>0 S VPRDCNT=VPRDCNT+1,VPRDATA(VPRDCNT)="<associateProvider id='"_$P(ASS,U)_"' value='"_$$ESC^VPRD($P(ASS,U,2))_"'/>"
"RTN","VPRCPAT1",31,0)
 G EXIT
"RTN","VPRCPAT1",32,0)
 Q
"RTN","VPRCPAT1",33,0)
 ;
"RTN","VPRCPAT1",34,0)
EXIT ;
"RTN","VPRCPAT1",35,0)
 N CNT
"RTN","VPRCPAT1",36,0)
 I $D(VPRERARR) D  Q
"RTN","VPRCPAT1",37,0)
 .D ADD("<success>false</success>")
"RTN","VPRCPAT1",38,0)
 .D ADD("<error>")
"RTN","VPRCPAT1",39,0)
 .D ADD("<message xml:space='preserve'/>")
"RTN","VPRCPAT1",40,0)
 .S CNT=0 F  S CNT=$O(VPRERARR(CNT)) Q:CNT'>0  D
"RTN","VPRCPAT1",41,0)
 ..D ADD($$ESC^VPRD(VPRERARR(CNT)))
"RTN","VPRCPAT1",42,0)
 .D ADD("</error>")
"RTN","VPRCPAT1",43,0)
 D ADD("<success>true</success>")
"RTN","VPRCPAT1",44,0)
 D ADD("<data>")
"RTN","VPRCPAT1",45,0)
 S CNT=0 F  S CNT=$O(VPRDATA(CNT)) Q:CNT'>0  D
"RTN","VPRCPAT1",46,0)
 .D ADD(VPRDATA(CNT))
"RTN","VPRCPAT1",47,0)
 D ADD("</data>")
"RTN","VPRCPAT1",48,0)
 Q
"RTN","VPRCPRS")
0^47^B4945756
"RTN","VPRCPRS",1,0)
VPRCPRS ;SLC/AGP - CPRS RPC for  ; 9/21/12 5:57pm
"RTN","VPRCPRS",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCPRS",3,0)
 ;
"RTN","VPRCPRS",4,0)
 ;
"RTN","VPRCPRS",5,0)
RPC(VPROUT,PARAMS) ; Process request via RPC instead of CSP
"RTN","VPRCPRS",6,0)
 N X,REQ,VPRCNT,VPRSITE,VPRUSER,VPRDBUG,VPRSTA
"RTN","VPRCPRS",7,0)
 S VPRCNT=0
"RTN","VPRCPRS",8,0)
 S VPRUSER=DUZ,VPRSITE=DUZ(2),VPRSTA=$$STA^XUAF4(DUZ(2))
"RTN","VPRCPRS",9,0)
 S X="" F  S X=$O(PARAMS(X)) Q:X=""  S REQ(X,1)=PARAMS(X)
"RTN","VPRCPRS",10,0)
 ;
"RTN","VPRCPRS",11,0)
COMMON ; Come here for both CSP and RPC Mode
"RTN","VPRCPRS",12,0)
 ;
"RTN","VPRCPRS",13,0)
 N CMD
"RTN","VPRCPRS",14,0)
 S CMD=$G(REQ("command",1))
"RTN","VPRCPRS",15,0)
 ;
"RTN","VPRCPRS",16,0)
 ; returns an order structure for change orders
"RTN","VPRCPRS",17,0)
 ; or places an order if auto-accept QO
"RTN","VPRCPRS",18,0)
 I CMD="alerts" D  G OUT
"RTN","VPRCPRS",19,0)
 . D ALERTS(.VPROUT)
"RTN","VPRCPRS",20,0)
 ;
"RTN","VPRCPRS",21,0)
 I CMD="reminders" D  G OUT
"RTN","VPRCPRS",22,0)
 .D EVALLIST^VPRPXRM(.VPROUT,$$VAL("patientId"),$$VAL("userId"),$$VAL("location"))
"RTN","VPRCPRS",23,0)
 ;
"RTN","VPRCPRS",24,0)
OUT ;
"RTN","VPRCPRS",25,0)
END ;
"RTN","VPRCPRS",26,0)
 ;
"RTN","VPRCPRS",27,0)
BLDINFO(INFO) ;
"RTN","VPRCPRS",28,0)
 N X
"RTN","VPRCPRS",29,0)
 S X="" F  S X=$O(REQ(X)) Q:X=""  D
"RTN","VPRCPRS",30,0)
 .S INFO(X)=REQ(X,1)
"RTN","VPRCPRS",31,0)
 Q
"RTN","VPRCPRS",32,0)
 ;
"RTN","VPRCPRS",33,0)
VAL(X) ; return value from request
"RTN","VPRCPRS",34,0)
 Q $G(REQ(X,1))
"RTN","VPRCPRS",35,0)
 ;
"RTN","VPRCPRS",36,0)
ALERTS(VPROUT) ;
"RTN","VPRCPRS",37,0)
 N ALERT,CNT,ERROR,NODE,NUM,RESULT,VPRORY
"RTN","VPRCPRS",38,0)
 K ^TMP("VPRALERTS",$J),^TMP("VPROUT",$J)
"RTN","VPRCPRS",39,0)
 ;S VPROUT=$NA(^TMP("VPROUT",$J))
"RTN","VPRCPRS",40,0)
 D FASTUSER^ORWORB(.VPRORY)
"RTN","VPRCPRS",41,0)
 ;ZW VPRORY
"RTN","VPRCPRS",42,0)
 S CNT=0,NUM=1 F  S CNT=$O(@VPRORY@(CNT)) Q:CNT'>0  D
"RTN","VPRCPRS",43,0)
 .S NODE=$G(@VPRORY@(CNT))
"RTN","VPRCPRS",44,0)
 .K ALERT
"RTN","VPRCPRS",45,0)
 .I $P(NODE,U)="I" S ALERT("infoOnly")="I"
"RTN","VPRCPRS",46,0)
 .S ALERT("patient")=$P(NODE,U,2),ALERT("urgency")=$P(NODE,U,4),ALERT("dateTime")=$P(NODE,U,5)
"RTN","VPRCPRS",47,0)
 .I $P(NODE,U,3)'="" S ALERT("location")=$P(NODE,U,3)
"RTN","VPRCPRS",48,0)
 .S ALERT("message")=$P(NODE,U,6)
"RTN","VPRCPRS",49,0)
 .I $P(NODE,U,8)'="" S ALERT("action")=$P(NODE,U,8)
"RTN","VPRCPRS",50,0)
 .S ALERT("mustBeProcess")=$S($P(NODE,U,9)="yes":"false",1:"true")
"RTN","VPRCPRS",51,0)
 .I $P(NODE,U,10)'="" S ALERT("forwardBy")="true"
"RTN","VPRCPRS",52,0)
 .M ^TMP("VPRALERTS",$J,"data","alerts",NUM,"alert")=ALERT S NUM=NUM+1
"RTN","VPRCPRS",53,0)
 D ENCODE^VPRJSON($NA(^TMP("VPRALERTS",$J)),"VPROUT","ERROR")
"RTN","VPRCPRS",54,0)
 Q
"RTN","VPRCPRS",55,0)
 ;
"RTN","VPRCRPC")
0^19^B13037791
"RTN","VPRCRPC",1,0)
VPRCRPC ;SLC/AGP - Generic RPC controller for VPR ; 11/7/12 5:42pm
"RTN","VPRCRPC",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCRPC",3,0)
 ;
"RTN","VPRCRPC",4,0)
 ;
"RTN","VPRCRPC",5,0)
CHAINRPC(VPRRES,PARAMS) ; Chain multiple rpcs into one call
"RTN","VPRCRPC",6,0)
 N CITER,RSP,PID
"RTN","VPRCRPC",7,0)
 S CITER="" F  S CITER=$O(PARAMS("commandList",CITER)) Q:CITER=""  D
"RTN","VPRCRPC",8,0)
 . N SUBCMD,SUBRSP,X
"RTN","VPRCRPC",9,0)
 . S X=""
"RTN","VPRCRPC",10,0)
 . F  S X=$O(PARAMS("commandList",CITER,X)) Q:X=""  M SUBCMD(X)=PARAMS("commandList",CITER,X)
"RTN","VPRCRPC",11,0)
 . D CHAINCMD(.SUBCMD,.SUBRSP)
"RTN","VPRCRPC",12,0)
 . I $D(SUBRSP) D DECODE^VPRJSON("SUBRSP","RSP(SUBCMD(""command""))","^JMCERR") I 1
"RTN","VPRCRPC",13,0)
 . I '$TEST S RSP(SUBCMD("command"))=""
"RTN","VPRCRPC",14,0)
 D ENCODE^VPRJSON("RSP","VPRRES","^JMCERR")
"RTN","VPRCRPC",15,0)
 Q
"RTN","VPRCRPC",16,0)
RPC(VPRRES,PARAMS) ; Process request via RPC instead of CSP
"RTN","VPRCRPC",17,0)
 N X,REQ,VPRVAL,VPRCNT,VPRSITE,VPRUSER,VPRDBUG,VPRSTA
"RTN","VPRCRPC",18,0)
 ;S VPRXML=$NA(^TMP($J,"VPR RESULTS")) K @VPRXML
"RTN","VPRCRPC",19,0)
 S VPRCNT=0
"RTN","VPRCRPC",20,0)
 ;S VPRUSER=DUZ,VPRSITE=DUZ(2),VPRSTA=$$STA^XUAF4(DUZ(2))
"RTN","VPRCRPC",21,0)
 S X="" F  S X=$O(PARAMS(X)) Q:X=""  I X'="value" S REQ(X,1)=PARAMS(X)
"RTN","VPRCRPC",22,0)
 I $D(PARAMS("value")) M VPRVAL=PARAMS("value")
"RTN","VPRCRPC",23,0)
 ;
"RTN","VPRCRPC",24,0)
COMMON ; Come here for both CSP and RPC Mode
"RTN","VPRCRPC",25,0)
 ; 
"RTN","VPRCRPC",26,0)
 N CMD
"RTN","VPRCRPC",27,0)
 S CMD=$G(REQ("command",1))
"RTN","VPRCRPC",28,0)
 ;
"RTN","VPRCRPC",29,0)
 I CMD="saveParam" D  G OUT
"RTN","VPRCRPC",30,0)
 . D PUTPARAM^VPRPARAM(.VPRRES,.VPRVAL,"")
"RTN","VPRCRPC",31,0)
 ;
"RTN","VPRCRPC",32,0)
 I CMD="saveParamByUid" D  G OUT
"RTN","VPRCRPC",33,0)
 . D PUTBYUID^VPRPARAM(.VPRRES,$$VAL("uid"),.VPRVAL)
"RTN","VPRCRPC",34,0)
 ;
"RTN","VPRCRPC",35,0)
 I CMD="getParam" D  G OUT
"RTN","VPRCRPC",36,0)
 . D GETBYUID^VPRPARAM(.VPRRES,$$VAL("uid"))
"RTN","VPRCRPC",37,0)
 ;
"RTN","VPRCRPC",38,0)
 I CMD="clearParam" D  G OUT
"RTN","VPRCRPC",39,0)
 . D DELPARAM^VPRPARAM(.VPRRES,$$VAL("uid"))
"RTN","VPRCRPC",40,0)
 ;
"RTN","VPRCRPC",41,0)
 I CMD="getAllParam" D  G OUT
"RTN","VPRCRPC",42,0)
 .D GETALPAR^VPRPARAM(.VPRRES,$$VAL("entity"),$$VAL("entityId"),$$VAL("getValues"))
"RTN","VPRCRPC",43,0)
 ;
"RTN","VPRCRPC",44,0)
 I CMD="getUserInfo" D  G OUT
"RTN","VPRCRPC",45,0)
 .D GETUSERI^VPRCRPC1(.VPRRES,$$VAL("userId"))
"RTN","VPRCRPC",46,0)
 ;
"RTN","VPRCRPC",47,0)
 I CMD="getPatientInfo" D  G OUT
"RTN","VPRCRPC",48,0)
 .D GETPATI^VPRCRPC1(.VPRRES,$$VAL("patientId"))
"RTN","VPRCRPC",49,0)
 ;
"RTN","VPRCRPC",50,0)
 I CMD="getPatientChecks" D  G OUT
"RTN","VPRCRPC",51,0)
 .D CHKS^VPRFPTC(.VPRRES,$$VAL("patientId"))
"RTN","VPRCRPC",52,0)
 ;
"RTN","VPRCRPC",53,0)
 I CMD="logPatientAccess" D  G OUT
"RTN","VPRCRPC",54,0)
 .D LOG^VPRFPTC(.VPRRES,$$VAL("patientId"))
"RTN","VPRCRPC",55,0)
 ;
"RTN","VPRCRPC",56,0)
 I CMD="addTask" D  G OUT
"RTN","VPRCRPC",57,0)
 .D PUT^VPRDJ1(.VPRRES,$$VAL("patientId"),$$VAL("type"),.VPRVAL)
"RTN","VPRCRPC",58,0)
 ;
"RTN","VPRCRPC",59,0)
 I CMD="getReminderList" D  G OUT
"RTN","VPRCRPC",60,0)
 .D REMLIST^VPRPXRM(.VPRRES,$$VAL("user"),$$VAL("location"))
"RTN","VPRCRPC",61,0)
 ;
"RTN","VPRCRPC",62,0)
 I CMD="evaluateReminder" D  G OUT
"RTN","VPRCRPC",63,0)
 .D EVALREM^VPRPXRM(.VPRRES,$$VAL("patientId"),$$VAL("uid"))
"RTN","VPRCRPC",64,0)
 ;
"RTN","VPRCRPC",65,0)
 I CMD="getDefaultPatientList" D  G OUT
"RTN","VPRCRPC",66,0)
 .D GETDLIST^VPRROS8(.VPRRES,$$VAL("server"))
"RTN","VPRCRPC",67,0)
 ;
"RTN","VPRCRPC",68,0)
 I CMD="getWardList" D  G OUT
"RTN","VPRCRPC",69,0)
 .D GETWLIST^VPRROS8(.VPRRES,$$VAL("server"),$$VAL("id"))
"RTN","VPRCRPC",70,0)
 ;
"RTN","VPRCRPC",71,0)
 I CMD="getClinicList" D  G OUT
"RTN","VPRCRPC",72,0)
 .D GETCLIST^VPRROS8(.VPRRES,$$VAL("server"),$$VAL("id"),$$VAL("start"),$$VAL("end"))
"RTN","VPRCRPC",73,0)
 ;
"RTN","VPRCRPC",74,0)
OUT ; output the XML
"RTN","VPRCRPC",75,0)
 ;S VPRRES=$G(RESULT)
"RTN","VPRCRPC",76,0)
 I '$D(VPRRES) S VPRRES="{}"
"RTN","VPRCRPC",77,0)
END Q
"RTN","VPRCRPC",78,0)
 ;
"RTN","VPRCRPC",79,0)
VAL(X) ; return value from request
"RTN","VPRCRPC",80,0)
 Q $G(REQ(X,1))
"RTN","VPRCRPC",81,0)
 ;
"RTN","VPRCRPC",82,0)
CHAINCMD(VPRCMD,VPRRSP) ; Do one command in chain
"RTN","VPRCRPC",83,0)
 ; 
"RTN","VPRCRPC",84,0)
 N CMD
"RTN","VPRCRPC",85,0)
 S CMD=$G(VPRCMD("command"))
"RTN","VPRCRPC",86,0)
 I CMD="getParam" D GETBYUID^VPRPARAM(.VPRRSP,$G(VPRCMD("uid")))
"RTN","VPRCRPC",87,0)
 I CMD="getPatientInfo" D GETPATI^VPRCRPC1(.VPRRSP,$G(VPRCMD("patientId")))
"RTN","VPRCRPC",88,0)
 I CMD="getPatientChecks" D CHKS^VPRFPTC(.VPRRSP,$G(VPRCMD("patientId")))
"RTN","VPRCRPC",89,0)
 I CMD="saveParam" D PUTPARAM^VPRPARAM(.VPRRSP,$G(VPRCMD("value")),"")
"RTN","VPRCRPC",90,0)
 I CMD="saveParamByUid" D PUTBYUID^VPRPARAM(.VPRRSP,$G(VPRCMD("uid")),$G(VPRCMD("value")))
"RTN","VPRCRPC",91,0)
 Q
"RTN","VPRCRPC1")
0^20^B115158851
"RTN","VPRCRPC1",1,0)
VPRCRPC1 ; SLC/AGP - Patient and User routine. ; 05/01/14
"RTN","VPRCRPC1",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRCRPC1",3,0)
 Q
"RTN","VPRCRPC1",4,0)
 ;
"RTN","VPRCRPC1",5,0)
GETADD(VALUES,DFN) ;
"RTN","VPRCRPC1",6,0)
 D ADD^VADPT
"RTN","VPRCRPC1",7,0)
 N INC,NUM,TEMP
"RTN","VPRCRPC1",8,0)
 I VAPA(12)=1 D
"RTN","VPRCRPC1",9,0)
 .I $L(VAPA(13))>0 S VALUES("confidentIalAddress","street",0)=VAPA(13)
"RTN","VPRCRPC1",10,0)
 .I $L(VAPA(14))>0 S VALUES("confidentIalAddress","street",1)=VAPA(14)
"RTN","VPRCRPC1",11,0)
 .I $L(VAPA(15))>0 S VALUES("confidentIalAddress","street",2)=VAPA(15)
"RTN","VPRCRPC1",12,0)
 .I $L(VAPA(16))>0 S VALUES("confidentIalAddress","city")=VAPA(16)
"RTN","VPRCRPC1",13,0)
 .I $L(VAPA(17))>0 S VALUES("confidentIalAddress","state")=$P(VAPA(17),U,2)
"RTN","VPRCRPC1",14,0)
 .I $L(VAPA(18))>0 S VALUES("confidentIalAddress","zip")=VAPA(18)
"RTN","VPRCRPC1",15,0)
 .I $L(VAPA(20))>0 S VALUES("confidentIalAddress","startDate")=$P(VAPA(20),U,2)
"RTN","VPRCRPC1",16,0)
 .I $L(VAPA(21))>0 S VALUES("confidentIalAddress","stopDate")=$P(VAPA(21),U,2)
"RTN","VPRCRPC1",17,0)
 .S INC=0,NUM=0 F  S INC=$O(VAPA(22,INC)) Q:INC=""  D
"RTN","VPRCRPC1",18,0)
 ..S NUM=NUM+1,VALUES("confidentIalAddress","catgories",NUM,"category")=$P(VAPA(22,INC),U,2)
"RTN","VPRCRPC1",19,0)
 ..S VALUES("confidentIalAddress","catgories",NUM,"status")=$S($P(VAPA(22,INC),U,3)="Y":"true",1:"false")
"RTN","VPRCRPC1",20,0)
 ;
"RTN","VPRCRPC1",21,0)
 ;I $L(VAPA(1))>0 S VALUES("address","street",0)=VAPA(1)
"RTN","VPRCRPC1",22,0)
 ;I $L(VAPA(2))>0 S VALUES("address","street",1)=VAPA(2)
"RTN","VPRCRPC1",23,0)
 ;I $L(VAPA(3))>0 S VALUES("address","street",2)=VAPA(3)
"RTN","VPRCRPC1",24,0)
 ;I $L(VAPA(4))>0 S VALUES("address","city")=VAPA(4)
"RTN","VPRCRPC1",25,0)
 ;I $L(VAPA(5))>0 S VALUES("address","state")=$P(VAPA(5),U,2)
"RTN","VPRCRPC1",26,0)
 ;I $L(VAPA(6))>0 S VALUES("address","zip")=VAPA(6)
"RTN","VPRCRPC1",27,0)
 I VAPA(9)]"" S VALUES("temporaryAddress","startDate")=$P(VAPA(9),U,2)
"RTN","VPRCRPC1",28,0)
 I VAPA(10)]"" S VALUES("temporaryAddress","stopDate")=$P(VAPA(10),U,2)
"RTN","VPRCRPC1",29,0)
ADDX ;
"RTN","VPRCRPC1",30,0)
 ;I $L(VAPA(8))>0 S VALUES("address","phone")=VAPA(8)
"RTN","VPRCRPC1",31,0)
 I $P($G(^DPT(DFN,.13)),U,3)'="" S VALUES("email")=$P($G(^DPT(DFN,.13)),U,3)
"RTN","VPRCRPC1",32,0)
 I +$P($G(^DPT(DFN,.11)),U,16)>0 S VALUES("badAddress")=$$GET1^DIQ(2,DFN_",",.121)
"RTN","VPRCRPC1",33,0)
 D KVAR^VADPT
"RTN","VPRCRPC1",34,0)
 Q
"RTN","VPRCRPC1",35,0)
 ;
"RTN","VPRCRPC1",36,0)
GETBSA(DFN) ;
"RTN","VPRCRPC1",37,0)
 N DATE,DATA,NFOUND,TEST,TEXT
"RTN","VPRCRPC1",38,0)
 S TEST=""
"RTN","VPRCRPC1",39,0)
 D BSA^PXRMBMI(DFN,1,0,DT,.NFOUND,.TEST,.DATE,.DATA,.TEXT)
"RTN","VPRCRPC1",40,0)
 Q +$G(DATA(1,"BSA"))
"RTN","VPRCRPC1",41,0)
 ;
"RTN","VPRCRPC1",42,0)
GETBMI(DFN) ;
"RTN","VPRCRPC1",43,0)
 ;  BMI(DFN,NGET,BDT,EDT,NFOUND,TEST,DATE,DATA,TEXT) 
"RTN","VPRCRPC1",44,0)
 N DATE,DATA,NFOUND,TEST,TEXT
"RTN","VPRCRPC1",45,0)
 D BMI^PXRMBMI(DFN,1,0,DT,.NFOUND,.TEST,.DATE,.DATA,.TEXT)
"RTN","VPRCRPC1",46,0)
 Q +$G(DATA(1,"BMI"))
"RTN","VPRCRPC1",47,0)
 ;
"RTN","VPRCRPC1",48,0)
GETDEM(VALUES,DFN) ;
"RTN","VPRCRPC1",49,0)
 D DEM^VADPT
"RTN","VPRCRPC1",50,0)
 S VALUES("name")=VADM(1)
"RTN","VPRCRPC1",51,0)
 I VADM(2)]"" S VALUES("ssn")=$P(VADM(2),U,2)
"RTN","VPRCRPC1",52,0)
 I VADM(3)]"" S VALUES("dob")=$P(VADM(3),U,2)
"RTN","VPRCRPC1",53,0)
 I VADM(4)]"" S VALUES("age")=VADM(4)
"RTN","VPRCRPC1",54,0)
 I VADM(5)]"" S VALUES("gender")=$P(VADM(5),U,2)
"RTN","VPRCRPC1",55,0)
 I VADM(6)]"" S VALUES("dateDeath")=$P(VADM(6),U,2)
"RTN","VPRCRPC1",56,0)
 I VADM(7)]"" S VALUES("remarks")=VADM(7)
"RTN","VPRCRPC1",57,0)
 I VADM(8)]"" S VALUES("race")=$P(VADM(8),U,2)
"RTN","VPRCRPC1",58,0)
 D KVAR^VADPT
"RTN","VPRCRPC1",59,0)
 Q
"RTN","VPRCRPC1",60,0)
 ;
"RTN","VPRCRPC1",61,0)
GETKEYS(VALUES,USER) ;
"RTN","VPRCRPC1",62,0)
 N NAME,VPRERR,VPRLIST,CNT
"RTN","VPRCRPC1",63,0)
 D LIST^DIC(200.051,","_USER_",",".01",,,,,,,,"VPRLIST","VPRERR")
"RTN","VPRCRPC1",64,0)
 S CNT=0 F  S CNT=$O(VPRLIST("DILIST",1,CNT)) Q:CNT'>0  D
"RTN","VPRCRPC1",65,0)
 . S NAME=$G(VPRLIST("DILIST",1,CNT)) Q:NAME=""
"RTN","VPRCRPC1",66,0)
 . S VALUES("vistaKeys",NAME)="TRUE"
"RTN","VPRCRPC1",67,0)
 Q
"RTN","VPRCRPC1",68,0)
 ;
"RTN","VPRCRPC1",69,0)
GETNOK(VALUES,DFN,TYPE) ;
"RTN","VPRCRPC1",70,0)
 S VAOA("A")=TYPE
"RTN","VPRCRPC1",71,0)
 N CNT,CONTACT
"RTN","VPRCRPC1",72,0)
 S CONTACT=$S(TYPE=3:"secondary",1:"primary")
"RTN","VPRCRPC1",73,0)
 S CNT=$S(TYPE=3:2,1:1)
"RTN","VPRCRPC1",74,0)
 D OAD^VADPT
"RTN","VPRCRPC1",75,0)
 ;
"RTN","VPRCRPC1",76,0)
 I VAOA(9)]"" S VALUES("nok",CNT,"name")=VAOA(9)
"RTN","VPRCRPC1",77,0)
 I VAOA(10)]"" S VALUES("nok",CNT,"relationship")=VAOA(10)
"RTN","VPRCRPC1",78,0)
 I VAOA(1)]"" S VALUES("nok",CNT,"address","street",1)=VAOA(1)
"RTN","VPRCRPC1",79,0)
 I VAOA(2)]"" S VALUES("nok",CNT,"address","street",2)=VAOA(2)
"RTN","VPRCRPC1",80,0)
 I VAOA(3)]"" S VALUES("nok",CNT,"address","street",3)=VAOA(3)
"RTN","VPRCRPC1",81,0)
 I VAOA(4)]"" S VALUES("nok",CNT,"address","city")=VAOA(4)
"RTN","VPRCRPC1",82,0)
 I VAOA(5)]"" S VALUES("nok",CNT,"address","state")=$P(VAOA(5),U,2)
"RTN","VPRCRPC1",83,0)
 I VAOA(6)]"" S VALUES("nok",CNT,"address","zip")=VAOA(6)
"RTN","VPRCRPC1",84,0)
 I VAOA(8)]"" S VALUES("nok",CNT,"address","phone")=VAOA(8)
"RTN","VPRCRPC1",85,0)
 D KVAR^VADPT
"RTN","VPRCRPC1",86,0)
 Q
"RTN","VPRCRPC1",87,0)
 ;
"RTN","VPRCRPC1",88,0)
GETMEANS(VALUES,DFN) ;
"RTN","VPRCRPC1",89,0)
 D ELIG^VADPT
"RTN","VPRCRPC1",90,0)
 I VAEL(9)]"" S VALUES("meanStatus")=$P(VAEL(9),U,2)
"RTN","VPRCRPC1",91,0)
 D KVAR^VADPT
"RTN","VPRCRPC1",92,0)
 Q
"RTN","VPRCRPC1",93,0)
 ;
"RTN","VPRCRPC1",94,0)
GETPATI(RESULT,DFN) ;
"RTN","VPRCRPC1",95,0)
 N TYPE,VALUES,VPRERR,Y,VPRODEM,VPRSYS
"RTN","VPRCRPC1",96,0)
 S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRCRPC1",97,0)
 D DPT1OD^VPRDJ00(.VALUES)
"RTN","VPRCRPC1",98,0)
 S VALUES("pid")=$$PID^VPRDJFS(DFN)
"RTN","VPRCRPC1",99,0)
 ;D BUILDUID^VPRPARAM(.VALUES,"patient",DFN)
"RTN","VPRCRPC1",100,0)
 ;D GETDEM(.VALUES,DFN)
"RTN","VPRCRPC1",101,0)
 D GETADD(.VALUES,DFN)
"RTN","VPRCRPC1",102,0)
 ;F TYPE=1,3 D GETNOK(.VALUES,DFN,TYPE)
"RTN","VPRCRPC1",103,0)
 D GETPATTM(.VALUES,DFN)
"RTN","VPRCRPC1",104,0)
 ;D GETPATVI(.VALUES,DFN)
"RTN","VPRCRPC1",105,0)
 D GETPATIP(.VALUES,DFN)
"RTN","VPRCRPC1",106,0)
 D GETMEANS(.VALUES,DFN)
"RTN","VPRCRPC1",107,0)
 D PRF^VPRFPTC(DFN,.VALUES)
"RTN","VPRCRPC1",108,0)
 S Y=$$CWAD^ORQPT2(DFN)
"RTN","VPRCRPC1",109,0)
 I Y]"" S VALUES("cwad")=Y
"RTN","VPRCRPC1",110,0)
 I $D(VALUES("patientRecordFlags")) S VALUES("cwad")=$G(VALUES("cwad"))_"F"
"RTN","VPRCRPC1",111,0)
 ;D PTINQ^ORWPT(.DEM,DFN)
"RTN","VPRCRPC1",112,0)
 ;S NUM=5,STR=""
"RTN","VPRCRPC1",113,0)
 ;F  S NUM=$O(@DEM@(NUM)) Q:NUM'>0  D
"RTN","VPRCRPC1",114,0)
 ;.S VALUES("patDemDetails","text","\",NUM)=@DEM@(NUM)_$C(13,10)
"RTN","VPRCRPC1",115,0)
 S VALUES("success")="true"
"RTN","VPRCRPC1",116,0)
 D ENCODE^VPRJSON("VALUES","RESULT","VPRERR")
"RTN","VPRCRPC1",117,0)
 I $D(VPRERR) D
"RTN","VPRCRPC1",118,0)
 .K RESULT N TEMP,TXT
"RTN","VPRCRPC1",119,0)
 .S TXT(1)="Problem encoding json output."
"RTN","VPRCRPC1",120,0)
 .D SETERROR^VPRUTILS(.TEMP,.VPRERR,.TXT,.VALUES)
"RTN","VPRCRPC1",121,0)
 .K VPRERR D ENCODE^VPRJSON("TEMP","RESULT","VPRERR")
"RTN","VPRCRPC1",122,0)
 Q
"RTN","VPRCRPC1",123,0)
 ;
"RTN","VPRCRPC1",124,0)
GETPATIP(VALUES,DFN) ;
"RTN","VPRCRPC1",125,0)
 N VPRDATA
"RTN","VPRCRPC1",126,0)
 D INPLOC^ORWPT(.VPRDATA,DFN)
"RTN","VPRCRPC1",127,0)
 I +VPRDATA S VALUES("inpatientLocation")=$P(VPRDATA,U,2)
"RTN","VPRCRPC1",128,0)
 I $P($G(^DPT(DFN,.101)),U)'="" S VALUES("roomBed")=$P($G(^DPT(DFN,.101)),U)
"RTN","VPRCRPC1",129,0)
 Q
"RTN","VPRCRPC1",130,0)
 ;
"RTN","VPRCRPC1",131,0)
GETPATVI(VALUES,DFN) ;
"RTN","VPRCRPC1",132,0)
 N BMI,DAS,HT,LDATE,VPRTEMP,WT
"RTN","VPRCRPC1",133,0)
 ;get weight
"RTN","VPRCRPC1",134,0)
 S LDATE=$O(^PXRMINDX(120.5,"PI",DFN,9,""),-1)
"RTN","VPRCRPC1",135,0)
 I LDATE>0 D
"RTN","VPRCRPC1",136,0)
 .S DAS=$O(^PXRMINDX(120.5,"PI",DFN,9,LDATE,""))
"RTN","VPRCRPC1",137,0)
 .I DAS']"" Q
"RTN","VPRCRPC1",138,0)
 .D GETDATA^PXRMVITL(DAS,.VPRTEMP)
"RTN","VPRCRPC1",139,0)
 .S WT=VPRTEMP("VALUE")
"RTN","VPRCRPC1",140,0)
 .S VALUES("lastVitals","weight","value")=WT
"RTN","VPRCRPC1",141,0)
 .S VALUES("lastVitals","weight","lastDone")=$$FMTE^XLFDT(LDATE,"D")
"RTN","VPRCRPC1",142,0)
 ;get height
"RTN","VPRCRPC1",143,0)
 K LDATE,DAS
"RTN","VPRCRPC1",144,0)
 S LDATE=$O(^PXRMINDX(120.5,"PI",DFN,8,""),-1)
"RTN","VPRCRPC1",145,0)
 I LDATE>0 D
"RTN","VPRCRPC1",146,0)
 .S DAS=$O(^PXRMINDX(120.5,"PI",DFN,8,LDATE,""))
"RTN","VPRCRPC1",147,0)
 .I DAS']"" Q
"RTN","VPRCRPC1",148,0)
 .D GETDATA^PXRMVITL(DAS,.VPRTEMP)
"RTN","VPRCRPC1",149,0)
 .S HT=VPRTEMP("VALUE")
"RTN","VPRCRPC1",150,0)
 .S VALUES("lastVitals","height","value")=HT
"RTN","VPRCRPC1",151,0)
 .S VALUES("lastVitals","height","lastDone")=$$FMTE^XLFDT(LDATE,"D")
"RTN","VPRCRPC1",152,0)
 S BMI=$$GETBMI(DFN)
"RTN","VPRCRPC1",153,0)
 I BMI>0 S VALUES("lastVitals","bmi")=BMI
"RTN","VPRCRPC1",154,0)
 S BSA=$$GETBSA(DFN)
"RTN","VPRCRPC1",155,0)
 I BSA>0 S VALUES("lastVitals","bsa")=BSA
"RTN","VPRCRPC1",156,0)
 Q
"RTN","VPRCRPC1",157,0)
GETPATTM(VALUES,DFN) ;
"RTN","VPRCRPC1",158,0)
 N CNT,PROV,TEAM,MH,X,VPRTEAM
"RTN","VPRCRPC1",159,0)
 S PROV=$$OUTPTPR^SDUTL3(DFN)
"RTN","VPRCRPC1",160,0)
 S TEAM=$$OUTPTTM^SDUTL3(DFN)
"RTN","VPRCRPC1",161,0)
 S MH=$$START^SCMCMHTC(DFN)
"RTN","VPRCRPC1",162,0)
 I PROV D
"RTN","VPRCRPC1",163,0)
 .S VALUES("teamInfo","primaryProvider","name")=$P(PROV,U,2)
"RTN","VPRCRPC1",164,0)
 .S VALUES("teamInfo","primaryProvider","analogPager")=$P($G(^VA(200,+PROV,.13)),U,7)
"RTN","VPRCRPC1",165,0)
 .S VALUES("teamInfo","primaryProvider","digitalPager")=$P($G(^VA(200,+PROV,.13)),U,8)
"RTN","VPRCRPC1",166,0)
 .S VALUES("teamInfo","primaryProvider","officelPager")=$P($G(^VA(200,+PROV,.13)),U,2)
"RTN","VPRCRPC1",167,0)
 I 'PROV S VALUES("teamInfo","primaryProvider","name")="unassigned"
"RTN","VPRCRPC1",168,0)
 I TEAM D
"RTN","VPRCRPC1",169,0)
 .S VALUES("teamInfo","team","name")=$P(TEAM,U,2)
"RTN","VPRCRPC1",170,0)
 .S VALUES("teamInfo","team","phone")=$P($G(^SCTM(404.51,+TEAM,0)),U,2)
"RTN","VPRCRPC1",171,0)
 I 'TEAM S VALUES("teamInfo","team","name")="unassigned"
"RTN","VPRCRPC1",172,0)
 S X=$G(^DPT(DFN,.1041))
"RTN","VPRCRPC1",173,0)
 I +X D
"RTN","VPRCRPC1",174,0)
 . S VALUES("teamInfo","attendingProvider","name")=$P($G(^VA(200,+X,0)),U)
"RTN","VPRCRPC1",175,0)
 . S VALUES("teamInfo","attendingProvider","analogPager")=$P($G(^VA(200,+X,.13)),U,7)
"RTN","VPRCRPC1",176,0)
 . S VALUES("teamInfo","attendingProvider","officelPager")=$P($G(^VA(200,+X,.13)),U,8)
"RTN","VPRCRPC1",177,0)
 . S VALUES("teamInfo","attendingProvider","officelPager")=$P($G(^VA(200,+X,.13)),U,2)
"RTN","VPRCRPC1",178,0)
 I '+X S VALUES("teamInfo","attendingProvider","name")="unassigned"
"RTN","VPRCRPC1",179,0)
 I MH D
"RTN","VPRCRPC1",180,0)
 .S VALUES("teamInfo","mhCoordinator","name")=$P(MH,U,2)
"RTN","VPRCRPC1",181,0)
 .S VALUES("teamInfo","mhPosition")=$P(MH,U,3)
"RTN","VPRCRPC1",182,0)
 .S VALUES("teamInfo","mhTeam")=$P(MH,U,5)
"RTN","VPRCRPC1",183,0)
 .S VALUES("teamInfo","mhCoordinator","analogPager")=$P($G(^VA(200,+MH,.13)),U,7)
"RTN","VPRCRPC1",184,0)
 .S VALUES("teamInfo","mhCoordinator","digitalPager")=$P($G(^VA(200,+MH,.13)),U,8)
"RTN","VPRCRPC1",185,0)
 .S VALUES("teamInfo","mhCoordinator","officePhone")=$P($G(^VA(200,+MH,.13)),U,2)
"RTN","VPRCRPC1",186,0)
 .I 'MH D
"RTN","VPRCRPC1",187,0)
 ..S VALUES("teamInfo","mhCoordinator","name")="unassigned"
"RTN","VPRCRPC1",188,0)
 ..S VALUES("teamInfo","mhPosition")="unassigned"
"RTN","VPRCRPC1",189,0)
 ..S VALUES("teamInfo","mhTeam")="unassigned"
"RTN","VPRCRPC1",190,0)
 D PCDETAIL^ORWPT1(.VPRTEAM,DFN)
"RTN","VPRCRPC1",191,0)
 S CNT=0 F  S CNT=$O(VPRTEAM(CNT)) Q:CNT'>0  D
"RTN","VPRCRPC1",192,0)
 .S VALUES("teamInfo","text","\",CNT)=VPRTEAM(CNT)_$C(13,10)
"RTN","VPRCRPC1",193,0)
 Q
"RTN","VPRCRPC1",194,0)
 ;
"RTN","VPRCRPC1",195,0)
GETPOS(VALUES,USER) ;
"RTN","VPRCRPC1",196,0)
 ; this returns the list of position for an user
"RTN","VPRCRPC1",197,0)
 N CNT,NODE,NUM,ROLEIEN,ROLE,TEAM,TEAMIEN,TEAMPHN,VPRLIST,VPRERR
"RTN","VPRCRPC1",198,0)
 ;$$TPPR^SCAPMC(DUZ,SCDATES,SCPURPA,SCROLEA,"LIST",VPRERR)
"RTN","VPRCRPC1",199,0)
 S NUM=$$TPPR^SCAPMC(USER,"","","","",.VPRERR)
"RTN","VPRCRPC1",200,0)
 F CNT=1:1:NUM D
"RTN","VPRCRPC1",201,0)
 .S NODE=$G(^TMP("SC TMP LIST",$J,CNT))
"RTN","VPRCRPC1",202,0)
 .S VALUES("vistaPositions",CNT,"position")=$P(NODE,U,2)
"RTN","VPRCRPC1",203,0)
 .S VALUES("vistaPositions",CNT,"effectiveDate")=$P(NODE,U,5)
"RTN","VPRCRPC1",204,0)
 .S VALUES("vistaPositions",CNT,"inactiveDate")=$P(NODE,U,6)
"RTN","VPRCRPC1",205,0)
 .S TEAMIEN=$P(NODE,U,3)
"RTN","VPRCRPC1",206,0)
 .S TEAM=$$GET1^DIQ(404.51,(+TEAMIEN_","),.01)
"RTN","VPRCRPC1",207,0)
 .S TEAMPHN=$$GET1^DIQ(404.51,(+TEAMIEN_","),.02)
"RTN","VPRCRPC1",208,0)
 .S VALUES("vistaPositions",CNT,"teamName")=TEAM
"RTN","VPRCRPC1",209,0)
 .S VALUES("vistaPositions",CNT,"teamPhone")=TEAMPHN
"RTN","VPRCRPC1",210,0)
 .I $P(NODE,U,9)>0 D
"RTN","VPRCRPC1",211,0)
 .S VALUES("vistaPositions",CNT,"role")=$$GET1^DIQ(8930,($P(NODE,U,9)_","),.01)
"RTN","VPRCRPC1",212,0)
 Q
"RTN","VPRCRPC1",213,0)
 ;
"RTN","VPRCRPC1",214,0)
GETUSERC(VALUES,USER) ;
"RTN","VPRCRPC1",215,0)
 N ARRAY,CNT,EFFDATE,EXPDATE,ID,IND,LIST,NODE
"RTN","VPRCRPC1",216,0)
 D WHATIS^USRLM(USER,"LIST",1)
"RTN","VPRCRPC1",217,0)
 ;LIST(Uppername_indicator)=UserClassIEN^MembershipIEN^name^EffectDt^ExpireDt
"RTN","VPRCRPC1",218,0)
 S IND=0,CNT=0 F  S IND=$O(LIST(IND)) Q:IND=""  D
"RTN","VPRCRPC1",219,0)
 .S NODE=LIST(IND)
"RTN","VPRCRPC1",220,0)
 .S EFFDATE=$P(NODE,U,4),EXPDATE=$P(NODE,U,5)
"RTN","VPRCRPC1",221,0)
 .I EFFDATE>0,EFFDATE>DT Q
"RTN","VPRCRPC1",222,0)
 .I EXPDATE>0,EXPDATE<DT Q
"RTN","VPRCRPC1",223,0)
 .S CNT=CNT+1
"RTN","VPRCRPC1",224,0)
 .S ID=$P(NODE,U)
"RTN","VPRCRPC1",225,0)
 .S ARRAY(ID)=""
"RTN","VPRCRPC1",226,0)
 .S VALUES("vistaUserClass",CNT,"role")=$P(NODE,U,3)
"RTN","VPRCRPC1",227,0)
 .S VALUES("vistaUserClass",CNT,"uid")=$$SETUID^VPRUTILS("asu-class","",ID,"")
"RTN","VPRCRPC1",228,0)
 .S VALUES("vistaUserClass",CNT,"effectiveDate")=EFFDATE
"RTN","VPRCRPC1",229,0)
 .S VALUES("vistaUserClass",CNT,"expirationDate")=EXPDATE
"RTN","VPRCRPC1",230,0)
 .I $D(^USR(8930,"AD",ID)) D GETUCPAR(.VALUES,ID,.CNT,.ARRAY)
"RTN","VPRCRPC1",231,0)
 I CNT=0 D
"RTN","VPRCRPC1",232,0)
 .S ID=$O(^USR(8930,"B","USER","")) I +ID'>0 Q
"RTN","VPRCRPC1",233,0)
 .S CNT=CNT+1
"RTN","VPRCRPC1",234,0)
 .S VALUES("vistaUserClass",CNT,"role")=$P($G(^USR(8930,ID,0)),U)
"RTN","VPRCRPC1",235,0)
 .S VALUES("vistaUserClass",CNT,"uid")=$$SETUID^VPRUTILS("asu-class","",ID,"")
"RTN","VPRCRPC1",236,0)
 Q
"RTN","VPRCRPC1",237,0)
GETUCPAR(VALUES,ID,CNT,ARRAY) ;
"RTN","VPRCRPC1",238,0)
 N IEN,ROLE
"RTN","VPRCRPC1",239,0)
 S IEN=0 F  S IEN=$O(^USR(8930,"AD",ID,IEN)) Q:IEN'>0  D
"RTN","VPRCRPC1",240,0)
 .I $D(ARRAY(IEN)) Q
"RTN","VPRCRPC1",241,0)
 .S ARRAY(IEN)=""
"RTN","VPRCRPC1",242,0)
 .S ROLE=$P($G(^USR(8930,IEN,0)),U)
"RTN","VPRCRPC1",243,0)
 .S CNT=CNT+1
"RTN","VPRCRPC1",244,0)
 .S VALUES("vistaUserClass",CNT,"role")=ROLE
"RTN","VPRCRPC1",245,0)
 .S VALUES("vistaUserClass",CNT,"uid")=$$SETUID^VPRUTILS("asu-class","",IEN,"")
"RTN","VPRCRPC1",246,0)
 .I $D(^USR(8930,"AD",ID)) D GETUCPAR(.VALUES,IEN,.CNT,.ARRAY)
"RTN","VPRCRPC1",247,0)
 Q
"RTN","VPRCRPC1",248,0)
 ;
"RTN","VPRCRPC1",249,0)
GETUSERI(RESULT,USER) ;
"RTN","VPRCRPC1",250,0)
 N RPCOPT,VALUES,VPRERR,VPRLIST
"RTN","VPRCRPC1",251,0)
 D BUILDUID^VPRPARAM(.VALUES,"user",USER)
"RTN","VPRCRPC1",252,0)
 S VALUES("timeout")=$$GET^XPAR("USR^SYS","ORWOR TIMEOUT CHART",1,"I")
"RTN","VPRCRPC1",253,0)
 S VALUES("timeoutCounter")=$$GET^XPAR("USR^SYS^PKG","ORWOR TIMEOUT COUNTDOWN",1,"I")
"RTN","VPRCRPC1",254,0)
 S CPRSPATH=$$GET^XPAR("USR^SYS","VPR CPRS PATH",1,"I")
"RTN","VPRCRPC1",255,0)
 S VALUES("cprsPath")=$S($L($G(CPRSPATH))>0:CPRSPATH,1:"")
"RTN","VPRCRPC1",256,0)
 D FIND^DIC(19,"",1,"X","VPR UI CONTEXT",1,,,,"VPRLIST")
"RTN","VPRCRPC1",257,0)
 S RPCOPT=$S($D(^VPRLIST("DILIST",0)):-1,1:$P(VPRLIST("DILIST","ID",1,1),"version ",2))
"RTN","VPRCRPC1",258,0)
 ;S VALUES("signingPriv")=$S($D(^XUSEC("ORES",DUZ)):3,$D(^XUSEC("ORELSE",DUZ)):2,$D(^XUSEC("OREMAS",DUZ)):1,1:0)
"RTN","VPRCRPC1",259,0)
 S VALUES("orderingRole")=$$ORDROLE(USER)
"RTN","VPRCRPC1",260,0)
 S VALUES("hmpVersion")=RPCOPT
"RTN","VPRCRPC1",261,0)
 S VALUES("domain")=$$KSP^XUPARAM("WHERE")  ; domain
"RTN","VPRCRPC1",262,0)
 S VALUES("service")=+$G(^VA(200,USER,5))     ; service/section
"RTN","VPRCRPC1",263,0)
 D GETUSERC(.VALUES,USER)
"RTN","VPRCRPC1",264,0)
 D GETPOS(.VALUES,USER)
"RTN","VPRCRPC1",265,0)
 D GETKEYS(.VALUES,USER)
"RTN","VPRCRPC1",266,0)
 S VALUES("productionAccount")=$S($$PROD^XUPROD=1:"true",1:"false")
"RTN","VPRCRPC1",267,0)
 ;S RESULT=$$ENCODE^VPRJSON("VALUES","VPRERR")
"RTN","VPRCRPC1",268,0)
 D ENCODE^VPRJSON("VALUES","RESULT","VPRERR")
"RTN","VPRCRPC1",269,0)
 Q
"RTN","VPRCRPC1",270,0)
 ;
"RTN","VPRCRPC1",271,0)
ORDROLE(USER) ; returns the role a person takes in ordering
"RTN","VPRCRPC1",272,0)
 ; VAL: 0=nokey, 1=clerk, 2=nurse, 3=physician, 4=student, 5=bad keys
"RTN","VPRCRPC1",273,0)
 ;I '$G(ORWCLVER) Q 0  ; version of client is to old for ordering
"RTN","VPRCRPC1",274,0)
 I ($D(^XUSEC("OREMAS",USER))+$D(^XUSEC("ORELSE",USER))+$D(^XUSEC("ORES",USER)))>1 Q 5
"RTN","VPRCRPC1",275,0)
 I $D(^XUSEC("OREMAS",USER)) Q 1                           ; clerk
"RTN","VPRCRPC1",276,0)
 I $D(^XUSEC("ORELSE",USER)) Q 2                           ; nurse
"RTN","VPRCRPC1",277,0)
 I $D(^XUSEC("ORES",USER)),$D(^XUSEC("PROVIDER",USER)) Q 3  ; doctor
"RTN","VPRCRPC1",278,0)
 I $D(^XUSEC("PROVIDER",USER)) Q 4                         ; student
"RTN","VPRCRPC1",279,0)
 Q 0
"RTN","VPRCRPC1",280,0)
 ;
"RTN","VPRDJ")
0^68^B33552080
"RTN","VPRDJ",1,0)
VPRDJ ;SLC/MKB -- Serve VistA data as JSON via RPC ;10/18/12 6:26pm
"RTN","VPRDJ",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ",4,0)
 ;
"RTN","VPRDJ",5,0)
 ; External References          DBIA#
"RTN","VPRDJ",6,0)
 ; -------------------          -----
"RTN","VPRDJ",7,0)
 ; ^DPT                         10035
"RTN","VPRDJ",8,0)
 ; MPIF001                       2701
"RTN","VPRDJ",9,0)
 ; XLFDT                        10103
"RTN","VPRDJ",10,0)
 ; XLFSTR                       10104
"RTN","VPRDJ",11,0)
 ; XUPARAM                       2541
"RTN","VPRDJ",12,0)
 ;
"RTN","VPRDJ",13,0)
GET(VPR,FILTER) ; -- Return search results as JSON in @VPR@(n)
"RTN","VPRDJ",14,0)
 ; RPC = VPR GET PATIENT DATA JSON
"RTN","VPRDJ",15,0)
 ; where FILTER("patientId") = DFN or DFN;ICN
"RTN","VPRDJ",16,0)
 ;       FILTER("domain")    = name of desired data type  (see VPRDJ0)
"RTN","VPRDJ",17,0)
 ;       FILTER("text")      = boolean, to include document text [opt]
"RTN","VPRDJ",18,0)
 ;       FILTER("start")     = start date.time of search         [opt]
"RTN","VPRDJ",19,0)
 ;       FILTER("stop")      = stop date.time of search          [opt]
"RTN","VPRDJ",20,0)
 ;       FILTER("max")       = maximum number of items to return [opt]
"RTN","VPRDJ",21,0)
 ;       FILTER("id")        = single item id to return          [opt]
"RTN","VPRDJ",22,0)
 ;       FILTER("uid")       = single record uid to return       [opt]
"RTN","VPRDJ",23,0)
 ;       FILTER("noHead")    = flag, to omit header and commas   [opt]
"RTN","VPRDJ",24,0)
 ;
"RTN","VPRDJ",25,0)
 N ICN,DFN,VPRI,VPRSYS,VPRTYPE,VPRSTART,VPRSTOP,VPRMAX,VPRID,VPRTEXT,VPRP,TYPE,VPRTN,VPRERR
"RTN","VPRDJ",26,0)
 S VPR=$NA(^TMP("VPR",$J)),VPRI=0 K @VPR
"RTN","VPRDJ",27,0)
 S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRDJ",28,0)
 S DT=$$DT^XLFDT             ;for crossing midnight boundary
"RTN","VPRDJ",29,0)
 ;
"RTN","VPRDJ",30,0)
 ; parse & validate input parameters
"RTN","VPRDJ",31,0)
 I $G(FILTER("uid"))'="" D SEPUID(.FILTER)
"RTN","VPRDJ",32,0)
 S DFN=$G(FILTER("patientId"))
"RTN","VPRDJ",33,0)
 S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN)
"RTN","VPRDJ",34,0)
 I DFN<1,ICN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","VPRDJ",35,0)
 ;
"RTN","VPRDJ",36,0)
 S VPRTYPE=$G(FILTER("domain")) S:VPRTYPE="" VPRTYPE=$$ALL
"RTN","VPRDJ",37,0)
 I $D(ZTQUEUED) S VPR=$NA(^XTMP(VPRBATCH,VPRFZTSK,VPRTYPE)) K @VPR
"RTN","VPRDJ",38,0)
 I VPRTYPE'="new",DFN<1!'$D(^DPT(DFN)) S VPRERR=$$ERR(1,DFN) G GTQ
"RTN","VPRDJ",39,0)
 ;
"RTN","VPRDJ",40,0)
 S VPRSTART=+$G(FILTER("start"),1410102)
"RTN","VPRDJ",41,0)
 S VPRSTOP=+$G(FILTER("stop"),4141015)
"RTN","VPRDJ",42,0)
 S VPRMAX=+$G(FILTER("max"),999999)
"RTN","VPRDJ",43,0)
 I VPRSTART,VPRSTOP,VPRSTOP<VPRSTART D
"RTN","VPRDJ",44,0)
 . N X S X=VPRSTART,VPRSTART=VPRSTOP,VPRSTOP=X
"RTN","VPRDJ",45,0)
 I VPRSTOP,$L(VPRSTOP,".")<2 S VPRSTOP=VPRSTOP_".24"
"RTN","VPRDJ",46,0)
 ;
"RTN","VPRDJ",47,0)
 S VPRID=$G(FILTER("id"))
"RTN","VPRDJ",48,0)
 S VPRTEXT=+$G(FILTER("text"),1) ;default = true/text
"RTN","VPRDJ",49,0)
 ;
"RTN","VPRDJ",50,0)
 ;set error trap
"RTN","VPRDJ",51,0)
 K ^TMP($J,"VPR ERROR")
"RTN","VPRDJ",52,0)
 ;
"RTN","VPRDJ",53,0)
 ; extract data
"RTN","VPRDJ",54,0)
 I VPRTYPE="new",$L($T(EN^VPRDJX)),'$G(^XTMP("VPR-off","GET")) D EN^VPRDJX(VPRID,VPRMAX) Q  ;data updates
"RTN","VPRDJ",55,0)
 F VPRP=1:1:$L(VPRTYPE,";") S TYPE=$P(VPRTYPE,";",VPRP) I $L(TYPE) D
"RTN","VPRDJ",56,0)
 . S VPRTN=$$TAG(TYPE)_"^VPRDJ0" Q:'$L($T(@VPRTN))  ;D ERR(2) Q
"RTN","VPRDJ",57,0)
 . N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ",58,0)
 . S $ET="D ERRHDLR^VPRDERRH",ERRMSG="A problem occurred when trying to load patient data from an API."
"RTN","VPRDJ",59,0)
 . D @VPRTN
"RTN","VPRDJ",60,0)
 ;
"RTN","VPRDJ",61,0)
GTQ ; add item count and terminating characters
"RTN","VPRDJ",62,0)
 N ERROR I $D(^TMP($J,"VPR ERROR"))>0 D BUILDERR(.ERROR)
"RTN","VPRDJ",63,0)
 I +$G(FILTER("noHead"))=1 D  Q
"RTN","VPRDJ",64,0)
 .S @VPR@("total")=+$G(VPRI)
"RTN","VPRDJ",65,0)
 .I $L($G(ERROR(1)))>1 S @VPR@("error")=ERROR(1)
"RTN","VPRDJ",66,0)
 S @VPR@(.5)="{""apiVersion"":""1.01"",""params"":{"_$$SYS_"},"
"RTN","VPRDJ",67,0)
 I $D(VPRERR) S @VPR@(1)="""error"":{""message"":"""_VPRERR_"""}}" Q
"RTN","VPRDJ",68,0)
 I '$D(@VPR)!'$G(VPRI) D  Q
"RTN","VPRDJ",69,0)
 . I '$D(ERROR) S @VPR@(1)="""data"":{""totalItems"":0,""items"":[]}}" Q
"RTN","VPRDJ",70,0)
 . S @VPR@(1)="""data"":{""totalItems"":0,""items"":[]},"
"RTN","VPRDJ",71,0)
 . S @VPR@(2,1)=ERROR(1)_"}"
"RTN","VPRDJ",72,0)
 ;
"RTN","VPRDJ",73,0)
 S @VPR@(.6)="""data"":{""updated"":"""_$$HL7NOW_""",""totalItems"":"_VPRI_",""items"":["
"RTN","VPRDJ",74,0)
 S VPRI=VPRI+1,@VPR@(VPRI)=$S($D(ERROR):"]}",1:"]}}")
"RTN","VPRDJ",75,0)
 I $D(ERROR)>0 S VPRI=VPRI+1,@VPR@(VPRI,.3)=",",@VPR@(VPRI,1)=ERROR(1)_"}"
"RTN","VPRDJ",76,0)
 K ^TMP($J,"VPR ERROR"),^TMP("VPRTEXT",$J)
"RTN","VPRDJ",77,0)
 Q
"RTN","VPRDJ",78,0)
 ;
"RTN","VPRDJ",79,0)
SEPUID(FILTER) ; -- separate uid into FILTER pieces
"RTN","VPRDJ",80,0)
 N UID
"RTN","VPRDJ",81,0)
 S UID=$G(FILTER("uid")) K FILTER("uid") Q:UID=""
"RTN","VPRDJ",82,0)
 I $P(UID,":",4)'=VPRSYS Q
"RTN","VPRDJ",83,0)
 S FILTER("patientId")=$P(UID,":",5)
"RTN","VPRDJ",84,0)
 S FILTER("domain")=$P(UID,":",3)
"RTN","VPRDJ",85,0)
 S FILTER("id")=$P(UID,":",6)
"RTN","VPRDJ",86,0)
 Q
"RTN","VPRDJ",87,0)
 ;
"RTN","VPRDJ",88,0)
SYS() ; -- return system info for JSON header
"RTN","VPRDJ",89,0)
 Q """domain"":"""_$$KSP^XUPARAM("WHERE")_""",""systemId"":"""_VPRSYS_""""
"RTN","VPRDJ",90,0)
 ;
"RTN","VPRDJ",91,0)
BUILDERR(RESULT,DFN) ; -- build error array
"RTN","VPRDJ",92,0)
 N COUNT,MESSAGE,MSGCNT
"RTN","VPRDJ",93,0)
 S COUNT=$G(^TMP($J,"VPR ERROR","# of Errors"))
"RTN","VPRDJ",94,0)
 S MESSAGE="A mumps error occurred when extracting patient data. A total of "_COUNT_" occurred.\n\r"
"RTN","VPRDJ",95,0)
 S MSGCNT=0 F  S MSGCNT=$O(^TMP($J,"VPR ERROR","ERROR MESSAGE",MSGCNT)) Q:MSGCNT'>0  D
"RTN","VPRDJ",96,0)
 . S MESSAGE=MESSAGE_$G(^TMP($J,"VPR ERROR","ERROR MESSAGE",MSGCNT))_"\n\r"
"RTN","VPRDJ",97,0)
 S RESULT(1)="""error"":{""message"":"""_MESSAGE_"""}"
"RTN","VPRDJ",98,0)
 Q
"RTN","VPRDJ",99,0)
 ;
"RTN","VPRDJ",100,0)
TAG(X) ; -- Return linetag in VPRDJ0 routine for clinical domain X
"RTN","VPRDJ",101,0)
 N Y S X=$G(X,"Z")
"RTN","VPRDJ",102,0)
 S Y=$E($$UP^XLFSTR(X),1,8)
"RTN","VPRDJ",103,0)
 S:'$L($T(@(Y_"^VPRDJ0"))) Y="VPR"
"RTN","VPRDJ",104,0)
 Q Y
"RTN","VPRDJ",105,0)
 ;
"RTN","VPRDJ",106,0)
ALL() ; -- return string for all types of data
"RTN","VPRDJ",107,0)
 Q "patient;problem;allergy;consult;vital;lab;procedure;obs;order;treatment;med;ptf;factor;immunization;exam;cpt;education;pov;skin;image;appointment;surgery;document;visit;mh"
"RTN","VPRDJ",108,0)
 ;
"RTN","VPRDJ",109,0)
ERR(X,VAL) ; -- return error message
"RTN","VPRDJ",110,0)
 N MSG  S MSG="Error"
"RTN","VPRDJ",111,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","VPRDJ",112,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","VPRDJ",113,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","VPRDJ",114,0)
 I X=4  S MSG="Unable to create new object"
"RTN","VPRDJ",115,0)
 I X=99 S MSG="Unknown request"
"RTN","VPRDJ",116,0)
 Q MSG
"RTN","VPRDJ",117,0)
 ;
"RTN","VPRDJ",118,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","VPRDJ",119,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","VPRDJ",120,0)
 ;
"RTN","VPRDJ",121,0)
ADD(ITEM,COLL) ; -- add ITEM to results
"RTN","VPRDJ",122,0)
 I $D(VPRCRC),$D(COLL) D ONE^VPRDCRC(ITEM,COLL) Q  ;checksum
"RTN","VPRDJ",123,0)
 ; -- add ITEM to @VPR@(VPRI) to return JSON
"RTN","VPRDJ",124,0)
 N VPRY,VPRERR
"RTN","VPRDJ",125,0)
 D ENCODE^VPRJSON(ITEM,"VPRY","VPRERR")
"RTN","VPRDJ",126,0)
 I $D(VPRERR) D  ;return ERRor instead of ITEM
"RTN","VPRDJ",127,0)
 . N VPRTMP,VPRTXT,VPRITM
"RTN","VPRDJ",128,0)
 . M VPRITM=@ITEM K VPRY
"RTN","VPRDJ",129,0)
 . S VPRTXT(1)="Problem encoding json output."
"RTN","VPRDJ",130,0)
 . D SETERROR^VPRUTILS(.VPRTMP,.VPRERR,.VPRTXT,.VPRITM)
"RTN","VPRDJ",131,0)
 . K VPRERR D ENCODE^VPRJSON("VPRTMP","VPRY","VPRERR")
"RTN","VPRDJ",132,0)
 I $D(VPRY) D
"RTN","VPRDJ",133,0)
 . S VPRI=VPRI+1
"RTN","VPRDJ",134,0)
 . ;I VPRI>1,'$G(FILTER("noHead")) S @VPR@(VPRI,.3)=","
"RTN","VPRDJ",135,0)
 . I VPRI>1 S @VPR@(VPRI,.3)=","
"RTN","VPRDJ",136,0)
 . M @VPR@(VPRI)=VPRY
"RTN","VPRDJ",137,0)
 Q
"RTN","VPRDJ",138,0)
 ;
"RTN","VPRDJ",139,0)
TEST(DFN,TYPE,ID,TEXT,IN) ; -- test GET, write results to screen
"RTN","VPRDJ",140,0)
 N OUT,IDX S U="^"
"RTN","VPRDJ",141,0)
 S:'$D(IN("systemID")) IN("systemID")=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRDJ",142,0)
 S IN("patientId")=+$G(DFN)
"RTN","VPRDJ",143,0)
 S IN("domain")=$G(TYPE)
"RTN","VPRDJ",144,0)
 S:$D(ID) IN("id")=ID
"RTN","VPRDJ",145,0)
 S:$D(TEXT) IN("text")=TEXT
"RTN","VPRDJ",146,0)
 D GET(.OUT,.IN)
"RTN","VPRDJ",147,0)
 ;
"RTN","VPRDJ",148,0)
 S IDX=OUT
"RTN","VPRDJ",149,0)
 F  S IDX=$Q(@IDX) Q:IDX'?1"^TMP(""VPR"","1.N.E  Q:+$P(IDX,",",2)'=$J  W !,@IDX
"RTN","VPRDJ",150,0)
 Q
"RTN","VPRDJ0")
0^100^B87535759
"RTN","VPRDJ0",1,0)
VPRDJ0 ;SLC/MKB -- Serve VistA data as JSON cont ;6/25/12  16:11
"RTN","VPRDJ0",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ0",4,0)
 ;
"RTN","VPRDJ0",5,0)
 ; External References          DBIA#
"RTN","VPRDJ0",6,0)
 ; -------------------          -----
"RTN","VPRDJ0",7,0)
 ; ^DPT                         10035  <see VPRDJ0* for others>
"RTN","VPRDJ0",8,0)
 ;
"RTN","VPRDJ0",9,0)
 ; All tags expect DFN, VPRSTART, VPRSTOP, VPRMAX, VPRID, VPRTEXT
"RTN","VPRDJ0",10,0)
 ;
"RTN","VPRDJ0",11,0)
PATIENT ; -- Patient Registration
"RTN","VPRDJ0",12,0)
 D DPT1^VPRDJ00
"RTN","VPRDJ0",13,0)
 Q
"RTN","VPRDJ0",14,0)
 ;
"RTN","VPRDJ0",15,0)
PROBLEM ; -- Problem List
"RTN","VPRDJ0",16,0)
 I $G(VPRID) D GMPL1^VPRDJ02(VPRID) Q
"RTN","VPRDJ0",17,0)
 N ID,VPRSTS,VPRPROB,VPRN,X
"RTN","VPRDJ0",18,0)
 S VPRSTS=$G(FILTER("status")) ;default = all problems
"RTN","VPRDJ0",19,0)
 D LIST^GMPLUTL2(.VPRPROB,DFN,VPRSTS)
"RTN","VPRDJ0",20,0)
 S VPRN=0 F  S VPRN=$O(VPRPROB(VPRN)) Q:(VPRN<1)!(VPRI'<VPRMAX)  D
"RTN","VPRDJ0",21,0)
 . S X=$P(VPRPROB(VPRN),U,6) I X,(X<VPRSTART)!(X>VPRSTOP) Q  ;last updated
"RTN","VPRDJ0",22,0)
 . S ID=+VPRPROB(VPRN) D GMPL1^VPRDJ02(ID)
"RTN","VPRDJ0",23,0)
 Q
"RTN","VPRDJ0",24,0)
 ;
"RTN","VPRDJ0",25,0)
ALLERGY ; -- Allergies/Adverse Reactions
"RTN","VPRDJ0",26,0)
 N GMRAL,ID D EN1^GMRADPT
"RTN","VPRDJ0",27,0)
 I 'GMRAL Q  ;D NKA^VPRDJ02 Q
"RTN","VPRDJ0",28,0)
 I $G(VPRID) D GMRA1^VPRDJ02(VPRID) Q
"RTN","VPRDJ0",29,0)
 S ID=0 F  S ID=+$O(GMRAL(ID)) Q:ID<1  D GMRA1^VPRDJ02(ID) Q:VPRI'<VPRMAX
"RTN","VPRDJ0",30,0)
 Q
"RTN","VPRDJ0",31,0)
 ;
"RTN","VPRDJ0",32,0)
CONSULT ; -- Consult/Request Tracking
"RTN","VPRDJ0",33,0)
 N VPRN,VPRX,ID
"RTN","VPRDJ0",34,0)
 D OER^GMRCSLM1(DFN,"",VPRSTART,VPRSTOP,"")
"RTN","VPRDJ0",35,0)
 S VPRN=0 F  S VPRN=$O(^TMP("GMRCR",$J,"CS",VPRN)) Q:VPRN<1!(VPRN>VPRMAX)  S VPRX=$G(^(VPRN,0)) Q:$E(VPRX)="<"  D
"RTN","VPRDJ0",36,0)
 . I $G(VPRID),VPRID'=+VPRX Q
"RTN","VPRDJ0",37,0)
 . D GMRC1^VPRDJ03(+VPRX)
"RTN","VPRDJ0",38,0)
 K ^TMP("GMRCR",$J,"CS")
"RTN","VPRDJ0",39,0)
 Q
"RTN","VPRDJ0",40,0)
 ;
"RTN","VPRDJ0",41,0)
VITAL ; -- GMR Vital Measurements
"RTN","VPRDJ0",42,0)
 I $L($G(VPRID)) D GMV1^VPRDJ02(VPRID) Q
"RTN","VPRDJ0",43,0)
 N GMRVSTR,VPRIDT,VPRTYP,ID
"RTN","VPRDJ0",44,0)
 S GMRVSTR="BP;T;R;P;HT;WT;CVP;CG;PO2;PN"
"RTN","VPRDJ0",45,0)
 S GMRVSTR(0)=VPRSTART_U_VPRSTOP_U_VPRMAX_"^1"
"RTN","VPRDJ0",46,0)
 D EN1^GMRVUT0
"RTN","VPRDJ0",47,0)
 S VPRIDT=0 F  S VPRIDT=$O(^UTILITY($J,"GMRVD",VPRIDT)) Q:VPRIDT<1  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",48,0)
 . S VPRTYP="" F  S VPRTYP=$O(^UTILITY($J,"GMRVD",VPRIDT,VPRTYP)) Q:VPRTYP=""  D
"RTN","VPRDJ0",49,0)
 .. S ID=$O(^UTILITY($J,"GMRVD",VPRIDT,VPRTYP,0)) D GMV1^VPRDJ02(ID)
"RTN","VPRDJ0",50,0)
 K ^UTILITY($J,"GMRVD")
"RTN","VPRDJ0",51,0)
 Q
"RTN","VPRDJ0",52,0)
 ;
"RTN","VPRDJ0",53,0)
CHEM D CH^VPRDJ06X Q
"RTN","VPRDJ0",54,0)
LAB ; -- Lab Results
"RTN","VPRDJ0",55,0)
 N LRDFN,LRID,VPRSUB,VPRIDT,VPRN,VPRP,VPRACC,BEG,END,SUB,ORPK,ID,X
"RTN","VPRDJ0",56,0)
 S LRDFN=$G(^DPT(DFN,"LR")),VPRSUB=$G(FILTER("category"))
"RTN","VPRDJ0",57,0)
 S BEG=VPRSTART,END=VPRSTOP,LRID=$G(VPRID),ORPK=""
"RTN","VPRDJ0",58,0)
 I $L(LRID) D  ;reset for LR7OR1
"RTN","VPRDJ0",59,0)
 . I LRID S ORPK=LRID,LRID=$P(LRID,";",4,99) Q:LRID=""  ;order
"RTN","VPRDJ0",60,0)
 . S VPRSUB=$P(LRID,";"),VPRIDT=+$P(LRID,";",2)
"RTN","VPRDJ0",61,0)
 . S:VPRIDT (BEG,END)=9999999-VPRIDT
"RTN","VPRDJ0",62,0)
 S SUB=VPRSUB I $L(SUB),"CH^MI"'[SUB S SUB="AP"
"RTN","VPRDJ0",63,0)
 D RR^LR7OR1(DFN,ORPK,BEG,END,SUB,,,VPRMAX)
"RTN","VPRDJ0",64,0)
 S VPRSUB="" F  S VPRSUB=$O(^TMP("LRRR",$J,DFN,VPRSUB)) Q:VPRSUB=""  D
"RTN","VPRDJ0",65,0)
 . S VPRIDT=0 F  S VPRIDT=$O(^TMP("LRRR",$J,DFN,VPRSUB,VPRIDT)) Q:VPRIDT<1  I $O(^(VPRIDT,0)) D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",66,0)
 .. I VPRSUB="MI"  S ID=VPRSUB_";"_VPRIDT D MI^VPRDJ06 Q
"RTN","VPRDJ0",67,0)
 .. I VPRSUB'="CH" S ID=VPRSUB_";"_VPRIDT D AP^VPRDJ06 Q
"RTN","VPRDJ0",68,0)
 .. D ACC^VPRDJ06 ;get chem accession data
"RTN","VPRDJ0",69,0)
 .. S VPRP=0 F  S VPRP=$O(^TMP("LRRR",$J,DFN,VPRSUB,VPRIDT,VPRP)) Q:VPRP<1  S X=+$G(^(VPRP)) D
"RTN","VPRDJ0",70,0)
 ... S VPRN=$$LRDN^LRPXAPIU(X) I $L(LRID,";")>2,VPRN'=$P(LRID,";",3) Q
"RTN","VPRDJ0",71,0)
 ... S ID=VPRSUB_";"_VPRIDT_";"_VPRN D CH1^VPRDJ06
"RTN","VPRDJ0",72,0)
 K ^TMP("LRRR",$J),^TMP("LRX",$J)
"RTN","VPRDJ0",73,0)
 Q
"RTN","VPRDJ0",74,0)
 ;
"RTN","VPRDJ0",75,0)
PROCEDUR ; -- Clinical Procedures
"RTN","VPRDJ0",76,0)
 N VPRN,VPRX,BEG,END,ID
"RTN","VPRDJ0",77,0)
 S BEG=VPRSTART,END=VPRSTOP
"RTN","VPRDJ0",78,0)
 I $G(VPRID) D  ;reset dates for VPRID only
"RTN","VPRDJ0",79,0)
 . N VPRMC,IEN,FILE,X
"RTN","VPRDJ0",80,0)
 . S IEN=+VPRID,FILE=+$P(VPRID,"(",2)  Q:FILE=702  Q:'FILE
"RTN","VPRDJ0",81,0)
 . D MEDLKUP^MCARUTL3(.VPRMC,FILE,IEN)
"RTN","VPRDJ0",82,0)
 . S X=$P(VPRMC,U,6) S:X (BEG,END)=X
"RTN","VPRDJ0",83,0)
 D MDPS1^VPRDJ03(DFN,BEG,END,VPRMAX)    ;gets ^TMP("MDHSP",$J)
"RTN","VPRDJ0",84,0)
 S VPRN=0 F  S VPRN=$O(^TMP("MDHSP",$J,VPRN)) Q:VPRN<1  S VPRX=$G(^(VPRN)) D
"RTN","VPRDJ0",85,0)
 . I $G(VPRID),+VPRID'=+$P(VPRX,U,2) Q  ;update 1 procedure
"RTN","VPRDJ0",86,0)
 . D MC1^VPRDJ03($G(VPRID))             ;uses VPRX
"RTN","VPRDJ0",87,0)
 K ^TMP("MDHSP",$J)
"RTN","VPRDJ0",88,0)
 Q
"RTN","VPRDJ0",89,0)
 ;
"RTN","VPRDJ0",90,0)
OBS ; -- Clinical Observations (CLiO)
"RTN","VPRDJ0",91,0)
 N VPRCLIO,VPRN,ID,X
"RTN","VPRDJ0",92,0)
 I $L($G(VPRID)) D MDC1^VPRDJ03(VPRID) Q
"RTN","VPRDJ0",93,0)
 D QRYPT^VPRDMDC("VPRCLIO",DFN,VPRSTART,VPRSTOP) ;all [verified] observations
"RTN","VPRDJ0",94,0)
 S VPRN=0 F  S VPRN=$O(VPRCLIO(VPRN)) Q:(VPRN<1)!(VPRI'<VPRMAX)  D
"RTN","VPRDJ0",95,0)
 . S ID=$G(VPRCLIO(VPRN)) ;GUID
"RTN","VPRDJ0",96,0)
 . D MDC1^VPRDJ03(ID)
"RTN","VPRDJ0",97,0)
 Q
"RTN","VPRDJ0",98,0)
 ;
"RTN","VPRDJ0",99,0)
ORDER ; -- Order Entry
"RTN","VPRDJ0",100,0)
 N ORLIST,VPRN,DAD,ID,X,X3,X4
"RTN","VPRDJ0",101,0)
 I $G(VPRID) S ORLIST=$H D OR1^VPRDJ01(VPRID) G ORQ
"RTN","VPRDJ0",102,0)
 D EN^ORQ1(DFN_";DPT(",,6,,VPRSTART,VPRSTOP,,,,1)
"RTN","VPRDJ0",103,0)
 S VPRN=0 F  S VPRN=$O(^TMP("ORR",$J,ORLIST,VPRN)) Q:VPRN<1  S ID=$G(^(VPRN)) D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",104,0)
 . Q:$D(^TMP("ORGOTIT",$J,+ID))  Q:$P(ID,";",2)>1  S ID=+ID    ;actions
"RTN","VPRDJ0",105,0)
 . S X3=$G(^OR(100,ID,3)),X4=$G(^(4))
"RTN","VPRDJ0",106,0)
 . Q:$P(X3,U,3)=13  I X4["P",$P(X3,U,3)=1!($P(X3,U,3)=12) Q  ;cancelled
"RTN","VPRDJ0",107,0)
 . S DAD=+$P(X3,U,9) I DAD D:'$D(^TMP("ORGOTIT",$J,DAD)) OR1^VPRDJ01(DAD) Q
"RTN","VPRDJ0",108,0)
 . D OR1^VPRDJ01(ID)
"RTN","VPRDJ0",109,0)
ORQ ; end
"RTN","VPRDJ0",110,0)
 K ^TMP("ORR",$J),^TMP("ORGOTIT",$J)
"RTN","VPRDJ0",111,0)
 Q
"RTN","VPRDJ0",112,0)
 ;
"RTN","VPRDJ0",113,0)
TREATMEN ; -- Nursing Treatments (orders)
"RTN","VPRDJ0",114,0)
 N ORLIST,ORDG,VPRN,ID,X,X3,X4
"RTN","VPRDJ0",115,0)
 I $G(VPRID) S ORLIST=$H D NTX1^VPRDJ01(VPRID) G TXQ
"RTN","VPRDJ0",116,0)
 S ORDG=+$O(^ORD(100.98,"B","NTX",0))
"RTN","VPRDJ0",117,0)
 D EN^ORQ1(DFN_";DPT(",ORDG,6,,VPRSTART,VPRSTOP,,,,1)
"RTN","VPRDJ0",118,0)
 S VPRN=0 F  S VPRN=$O(^TMP("ORR",$J,ORLIST,VPRN)) Q:VPRN<1  S ID=$G(^(VPRN)) D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",119,0)
 . Q:$D(^TMP("ORGOTIT",$J,+ID))  Q:$P(ID,";",2)>1  S ID=+ID  ;actions
"RTN","VPRDJ0",120,0)
 . S X3=$G(^OR(100,ID,3)),X4=$G(^(4))
"RTN","VPRDJ0",121,0)
 . Q:$P(X3,U,3)=13  I X4["P",$P(X3,U,3)=1!($P(X3,U,3)=12) Q  ;cancelled
"RTN","VPRDJ0",122,0)
 . D NTX1^VPRDJ01(ID)
"RTN","VPRDJ0",123,0)
TXQ ; end
"RTN","VPRDJ0",124,0)
 K ^TMP("ORR",$J),^TMP("ORGOTIT",$J)
"RTN","VPRDJ0",125,0)
 Q
"RTN","VPRDJ0",126,0)
 ;
"RTN","VPRDJ0",127,0)
MED ; -- Pharmacy
"RTN","VPRDJ0",128,0)
 N ORDIALOG I $G(VPRID),$D(^OR(100,+VPRID)) D PS1^VPRDJ05(VPRID) Q       ;get 1 order
"RTN","VPRDJ0",129,0)
 N TYPE,ORDG,ORVP,ORLIST,VPRN,ORLIST,X3,X4,DAD,ID
"RTN","VPRDJ0",130,0)
 S TYPE=$G(FILTER("vaType")) S:$L(TYPE) TYPE=$S(TYPE="N":"NV",TYPE="V":"IV",1:TYPE)_" "
"RTN","VPRDJ0",131,0)
 S ORDG=+$O(^ORD(100.98,"B",TYPE_"RX",0)),ORVP=DFN_";DPT("
"RTN","VPRDJ0",132,0)
 D EN^ORQ1(ORVP,ORDG,6,,VPRSTART,VPRSTOP)
"RTN","VPRDJ0",133,0)
 K ^TMP("VPROR",$J) S VPRN=0
"RTN","VPRDJ0",134,0)
 F  S VPRN=$O(^TMP("ORR",$J,ORLIST,VPRN)) Q:VPRN<1  S ID=$G(^(VPRN)) D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",135,0)
 . Q:$D(^TMP("VPROR",$J,+ID))  Q:$P(ID,";",2)>1  S ID=+ID
"RTN","VPRDJ0",136,0)
 . S X3=$G(^OR(100,ID,3)),X4=$G(^(4))
"RTN","VPRDJ0",137,0)
 . Q:$P(X3,U,3)=13  I X4["P",$P(X3,U,3)=1!($P(X3,U,3)=12) Q  ;cancelled
"RTN","VPRDJ0",138,0)
 . S DAD=$P(X3,U,9) I DAD Q:$D(^TMP("VPROR",$J,DAD))  S ID=DAD
"RTN","VPRDJ0",139,0)
 . D PS1^VPRDJ05(ID) S ^TMP("VPROR",$J,ID)=""
"RTN","VPRDJ0",140,0)
 K ^TMP("VPROR",$J),^TMP("ORR",$J),^TMP("ORGOTIT",$J),^TMP($J,"PSOI")
"RTN","VPRDJ0",141,0)
 Q
"RTN","VPRDJ0",142,0)
 ;
"RTN","VPRDJ0",143,0)
PTF ; -- Patient Treatment File
"RTN","VPRDJ0",144,0)
 N VPRIDT,ID,P,TYPE
"RTN","VPRDJ0",145,0)
 I $G(VPRID),VPRID'=+VPRID D PTFA^VPRDJ04A(VPRID) Q
"RTN","VPRDJ0",146,0)
 I $G(VPRID) D  Q:'$D(^TMP("VPRPX",$J))  ;update via DGPM = ien only
"RTN","VPRDJ0",147,0)
 . N X,Y,I S VPRIDT=9999999              ;so build ^TMP nodes
"RTN","VPRDJ0",148,0)
 . D RPC^DGPTFAPI(.Y,VPRID)
"RTN","VPRDJ0",149,0)
 . S X=$P($G(Y(1)),U,3) I $L(X) S ^TMP("VPRPX",$J,VPRIDT,VPRID_";70;DXLS")=X_U
"RTN","VPRDJ0",150,0)
 . F I=1:1:9 S X=$P($G(Y(2)),U,I) I $L(X) S ^TMP("VPRPX",$J,VPRIDT,VPRID_";70;D SD"_I)=X_U
"RTN","VPRDJ0",151,0)
 D:'$G(VPRID) PTF^VPRDJ09 ;sort ^PXRMINDX into ^TMP("VPRPX",$J,IDT)
"RTN","VPRDJ0",152,0)
 S VPRIDT=0 F  S VPRIDT=$O(^TMP("VPRPX",$J,VPRIDT)) Q:VPRIDT<1  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",153,0)
 . S ID="" F  S ID=$O(^TMP("VPRPX",$J,VPRIDT,ID)) Q:ID=""  D PTF1^VPRDJ04A Q:VPRI'<VPRMAX
"RTN","VPRDJ0",154,0)
 K ^TMP("VPRPX",$J)
"RTN","VPRDJ0",155,0)
 Q
"RTN","VPRDJ0",156,0)
 ;
"RTN","VPRDJ0",157,0)
FACTOR   D PX^VPRDJ09(9000010.23) Q   ; -- PCE Health Factors
"RTN","VPRDJ0",158,0)
IMMUNIZA D PX^VPRDJ09(9000010.11) Q   ; -- PCE Immunizations
"RTN","VPRDJ0",159,0)
EXAM     D PX^VPRDJ09(9000010.13) Q   ; -- PCE Exams
"RTN","VPRDJ0",160,0)
CPT      D PX^VPRDJ09(9000010.18) Q   ; -- PCE CPT
"RTN","VPRDJ0",161,0)
EDUCATIO D PX^VPRDJ09(9000010.16) Q   ; -- PCE Patient Education
"RTN","VPRDJ0",162,0)
POV      D PX^VPRDJ09(9000010.07) Q   ; -- PCE Purpose of Visit (POV)
"RTN","VPRDJ0",163,0)
SKIN     D PX^VPRDJ09(9000010.12) Q   ; -- PCE Skin Tests
"RTN","VPRDJ0",164,0)
 ;
"RTN","VPRDJ0",165,0)
IMAGE ; -- Radiology/Nuclear Medicine
"RTN","VPRDJ0",166,0)
 D EN1^RAO7PC1(DFN,VPRSTART,VPRSTOP,VPRMAX_"P")
"RTN","VPRDJ0",167,0)
 I $G(VPRID) D RA1^VPRDJ07(VPRID) G IMQ
"RTN","VPRDJ0",168,0)
 N ID S ID=""
"RTN","VPRDJ0",169,0)
 F  S ID=$O(^TMP($J,"RAE1",DFN,ID)) Q:ID=""  D RA1^VPRDJ07(ID)  Q:VPRI'<+VPRMAX
"RTN","VPRDJ0",170,0)
IMQ ; end
"RTN","VPRDJ0",171,0)
 K ^TMP($J,"RAE1")
"RTN","VPRDJ0",172,0)
 Q
"RTN","VPRDJ0",173,0)
 ;
"RTN","VPRDJ0",174,0)
APPOINTM ; -- Scheduling/Appointment Mgt
"RTN","VPRDJ0",175,0)
 N VPRX,VPRNUM,VPRDT,X,VPRA,ID
"RTN","VPRDJ0",176,0)
 S VPRX(1)=VPRSTART_";"_VPRSTOP,VPRX(4)=DFN,ID=$G(VPRID)
"RTN","VPRDJ0",177,0)
 S VPRX("FLDS")="1;2;3;6;9;10;11;13",VPRX("SORT")="P"
"RTN","VPRDJ0",178,0)
 I $L(ID) G:$E(ID)="H" DGS^VPRDJ04 D  Q
"RTN","VPRDJ0",179,0)
 . S VPRDT=$P(ID,";",2),VPRX(1)=$P(ID,";",2)_";"_$P(ID,";",2)
"RTN","VPRDJ0",180,0)
 . S VPRX(2)=$P(ID,";",3)
"RTN","VPRDJ0",181,0)
 . S VPRNUM=$$SDAPI^SDAMA301(.VPRX)
"RTN","VPRDJ0",182,0)
 . D:VPRNUM>0 SDAM1^VPRDJ04
"RTN","VPRDJ0",183,0)
 . K ^TMP($J,"SDAMA301",DFN)
"RTN","VPRDJ0",184,0)
 ; appointments
"RTN","VPRDJ0",185,0)
 S VPRX(3)="R;I;NS;NSR;NT" ;no cancelled appt's
"RTN","VPRDJ0",186,0)
 S VPRNUM=$$SDAPI^SDAMA301(.VPRX),VPRDT=0
"RTN","VPRDJ0",187,0)
 F  S VPRDT=$O(^TMP($J,"SDAMA301",DFN,VPRDT)) Q:VPRDT<1  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",188,0)
 . S X=$P($G(^TMP($J,"SDAMA301",DFN,VPRDT)),U,3)
"RTN","VPRDJ0",189,0)
 . ;I VPRDT<DT,$P(X,";")'["NS" Q   ;no prior kept appt's
"RTN","VPRDJ0",190,0)
 . D SDAM1^VPRDJ04
"RTN","VPRDJ0",191,0)
 K ^TMP($J,"SDAMA301",DFN)
"RTN","VPRDJ0",192,0)
 Q
"RTN","VPRDJ0",193,0)
 ;
"RTN","VPRDJ0",194,0)
SURGERY ; -- Surgery
"RTN","VPRDJ0",195,0)
 I $G(VPRID) D SR1^VPRDJ07(VPRID) Q
"RTN","VPRDJ0",196,0)
 Q:'$L($T(LIST^SROESTV))
"RTN","VPRDJ0",197,0)
 N SHOWADD S SHOWADD=1 ;to omit leading '+' with note titles
"RTN","VPRDJ0",198,0)
 N VPRN,VPRY,ID D LIST^SROESTV(.VPRY,DFN,VPRSTART,VPRSTOP,VPRMAX,1)
"RTN","VPRDJ0",199,0)
 S VPRN=0 F  S VPRN=$O(@VPRY@(VPRN)) Q:VPRN<1  D
"RTN","VPRDJ0",200,0)
 . S ID=+$G(@VPRY@(VPRN)) D:ID SR1^VPRDJ07(ID)
"RTN","VPRDJ0",201,0)
 K @VPRY
"RTN","VPRDJ0",202,0)
 Q
"RTN","VPRDJ0",203,0)
 ;
"RTN","VPRDJ0",204,0)
DOCUMENT ; -- Text Integration Utilities
"RTN","VPRDJ0",205,0)
 N VPRC,CLS,VPRS,CTXT,VPRY,VPRN,VPRX,ID
"RTN","VPRDJ0",206,0)
 I $L($G(VPRID)) D TIU1^VPRDJ08(VPRID) Q
"RTN","VPRDJ0",207,0)
 N CLASS,SUBCLASS,STATUS
"RTN","VPRDJ0",208,0)
 D SETUP^VPRDJ08 ;define search criteria
"RTN","VPRDJ0",209,0)
 F VPRC=1:1:$L(CLASS,U) S CLS=$P(CLASS,U,VPRC) D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",210,0)
 . I CLS="CP" D CP^VPRDJ08A(DFN,VPRSTART,VPRSTOP,VPRMAX) Q
"RTN","VPRDJ0",211,0)
 . I CLS="RA" D RA^VPRDJ08A(DFN,VPRSTART,VPRSTOP,VPRMAX) Q
"RTN","VPRDJ0",212,0)
 . I CLS="LR" D LR^VPRDJ08A(DFN,VPRSTART,VPRSTOP,VPRMAX) Q
"RTN","VPRDJ0",213,0)
 . ; TIU document classes, by sig status
"RTN","VPRDJ0",214,0)
 . F VPRS=1:1:$L(STATUS,U) S CTXT=$P(STATUS,U,VPRS) D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",215,0)
 .. I $L($T(GET^TIUVPR)) D GET^TIUVPR(.VPRY,DFN,CLS,VPRSTART,VPRSTOP) I 1
"RTN","VPRDJ0",216,0)
 .. E  D CONTEXT^TIUSRVLO(.VPRY,CLS,CTXT,DFN,VPRSTART,VPRSTOP,,VPRMAX,,1)
"RTN","VPRDJ0",217,0)
 .. S VPRN=0 F  S VPRN=$O(@VPRY@(VPRN)) Q:VPRN<1  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",218,0)
 ... S VPRX=$G(@VPRY@(VPRN)) ;Q:'$$MATCH^VPRDJ08(VPRX,CTXT)
"RTN","VPRDJ0",219,0)
 ... Q:$D(^TMP("VPRD",$J,+VPRX))  ;already included
"RTN","VPRDJ0",220,0)
 ... D EN1^VPRDJ08(VPRX,CLS)
"RTN","VPRDJ0",221,0)
 .. K @VPRY
"RTN","VPRDJ0",222,0)
 Q
"RTN","VPRDJ0",223,0)
 ;
"RTN","VPRDJ0",224,0)
VISIT ; -- Visits
"RTN","VPRDJ0",225,0)
 I $L($G(VPRID)) D VSIT1^VPRDJ04(VPRID) Q
"RTN","VPRDJ0",226,0)
 N VPRIDT,BEG,END,ID
"RTN","VPRDJ0",227,0)
 N VPRADMIT S VPRADMIT=+$G(^DPT(DFN,.105)) ;current admission
"RTN","VPRDJ0",228,0)
 S BEG=VPRSTART,END=VPRSTOP D IDT^VPRDVSIT ;invert dates
"RTN","VPRDJ0",229,0)
 S VPRIDT=BEG F  S VPRIDT=$O(^AUPNVSIT("AA",DFN,VPRIDT)) Q:VPRIDT<1!(VPRIDT>END)  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",230,0)
 . S ID=0 F  S ID=$O(^AUPNVSIT("AA",DFN,VPRIDT,ID)) Q:ID<1  D VSIT1^VPRDJ04(ID)
"RTN","VPRDJ0",231,0)
 ; kill VPRADMIT in VSIT1 if adm is included, but add unless filtered
"RTN","VPRDJ0",232,0)
 I $G(VPRADMIT),VPRMAX'<9999,VPRSTART'>1410102 D VSIT1^VPRDJ04("H"_VPRADMIT)
"RTN","VPRDJ0",233,0)
 Q
"RTN","VPRDJ0",234,0)
 ;I VPRSTOP,VPRSTOP'["." S END=VPRSTOP_".24" ;assume end of day
"RTN","VPRDJ0",235,0)
 ;S VPRDT=END F  S VPRDT=$O(^AUPNVSIT("AET",DFN,VPRDT),-1)  Q:VPRDT<VPRSTART  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ0",236,0)
 ;. S VPRLOC=0 F  S VPRLOC=$O(^AUPNVSIT("AET",DFN,VPRDT,VPRLOC)) Q:VPRLOC<1  D
"RTN","VPRDJ0",237,0)
 ;.. S ID=0 F  S ID=$O(^AUPNVSIT("AET",DFN,VPRDT,VPRLOC,"P",ID)) Q:ID<1  D VSIT1^VPRDJ04(ID)
"RTN","VPRDJ0",238,0)
 ;
"RTN","VPRDJ0",239,0)
VPR ; -- VPR Patient Objects
"RTN","VPRDJ0",240,0)
 D VPR^VPRDJ02($G(TYPE))
"RTN","VPRDJ0",241,0)
 Q
"RTN","VPRDJ0",242,0)
 ;
"RTN","VPRDJ0",243,0)
MH ; -- Mental Health
"RTN","VPRDJ0",244,0)
 I $L($T(MH^VPRDJ09M)) D MH^VPRDJ09M
"RTN","VPRDJ0",245,0)
 Q
"RTN","VPRDJ0",246,0)
 ;
"RTN","VPRDJ0",247,0)
ERRQ ; -- Quit for error handling
"RTN","VPRDJ0",248,0)
 Q
"RTN","VPRDJ00")
0^70^B82191194
"RTN","VPRDJ00",1,0)
VPRDJ00 ;SLC/MKB -- Patient demographics ;8/11/11  15:29
"RTN","VPRDJ00",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ00",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ00",4,0)
 ;
"RTN","VPRDJ00",5,0)
 ; External References          DBIA#
"RTN","VPRDJ00",6,0)
 ; -------------------          -----
"RTN","VPRDJ00",7,0)
 ; ^AUPNVSIT                     2028
"RTN","VPRDJ00",8,0)
 ; ^DPT                         10035
"RTN","VPRDJ00",9,0)
 ; DGCV                          4156
"RTN","VPRDJ00",10,0)
 ; DGMSTAPI                      2716
"RTN","VPRDJ00",11,0)
 ; DGNTAPI                       3457
"RTN","VPRDJ00",12,0)
 ; DGPFAPI                       3860
"RTN","VPRDJ00",13,0)
 ; DGRPDB                        4807
"RTN","VPRDJ00",14,0)
 ; DIQ                           2056
"RTN","VPRDJ00",15,0)
 ; MPIF001                       2701
"RTN","VPRDJ00",16,0)
 ; SDUTL3                        1252
"RTN","VPRDJ00",17,0)
 ; VADPT                        10061
"RTN","VPRDJ00",18,0)
 ; VAFCTFU1                      2990
"RTN","VPRDJ00",19,0)
 ; VASITE                       10112
"RTN","VPRDJ00",20,0)
 ; XUAF4                         2171
"RTN","VPRDJ00",21,0)
 ;
"RTN","VPRDJ00",22,0)
 ; All tags expect DFN, VPRID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ00",23,0)
 ;
"RTN","VPRDJ00",24,0)
DPT1OD(PAT) ;
"RTN","VPRDJ00",25,0)
 N SYS S SYS=$$SITE^VASITE
"RTN","VPRDJ00",26,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ00",27,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ00",28,0)
 S ERRMSG="A problem occurred building the patient "_DFN_" demographic extract."
"RTN","VPRDJ00",29,0)
 D DEM,SVC,PRF,ATC,SUPP,ALIAS,FAC,PC
"RTN","VPRDJ00",30,0)
 Q
"RTN","VPRDJ00",31,0)
 ;
"RTN","VPRDJ00",32,0)
DPT1 ; -- Demographics [VPRSTART,VPRSTOP,VPRMAX,VPRID not currently used here]
"RTN","VPRDJ00",33,0)
 N PAT,SYS S SYS=$$SITE^VASITE
"RTN","VPRDJ00",34,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ00",35,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ00",36,0)
 S ERRMSG="A problem occurred building the patient "_DFN_" demographic extract."
"RTN","VPRDJ00",37,0)
 D DEM,SVC,PRF,ATC,SUPP,ALIAS,FAC,PC
"RTN","VPRDJ00",38,0)
 I $D(PAT)>9 D ADD^VPRDJ("PAT")
"RTN","VPRDJ00",39,0)
 Q
"RTN","VPRDJ00",40,0)
 ;
"RTN","VPRDJ00",41,0)
LKUP ; patient lookup data
"RTN","VPRDJ00",42,0)
 ; expects VPRSYS,DFN
"RTN","VPRDJ00",43,0)
 N X,X0
"RTN","VPRDJ00",44,0)
 S X0=^DPT(DFN,0),X=$P(X0,U)
"RTN","VPRDJ00",45,0)
 S PAT("fullName")=X
"RTN","VPRDJ00",46,0)
 S PAT("familyName")=$P(X,",")
"RTN","VPRDJ00",47,0)
 S PAT("givenNames")=$P(X,",",2,99)
"RTN","VPRDJ00",48,0)
 S X=$P(X0,U,2)
"RTN","VPRDJ00",49,0)
 S PAT("genderCode")="urn:va:pat-gender:"_X
"RTN","VPRDJ00",50,0)
 S PAT("genderName")=$$NAME(X,"gender")
"RTN","VPRDJ00",51,0)
 S PAT("localId")=DFN
"RTN","VPRDJ00",52,0)
 S PAT("pid")=VPRSYS_";"_DFN
"RTN","VPRDJ00",53,0)
 S PAT("uid")=$$SETUID^VPRUTILS("pt-select",DFN,DFN)
"RTN","VPRDJ00",54,0)
 S X=$$GETICN^MPIF001(DFN)
"RTN","VPRDJ00",55,0)
 S:X>0 PAT("icn")=X
"RTN","VPRDJ00",56,0)
 S PAT("ssn")=$P(X0,U,9)
"RTN","VPRDJ00",57,0)
 S PAT("dateOfBirth")=$$JSONDT^VPRUTILS($P(X0,U,3))
"RTN","VPRDJ00",58,0)
 S PAT("sensitive")=$$BOOL($$SCREEN^DPTLK1(DFN))
"RTN","VPRDJ00",59,0)
 S X=$P($G(^DPT(DFN,.35)),U)
"RTN","VPRDJ00",60,0)
 S:X PAT("died")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ00",61,0)
 I $D(PAT)>9 D ADD^VPRDJ("PAT")
"RTN","VPRDJ00",62,0)
 Q
"RTN","VPRDJ00",63,0)
DEM ;-demographic data
"RTN","VPRDJ00",64,0)
 N VADM,VA,VAERR,X
"RTN","VPRDJ00",65,0)
 S X=$$GETICN^MPIF001(DFN) S:X>1 PAT("icn")=X
"RTN","VPRDJ00",66,0)
 D DEM^VADPT S X=VADM(1),PAT("fullName")=X
"RTN","VPRDJ00",67,0)
 S PAT("familyName")=$P(X,","),PAT("givenNames")=$P(X,",",2,99)
"RTN","VPRDJ00",68,0)
 S PAT("ssn")=$P(VADM(2),U),PAT("localId")=DFN
"RTN","VPRDJ00",69,0)
 S PAT("uid")=$$SETUID^VPRUTILS("patient",DFN,DFN)
"RTN","VPRDJ00",70,0)
 S:$D(VA("BID")) PAT("briefId")=$E(X)_VA("BID")
"RTN","VPRDJ00",71,0)
 S X=+$P($P(VADM(3),U),"."),PAT("dateOfBirth")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ00",72,0)
 S X=$P(VADM(5),U),PAT("genderCode")="urn:va:pat-gender:"_X,PAT("genderName")=$$NAME(X,"gender")
"RTN","VPRDJ00",73,0)
 S X=+$P($P(VADM(6),U),".") S:X PAT("died")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ00",74,0)
 S X=$$GET1^DIQ(38.1,DFN_",",2,"I") S:$L(X) PAT("sensitive")=$$BOOL(X)
"RTN","VPRDJ00",75,0)
 S X=+VADM(9) S:X PAT("religionCode")="urn:va:pat-religion:"_X,PAT("religionName")=$$NAME(X,"religion")
"RTN","VPRDJ00",76,0)
 S X=$P(VADM(10),U,2) I $L(X) D  ;PAT("maritalStatus")=$E(X)
"RTN","VPRDJ00",77,0)
 . S X=$E(X),X=$S(X="S":"L",X="N":"S",1:X)
"RTN","VPRDJ00",78,0)
 . S PAT("maritalStatuses",1,"code")="urn:va:pat-maritalStatus:"_X
"RTN","VPRDJ00",79,0)
 . S PAT("maritalStatuses",1,"name")=$$NAME(X,"maritalStatus")
"RTN","VPRDJ00",80,0)
 I VADM(11) D
"RTN","VPRDJ00",81,0)
 . N I S I=0
"RTN","VPRDJ00",82,0)
 . F  S I=$O(VADM(11,I)) Q:I<1  S X=+VADM(11,I),PAT("ethnicities",X,"ethnicity")=$$GET1^DIQ(2.06,X_","_DFN_",",".01:3")
"RTN","VPRDJ00",83,0)
 I VADM(12) D
"RTN","VPRDJ00",84,0)
 . N I S I=0
"RTN","VPRDJ00",85,0)
 . F  S I=$O(VADM(12,I)) Q:I<1  S X=+VADM(12,I),PAT("races",X,"race")=$$GET1^DIQ(2.02,X_","_DFN_",",".01:3")
"RTN","VPRDJ00",86,0)
 Q
"RTN","VPRDJ00",87,0)
SVC ;-service data
"RTN","VPRDJ00",88,0)
 N VAEL,VASV,VAERR,X,Y,I,P,AO,IR,PGF,HNC,MST,CV,VPRSC
"RTN","VPRDJ00",89,0)
 D 7^VADPT
"RTN","VPRDJ00",90,0)
 ; PAT("veteran")=VAEL(4)
"RTN","VPRDJ00",91,0)
 S PAT("veteran","serviceConnected")=$$BOOL(+VAEL(3)) I VAEL(3) D
"RTN","VPRDJ00",92,0)
 . S PAT("veteran","serviceConnectionPercent")=+$P(VAEL(3),U,2)
"RTN","VPRDJ00",93,0)
 . D GETS^DIQ(2,DFN_",",".3731*",,"VPRSC")
"RTN","VPRDJ00",94,0)
 . S I="" F  S I=$O(VPRSC(2.05,I)) Q:I=""  D
"RTN","VPRDJ00",95,0)
 .. S PAT("veteran","scConditions",+I,"name")=VPRSC(2.05,I,.01)
"RTN","VPRDJ00",96,0)
 .. S PAT("veteran","scConditions",+I,"scPercent")=VPRSC(2.05,I,.02)
"RTN","VPRDJ00",97,0)
 S X=+$G(^DPT(DFN,"LR")) S:X PAT("veteran","lrdfn")=X
"RTN","VPRDJ00",98,0)
 ;
"RTN","VPRDJ00",99,0)
 ; exposures
"RTN","VPRDJ00",100,0)
 S AO=VASV(2),IR=VASV(3)
"RTN","VPRDJ00",101,0)
 S PGF=VASV(11)!VASV(12)!VASV(13) ;OIF/OEF
"RTN","VPRDJ00",102,0)
 S X=$$GETCUR^DGNTAPI(DFN,"HNC"),X=+($G(HNC("STAT")))
"RTN","VPRDJ00",103,0)
 S HNC=$S(X=4:1,X=5:1,X=1:0,X=6:0,1:"")
"RTN","VPRDJ00",104,0)
 S X=$P($$GETSTAT^DGMSTAPI(DFN),U,2),MST=$S(X="Y":1,X="N":0,1:"")
"RTN","VPRDJ00",105,0)
 S X=$$CVEDT^DGCV(DFN),CV=$S(+X<0:"",+X=0:0,$P(X,U,3):1,1:0)
"RTN","VPRDJ00",106,0)
 S X=AO_U_IR_U_PGF_U_HNC_U_MST_U_CV
"RTN","VPRDJ00",107,0)
 F P=1:1:6 S I=$P(X,U,P),$P(X,U,P)=$S(I:"Yes",I=0:"No",1:"Unknown")
"RTN","VPRDJ00",108,0)
 S NM="agent-orange^ionizing-radiation^sw-asia^head-neck-cancer^mst^combat-vet"
"RTN","VPRDJ00",109,0)
 F P=1:1:6 S PAT("exposures",P,"uid")="urn:va:"_$P(NM,U,P)_":"_$E($P(X,U,P)),PAT("exposures",P,"name")=$P(X,U,P)
"RTN","VPRDJ00",110,0)
 ;
"RTN","VPRDJ00",111,0)
 ; rated disabilities [DGRPDB]
"RTN","VPRDJ00",112,0)
 N VPRDIS,DIS,NM,DX
"RTN","VPRDJ00",113,0)
 D RDIS^DGRPDB(DFN,.VPRDIS)
"RTN","VPRDJ00",114,0)
 S I=0 F  S I=$O(VPRDIS(I)) Q:I<1  D
"RTN","VPRDJ00",115,0)
 . S DIS=VPRDIS(I)
"RTN","VPRDJ00",116,0)
 . S NM=$$GET1^DIQ(31,+DIS_",",.01),DX=$$GET1^DIQ(31,+DIS_",",2)
"RTN","VPRDJ00",117,0)
 . S PAT("disabilities",+DX,"name")=NM
"RTN","VPRDJ00",118,0)
 . S PAT("disabilities",+DX,"disPercent")=$P(DIS,U,2)
"RTN","VPRDJ00",119,0)
 . S PAT("disabilities",+DX,"serviceConnected")=$$BOOL($P(DIS,U,3))
"RTN","VPRDJ00",120,0)
 Q
"RTN","VPRDJ00",121,0)
PRF ;-patient record flags
"RTN","VPRDJ00",122,0)
 N VPRPF,I,NAME,TEXT
"RTN","VPRDJ00",123,0)
 Q:'$$GETACT^DGPFAPI(DFN,"VPRPF")
"RTN","VPRDJ00",124,0)
 S I=0 F  S I=$O(VPRPF(I)) Q:I<1  D
"RTN","VPRDJ00",125,0)
 . S NAME=$P(VPRPF(I,"FLAG"),U,2)
"RTN","VPRDJ00",126,0)
 . M TEXT=VPRPF(I,"NARR")
"RTN","VPRDJ00",127,0)
 . S PAT("flags",I,"name")=NAME
"RTN","VPRDJ00",128,0)
 . S PAT("flags",I,"text")=$$STRING^VPRD(.TEXT)
"RTN","VPRDJ00",129,0)
 Q
"RTN","VPRDJ00",130,0)
ATC ;-address & telecom
"RTN","VPRDJ00",131,0)
 N VAPA,I,X,P,NM
"RTN","VPRDJ00",132,0)
 S VAPA("P")="" D ADD^VADPT ;permanent address
"RTN","VPRDJ00",133,0)
 S:$L(VAPA(1)) PAT("addresses",1,"streetLine1")=VAPA(1)
"RTN","VPRDJ00",134,0)
 S X=VAPA(2) I $L(X),$L(VAPA(3)) S X=X_" "_VAPA(3)
"RTN","VPRDJ00",135,0)
 S:$L(X) PAT("addresses",1,"streetLine2")=X
"RTN","VPRDJ00",136,0)
 S:$L(VAPA(4)) PAT("addresses",1,"city")=VAPA(4)
"RTN","VPRDJ00",137,0)
 S X=$P(VAPA(5),U,2) S:$L(X) PAT("addresses",1,"stateProvince")=X
"RTN","VPRDJ00",138,0)
 S X=$P(VAPA(11),U,2) S:$L(X) PAT("addresses",1,"postalCode")=X
"RTN","VPRDJ00",139,0)
 ; 
"RTN","VPRDJ00",140,0)
 ; X=home^cell^work phones
"RTN","VPRDJ00",141,0)
 S X=$$FORMAT(VAPA(8))_U_$$FORMAT($$GET1^DIQ(2,DFN_",",.134))_U_$$FORMAT($$GET1^DIQ(2,DFN_",",.132))
"RTN","VPRDJ00",142,0)
 S NM="H^MC^WP" F P=1:1:3 I $L($P(X,U,P)) D
"RTN","VPRDJ00",143,0)
 . S I=$P(NM,U,P),PAT("telecoms",P,"usageCode")=I
"RTN","VPRDJ00",144,0)
 . S PAT("telecoms",P,"usageName")=$S(I="WP":"work place",I="MC":"mobile contact",1:"home address")
"RTN","VPRDJ00",145,0)
 . S PAT("telecoms",P,"telecom")=$P(X,U,P)
"RTN","VPRDJ00",146,0)
 Q
"RTN","VPRDJ00",147,0)
SUPP ;-support contacts
"RTN","VPRDJ00",148,0)
 N VAOA,A,I,X,TYPE,S
"RTN","VPRDJ00",149,0)
 S S=0 F A="",1 K VAOA D
"RTN","VPRDJ00",150,0)
 . S:A VAOA("A")=A D OAD^VADPT Q:'$L($G(VAOA(9)))
"RTN","VPRDJ00",151,0)
 . S S=S+1,TYPE=$S(A=1:"ECON^Emergency Contact",1:"NOK^Next of Kin")
"RTN","VPRDJ00",152,0)
 . S PAT("supports",S,"contactTypeCode")="urn:va:pat-contact:"_$P(TYPE,U)
"RTN","VPRDJ00",153,0)
 . S PAT("supports",S,"contactTypeName")=$P(TYPE,U,2)
"RTN","VPRDJ00",154,0)
 . S:$L(VAOA(9)) PAT("supports",S,"name")=VAOA(9)
"RTN","VPRDJ00",155,0)
 . S:$L(VAOA(10)) PAT("supports",S,"relationship")=VAOA(10)
"RTN","VPRDJ00",156,0)
 . S:$L(VAOA(1)) PAT("supports",S,"addresses",1,"streetLine1")=VAOA(1)
"RTN","VPRDJ00",157,0)
 . S X=VAOA(2) I $L(X),$L(VAOA(3)) S X=X_" "_VAOA(3)
"RTN","VPRDJ00",158,0)
 . S:$L(X) PAT("supports",S,"addresses",1,"streetLine2")=X
"RTN","VPRDJ00",159,0)
 . S:$L(VAOA(4)) PAT("supports",S,"addresses",1,"city")=VAOA(4)
"RTN","VPRDJ00",160,0)
 . S X=$P(VAOA(5),U,2) S:$L(X) PAT("supports",S,"addresses",1,"stateProvince")=X
"RTN","VPRDJ00",161,0)
 . S X=$P(VAOA(11),U,2) S:$L(X) PAT("supports",S,"addresses",1,"postalCode")=X
"RTN","VPRDJ00",162,0)
 . S I=$S(A=1:.33011,1:.21011),X=$$FORMAT(VAOA(8))_U_U_$$FORMAT($$GET1^DIQ(2,DFN_",",I))
"RTN","VPRDJ00",163,0)
 . ; X=home^cell^work phones
"RTN","VPRDJ00",164,0)
 . S NM="H^MC^WP" F P=1:1:3 I $L($P(X,U,P)) D
"RTN","VPRDJ00",165,0)
 .. S I=$P(NM,U,P),PAT("supports",S,"telecomList",P,"usageCode")=I
"RTN","VPRDJ00",166,0)
 .. S PAT("supports",S,"telecomList",P,"usageName")=$S(I="WP":"work place",I="MC":"mobile contact",1:"home address")
"RTN","VPRDJ00",167,0)
 .. S PAT("supports",S,"telecomList",P,"telecom")=$P(X,U,P)
"RTN","VPRDJ00",168,0)
 Q
"RTN","VPRDJ00",169,0)
ALIAS ;-other names used
"RTN","VPRDJ00",170,0)
 N I,X
"RTN","VPRDJ00",171,0)
 S I=0 F  S I=$O(^DPT(DFN,.01,I)) Q:I<1  S X=$G(^(I,0)) D
"RTN","VPRDJ00",172,0)
 . S PAT("aliases",I,"fullName")=$P(X,U)
"RTN","VPRDJ00",173,0)
 Q
"RTN","VPRDJ00",174,0)
FAC ;-treating facilities [see FACLIST^ORWCIRN]
"RTN","VPRDJ00",175,0)
 N IFN S DFN=+$G(DFN) Q:DFN<1
"RTN","VPRDJ00",176,0)
 N VPRY,HOME,LAST,I,X,IEN,VASITE
"RTN","VPRDJ00",177,0)
 S X=$$ALL^VASITE ;VASITE(stn#)=stn# for all local
"RTN","VPRDJ00",178,0)
 I $L($T(TFL^VAFCTFU1)) D TFL^VAFCTFU1(.VPRY,DFN)
"RTN","VPRDJ00",179,0)
 S HOME=+$P($G(^DPT(DFN,"MPI")),U,3) ;home facility
"RTN","VPRDJ00",180,0)
 I $P($G(VPRY(1)),U)<0 D  ;not setup
"RTN","VPRDJ00",181,0)
 . S X=$O(^AUPNVSIT("AA",DFN,0)),LAST=$S(X:9999999-$P(X,"."),1:"")
"RTN","VPRDJ00",182,0)
 . S X=$$SITE^VASITE
"RTN","VPRDJ00",183,0)
 . S VPRY(1)=$P(X,U,3)_U_$P(X,U,2)_U_LAST_U_$$GET1^DIQ(4,+X_",",60)
"RTN","VPRDJ00",184,0)
 S I=0 F  S I=$O(VPRY(I)) Q:I<1  D
"RTN","VPRDJ00",185,0)
 . S X=VPRY(I) Q:$P(X,U)=""  ;unknown
"RTN","VPRDJ00",186,0)
 . S IEN=+$$IEN^XUAF4($P(X,U))
"RTN","VPRDJ00",187,0)
 . I +X=776!(+X=200) S $P(X,U,2)="DEPT. OF DEFENSE"
"RTN","VPRDJ00",188,0)
 . S PAT("facilities",I,"code")=$P(X,U)    ;stn#
"RTN","VPRDJ00",189,0)
 . S PAT("facilities",I,"name")=$P(X,U,2)  ;name
"RTN","VPRDJ00",190,0)
 . S:IEN=HOME PAT("facilities",I,"homeSite")="true"
"RTN","VPRDJ00",191,0)
 . S:$L($P(X,U,3)) PAT("facilities",I,"latestDate")=$$JSONDT^VPRUTILS($P($P(X,U,3),"."))
"RTN","VPRDJ00",192,0)
 . I $D(VASITE(+X)) D
"RTN","VPRDJ00",193,0)
 .. S PAT("facilities",I,"localPatientId")=DFN
"RTN","VPRDJ00",194,0)
 .. S PAT("facilities",I,"systemId")=VPRSYS
"RTN","VPRDJ00",195,0)
 Q
"RTN","VPRDJ00",196,0)
PC ;-primary care assignments
"RTN","VPRDJ00",197,0)
 N X S X=$$OUTPTPR^SDUTL3(DFN) I X D
"RTN","VPRDJ00",198,0)
 . S PAT("pcProviderUid")=$$SETUID^VPRUTILS("user",,+X)
"RTN","VPRDJ00",199,0)
 . S PAT("pcProviderName")=$P(X,U,2)
"RTN","VPRDJ00",200,0)
 S X=$$OUTPTTM^SDUTL3(DFN) I X D
"RTN","VPRDJ00",201,0)
 . S PAT("pcTeamUid")=$$SETUID^VPRUTILS("team",,+X)
"RTN","VPRDJ00",202,0)
 . S PAT("pcTeamName")=$$GET1^DIQ(404.51,+X_",",.01)
"RTN","VPRDJ00",203,0)
 Q
"RTN","VPRDJ00",204,0)
 ;
"RTN","VPRDJ00",205,0)
FORMAT(X) ; -- enforce (xxx)xxx-xxxx phone format
"RTN","VPRDJ00",206,0)
 S X=$G(X) I X?1"("3N1")"3N1"-"4N.E Q X
"RTN","VPRDJ00",207,0)
 N P,N,I,Y S P=""
"RTN","VPRDJ00",208,0)
 F I=1:1:$L(X) S N=$E(X,I) I N=+N S P=P_N
"RTN","VPRDJ00",209,0)
 S:$L(P)<10 P=$E("0000000000",1,10-$L(P))_P
"RTN","VPRDJ00",210,0)
 S Y=$S(P:"("_$E(P,1,3)_")"_$E(P,4,6)_"-"_$E(P,7,10),1:"")
"RTN","VPRDJ00",211,0)
 Q Y
"RTN","VPRDJ00",212,0)
 ;
"RTN","VPRDJ00",213,0)
NAME(CODE,SET) ; -- Return expanded name for code set
"RTN","VPRDJ00",214,0)
 N Y S Y="",CODE=$G(CODE)
"RTN","VPRDJ00",215,0)
 I $G(SET)="gender" S Y=$S(CODE="F":"Female",CODE="M":"Male",1:"Unknown")
"RTN","VPRDJ00",216,0)
 I $G(SET)="maritalStatus" S Y=$S(CODE="D":"Divorced",CODE="M":"Married",CODE="W":"Widowed",CODE="L":"Legally Separated",CODE="S":"Never Married",1:"Unknown")
"RTN","VPRDJ00",217,0)
 I $G(SET)="religion" S Y=$$GET1^DIQ(13,CODE_",",.01)
"RTN","VPRDJ00",218,0)
 Q Y
"RTN","VPRDJ00",219,0)
 ;
"RTN","VPRDJ00",220,0)
BOOL(X) ;
"RTN","VPRDJ00",221,0)
 Q $S(X>0:"true",1:"false")
"RTN","VPRDJ01")
0^71^B41209021
"RTN","VPRDJ01",1,0)
VPRDJ01 ;SLC/MKB -- Orders ;6/25/12  16:11
"RTN","VPRDJ01",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ01",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ01",4,0)
 ;
"RTN","VPRDJ01",5,0)
 ; External References          DBIA#
"RTN","VPRDJ01",6,0)
 ; -------------------          -----
"RTN","VPRDJ01",7,0)
 ; ^DPT                         10035
"RTN","VPRDJ01",8,0)
 ; ^OR(100                       5771
"RTN","VPRDJ01",9,0)
 ; ^ORA(102.4                    5769
"RTN","VPRDJ01",10,0)
 ; ^ORD(100.98                    873
"RTN","VPRDJ01",11,0)
 ; ^PXRMINDX                     4290
"RTN","VPRDJ01",12,0)
 ; ^RADPT                        2480
"RTN","VPRDJ01",13,0)
 ; ^SC                          10040
"RTN","VPRDJ01",14,0)
 ; ^VA(200                      10060
"RTN","VPRDJ01",15,0)
 ; DIC                           2051
"RTN","VPRDJ01",16,0)
 ; DIQ                           2056
"RTN","VPRDJ01",17,0)
 ; GMRCGUIB                      2980
"RTN","VPRDJ01",18,0)
 ; LR7OU1                        2955
"RTN","VPRDJ01",19,0)
 ; ORQ1,^TMP("ORR"               3154
"RTN","VPRDJ01",20,0)
 ; ORQ12,^TMP("ORR"              5704
"RTN","VPRDJ01",21,0)
 ; ORX8                          2467
"RTN","VPRDJ01",22,0)
 ; PSS51P1                       4546
"RTN","VPRDJ01",23,0)
 ;
"RTN","VPRDJ01",24,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ01",25,0)
 ;
"RTN","VPRDJ01",26,0)
OR1(ID) ; -- order ID >> ^TMP("ORR",$J,ORLIST,VPRN)
"RTN","VPRDJ01",27,0)
 N ORDER,CHILD,VPRC
"RTN","VPRDJ01",28,0)
 D ORX(ID,.ORDER)
"RTN","VPRDJ01",29,0)
 S VPRC=0 F  S VPRC=$O(^OR(100,ID,2,VPRC)) Q:VPRC<1  D
"RTN","VPRDJ01",30,0)
 . K CHILD D ORX(VPRC,.CHILD)
"RTN","VPRDJ01",31,0)
 . M ORDER("children",VPRC)=CHILD
"RTN","VPRDJ01",32,0)
 D ADD^VPRDJ("ORDER","order")
"RTN","VPRDJ01",33,0)
 Q
"RTN","VPRDJ01",34,0)
ORX(IFN,ORD) ; -- extract order IFN into ORD("attribute")
"RTN","VPRDJ01",35,0)
 N ORLIST,ORLST,X0,X8,LOC,X,I,DA
"RTN","VPRDJ01",36,0)
 S ORLST=$S(+$G(VPRN):VPRN-1,1:0) S:'$D(ORLIST) ORLIST=$H
"RTN","VPRDJ01",37,0)
 D GET^ORQ12(IFN,ORLIST,1)
"RTN","VPRDJ01",38,0)
 S X0=$G(^TMP("ORR",$J,ORLIST,ORLST))
"RTN","VPRDJ01",39,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ01",40,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ01",41,0)
 S ERRMSG="A problem occurred converting record "_IFN_" for the orders domain"
"RTN","VPRDJ01",42,0)
 ;
"RTN","VPRDJ01",43,0)
 S ORD("localId")=IFN,ORD("uid")=$$SETUID^VPRUTILS("order",DFN,IFN)
"RTN","VPRDJ01",44,0)
 S X=$$OI^ORX8(+X0) I $L(X) D
"RTN","VPRDJ01",45,0)
 . N ARRAY,NAME
"RTN","VPRDJ01",46,0)
 . S ARRAY("Code")=1_U_"oi",ARRAY("Name")=2,ARRAY("PackageRef")=3
"RTN","VPRDJ01",47,0)
 . D SPLITVAL^VPRUTILS(X,.ARRAY) S ORD("name")=ARRAY("Name")
"RTN","VPRDJ01",48,0)
 . S NAME="" F  S NAME=$O(ARRAY(NAME)) Q:NAME=""  S ORD("oi"_NAME)=$G(ARRAY(NAME))
"RTN","VPRDJ01",49,0)
 S ORD("displayGroup")=$P(X0,U,2)
"RTN","VPRDJ01",50,0)
 S ORD("entered")=$$JSONDT^VPRUTILS($P(X0,U,3))
"RTN","VPRDJ01",51,0)
 S ORD("start")=$$TM($P(X0,U,4)),ORD("stop")=$$TM($P(X0,U,5))
"RTN","VPRDJ01",52,0)
 S ORD("statusCode")="urn:va:order-status:"_$P(X0,U,7)
"RTN","VPRDJ01",53,0)
 S ORD("statusName")=$P(X0,U,6)
"RTN","VPRDJ01",54,0)
 S ORD("statusVuid")="urn:va:vuid:"_$$STS^VPRDOR($P(X0,U,7))
"RTN","VPRDJ01",55,0)
 D SETTEXT^VPRUTILS($NA(^TMP("ORR",$J,ORLIST,ORLST,"TX")),$NA(^TMP("VPRTEXT",$J,IFN)))
"RTN","VPRDJ01",56,0)
 M ORD("content","\")=^TMP("VPRTEXT",$J,IFN)
"RTN","VPRDJ01",57,0)
 S X=$$GET1^DIQ(100,IFN_",",1,"I") I X D
"RTN","VPRDJ01",58,0)
 . S ORD("providerUid")=$$SETUID^VPRUTILS("user",,+X)
"RTN","VPRDJ01",59,0)
 . S ORD("providerName")=$P($G(^VA(200,+X,0)),U)
"RTN","VPRDJ01",60,0)
 S LOC=+$$GET1^DIQ(100,IFN_",",6,"I"),FAC=$$FAC^VPRD(LOC) I LOC D
"RTN","VPRDJ01",61,0)
 . S ORD("locationName")=$P($G(^SC(LOC,0)),U)
"RTN","VPRDJ01",62,0)
 . S ORD("locationUid")=$$SETUID^VPRUTILS("location",,LOC)
"RTN","VPRDJ01",63,0)
 D FACILITY^VPRUTILS(FAC,"ORD")
"RTN","VPRDJ01",64,0)
 S ORD("service")=$$GET1^DIQ(100,IFN_",","12:1")
"RTN","VPRDJ01",65,0)
 S X=$$GET1^DIQ(100,IFN_",",9,"I") S:X ORD("predecessor")=$$SETUID^VPRUTILS("order",DFN,+X)
"RTN","VPRDJ01",66,0)
 S X=$$GET1^DIQ(100,IFN_",",9.1,"I") S:X ORD("successor")=$$SETUID^VPRUTILS("order",DFN,+X)
"RTN","VPRDJ01",67,0)
 D RESULTS
"RTN","VPRDJ01",68,0)
 ; sign/verify
"RTN","VPRDJ01",69,0)
 S X8=$G(^OR(100,IFN,8,1,0)),I=0 I $P(X8,U,6) D       ;signed
"RTN","VPRDJ01",70,0)
 . N PROV S PROV=$P(X8,U,5) S:PROV<1 PROV=$P(X8,U,3)  ;if on chart,
"RTN","VPRDJ01",71,0)
 . D USER(.I,"S",PROV,$P(X8,U,6))                     ;   use provider
"RTN","VPRDJ01",72,0)
 I $P(X8,U,9)  D USER(.I,"N",$P(X8,U,8),$P(X8,U,9))   ;nurse
"RTN","VPRDJ01",73,0)
 I $P(X8,U,11) D USER(.I,"C",$P(X8,U,10),$P(X8,U,11)) ;clerk
"RTN","VPRDJ01",74,0)
 I $P(X8,U,19) D USER(.I,"R",$P(X8,U,18),$P(X8,U,19)) ;chart review
"RTN","VPRDJ01",75,0)
 Q
"RTN","VPRDJ01",76,0)
 ; acknowledgements
"RTN","VPRDJ01",77,0)
 S DA=0 F  S DA=$O(^ORA(102.4,"B",+IFN,DA)) Q:DA<1  D
"RTN","VPRDJ01",78,0)
 . S X0=$G(^ORA(102.4,DA,0)) Q:'$P(X0,U,3)  ;stub - not ack'd
"RTN","VPRDJ01",79,0)
 . S X=+$P(X0,U,2),X=$S(X:X_U_$P($G(^VA(200,X,0)),U),1:U)
"RTN","VPRDJ01",80,0)
 . S ORD("acknowledgement",DA)=X_U_$P(X0,U,3)
"RTN","VPRDJ01",81,0)
 Q
"RTN","VPRDJ01",82,0)
 ;
"RTN","VPRDJ01",83,0)
RESULTS ; -- add ORD("results",n,"uid") list
"RTN","VPRDJ01",84,0)
 N ORPK,ORPKG,ORDG
"RTN","VPRDJ01",85,0)
 S ORPK=$G(^OR(100,IFN,4)),ORPKG=ORD("service"),ORDG=ORD("displayGroup")
"RTN","VPRDJ01",86,0)
 I ORPKG="GMRC" D  Q
"RTN","VPRDJ01",87,0)
 . N VPRD,I,N,X D DOCLIST^GMRCGUIB(.VPRD,+ORPK)
"RTN","VPRDJ01",88,0)
 . S N=1,ORD("results",N,"uid")=$$SETUID^VPRUTILS("consult",DFN,+ORPK)
"RTN","VPRDJ01",89,0)
 . S I=0 F  S I=$O(VPRD(50,I)) Q:I<1  S X=$G(VPRD(50,I)) D
"RTN","VPRDJ01",90,0)
 .. Q:'$D(@(U_$P(X,";",2)_+X_")"))  ;text deleted
"RTN","VPRDJ01",91,0)
 .. S N=N+1,ORD("results",N,"uid")=$$SETUID^VPRUTILS("document",DFN,+X)
"RTN","VPRDJ01",92,0)
 . Q:ORDG'="PROC"
"RTN","VPRDJ01",93,0)
 . N VPRC D FIND^DIC(702,,"@","Q",+ORPK,,"ACON",,,"VPRC") ;CP
"RTN","VPRDJ01",94,0)
 . S I=0 F  S I=$O(VPRC("DILIST",2,I)) Q:I<1  D
"RTN","VPRDJ01",95,0)
 .. S X=+$G(VPRC("DILIST",2,I))_";MDD(702,"
"RTN","VPRDJ01",96,0)
 .. S N=N+1,ORD("results",N,"uid")=$$SETUID^VPRUTILS("procedure",DFN,X)
"RTN","VPRDJ01",97,0)
 I ORPKG="LR" D  Q
"RTN","VPRDJ01",98,0)
 . Q:$L(ORPK,";")'>3  ;no results yet, or parent order
"RTN","VPRDJ01",99,0)
 . N SUB,IDT,CDT,ITM,VPRT,ID,T,N,LRDFN,IDX
"RTN","VPRDJ01",100,0)
 . S SUB=$P(ORPK,";",4),IDT=$P(ORPK,";",5),CDT=9999999-IDT
"RTN","VPRDJ01",101,0)
 . I SUB="CH" D  Q
"RTN","VPRDJ01",102,0)
 .. S ITM=+$G(ORD("oiPackageRef")) D EXPAND^LR7OU1(ITM,.VPRT)
"RTN","VPRDJ01",103,0)
 .. S (T,N)=0 F  S T=$O(VPRT(T)) Q:T<1  S ID=$O(^PXRMINDX(63,"PI",DFN,T,CDT,"")) I $L(ID) S N=N+1,ORD("results",N,"uid")=$$SETUID^VPRUTILS("lab",DFN,$P(ID,";",2,9))
"RTN","VPRDJ01",104,0)
 . I SUB="MI" D  Q
"RTN","VPRDJ01",105,0)
 .. S ITM="M;A;",N=0,LRDFN=$G(^DPT(DFN,"LR"))
"RTN","VPRDJ01",106,0)
 .. F  S ITM=$O(^PXRMINDX(63,"PI",DFN,ITM)) Q:$E(ITM,1,4)'="M;A;"  I $D(^(ITM,CDT)) D
"RTN","VPRDJ01",107,0)
 ... S IDX=LRDFN_";MI;"_IDT
"RTN","VPRDJ01",108,0)
 ... F  S IDX=$O(^PXRMINDX(63,"PI",DFN,ITM,CDT,IDX)) Q:IDX=""  S ID=$P(IDX,";",2,99),N=N+1,ORD("results",N,"uid")=$$SETUID^VPRUTILS("lab",DFN,ID)
"RTN","VPRDJ01",109,0)
 .. S N=N+1,ORD("results",N,"uid")=$$SETUID^VPRUTILS("document",DFN,SUB_";"_IDT)
"RTN","VPRDJ01",110,0)
 . ; SUB:"AP" [AU,CY,EM,SP]
"RTN","VPRDJ01",111,0)
 . S ORD("results",1,"uid")=$$SETUID^VPRUTILS("lab",DFN,SUB_";"_IDT)
"RTN","VPRDJ01",112,0)
 . S ORD("results",2,"uid")=$$SETUID^VPRUTILS("document",DFN,SUB_";"_IDT)
"RTN","VPRDJ01",113,0)
 I ORPKG["PS" D  Q
"RTN","VPRDJ01",114,0)
 . S:ORPK ORD("results",1,"uid")=$$SETUID^VPRUTILS("med",DFN,IFN)
"RTN","VPRDJ01",115,0)
 I ORPKG="RA" D  Q
"RTN","VPRDJ01",116,0)
 . N IDT,CN S IDT=+$O(^RADPT("AO",+ORPK,DFN,0)) Q:'IDT
"RTN","VPRDJ01",117,0)
 . S CN=0 F  S CN=$O(^RADPT("AO",+ORPK,DFN,IDT,CN)) Q:CN<1  S ORD("results",CN,"uid")=$$SETUID^VPRUTILS("image",DFN,IDT_"-"_CN)
"RTN","VPRDJ01",118,0)
 ; rest should be generic (OR) orders
"RTN","VPRDJ01",119,0)
 I ORDG="NTX" S ORD("results",1,"uid")=$$SETUID^VPRUTILS("treatment",DFN,IFN) Q
"RTN","VPRDJ01",120,0)
 I ORDG="V/M" Q  ;no link
"RTN","VPRDJ01",121,0)
 Q
"RTN","VPRDJ01",122,0)
 ;
"RTN","VPRDJ01",123,0)
NTX1(IFN) ; -- extract nursing treatment order IFN into NTX("attribute")
"RTN","VPRDJ01",124,0)
 N NTX,X
"RTN","VPRDJ01",125,0)
 D ORX(IFN,.NTX) ;get basic order info
"RTN","VPRDJ01",126,0)
 S NTX("orderUid")=NTX("uid")
"RTN","VPRDJ01",127,0)
 S NTX("uid")=$$SETUID^VPRUTILS("treatment",DFN,IFN)
"RTN","VPRDJ01",128,0)
 S X=$$VALUE^ORX8(IFN,"COMMENT") S:$L(X) NTX("instructions")=X
"RTN","VPRDJ01",129,0)
 S X=$$VALUE^ORX8(IFN,"SCHEDULE") I X D
"RTN","VPRDJ01",130,0)
 . D ZERO^PSS51P1(X,,,,"VPRS")
"RTN","VPRDJ01",131,0)
 . S NTX("scheduleName")=$G(^TMP($J,"VPRS",X,.01))
"RTN","VPRDJ01",132,0)
 . S NTX("adminTimes")=$G(^TMP($J,"VPRS",X,1))
"RTN","VPRDJ01",133,0)
 . K ^TMP($J,"VPRS")
"RTN","VPRDJ01",134,0)
 D ADD^VPRDJ("NTX","treatment")
"RTN","VPRDJ01",135,0)
 Q
"RTN","VPRDJ01",136,0)
 ;
"RTN","VPRDJ01",137,0)
USER(N,ROLE,IEN,DATE) ; -- add signature/verification data
"RTN","VPRDJ01",138,0)
 S N=+$G(N)+1
"RTN","VPRDJ01",139,0)
 S ORD("clinicians",N,"signedDateTime")=$$JSONDT^VPRUTILS(DATE)
"RTN","VPRDJ01",140,0)
 S ORD("clinicians",N,"role")=$G(ROLE)
"RTN","VPRDJ01",141,0)
 Q:+$G(IEN)<1
"RTN","VPRDJ01",142,0)
 S ORD("clinicians",N,"uid")=$$SETUID^VPRUTILS("user",,IEN)
"RTN","VPRDJ01",143,0)
 S ORD("clinicians",N,"name")=$P($G(^VA(200,IEN,0)),U)
"RTN","VPRDJ01",144,0)
 Q
"RTN","VPRDJ01",145,0)
 ;
"RTN","VPRDJ01",146,0)
TM(X) ; -- strip seconds off a FM time
"RTN","VPRDJ01",147,0)
 N D,T,Y S D=$P(X,"."),T=$P(X,".",2)
"RTN","VPRDJ01",148,0)
 S Y=D_$S(T:"."_$E(T,1,4),1:"")
"RTN","VPRDJ01",149,0)
 S Y=$$JSONDT^VPRUTILS(Y)
"RTN","VPRDJ01",150,0)
 Q Y
"RTN","VPRDJ02")
0^72^B65003415
"RTN","VPRDJ02",1,0)
VPRDJ02 ;SLC/MKB -- Problems,Allergies,Vitals ;6/25/12  16:11
"RTN","VPRDJ02",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ02",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ02",4,0)
 ;
"RTN","VPRDJ02",5,0)
 ; External References          DBIA#
"RTN","VPRDJ02",6,0)
 ; -------------------          -----
"RTN","VPRDJ02",7,0)
 ; ^PXRMINDX                     4290
"RTN","VPRDJ02",8,0)
 ; ^SC                          10040
"RTN","VPRDJ02",9,0)
 ; DIC                           2051
"RTN","VPRDJ02",10,0)
 ; DIQ                           2056
"RTN","VPRDJ02",11,0)
 ; GMPLUTL2                      2741
"RTN","VPRDJ02",12,0)
 ; GMRADPT                      10099
"RTN","VPRDJ02",13,0)
 ; GMRAOR2                       2422
"RTN","VPRDJ02",14,0)
 ; GMRVUT0,^UTILITY($J           1446
"RTN","VPRDJ02",15,0)
 ; GMVGETQL                      5048
"RTN","VPRDJ02",16,0)
 ; GMVGETVT                      5047
"RTN","VPRDJ02",17,0)
 ; GMVUTL                        5046
"RTN","VPRDJ02",18,0)
 ; ICDCODE                       3990
"RTN","VPRDJ02",19,0)
 ; XLFSTR                       10104
"RTN","VPRDJ02",20,0)
 ; XUAF4                         2171
"RTN","VPRDJ02",21,0)
 ;
"RTN","VPRDJ02",22,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ02",23,0)
 ;
"RTN","VPRDJ02",24,0)
GMPL1(ID) ; -- problem
"RTN","VPRDJ02",25,0)
 N VPRL,PROB,X,I,DATE,USER,FAC
"RTN","VPRDJ02",26,0)
 D DETAIL^GMPLUTL2(ID,.VPRL) Q:'$D(VPRL)  ;doesn't exist
"RTN","VPRDJ02",27,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ02",28,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ02",29,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the problem domain"
"RTN","VPRDJ02",30,0)
 ;
"RTN","VPRDJ02",31,0)
 S PROB("uid")=$$SETUID^VPRUTILS("problem",DFN,ID),PROB("localId")=ID
"RTN","VPRDJ02",32,0)
 S PROB("problemText")=$G(VPRL("NARRATIVE"))
"RTN","VPRDJ02",33,0)
 S DATE=$P($G(VPRL("ENTERED")),U)
"RTN","VPRDJ02",34,0)
 S:$L(DATE) DATE=$$DATE^VPRDGMPL(DATE),PROB("entered")=$$JSONDT^VPRUTILS(DATE)
"RTN","VPRDJ02",35,0)
 S X=$G(VPRL("DIAGNOSIS")) I $L(X) D
"RTN","VPRDJ02",36,0)
 . N ICD9ZN,DIAG
"RTN","VPRDJ02",37,0)
 . I DATE'>0 S DATE=DT
"RTN","VPRDJ02",38,0)
 . S ICD9ZN=$$ICDDX^ICDCODE(X,DATE),DIAG=$S($P($G(ICD9ZN),U,4)'="":$P(ICD9ZN,U,4),1:X)
"RTN","VPRDJ02",39,0)
 . S PROB("icdCode")=$$SETNCS^VPRUTILS("icd",X),PROB("icdName")=DIAG
"RTN","VPRDJ02",40,0)
 S X=$G(VPRL("ONSET")) S:$L(X) X=$$DATE^VPRDGMPL(X),PROB("onset")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ02",41,0)
 S X=$G(VPRL("MODIFIED")) S:$L(X) X=$$DATE^VPRDGMPL(X),PROB("updated")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ02",42,0)
 S X=$G(VPRL("STATUS")) I $L(X) D
"RTN","VPRDJ02",43,0)
 . S PROB("statusName")=X,X=$E(X)
"RTN","VPRDJ02",44,0)
 . S X=$S(X="A":55561003,X="I":73425007,1:"")
"RTN","VPRDJ02",45,0)
 . S PROB("statusCode")=$$SETNCS^VPRUTILS("sct",X)
"RTN","VPRDJ02",46,0)
 S X=$G(VPRL("PRIORITY")) I X]"" D
"RTN","VPRDJ02",47,0)
 . S X=$$LOW^XLFSTR(X),PROB("acuityName")=X
"RTN","VPRDJ02",48,0)
 . S PROB("acuityCode")=$$SETVURN^VPRUTILS("prob-acuity",$E(X))
"RTN","VPRDJ02",49,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.07,"I") S:X PROB("resolved")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ02",50,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.02,"I")
"RTN","VPRDJ02",51,0)
 S:X="P" PROB("unverified")="false",PROB("removed")="false"
"RTN","VPRDJ02",52,0)
 S:X="T" PROB("unverified")="true",PROB("removed")="false"
"RTN","VPRDJ02",53,0)
 S:X="H" PROB("unverified")="false",PROB("removed")="true"
"RTN","VPRDJ02",54,0)
 S X=$G(VPRL("SC")),X=$S(X="YES":"",X="NO":"false",1:"")
"RTN","VPRDJ02",55,0)
 S:$L(X) PROB("serviceConnected")=X
"RTN","VPRDJ02",56,0)
 S X=$G(VPRL("PROVIDER")) I $L(X) D
"RTN","VPRDJ02",57,0)
 . S PROB("providerName")=X,X=$$GET1^DIQ(9000011,ID_",",1.05,"I")
"RTN","VPRDJ02",58,0)
 . S PROB("providerUid")=$$SETUID^VPRUTILS("user",,+X)
"RTN","VPRDJ02",59,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.06) S:$L(X) PROB("service")=X
"RTN","VPRDJ02",60,0)
 S X=$G(VPRL("CLINIC")) I $L(X) D
"RTN","VPRDJ02",61,0)
 . S PROB("locationName")=X
"RTN","VPRDJ02",62,0)
 . N LOC S LOC=+$$FIND1^DIC(44,,"QX",X)
"RTN","VPRDJ02",63,0)
 . S:LOC PROB("locationUid")=$$SETUID^VPRUTILS("location",,LOC)
"RTN","VPRDJ02",64,0)
 S X=+$$GET1^DIQ(9000011,ID_",",.06,"I")
"RTN","VPRDJ02",65,0)
 S:X FAC=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","VPRDJ02",66,0)
 I 'X S FAC=$$FAC^VPRD ;local stn#^name
"RTN","VPRDJ02",67,0)
 D FACILITY^VPRUTILS(FAC,"PROB")
"RTN","VPRDJ02",68,0)
 S I=0 F  S I=$O(VPRL("COMMENT",I)) Q:I<1  D
"RTN","VPRDJ02",69,0)
 . S X=$G(VPRL("COMMENT",I))
"RTN","VPRDJ02",70,0)
 . S USER=$$VA200^VPRDGMPL($P(X,U,2)),DATE=$$DATE^VPRDGMPL($P(X,U))
"RTN","VPRDJ02",71,0)
 . S PROB("comments",I,"enteredByCode")=$$SETUID^VPRUTILS("user",,+USER)
"RTN","VPRDJ02",72,0)
 . S PROB("comments",I,"enteredByName")=$P(X,U,2)
"RTN","VPRDJ02",73,0)
 . S PROB("comments",I,"entered")=$$JSONDT^VPRUTILS(DATE)
"RTN","VPRDJ02",74,0)
 . S PROB("comments",I,"comment")=$P(X,U,3)
"RTN","VPRDJ02",75,0)
 D ADD^VPRDJ("PROB","problem")
"RTN","VPRDJ02",76,0)
 Q
"RTN","VPRDJ02",77,0)
 ;
"RTN","VPRDJ02",78,0)
GMRA1(ID) ; -- allergy/reaction GMRAL(ID)
"RTN","VPRDJ02",79,0)
 N GMRA,VPRY,REAC,X,Y,I,USER,CMMT
"RTN","VPRDJ02",80,0)
 S GMRA=$G(GMRAL(ID)) D EN1^GMRAOR2(ID,"VPRY")
"RTN","VPRDJ02",81,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ02",82,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ02",83,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the allergy domain"
"RTN","VPRDJ02",84,0)
 ;
"RTN","VPRDJ02",85,0)
 S X=$P(VPRY,U,10) I $L(X) S X=$$DATE^VPRDGMRA(X) Q:X<VPRSTART  Q:X>VPRSTOP  S REAC("entered")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ02",86,0)
 S X=$$FAC^VPRD D FACILITY^VPRUTILS(X,"REAC")
"RTN","VPRDJ02",87,0)
 S REAC("kind")="Allergy / Adverse Reaction"
"RTN","VPRDJ02",88,0)
 S REAC("localId")=ID,REAC("uid")=$$SETUID^VPRUTILS("allergy",DFN,ID)
"RTN","VPRDJ02",89,0)
 S (REAC("summary"),REAC("products",1,"name"))=$P(VPRY,U) I $P(GMRA,U,9) D
"RTN","VPRDJ02",90,0)
 . S X=$P(GMRA,U,9),REAC("reference")=X
"RTN","VPRDJ02",91,0)
 . S Y=+$P(X,"(",2) I 'Y,X["PSDRUG" S Y=50
"RTN","VPRDJ02",92,0)
 . S I=$$VUID^VPRD(+X,Y),REAC("products",1,"vuid")=$$SETVURN^VPRUTILS("vuid",I)
"RTN","VPRDJ02",93,0)
 S X=$P(VPRY,U,2) S:$L(X) REAC("originatorName")=X
"RTN","VPRDJ02",94,0)
 S REAC("historical")=$S($E($P(VPRY,U,5))="H":"true",1:"false")
"RTN","VPRDJ02",95,0)
 S X=$P(VPRY,U,6) S:$L(X) REAC("mechanism")=X
"RTN","VPRDJ02",96,0)
 S X=$P(VPRY,U,7) S:$L(X) REAC("typeName")=X
"RTN","VPRDJ02",97,0)
 ; REAC("adverseEventTypeName")=$P(VPRY,U,7)_" "_$P(VPRY,U,6) ;TYPE_MECH
"RTN","VPRDJ02",98,0)
 I $P(VPRY,U,4)="VERIFIED",$P(VPRY,U,9) D
"RTN","VPRDJ02",99,0)
 . S REAC("verified")=$$JSONDT^VPRUTILS($P(VPRY,U,9))
"RTN","VPRDJ02",100,0)
 . S REAC("verifierName")=$P(VPRY,U,8)
"RTN","VPRDJ02",101,0)
 ; severity
"RTN","VPRDJ02",102,0)
 S I=0 F  S I=$O(VPRY("O",I)) Q:I<1  D
"RTN","VPRDJ02",103,0)
 . S X=$G(VPRY("O",I))
"RTN","VPRDJ02",104,0)
 . S REAC("observations",I,"date")=$$JSONDT^VPRUTILS(+X)
"RTN","VPRDJ02",105,0)
 . S REAC("observations",I,"severity")=$P(X,U,2)
"RTN","VPRDJ02",106,0)
 ; reactions
"RTN","VPRDJ02",107,0)
 S I=0 F  S I=$O(GMRAL(ID,"S",I)) Q:I<1  D
"RTN","VPRDJ02",108,0)
 . S X=$G(GMRAL(ID,"S",I))
"RTN","VPRDJ02",109,0)
 . S REAC("reactions",I,"name")=$P(X,";")
"RTN","VPRDJ02",110,0)
 . S Y=$$VUID^VPRD(+$P(X,";",2),120.83)
"RTN","VPRDJ02",111,0)
 . S REAC("reactions",I,"vuid")=$$SETVURN^VPRUTILS("vuid",Y)
"RTN","VPRDJ02",112,0)
 ; drug classes
"RTN","VPRDJ02",113,0)
 S I=0 F  S I=$O(VPRY("V",I)) Q:I<1  D
"RTN","VPRDJ02",114,0)
 . S X=$G(VPRY("V",I))
"RTN","VPRDJ02",115,0)
 . S REAC("drugClasses",I,"code")=$P(X,U)
"RTN","VPRDJ02",116,0)
 . S REAC("drugClasses",I,"name")=$P(X,U,2)
"RTN","VPRDJ02",117,0)
 S I=0 F  S I=$O(VPRY("C",I)) Q:I<1  D
"RTN","VPRDJ02",118,0)
 . S X=$G(VPRY("C",I)),USER=$$VA200^VPRDGMPL($P(X,U,3))
"RTN","VPRDJ02",119,0)
 . S REAC("comments",I,"enteredByUid")=$$SETUID^VPRUTILS("user",,+USER)
"RTN","VPRDJ02",120,0)
 . S REAC("comments",I,"enteredByName")=$P(X,U,3)
"RTN","VPRDJ02",121,0)
 . S REAC("comments",I,"entered")=$$JSONDT^VPRUTILS(+X)
"RTN","VPRDJ02",122,0)
 . K CMMT M CMMT=VPRY("C",I)
"RTN","VPRDJ02",123,0)
 . S REAC("comments",I,"comment")=$$STRING^VPRD(.CMMT)
"RTN","VPRDJ02",124,0)
 I GMRA="" S REAC("removed")="true" ;entered in error
"RTN","VPRDJ02",125,0)
 D ADD^VPRDJ("REAC","allergy")
"RTN","VPRDJ02",126,0)
 Q
"RTN","VPRDJ02",127,0)
 ;
"RTN","VPRDJ02",128,0)
NKA ; -- no assessment or NKA [GMRAL=0 or ""]
"RTN","VPRDJ02",129,0)
 N REAC,X
"RTN","VPRDJ02",130,0)
 S X=$G(^GMR(120.86,DFN,0)) Q:GMRAL=""!'$P(X,U,2)
"RTN","VPRDJ02",131,0)
 S REAC("uid")=$$SETUID^VPRUTILS("obs",DFN,"120.86;"_DFN)
"RTN","VPRDJ02",132,0)
 S REAC("typeCode")="urn:sct:160244002"
"RTN","VPRDJ02",133,0)
 S REAC("typeName")="No known allergies"
"RTN","VPRDJ02",134,0)
 S X=$$FAC^VPRD D FACILITY^VPRUTILS(X,"REAC")
"RTN","VPRDJ02",135,0)
 D ADD^VPRDJ("REAC","allergy")
"RTN","VPRDJ02",136,0)
 Q
"RTN","VPRDJ02",137,0)
 ;
"RTN","VPRDJ02",138,0)
GMV1(ID) ; -- vital/measurement ^UTILITY($J,"GMRVD",VPRIDT,VPRTYP,ID)
"RTN","VPRDJ02",139,0)
 N VIT,VPRY,X0,TYPE,LOC,FAC,X,Y,MRES,MUNT,HIGH,LOW,I
"RTN","VPRDJ02",140,0)
 D GETREC^GMVUTL(.VPRY,ID,1) S X0=$G(VPRY(0))
"RTN","VPRDJ02",141,0)
 ; GMRVUT0 returns CLiO data with a pseudo-ID >> get real ID
"RTN","VPRDJ02",142,0)
 I X0="",$G(VPRIDT),$D(VPRTYP) D  ;[from VPRDJ0]
"RTN","VPRDJ02",143,0)
 . N GMRVD S GMRVD=$G(^UTILITY($J,"GMRVD",VPRIDT,VPRTYP,ID))
"RTN","VPRDJ02",144,0)
 . S ID=$O(^PXRMINDX(120.5,"PI",DFN,$P(GMRVD,U,3),+GMRVD,""))
"RTN","VPRDJ02",145,0)
 . I $L(ID) D GETREC^GMVUTL(.VPRY,ID,1) S X0=$G(VPRY(0))
"RTN","VPRDJ02",146,0)
 Q:X0=""
"RTN","VPRDJ02",147,0)
 ;
"RTN","VPRDJ02",148,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ02",149,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ02",150,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the vitals domain"
"RTN","VPRDJ02",151,0)
 S VIT("localId")=ID,VIT("kind")="Vital Sign"
"RTN","VPRDJ02",152,0)
 S VIT("uid")=$$SETUID^VPRUTILS("vital",DFN,ID)
"RTN","VPRDJ02",153,0)
 S VIT("observed")=$$JSONDT^VPRUTILS(+X0)
"RTN","VPRDJ02",154,0)
 S VIT("resulted")=$$JSONDT^VPRUTILS(+$P(X0,U,4))
"RTN","VPRDJ02",155,0)
 S TYPE=$$FIELD^GMVGETVT(+$P(X0,U,3),2)
"RTN","VPRDJ02",156,0)
 S VIT("displayName")=TYPE
"RTN","VPRDJ02",157,0)
 S VIT("typeName")=$$FIELD^GMVGETVT($P(X0,U,3),1)
"RTN","VPRDJ02",158,0)
 S VIT("typeCode")="urn:va:vuid:"_$$FIELD^GMVGETVT($P(X0,U,3),4)
"RTN","VPRDJ02",159,0)
 S X=$P(X0,U,8),VIT("result")=X
"RTN","VPRDJ02",160,0)
 S VIT("units")=$$UNIT^VPRDGMV(TYPE),(MRES,MUNT)=""
"RTN","VPRDJ02",161,0)
 I TYPE="T"  S MUNT="C",MRES=$J(X-32*5/9,0,1) ;EN1^GMRVUTL
"RTN","VPRDJ02",162,0)
 I TYPE="HT" S MUNT="cm",MRES=$J(2.54*X,0,2)  ;EN2^GMRVUTL
"RTN","VPRDJ02",163,0)
 I TYPE="WT" S MUNT="kg",MRES=$J(X/2.2,0,2)   ;EN3^GMRVUTL
"RTN","VPRDJ02",164,0)
 I TYPE="CG" S MUNT="cm",MRES=$J(2.54*X,0,2)
"RTN","VPRDJ02",165,0)
 S:MRES VIT("metricResult")=MRES,VIT("metricUnits")=MUNT
"RTN","VPRDJ02",166,0)
 S X=$$RANGE^VPRDGMV(TYPE) I $L(X) S VIT("high")=$P(X,U),VIT("low")=$P(X,U,2)
"RTN","VPRDJ02",167,0)
 S VIT("summary")=VIT("typeName")_" "_VIT("result")_" "_VIT("units")
"RTN","VPRDJ02",168,0)
 F I=1:1:$L(VPRY(5),U) S X=$P(VPRY(5),U,I) I X D
"RTN","VPRDJ02",169,0)
 . S VIT("qualifiers",I,"name")=$$FIELD^GMVGETQL(X,1)
"RTN","VPRDJ02",170,0)
 . S VIT("qualifiers",I,"vuid")=$$FIELD^GMVGETQL(X,3)
"RTN","VPRDJ02",171,0)
 I $G(VPRY(2)) S VIT("removed")="true"        ;entered in error
"RTN","VPRDJ02",172,0)
 S LOC=+$P(X0,U,5),FAC=$$FAC^VPRD(LOC)
"RTN","VPRDJ02",173,0)
 S VIT("locationUid")=$$SETUID^VPRUTILS("location",,LOC)
"RTN","VPRDJ02",174,0)
 S VIT("locationName")=$S(LOC:$P($G(^SC(LOC,0)),U),1:"unknown")
"RTN","VPRDJ02",175,0)
 D FACILITY^VPRUTILS(FAC,"VIT")
"RTN","VPRDJ02",176,0)
 D ADD^VPRDJ("VIT","vital")
"RTN","VPRDJ02",177,0)
 Q
"RTN","VPRDJ02",178,0)
 ;
"RTN","VPRDJ02",179,0)
VPR(COLL) ; -- VPR Patient Objects
"RTN","VPRDJ02",180,0)
 N ID I $L($G(VPRID)) D  Q
"RTN","VPRDJ02",181,0)
 . S ID=+VPRID I 'ID S ID=+$O(^VPR(560.1,"B",VPRID,0)) ;IEN or UID
"RTN","VPRDJ02",182,0)
 . D:ID VPR1(560.1,ID)
"RTN","VPRDJ02",183,0)
 Q:$G(COLL)=""  ;error
"RTN","VPRDJ02",184,0)
 S ID=0 F  S ID=$O(^VPR(560.1,"C",DFN,COLL,ID)) Q:ID<1  D VPR1(560.1,ID)
"RTN","VPRDJ02",185,0)
 Q
"RTN","VPRDJ02",186,0)
VPR1(FNUM,ID) ; -- [patient] object
"RTN","VPRDJ02",187,0)
 N I,X,VPRY
"RTN","VPRDJ02",188,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ02",189,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=$G(DFN)
"RTN","VPRDJ02",190,0)
 S ERRMSG="A problem occurred retreiving record "_ID_" for the VPR domain"
"RTN","VPRDJ02",191,0)
 S I=0 F  S I=$O(^VPR(FNUM,ID,1,I)) Q:I<1  S X=$G(^(I,0)),VPRY(I)=X
"RTN","VPRDJ02",192,0)
 I $D(VPRY) D  ;already encoded JSON
"RTN","VPRDJ02",193,0)
 . S VPRI=VPRI+1 S:VPRI>1 @VPR@(VPRI,.3)=","
"RTN","VPRDJ02",194,0)
 . M @VPR@(VPRI)=VPRY
"RTN","VPRDJ02",195,0)
 Q
"RTN","VPRDJ03")
0^73^B54346353
"RTN","VPRDJ03",1,0)
VPRDJ03 ;SLC/MKB -- Consults,ClinProcedures,CLiO ;6/25/12  16:11
"RTN","VPRDJ03",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ03",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ03",4,0)
 ;
"RTN","VPRDJ03",5,0)
 ; External References          DBIA#
"RTN","VPRDJ03",6,0)
 ; -------------------          -----
"RTN","VPRDJ03",7,0)
 ; ^SC                          10040
"RTN","VPRDJ03",8,0)
 ; ^TIU(8925.1                   5677
"RTN","VPRDJ03",9,0)
 ; ^VA(200                      10060
"RTN","VPRDJ03",10,0)
 ; %DT                          10003
"RTN","VPRDJ03",11,0)
 ; DILFD                         2055
"RTN","VPRDJ03",12,0)
 ; DIQ                           2056
"RTN","VPRDJ03",13,0)
 ; GMRCGUIB                      2980
"RTN","VPRDJ03",14,0)
 ; GMRCSLM1,^TMP("GMRCR"         2740
"RTN","VPRDJ03",15,0)
 ; MCARUTL3                      3280
"RTN","VPRDJ03",16,0)
 ; MDPS1,^TMP("MDHSP"            4230
"RTN","VPRDJ03",17,0)
 ; ORX8                          2467
"RTN","VPRDJ03",18,0)
 ; TIULQ                         2693
"RTN","VPRDJ03",19,0)
 ; TIUSRVLO                      2834
"RTN","VPRDJ03",20,0)
 ; XLFSTR                       10104
"RTN","VPRDJ03",21,0)
 ; XUAF4                         2171
"RTN","VPRDJ03",22,0)
 ;
"RTN","VPRDJ03",23,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ03",24,0)
 ;
"RTN","VPRDJ03",25,0)
GMRC1(ID) ; -- consult/request VPRX=^TMP("GMRCR",$J,"CS",VPRN,0)
"RTN","VPRDJ03",26,0)
 N CONS,ORDER,VPRD,X0,X,VPRJ,VPRTIU
"RTN","VPRDJ03",27,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ03",28,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ03",29,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the consults domain"
"RTN","VPRDJ03",30,0)
 ;
"RTN","VPRDJ03",31,0)
 S CONS("localId")=+VPRX,CONS("uid")=$$SETUID^VPRUTILS("consult",DFN,+VPRX)
"RTN","VPRDJ03",32,0)
 S CONS("dateTime")=$$JSONDT^VPRUTILS($P(VPRX,U,2))
"RTN","VPRDJ03",33,0)
 S CONS("statusName")=$P(VPRX,U,3),CONS("service")=$P(VPRX,U,4)
"RTN","VPRDJ03",34,0)
 S CONS("consultProcedure")=$P(VPRX,U,5)
"RTN","VPRDJ03",35,0)
 I $P(VPRX,U,6)="*" S CONS("interpretation")="SIGNIFICANT FINDINGS"
"RTN","VPRDJ03",36,0)
 S CONS("typeName")=$P(VPRX,U,7),CONS("category")=$P(VPRX,U,9)
"RTN","VPRDJ03",37,0)
 S ORDER=+$P(VPRX,U,8),CONS("orderName")=$P($$OI^ORX8(ORDER),U,2)
"RTN","VPRDJ03",38,0)
 S CONS("orderUid")=$$SETUID^VPRUTILS("order",DFN,ORDER)
"RTN","VPRDJ03",39,0)
 D DOCLIST^GMRCGUIB(.VPRD,+VPRX) S X0=$G(VPRD(0)) ;=^GMR(123,ID,0)
"RTN","VPRDJ03",40,0)
 S X=+$P(X0,U,14) I X D  ;ordering provider
"RTN","VPRDJ03",41,0)
 . S CONS("providerUid")=$$SETUID^VPRUTILS("user",,X)
"RTN","VPRDJ03",42,0)
 . S CONS("providerName")=$P($G(^VA(200,X,0)),U)
"RTN","VPRDJ03",43,0)
 S VPRJ=0 F  S VPRJ=$O(VPRD(50,VPRJ)) Q:VPRJ<1  S X=$G(VPRD(50,VPRJ)) D
"RTN","VPRDJ03",44,0)
 . Q:'$D(@(U_$P(X,";",2)_+X_")"))  ;text deleted
"RTN","VPRDJ03",45,0)
 . S CONS("results",VPRJ,"uid")=$$SETUID^VPRUTILS("document",DFN,+X)
"RTN","VPRDJ03",46,0)
 . D EXTRACT^TIULQ(+X,"VPRTIU",,.01)
"RTN","VPRDJ03",47,0)
 . S CONS("results",VPRJ,"localTitle")=$G(VPRTIU(+X,.01,"E"))
"RTN","VPRDJ03",48,0)
 S X=$P(X0,U,21),X=$S(X:$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U),1:$$FAC^VPRD)
"RTN","VPRDJ03",49,0)
 D FACILITY^VPRUTILS(X,"CONS")
"RTN","VPRDJ03",50,0)
 D ADD^VPRDJ("CONS","consult")
"RTN","VPRDJ03",51,0)
 Q
"RTN","VPRDJ03",52,0)
 ;
"RTN","VPRDJ03",53,0)
MDPS1(DFN,BEG,END,MAX) ; -- perform CP search (scope variables)
"RTN","VPRDJ03",54,0)
 N MCARCODE,MCARDT,MCARPROC,MCESKEY,MCESSEC,MCFILE,MDC,MDIMG,RES
"RTN","VPRDJ03",55,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","VPRDJ03",56,0)
 K ^TMP("MDHSP",$J) S RES=""
"RTN","VPRDJ03",57,0)
 D EN1^MDPS1(.RES,DFN,BEG,END,MAX,"",0) ;RES=^TMP("MDHSP",$J)
"RTN","VPRDJ03",58,0)
 Q
"RTN","VPRDJ03",59,0)
 ;
"RTN","VPRDJ03",60,0)
MC1(ID) ; -- clinical procedure VPRX=^TMP("MDHSP",$J,VPRN)
"RTN","VPRDJ03",61,0)
 N X,Y,%DT,DATE,RTN,GBL,CONS,TIUN,VPRD,X0,PROC,VPRT,LOC,FAC
"RTN","VPRDJ03",62,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ03",63,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ03",64,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the clinical procedure domain"
"RTN","VPRDJ03",65,0)
 ;
"RTN","VPRDJ03",66,0)
 S RTN=$P(VPRX,U,3,4) Q:RTN="PRPRO^MDPS4"  ;skip non-CP items
"RTN","VPRDJ03",67,0)
 S X=$P(VPRX,U,6),%DT="TXS" D ^%DT Q:Y'>0  S DATE=Y
"RTN","VPRDJ03",68,0)
 S GBL=+$P(VPRX,U,2)_";"_$S(RTN="PR702^MDPS1":"MDD(702,",1:$$ROOT^VPRDMC(DFN,$P(VPRX,U,11),DATE))
"RTN","VPRDJ03",69,0)
 Q:'GBL  I $G(ID),ID'=GBL Q                ;unknown, or not requested
"RTN","VPRDJ03",70,0)
 ;
"RTN","VPRDJ03",71,0)
 S CONS=+$P(VPRX,U,13) D:CONS DOCLIST^GMRCGUIB(.VPRD,CONS) S X0=$G(VPRD(0)) ;=^GMR(123,ID,0)
"RTN","VPRDJ03",72,0)
 S TIUN=+$P(VPRX,U,14) S:TIUN TIUN=TIUN_U_$$RESOLVE^TIUSRVLO(TIUN)
"RTN","VPRDJ03",73,0)
 S PROC("localId")=GBL,PROC("category")="CP"
"RTN","VPRDJ03",74,0)
 S PROC("uid")=$$SETUID^VPRUTILS("procedure",DFN,GBL)
"RTN","VPRDJ03",75,0)
 S PROC("name")=$P(VPRX,U),PROC("dateTime")=$$JSONDT^VPRUTILS(DATE)
"RTN","VPRDJ03",76,0)
 S X=$P(VPRX,U,7) S:$L(X) PROC("interpretation")=X
"RTN","VPRDJ03",77,0)
 S PROC("kind")="Procedure"
"RTN","VPRDJ03",78,0)
 I CONS,X0 D
"RTN","VPRDJ03",79,0)
 . N VPRJ S PROC("requested")=$$JSONDT^VPRUTILS(+X0)
"RTN","VPRDJ03",80,0)
 . S PROC("consultUid")=$$SETUID^VPRUTILS("consult",DFN,CONS)
"RTN","VPRDJ03",81,0)
 . S PROC("orderUid")=$$SETUID^VPRUTILS("order",DFN,+$P(X0,U,3))
"RTN","VPRDJ03",82,0)
 . S PROC("statusName")=$$EXTERNAL^DILFD(123,8,,$P(X0,U,12))
"RTN","VPRDJ03",83,0)
 . S VPRJ=0 F  S VPRJ=$O(VPRD(50,VPRJ)) Q:VPRJ<1  S X=+$G(VPRD(50,VPRJ)) D
"RTN","VPRDJ03",84,0)
 .. D NOTE(X)
"RTN","VPRDJ03",85,0)
 .. S:'TIUN TIUN=X_U_$$RESOLVE^TIUSRVLO(X)
"RTN","VPRDJ03",86,0)
 I TIUN D
"RTN","VPRDJ03",87,0)
 . S X=$P(TIUN,U,5) I X D
"RTN","VPRDJ03",88,0)
 .. S PROC("providers",1,"providerUid")=$$SETUID^VPRUTILS("user",,+X)
"RTN","VPRDJ03",89,0)
 .. S PROC("providers",1,"providerName")=$P(X,";",3)
"RTN","VPRDJ03",90,0)
 . S:$P(TIUN,U,11) PROC("hasImages")="true"
"RTN","VPRDJ03",91,0)
 . K VPRT D EXTRACT^TIULQ(+TIUN,"VPRT",,".03;.05;1211",,,"I")
"RTN","VPRDJ03",92,0)
 . S X=+$G(VPRT(+TIUN,.03,"I")),PROC("encounterUid")=$$SETUID^VPRUTILS("visit",DFN,X)
"RTN","VPRDJ03",93,0)
 . S LOC=+$G(VPRT(+TIUN,1211,"I")) I LOC S LOC=LOC_U_$P($G(^SC(LOC,0)),U)
"RTN","VPRDJ03",94,0)
 . E  S X=$P(TIUN,U,6) S:$L(X) LOC=+$O(^SC("B",X,0))_U_X
"RTN","VPRDJ03",95,0)
 . S:LOC PROC("locationUid")=$$SETUID^VPRUTILS("location",,+LOC),PROC("locationName")=$P(LOC,U,2),FAC=$$FAC^VPRD(+LOC)
"RTN","VPRDJ03",96,0)
 . I '$D(PROC("statusName")) S X=+$G(VPRT(+TIUN,.05,"I")),PROC("statusName")=$S(X<6:"PARTIAL RESULTS",1:"COMPLETE")
"RTN","VPRDJ03",97,0)
 . I '$G(PROC("results",+TIUN)) D NOTE(+TIUN)
"RTN","VPRDJ03",98,0)
 ; if no consult or note/visit ...
"RTN","VPRDJ03",99,0)
 S:'$D(PROC("statusName")) PROC("statusName")="COMPLETE"
"RTN","VPRDJ03",100,0)
 I '$D(FAC) S X=$P(X0,U,21),FAC=$S(X:$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U),1:$$FAC^VPRD)
"RTN","VPRDJ03",101,0)
 D FACILITY^VPRUTILS(FAC,"PROC")
"RTN","VPRDJ03",102,0)
 D ADD^VPRDJ("PROC","procedure")
"RTN","VPRDJ03",103,0)
 Q
"RTN","VPRDJ03",104,0)
 ;
"RTN","VPRDJ03",105,0)
NOTE(DA) ; -- add TIU note info
"RTN","VPRDJ03",106,0)
 N VPRT,TEXT
"RTN","VPRDJ03",107,0)
 D EXTRACT^TIULQ(DA,"VPRT",,.01)
"RTN","VPRDJ03",108,0)
 S PROC("results",DA,"uid")=$$SETUID^VPRUTILS("document",+$G(DFN),DA)
"RTN","VPRDJ03",109,0)
 S PROC("results",DA,"localTitle")=$G(VPRT(DA,.01,"E"))
"RTN","VPRDJ03",110,0)
 Q
"RTN","VPRDJ03",111,0)
 ;
"RTN","VPRDJ03",112,0)
MDC1(ID) ; -- clinical observation
"RTN","VPRDJ03",113,0)
 N GUID,CLIO,VPRC,VPRT,LOC,FAC,I,X,Y
"RTN","VPRDJ03",114,0)
 S GUID=$G(ID) Q:GUID=""  ;invalid GUID
"RTN","VPRDJ03",115,0)
 D QRYOBS^VPRDMDC("VPRC",GUID) Q:'$D(VPRC)  ;doesn't exist
"RTN","VPRDJ03",116,0)
 Q:$L($G(VPRC("PARENT_ID","E")))            ;PARENT also in list
"RTN","VPRDJ03",117,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ03",118,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ03",119,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the clinical observation domain"
"RTN","VPRDJ03",120,0)
 ;
"RTN","VPRDJ03",121,0)
 S CLIO("localId")=GUID,CLIO("uid")=$$SETUID^VPRUTILS("obs",DFN,GUID)
"RTN","VPRDJ03",122,0)
 S X=$G(VPRC("TERM_ID","I")) S:X CLIO("typeVuid")="urn:va:vuid:"_X
"RTN","VPRDJ03",123,0)
 S CLIO("typeCode")="urn:va:clioterminology:"_$G(VPRC("TERM_ID","GUID"))
"RTN","VPRDJ03",124,0)
 S CLIO("typeName")=$G(VPRC("TERM_ID","E"))
"RTN","VPRDJ03",125,0)
 S CLIO("result")=$G(VPRC("SVALUE","E"))
"RTN","VPRDJ03",126,0)
 S X=$G(VPRC("UNIT_ID","ABBV")) S:$L(X) CLIO("units")=X
"RTN","VPRDJ03",127,0)
 S X=$G(VPRC("ENTERED_DATE_TIME","I")),CLIO("entered")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ03",128,0)
 S X=$G(VPRC("OBSERVED_DATE_TIME","I")),CLIO("observed")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ03",129,0)
 D QRYTYPES^VPRDMDC("VPRT")
"RTN","VPRDJ03",130,0)
 F I=3,5 S X=$G(VPRT(I,"XML")) I $L($G(VPRC(X,"E"))) D
"RTN","VPRDJ03",131,0)
 . S Y=VPRT(I,"NAME"),Y=$S(Y="LOCATION":"bodySite",1:$$LOW^XLFSTR(Y))
"RTN","VPRDJ03",132,0)
 . S CLIO(Y_"Code")=VPRC(X,"I"),CLIO(Y_"Name")=VPRC(X,"E")
"RTN","VPRDJ03",133,0)
 F I=4,6,7 S X=$G(VPRT(I,"XML")) I $L($G(VPRC(X,"E"))) D
"RTN","VPRDJ03",134,0)
 . S CLIO("qualifiers",I,"type")=$$LOW^XLFSTR(VPRT(I,"NAME"))
"RTN","VPRDJ03",135,0)
 . S CLIO("qualifiers",I,"code")=VPRC(X,"I")
"RTN","VPRDJ03",136,0)
 . S CLIO("qualifiers",I,"name")=VPRC(X,"E")
"RTN","VPRDJ03",137,0)
 S X=$G(VPRC("RANGE","E")) I $L(X) D
"RTN","VPRDJ03",138,0)
 . S Y=$S(X="Out of Bounds Low":"<",X="Out of Bounds High":">",1:$E(X))
"RTN","VPRDJ03",139,0)
 . S CLIO("interpretationCode")="urn:hl7:observation-interpretation:"_Y
"RTN","VPRDJ03",140,0)
 . S CLIO("interpretationName")=$S(X="<":"Low off scale",X=">":"High off scale",1:X)
"RTN","VPRDJ03",141,0)
 ; X=$G(VPRC("STATUS","E")) S:$L(X) CLIO("resultStatus")=$S(X="unverified":"active",1:"complete")
"RTN","VPRDJ03",142,0)
 I $D(VPRC("SUPP_PAGE")) D  ;add set info
"RTN","VPRDJ03",143,0)
 . S CLIO("setID")=$G(VPRC("SUPP_PAGE","GUID"))
"RTN","VPRDJ03",144,0)
 . S CLIO("setName")=$G(VPRC("SUPP_PAGE","DISPLAY_NAME"))
"RTN","VPRDJ03",145,0)
 . S X=$G(VPRC("SUPP_PAGE","TYPE")) S:$L(X) CLIO("setType")=X
"RTN","VPRDJ03",146,0)
 . S X=$G(VPRC("SUPP_PAGE","ACTIVATED_DATE_TIME")) S:X CLIO("setStart")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ03",147,0)
 . S X=$G(VPRC("SUPP_PAGE","DEACTIVATED_DATE_TIME")) S:X CLIO("setStop")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ03",148,0)
 S CLIO("statusCode")="urn:va:observation-status:complete",CLIO("statusName")="complete"
"RTN","VPRDJ03",149,0)
 S LOC=$G(VPRC("HOSPITAL_LOCATION_ID","I")),FAC=$$FAC^VPRD(LOC)
"RTN","VPRDJ03",150,0)
 S CLIO("locationUid")=$$SETUID^VPRUTILS("location",,LOC)
"RTN","VPRDJ03",151,0)
 S CLIO("locationName")=$G(VPRC("HOSPITAL_LOCATION_ID","E"))
"RTN","VPRDJ03",152,0)
 D FACILITY^VPRUTILS(FAC,"CLIO")
"RTN","VPRDJ03",153,0)
 S X=$G(VPRC("COMMENT","E")) S:$L(X) CLIO("comment")=X
"RTN","VPRDJ03",154,0)
 D ADD^VPRDJ("CLIO","obs")
"RTN","VPRDJ03",155,0)
 Q
"RTN","VPRDJ04")
0^74^B48300621
"RTN","VPRDJ04",1,0)
VPRDJ04 ;SLC/MKB -- Appointments,Visits ;6/25/12  16:11
"RTN","VPRDJ04",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ04",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ04",4,0)
 ;
"RTN","VPRDJ04",5,0)
 ; External References          DBIA#
"RTN","VPRDJ04",6,0)
 ; -------------------          -----
"RTN","VPRDJ04",7,0)
 ; ^AUPNVSIT                     2028
"RTN","VPRDJ04",8,0)
 ; ^DGS(41.1                     3796
"RTN","VPRDJ04",9,0)
 ; ^DIC(42                      10039
"RTN","VPRDJ04",10,0)
 ; ^SC                          10040
"RTN","VPRDJ04",11,0)
 ; ^VA(200                      10060
"RTN","VPRDJ04",12,0)
 ; DIQ                           2056
"RTN","VPRDJ04",13,0)
 ; ICPTCOD                       1995
"RTN","VPRDJ04",14,0)
 ; PXAPI,^TMP("PXKENC"           1894
"RTN","VPRDJ04",15,0)
 ; SDAMA301                      4433
"RTN","VPRDJ04",16,0)
 ; XLFDT                        10103
"RTN","VPRDJ04",17,0)
 ; XUAF4                         2171
"RTN","VPRDJ04",18,0)
 ;
"RTN","VPRDJ04",19,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ04",20,0)
 ;
"RTN","VPRDJ04",21,0)
SDAM1 ; -- appointment ^TMP($J,"SDAMA301",DFN,VPRDT)
"RTN","VPRDJ04",22,0)
 N NODE,HLOC,APPT,X,STS,CLS,FAC,SV,PRV
"RTN","VPRDJ04",23,0)
 S NODE=$G(^TMP($J,"SDAMA301",DFN,VPRDT))
"RTN","VPRDJ04",24,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ04",25,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ04",26,0)
 S ERRMSG="A problem occurred converting a record for the appointment domain"
"RTN","VPRDJ04",27,0)
 ;
"RTN","VPRDJ04",28,0)
 S HLOC=$P(NODE,U,2),X="A;"_VPRDT_";"_+HLOC
"RTN","VPRDJ04",29,0)
 I $L($G(ID)),$P(ID,";",1,3)'=X Q
"RTN","VPRDJ04",30,0)
 S APPT("localId")=X,APPT("uid")=$$SETUID^VPRUTILS("appointment",DFN,X)
"RTN","VPRDJ04",31,0)
 S X=$P(NODE,U,10),APPT("typeCode")=$P(X,";"),APPT("typeName")=$P(X,";",2)
"RTN","VPRDJ04",32,0)
 S STS=$P(NODE,U,3),CLS=$S($E(STS)="I":"I",1:"O")
"RTN","VPRDJ04",33,0)
 S APPT("dateTime")=$$JSONDT^VPRUTILS(VPRDT)
"RTN","VPRDJ04",34,0)
 S:$L($P(NODE,U,6)) APPT("comment")=$P(NODE,U,6)
"RTN","VPRDJ04",35,0)
 S:$P(NODE,U,9) APPT("checkIn")=$$JSONDT^VPRUTILS($P(NODE,U,9))
"RTN","VPRDJ04",36,0)
 S:$P(NODE,U,11) APPT("checkOut")=$$JSONDT^VPRUTILS($P(NODE,U,11))
"RTN","VPRDJ04",37,0)
 I $L(ID,";")>3 S APPT("reasonName")=$P(ID,";",4),PRV=+$P(ID,";",5) ;from SDAM event
"RTN","VPRDJ04",38,0)
 S FAC=$$FAC^VPRD(+HLOC) D FACILITY^VPRUTILS(FAC,"APPT") I HLOC D
"RTN","VPRDJ04",39,0)
 . S APPT("locationName")=$P(HLOC,";",2)
"RTN","VPRDJ04",40,0)
 . S APPT("locationUid")=$$SETUID^VPRUTILS("location",,+HLOC)
"RTN","VPRDJ04",41,0)
 . S X=$$AMIS^VPRDVSIT(+$P(NODE,U,13))
"RTN","VPRDJ04",42,0)
 . S:$L(X) APPT("stopCodeUid")="urn:va:stop-code:"_$P(X,U),APPT("stopCodeName")=$P(X,U,2)
"RTN","VPRDJ04",43,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","VPRDJ04",44,0)
 . I SV S APPT("service")=$$SERV^VPRDSDAM(SV)
"RTN","VPRDJ04",45,0)
 . ;find default provider
"RTN","VPRDJ04",46,0)
 . S:'$G(PRV) PRV=+$$GET1^DIQ(44,+HLOC_",",16,"I") I 'PRV D
"RTN","VPRDJ04",47,0)
 .. N VPRP,I,FIRST
"RTN","VPRDJ04",48,0)
 .. D GETS^DIQ(44,+HLOC_",","2600*","I","VPRP")
"RTN","VPRDJ04",49,0)
 .. S FIRST=$O(VPRP(44.1,"")),I=""
"RTN","VPRDJ04",50,0)
 .. F  S I=$O(VPRP(44.1,I)) Q:I=""  I $G(VPRP(44.1,I,.02,"I")) S PRV=$G(VPRP(44.1,I,.01,"I")) Q
"RTN","VPRDJ04",51,0)
 .. I 'PRV,FIRST S PRV=$G(VPRP(44.1,FIRST,.01,"I"))
"RTN","VPRDJ04",52,0)
 I $G(PRV) S APPT("providers",1,"providerUid")=$$SETUID^VPRUTILS("user",,PRV),APPT("providers",1,"providerName")=$P($G(^VA(200,PRV,0)),U)
"RTN","VPRDJ04",53,0)
 S APPT("patientClassCode")="urn:va:patient-class:"_$S(CLS="I":"IMP",1:"AMB")
"RTN","VPRDJ04",54,0)
 S APPT("patientClassName")=$S(CLS="I":"Inpatient",1:"Ambulatory")
"RTN","VPRDJ04",55,0)
 S APPT("categoryCode")="urn:va:encounter-category:OV",APPT("categoryName")="Outpatient Visit"
"RTN","VPRDJ04",56,0)
 S APPT("appointmentStatus")=$P(STS,";",2)
"RTN","VPRDJ04",57,0)
 D ADD^VPRDJ("APPT","appointment")
"RTN","VPRDJ04",58,0)
 Q
"RTN","VPRDJ04",59,0)
 ;
"RTN","VPRDJ04",60,0)
DGS ; scheduled admissions [from APPOINTM^VPRDJ0]
"RTN","VPRDJ04",61,0)
 S VPRA=0 F  S VPRA=$O(^DGS(41.1,"B",DFN,VPRA)) Q:VPRA<1  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ04",62,0)
 . S VPRX=$G(^DGS(41.1,VPRA,0))
"RTN","VPRDJ04",63,0)
 . I $L($G(ID)),+$P(ID,";",2)=+$P(VPRX,U,2) D DGS1(VPRA) Q
"RTN","VPRDJ04",64,0)
 . Q:$P(VPRX,U,13)  Q:$P(VPRX,U,17)  ;cancelled or admitted
"RTN","VPRDJ04",65,0)
 . S X=$P(VPRX,U,2) Q:X<VPRSTART!(X>VPRSTOP)  ;out of date range
"RTN","VPRDJ04",66,0)
 . D DGS1(VPRA)
"RTN","VPRDJ04",67,0)
 Q
"RTN","VPRDJ04",68,0)
 ;
"RTN","VPRDJ04",69,0)
DGS1(IFN) ; -- scheduled admission
"RTN","VPRDJ04",70,0)
 N ADM,X0,DATE,HLOC,FAC,SV,X
"RTN","VPRDJ04",71,0)
 S X0=$G(^DGS(41.1,+$G(IFN),0)) Q:X0=""  ;deleted
"RTN","VPRDJ04",72,0)
 ;
"RTN","VPRDJ04",73,0)
 S DATE=+$P(X0,U,2),HLOC=+$G(^DIC(42,+$P(X0,U,8),44))
"RTN","VPRDJ04",74,0)
 S X="H;"_DATE,ADM("localId")=X,ADM("uid")=$$SETUID^VPRUTILS("appointment",DFN,X)
"RTN","VPRDJ04",75,0)
 S ADM("dateTime")=$$JSONDT^VPRUTILS(DATE)
"RTN","VPRDJ04",76,0)
 S FAC=$$FAC^VPRD(+HLOC) D FACILITY^VPRUTILS(FAC,"ADM") I HLOC D
"RTN","VPRDJ04",77,0)
 . S HLOC=+HLOC_";"_$P($G(^SC(+HLOC,0)),U)
"RTN","VPRDJ04",78,0)
 . S ADM("uid")=ADM("uid")_";"_+HLOC
"RTN","VPRDJ04",79,0)
 . S ADM("locationName")=$P(HLOC,";",2)
"RTN","VPRDJ04",80,0)
 . S ADM("locationUid")=$$SETUID^VPRUTILS("location",,+HLOC)
"RTN","VPRDJ04",81,0)
 . S X=$$GET1^DIQ(44,+HLOC_",",8,"I"),X=$$AMIS^VPRDVSIT(X)
"RTN","VPRDJ04",82,0)
 . S:$L(X) ADM("stopCodeUid")="urn:va:stop-code:"_$P(X,U),ADM("stopCodeName")=$P(X,U,2)
"RTN","VPRDJ04",83,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","VPRDJ04",84,0)
 . I SV S ADM("service")=$$SERV^VPRDSDAM(SV)
"RTN","VPRDJ04",85,0)
 S X=+$P(X0,U,5) I X D
"RTN","VPRDJ04",86,0)
 . S ADM("providers",1,"providerUid")=$$SETUID^VPRUTILS("user",,X)
"RTN","VPRDJ04",87,0)
 . S ADM("providers",1,"providerName")=$P($G(^VA(200,X,0)),U)
"RTN","VPRDJ04",88,0)
 S ADM("patientClassCode")="urn:va:patient-class:IMP",ADM("patientClassName")="Inpatient"
"RTN","VPRDJ04",89,0)
 S ADM("categoryCode")="urn:va:encounter-category:AD",ADM("categoryName")="Admission"
"RTN","VPRDJ04",90,0)
 S ADM("appointmentStatus")=$S($P(X0,U,17):"ADMITTED",$P(X0,U,13):"CANCELLED",1:"SCHEDULED")
"RTN","VPRDJ04",91,0)
 D ADD^VPRDJ("ADM","appointment")
"RTN","VPRDJ04",92,0)
 Q
"RTN","VPRDJ04",93,0)
 ;
"RTN","VPRDJ04",94,0)
VSIT1(ID) ; -- visit
"RTN","VPRDJ04",95,0)
 N VST,X0,X15,X,FAC,LOC,CATG,AMIS,INPT,DA
"RTN","VPRDJ04",96,0)
 I $G(ID)?1"H"1.N D ADM^VPRDJ04A(ID) Q
"RTN","VPRDJ04",97,0)
 I $D(^EDP(230,"V",ID)),$L($T(EDP1^VPRDJ04E)) D EDP1^VPRDJ04E(ID) Q
"RTN","VPRDJ04",98,0)
 D ENCEVENT^PXAPI(ID)
"RTN","VPRDJ04",99,0)
 ;
"RTN","VPRDJ04",100,0)
 S X0=$G(^TMP("PXKENC",$J,ID,"VST",ID,0)),X15=$G(^(150))
"RTN","VPRDJ04",101,0)
 ;Q:$P(X15,U,3)'="P"  Q:$P(X0,U,7)="E"  Q:$P(X0,U,12)  ;primary, not historical or child
"RTN","VPRDJ04",102,0)
 I $P(X0,U,7)="H" D ADM^VPRDJ04A(ID,+X0) Q
"RTN","VPRDJ04",103,0)
 S VST("localId")=ID,VST("uid")=$$SETUID^VPRUTILS("visit",DFN,ID)
"RTN","VPRDJ04",104,0)
 S VST("dateTime")=$$JSONDT^VPRUTILS(+X0)
"RTN","VPRDJ04",105,0)
 S:$P(X0,U,18) VST("checkOut")=$$JSONDT^VPRUTILS($P(X0,U,18))
"RTN","VPRDJ04",106,0)
 S:$P(X0,U,12) VST("parentUid")=$$SETUID^VPRUTILS("visit",DFN,$P(X0,U,12))
"RTN","VPRDJ04",107,0)
 S FAC=+$P(X0,U,6),CATG=$P(X0,U,7),LOC=+$P(X0,U,22)
"RTN","VPRDJ04",108,0)
 S:FAC X=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","VPRDJ04",109,0)
 S:'FAC X=$$FAC^VPRD(LOC) D FACILITY^VPRUTILS(X,"VST")
"RTN","VPRDJ04",110,0)
 S X=$S(CATG="H":"AD",CATG="C":"CR",CATG="T":"TC",CATG="N":"U",CATG="R":"NH","D^X"[CATG:"O",1:"OV")
"RTN","VPRDJ04",111,0)
 S VST("categoryCode")="urn:va:encounter-category:"_X
"RTN","VPRDJ04",112,0)
 S VST("categoryName")=$S(X="AD":"Admission",X="CR":"Chart Review",X="TC":"Phone Contact",X="U":"Unknown",X="NH":"Nursing Home",X="O":"Other",1:"Outpatient Visit")
"RTN","VPRDJ04",113,0)
 S INPT=$P(X15,U,2) S:INPT="" INPT=$S("H^I^R^D"[CATG:1,1:0)
"RTN","VPRDJ04",114,0)
 S X=$P(X15,U,3) S:$L(X) VST("encounterType")=X
"RTN","VPRDJ04",115,0)
 S X=$$CPT^VPRDVSIT(ID) S:X VST("typeName")=$P($$CPT^ICPTCOD(X),U,3)
"RTN","VPRDJ04",116,0)
 I 'X S VST("typeName")=$S('INPT&LOC:$P($G(^SC(LOC,0)),U)_" VISIT",1:$$CATG^VPRDVSIT(CATG))
"RTN","VPRDJ04",117,0)
 S VST("patientClassCode")="urn:va:patient-class:"_$S(INPT:"IMP",1:"AMB")
"RTN","VPRDJ04",118,0)
 S VST("patientClassName")=$S(INPT:"Inpatient",1:"Ambulatory")
"RTN","VPRDJ04",119,0)
 S X=$P(X0,U,8) S:X AMIS=$$AMIS^VPRDVSIT(X) I LOC D
"RTN","VPRDJ04",120,0)
 . N L0 S L0=$G(^SC(LOC,0))
"RTN","VPRDJ04",121,0)
 . I 'X S AMIS=$$AMIS^VPRDVSIT($P(L0,U,7))
"RTN","VPRDJ04",122,0)
 . S VST("locationUid")=$$SETUID^VPRUTILS("location",,+LOC)
"RTN","VPRDJ04",123,0)
 . S VST("locationName")=$P(L0,U)
"RTN","VPRDJ04",124,0)
 . S X=$$SERV^VPRDVSIT($P(L0,U,20)) S:$L(X) VST("service")=X
"RTN","VPRDJ04",125,0)
 S:$D(AMIS) VST("stopCodeUid")="urn:va:stop-code:"_$P(AMIS,U),VST("stopCodeName")=$P(AMIS,U,2)
"RTN","VPRDJ04",126,0)
 S X=$$POV^VPRDVSIT(ID) S:$L(X) VST("reasonUid")=$$SETNCS^VPRUTILS("icd",$P(X,U)),VST("reasonName")=$P(X,U,2)
"RTN","VPRDJ04",127,0)
 ; provider(s)
"RTN","VPRDJ04",128,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,ID,"PRV",DA)) Q:DA<1  S X0=$G(^(DA,0)) D
"RTN","VPRDJ04",129,0)
 . I $P(X0,U,4)="P" D PROV("VST",DA,+X0,"P",1) Q  ;primary
"RTN","VPRDJ04",130,0)
 . D PROV("VST",DA,+X0,"S")                       ;secondary
"RTN","VPRDJ04",131,0)
 K ^TMP("PXKENC",$J,ID)
"RTN","VPRDJ04",132,0)
 D ADD^VPRDJ("VST","visit")
"RTN","VPRDJ04",133,0)
 Q
"RTN","VPRDJ04",134,0)
 ;
"RTN","VPRDJ04",135,0)
PROV(ARR,I,IEN,ROLE,PRIM) ; -- add providers
"RTN","VPRDJ04",136,0)
 S @ARR@("providers",I,"providerUid")=$$SETUID^VPRUTILS("user",,+IEN)
"RTN","VPRDJ04",137,0)
 S @ARR@("providers",I,"providerName")=$P($G(^VA(200,+IEN,0)),U)
"RTN","VPRDJ04",138,0)
 S @ARR@("providers",I,"role")=ROLE
"RTN","VPRDJ04",139,0)
 S:$G(PRIM) @ARR@("providers",I,"primary")="true"
"RTN","VPRDJ04",140,0)
 Q
"RTN","VPRDJ04",141,0)
 ;
"RTN","VPRDJ04",142,0)
NAME(IEN) ; -- Return a string 'name' for the visit
"RTN","VPRDJ04",143,0)
 N Y,X0,LOC,DATE
"RTN","VPRDJ04",144,0)
 S X0=$G(^AUPNVSIT(+$G(IEN),0)),Y=""
"RTN","VPRDJ04",145,0)
 S DATE=+X0,LOC=+$P(X0,U,22) S:LOC LOC=$P($G(^SC(LOC,0)),U)_" "
"RTN","VPRDJ04",146,0)
 S Y=LOC_$$FMTE^XLFDT(DATE,"1D") ;Mon DD, YYYY
"RTN","VPRDJ04",147,0)
 Q Y
"RTN","VPRDJ04A")
0^81^B36007346
"RTN","VPRDJ04A",1,0)
VPRDJ04A ;SLC/MKB -- Admissions,PTF ;7/25/13
"RTN","VPRDJ04A",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ04A",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ04A",4,0)
 ;
"RTN","VPRDJ04A",5,0)
 ; External References          DBIA#
"RTN","VPRDJ04A",6,0)
 ; -------------------          -----
"RTN","VPRDJ04A",7,0)
 ; ^AUPNVSIT                     2028
"RTN","VPRDJ04A",8,0)
 ; ^DGPM                         1865
"RTN","VPRDJ04A",9,0)
 ; ^DIC(42                      10039
"RTN","VPRDJ04A",10,0)
 ; ^DPT                         10035
"RTN","VPRDJ04A",11,0)
 ; ^SC                          10040
"RTN","VPRDJ04A",12,0)
 ; ^VA(200                      10060
"RTN","VPRDJ04A",13,0)
 ; DGPTFAPI                      3157
"RTN","VPRDJ04A",14,0)
 ; DIC                           2051
"RTN","VPRDJ04A",15,0)
 ; DILFD                         2055
"RTN","VPRDJ04A",16,0)
 ; DIQ                           2056
"RTN","VPRDJ04A",17,0)
 ; ICDCODE                       3990
"RTN","VPRDJ04A",18,0)
 ; ICPTCOD                       1995
"RTN","VPRDJ04A",19,0)
 ; VADPT                        10061
"RTN","VPRDJ04A",20,0)
 ; XUAF4                         2171
"RTN","VPRDJ04A",21,0)
 ;
"RTN","VPRDJ04A",22,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ04A",23,0)
 ;
"RTN","VPRDJ04A",24,0)
ADM(ID,DATE) ; -- admission [from VSIT1]
"RTN","VPRDJ04A",25,0)
 N ADM,VADMVT,VAIP,VAERR,MVT,SPEC,HLOC,FAC,ICD,I
"RTN","VPRDJ04A",26,0)
 S ID=$G(ID),DATE=+$G(DATE) Q:ID=""  ;Q:DATE<1
"RTN","VPRDJ04A",27,0)
 I ID S VAIP("D")=DATE,VST=+ID
"RTN","VPRDJ04A",28,0)
 I ID?1"H"1.N S VAIP("E")=+$E(ID,2,99),VST=0
"RTN","VPRDJ04A",29,0)
 D IN5^VADPT Q:'$G(VAIP(1))  ;deleted
"RTN","VPRDJ04A",30,0)
 S VADMVT=+$G(VAIP(13)),ID="H"_VADMVT
"RTN","VPRDJ04A",31,0)
 S ADM("localId")=ID,ADM("uid")=$$SETUID^VPRUTILS("visit",DFN,ID)
"RTN","VPRDJ04A",32,0)
 S:'DATE DATE=+$G(VAIP(13,1)) S:'VST VST=$$VISIT(DFN,DATE)
"RTN","VPRDJ04A",33,0)
 S (ADM("dateTime"),ADM("stay","arrivalDateTime"))=$$JSONDT^VPRUTILS(DATE)
"RTN","VPRDJ04A",34,0)
 S:$L($P(VAIP(6),U,2)) ADM("roomBed")=$P(VAIP(6),U,2)
"RTN","VPRDJ04A",35,0)
 S MVT=13,I=0 I VADMVT=$G(^DPT(DFN,.105)) D  ;if current admission,
"RTN","VPRDJ04A",36,0)
 . S ADM("current")="true",MVT=14            ; use last movement info
"RTN","VPRDJ04A",37,0)
 . S X=$G(^DPT(DFN,.101)) S:$L(X) ADM("roomBed")=X
"RTN","VPRDJ04A",38,0)
 . K VPRADMIT                                ;kill flag from VPRDJ0
"RTN","VPRDJ04A",39,0)
 S SPEC=$G(VAIP(MVT,6)),ADM("specialty")=$P(SPEC,U,2)
"RTN","VPRDJ04A",40,0)
 S X=$$SERV^VPRDVSIT(+SPEC),ADM("service")=X
"RTN","VPRDJ04A",41,0)
 S HLOC=+$G(^DIC(42,+$G(VAIP(MVT,4)),44)),FAC=$$FAC^VPRD(+HLOC) I HLOC D
"RTN","VPRDJ04A",42,0)
 . S ADM("locationUid")=$$SETUID^VPRUTILS("location",,+HLOC)
"RTN","VPRDJ04A",43,0)
 . S ADM("locationName")=$P($G(^SC(HLOC,0)),U)
"RTN","VPRDJ04A",44,0)
 . S X=$$AMIS^VPRDVSIT($P($G(^SC(HLOC,0)),U,7))
"RTN","VPRDJ04A",45,0)
 . S:$L($G(X)) ADM("stopCodeUid")="urn:va:stop-code:"_$P(X,U),ADM("stopCodeName")=$P(X,U,2)
"RTN","VPRDJ04A",46,0)
 . S ADM("summary")="${"_ADM("service")_"}:"_ADM("locationName")
"RTN","VPRDJ04A",47,0)
 D FACILITY^VPRUTILS(FAC,"ADM")
"RTN","VPRDJ04A",48,0)
 S ADM("categoryCode")="urn:va:encounter-category:AD",ADM("categoryName")="Admission"
"RTN","VPRDJ04A",49,0)
 S ADM("patientClassCode")="urn:va:patient-class:IMP",ADM("patientClassName")="Inpatient"
"RTN","VPRDJ04A",50,0)
 I $G(VAIP(17)) S ADM("stay","dischargeDateTime")=$$JSONDT^VPRUTILS(+$G(VAIP(17,1)))
"RTN","VPRDJ04A",51,0)
 I $G(VAIP(18)) S I=I+1 D PROV("ADM",I,+VAIP(18),"A")         ;attending
"RTN","VPRDJ04A",52,0)
 I $G(VAIP(MVT,5)) S I=I+1 D PROV("ADM",I,+VAIP(MVT,5),"P",1) ;primary
"RTN","VPRDJ04A",53,0)
 S ICD=$$POV^VPRDVSIT(VST) S:'ICD ICD=$$PTF^VPRDVSIT(DFN,VAIP(12)) ;PTF>ICD
"RTN","VPRDJ04A",54,0)
 I $L(ICD)<2 S ADM("reasonName")=$G(VAIP(MVT,7))
"RTN","VPRDJ04A",55,0)
 E  S ADM("reasonUid")=$$SETNCS^VPRUTILS("icd",ICD),ADM("reasonName")=$P(ICD,U,2)
"RTN","VPRDJ04A",56,0)
 S X=$$CPT^VPRDVSIT(VST),ADM("typeName")=$S(X:$P($$CPT^ICPTCOD(X),U,3),1:$$CATG^VPRDVSIT("H"))
"RTN","VPRDJ04A",57,0)
 D MVT(VADMVT)   ;sub-movements
"RTN","VPRDJ04A",58,0)
 ; TIU(VST,.ADM) ;notes/summary
"RTN","VPRDJ04A",59,0)
 D ADD^VPRDJ("ADM","visit")
"RTN","VPRDJ04A",60,0)
 Q
"RTN","VPRDJ04A",61,0)
 ;
"RTN","VPRDJ04A",62,0)
TIU(VISIT,ARR) ; -- add notes to ARR("document")
"RTN","VPRDJ04A",63,0)
 N X,Y,I,VPRX,LT,NT,DA,CNT,VPRY
"RTN","VPRDJ04A",64,0)
 D FIND^DIC(8925,,.01,"QX",+$G(VISIT),,"V",,,"VPRX")
"RTN","VPRDJ04A",65,0)
 S Y="",(I,CNT)=0
"RTN","VPRDJ04A",66,0)
 F  S I=$O(VPRX("DILIST",1,I)) Q:I<1  D
"RTN","VPRDJ04A",67,0)
 . S LT=$G(VPRX("DILIST","ID",I,.01)) Q:$P(LT," ")="Addendum"
"RTN","VPRDJ04A",68,0)
 . S DA=$G(VPRX("DILIST",2,I))
"RTN","VPRDJ04A",69,0)
 . S NT=$$GET1^DIQ(8925,+DA_",",".01:1501")
"RTN","VPRDJ04A",70,0)
 . S CNT=CNT+1,ARR("documents",CNT,"uid")=$$SETUID^VPRUTILS("document",DFN,+DA)
"RTN","VPRDJ04A",71,0)
 . S ARR("documents",CNT,"localTitle")=LT
"RTN","VPRDJ04A",72,0)
 . S:$L(NT) ARR("documents",CNT,"nationalTitle")=NT
"RTN","VPRDJ04A",73,0)
 Q
"RTN","VPRDJ04A",74,0)
 ;
"RTN","VPRDJ04A",75,0)
PROV(ARR,I,IEN,ROLE,PRIM) ; -- add providers
"RTN","VPRDJ04A",76,0)
 S @ARR@("providers",I,"providerUid")=$$SETUID^VPRUTILS("user",,+IEN)
"RTN","VPRDJ04A",77,0)
 S @ARR@("providers",I,"providerName")=$P($G(^VA(200,+IEN,0)),U)
"RTN","VPRDJ04A",78,0)
 S @ARR@("providers",I,"role")=ROLE
"RTN","VPRDJ04A",79,0)
 S:$G(PRIM) @ARR@("providers",I,"primary")="true"
"RTN","VPRDJ04A",80,0)
 Q
"RTN","VPRDJ04A",81,0)
 ;
"RTN","VPRDJ04A",82,0)
MVT(CA) ; -- add movements to ADM("movement",i,"attribute")
"RTN","VPRDJ04A",83,0)
 N DATE,DA,CNT,X S (DATE,CNT)=0
"RTN","VPRDJ04A",84,0)
 F  S DATE=$O(^DGPM("APCA",DFN,CA,DATE)) Q:DATE<1  S DA=+$O(^(DATE,0)) I DA'=CA D
"RTN","VPRDJ04A",85,0)
 . S X0=$G(^DGPM(DA,0)),CNT=CNT+1
"RTN","VPRDJ04A",86,0)
 . S ADM("movements",CNT,"localId")=DA
"RTN","VPRDJ04A",87,0)
 . S ADM("movements",CNT,"dateTime")=$$JSONDT^VPRUTILS(DATE)
"RTN","VPRDJ04A",88,0)
 . S ADM("movements",CNT,"movementType")=$$EXTERNAL^DILFD(405,.02,,$P(X0,U,2))
"RTN","VPRDJ04A",89,0)
 . S X=+$P(X0,U,19) I X D
"RTN","VPRDJ04A",90,0)
 .. S ADM("movements",CNT,"providerUid")=$$SETUID^VPRUTILS("user",,X)
"RTN","VPRDJ04A",91,0)
 .. S ADM("movements",CNT,"providerName")=$P($G(^VA(200,X,0)),U)
"RTN","VPRDJ04A",92,0)
 . S X=+$P(X0,U,9)
"RTN","VPRDJ04A",93,0)
 . S:X ADM("movements",CNT,"specialty")=$$EXTERNAL^DILFD(405,.09,,X)
"RTN","VPRDJ04A",94,0)
 . S HLOC=+$G(^DIC(42,+$P(X0,U,6),44)),FAC=$$FAC^VPRD(HLOC) I HLOC D
"RTN","VPRDJ04A",95,0)
 .. S ADM("movements",CNT,"locationUid")=$$SETUID^VPRUTILS("location",,HLOC)
"RTN","VPRDJ04A",96,0)
 .. S ADM("movements",CNT,"locationName")=$P($G(^SC(HLOC,0)),U)
"RTN","VPRDJ04A",97,0)
 Q
"RTN","VPRDJ04A",98,0)
 ;
"RTN","VPRDJ04A",99,0)
PTFA(ID) ; -- find ID in ^PXRMINDX(FNUM), fall thru to PX1 if successful
"RTN","VPRDJ04A",100,0)
 N ROOT,IDX,ITEM,DATE K ^TMP("VPRPX",$J)
"RTN","VPRDJ04A",101,0)
 S P=$L(ID,";"),TYPE=$P(ID,";",P),ID=$P(ID,";",1,P-1)
"RTN","VPRDJ04A",102,0)
 S ROOT="^PXRMINDX(45,""ICD9"",""PNI"","_+$G(DFN)_","_""""_TYPE_""""
"RTN","VPRDJ04A",103,0)
 S IDX=ROOT_")" F  S IDX=$Q(@IDX) Q:$P(IDX,",",1,5)'=ROOT  D
"RTN","VPRDJ04A",104,0)
 . I """"_ID_""")"'=$P(IDX,",",8) Q
"RTN","VPRDJ04A",105,0)
 . S DATE=+$P(IDX,",",7),ITEM=+$P(IDX,",",6)
"RTN","VPRDJ04A",106,0)
 . S VPRIDT=9999999-DATE,^TMP("VPRPX",$J,VPRIDT,ID_";"_TYPE)=ITEM_U_DATE
"RTN","VPRDJ04A",107,0)
 Q:'$D(^TMP("VPRPX",$J))  ;not found
"RTN","VPRDJ04A",108,0)
 S ID=ID_";"_TYPE
"RTN","VPRDJ04A",109,0)
PTF1 ; -- PTF where ID=iens;TYPE
"RTN","VPRDJ04A",110,0)
 ;   Expects ^TMP("VPRPX",$J,VPRIDT,ID)=ITM^[DISCHARGE]DATE
"RTN","VPRDJ04A",111,0)
 N TMP,PTF,ADM,DIS,VAIN,VAINDT,HLOC,FAC,X,Y,VISIT,X0
"RTN","VPRDJ04A",112,0)
 ; PTF^DGPTPXRM(+ID,.VPRF)
"RTN","VPRDJ04A",113,0)
 S TMP=$G(^TMP("VPRPX",$J,VPRIDT,ID))
"RTN","VPRDJ04A",114,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ04A",115,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ04A",116,0)
 S ERRMSG="A problem occurred converting a record for the ptf domain"
"RTN","VPRDJ04A",117,0)
 ;
"RTN","VPRDJ04A",118,0)
 S PTF("localId")=ID,PTF("uid")=$$SETUID^VPRUTILS("ptf",DFN,ID)
"RTN","VPRDJ04A",119,0)
 S P=$L(ID,";"),TYPE=$P(ID,";",P) S:TYPE="DXLS" PTF("principalDx")="true"
"RTN","VPRDJ04A",120,0)
 S X=$$ICDDX^ICDCODE($P(TMP,U),$P(TMP,U,2)),Y=$S($P(X,U,4)'="":$P(X,U,4),1:$P(X,U,2))
"RTN","VPRDJ04A",121,0)
 S PTF("icdCode")=$$SETNCS^VPRUTILS("icd",$P(X,U,2)),PTF("icdName")=Y
"RTN","VPRDJ04A",122,0)
 S DIS=$P(TMP,U,2) S:DIS VAINDT=DIS-.0001
"RTN","VPRDJ04A",123,0)
 D INP^VADPT Q:'$G(VAIN(1))  ;admission not found
"RTN","VPRDJ04A",124,0)
 S PTF("admissionUid")=$$SETUID^VPRUTILS("visit",DFN,"H"_VAIN(1))
"RTN","VPRDJ04A",125,0)
 S ADM=+$G(VAIN(7)),HLOC=+$G(^DIC(42,+$G(VAIN(4)),44))
"RTN","VPRDJ04A",126,0)
 S:ADM PTF("arrivalDateTime")=$$JSONDT^VPRUTILS(ADM)
"RTN","VPRDJ04A",127,0)
 S:DIS PTF("dischargeDateTime")=$$JSONDT^VPRUTILS(DIS)
"RTN","VPRDJ04A",128,0)
 S FAC=$$FAC^VPRD(HLOC) D:FAC FACILITY^VPRUTILS(FAC,"PTF")
"RTN","VPRDJ04A",129,0)
 D ADD^VPRDJ("PTF","ptf")
"RTN","VPRDJ04A",130,0)
 Q
"RTN","VPRDJ04A",131,0)
 ;
"RTN","VPRDJ04A",132,0)
VISIT(DFN,DATE) ; -- Return visit# for admission
"RTN","VPRDJ04A",133,0)
 N X,Y
"RTN","VPRDJ04A",134,0)
 S X=9999999-$P(DATE,".")_"."_$P(DATE,".",2)
"RTN","VPRDJ04A",135,0)
 S Y=+$O(^AUPNVSIT("AAH",DFN,X,0))
"RTN","VPRDJ04A",136,0)
 Q Y
"RTN","VPRDJ04E")
0^49^B10170703
"RTN","VPRDJ04E",1,0)
VPRDJ04E ;SLC/MKB -- EDIS ;6/25/12  16:11
"RTN","VPRDJ04E",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJ04E",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ04E",4,0)
 ;
"RTN","VPRDJ04E",5,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ04E",6,0)
 ;
"RTN","VPRDJ04E",7,0)
 ;
"RTN","VPRDJ04E",8,0)
EDP1(ID) ; -- ED visit
"RTN","VPRDJ04E",9,0)
 N DA,EDP,X0,VST,FAC,LOC,LOC0,X,I,ICD
"RTN","VPRDJ04E",10,0)
 S DA=+$O(^EDP(230,"V",+$G(ID),0)) Q:DA<1
"RTN","VPRDJ04E",11,0)
 S EDP=$G(^EDP(230,DA,0)),X0=$G(^AUPNVSIT(ID,0))
"RTN","VPRDJ04E",12,0)
 ;
"RTN","VPRDJ04E",13,0)
 S VST("localId")=ID,VST("uid")=$$SETUID^VPRUTILS("visit",DFN,ID)
"RTN","VPRDJ04E",14,0)
 S VST("dateTime")=$$JSONDT^VPRUTILS(+X0)
"RTN","VPRDJ04E",15,0)
 S:$P(EDP,U,8) VST("stay","arrivalDateTime")=$$JSONDT^VPRUTILS($P(EDP,U,8))
"RTN","VPRDJ04E",16,0)
 S:$P(EDP,U,9) VST("stay","dischargeDateTime")=$$JSONDT^VPRUTILS($P(EDP,U,9))
"RTN","VPRDJ04E",17,0)
 S FAC=+$P(EDP,U,2),LOC=+$P(EDP,U,14),LOC0=$S(LOC:$G(^SC(LOC,0)),1:"")
"RTN","VPRDJ04E",18,0)
 S:FAC X=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","VPRDJ04E",19,0)
 S:'FAC X=$$FAC^VPRD(LOC) D FACILITY^VPRUTILS(X,"VST")
"RTN","VPRDJ04E",20,0)
 S VST("categoryCode")="urn:va:encounter-category:OV"
"RTN","VPRDJ04E",21,0)
 S VST("categoryName")="Outpatient Visit"
"RTN","VPRDJ04E",22,0)
 S VST("patientClassCode")="urn:va:patient-class:EMER"
"RTN","VPRDJ04E",23,0)
 S VST("patientClassName")="Emergency"
"RTN","VPRDJ04E",24,0)
 ;
"RTN","VPRDJ04E",25,0)
 S X=$$CPT^VPRDVSIT(ID) S:X VST("typeName")=$P($$CPT^ICPTCOD(X),U,3)
"RTN","VPRDJ04E",26,0)
 I 'X S VST("typeName")=$S(LOC:$P(LOC0,U)_" VISIT",1:"EMERGENCY")
"RTN","VPRDJ04E",27,0)
 S X=$P(X0,U,8) S:X AMIS=$$AMIS^VPRDVSIT(X) I LOC D
"RTN","VPRDJ04E",28,0)
 . I 'X S AMIS=$$AMIS^VPRDVSIT($P(LOC0,U,7))
"RTN","VPRDJ04E",29,0)
 . S VST("locationUid")=$$SETUID^VPRUTILS("location",,+LOC)
"RTN","VPRDJ04E",30,0)
 . S VST("locationName")=$P(LOC0,U)
"RTN","VPRDJ04E",31,0)
 . S X=$$SERV^VPRDVSIT($P(LOC0,U,20)) Q:X=""
"RTN","VPRDJ04E",32,0)
 . S:$L(X) VST("service")=X,VST("summary")="${"_VST("service")_"}:"_$P(LOC0,U)
"RTN","VPRDJ04E",33,0)
 S:$G(AMIS) VST("stopCodeUid")="urn:va:stop-code:"_$P(AMIS,U),VST("stopCodeName")=$P(AMIS,U,2)
"RTN","VPRDJ04E",34,0)
 ; X=$$POV^VPRDVSIT(ID) S:$L(X) VST("reasonUid")=$$SETNCS^VPRUTILS("icd",$P(X,U)),VST("reasonName")=$P(X,U,2)
"RTN","VPRDJ04E",35,0)
 ;
"RTN","VPRDJ04E",36,0)
 S VST("reasonName")=$P($G(^EDP(230,+DA,1)),U)
"RTN","VPRDJ04E",37,0)
 S I=0 F  S I=$O(^EDP(230,+DA,4,I)) Q:I<1  I $P($G(^(I,0)),U,3) D  ;primary Dx
"RTN","VPRDJ04E",38,0)
 . S X=$G(^EDP(230,+DA,4,I,0)),VST("reasonName")=$P(X,U) Q:'$P(X,U,2)
"RTN","VPRDJ04E",39,0)
 . S ICD=$$ICD^VPRDVSIT($P(X,U,2)) Q:$L(ICD)'>1
"RTN","VPRDJ04E",40,0)
 . S VST("reasonUid")=$$SETNCS^VPRUTILS("icd",$P(ICD,U)),VST("reasonName")=$P(ICD,U,2)
"RTN","VPRDJ04E",41,0)
 ;
"RTN","VPRDJ04E",42,0)
 ; provider(s)
"RTN","VPRDJ04E",43,0)
 S EDP=$G(^EDP(230,DA,3)),I=0
"RTN","VPRDJ04E",44,0)
 I $P(EDP,U,5) S I=I+1 D PROV("VST",I,+$P(EDP,U,5),"P",1) ;primary/MD
"RTN","VPRDJ04E",45,0)
 I $P(EDP,U,6) S I=I+1 D PROV("VST",I,+$P(EDP,U,6),"N")   ;nurse
"RTN","VPRDJ04E",46,0)
 I $P(EDP,U,7) S I=I+1 D PROV("VST",I,+$P(EDP,U,7),"R")   ;resident
"RTN","VPRDJ04E",47,0)
 S:$L($P(EDP,U,8)) VST("comment")=$P(EDP,U,8)
"RTN","VPRDJ04E",48,0)
 S:$P(EDP,U,2) VST("appointmentStatus")=$$NAME(+$P(EDP,U,2))
"RTN","VPRDJ04E",49,0)
 ;
"RTN","VPRDJ04E",50,0)
 ; note(s)
"RTN","VPRDJ04E",51,0)
 ; TIU^VPRDJ04A(ID,.VST)
"RTN","VPRDJ04E",52,0)
 K ^TMP("PXKENC",$J,ID)
"RTN","VPRDJ04E",53,0)
 D ADD^VPRDJ("VST","visit")
"RTN","VPRDJ04E",54,0)
 Q
"RTN","VPRDJ04E",55,0)
 ;
"RTN","VPRDJ04E",56,0)
PROV(ARR,I,IEN,ROLE,PRIM) ; -- add providers
"RTN","VPRDJ04E",57,0)
 S @ARR@("providers",I,"providerUid")=$$SETUID^VPRUTILS("user",,+IEN)
"RTN","VPRDJ04E",58,0)
 S @ARR@("providers",I,"providerName")=$P($G(^VA(200,+IEN,0)),U)
"RTN","VPRDJ04E",59,0)
 S @ARR@("providers",I,"role")=ROLE
"RTN","VPRDJ04E",60,0)
 S:$G(PRIM) @ARR@("providers",I,"primary")="true"
"RTN","VPRDJ04E",61,0)
 Q
"RTN","VPRDJ04E",62,0)
 ;
"RTN","VPRDJ04E",63,0)
NAME(X) ; -- name of a code in #233.1
"RTN","VPRDJ04E",64,0)
 N Y S Y=$P($G(^EDPB(233.1,+$G(X),0)),U,2)
"RTN","VPRDJ04E",65,0)
 Q Y
"RTN","VPRDJ05")
0^75^B78637701
"RTN","VPRDJ05",1,0)
VPRDJ05 ;SLC/MKB -- Medications by order ;8/2/11  15:29
"RTN","VPRDJ05",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ05",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ05",4,0)
 ;
"RTN","VPRDJ05",5,0)
 ; External References: see VPRDJ05V for DBIA list
"RTN","VPRDJ05",6,0)
 ;
"RTN","VPRDJ05",7,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ05",8,0)
 ;
"RTN","VPRDJ05",9,0)
PS1(ID) ; -- med order
"RTN","VPRDJ05",10,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ05",11,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ05",12,0)
 S ERRMSG="A problem occurred converting order "_ID_" for the medication domain"
"RTN","VPRDJ05",13,0)
 N ORPK,TYPE S ID=+$G(ID)
"RTN","VPRDJ05",14,0)
 S ORPK=$$PKGID^ORX8(ID),TYPE=$E(ORPK,$L(ORPK)) S:TYPE=+TYPE TYPE="R"
"RTN","VPRDJ05",15,0)
 ;
"RTN","VPRDJ05",16,0)
 N ORUPCHUK,ORVP,ORPCL,ORDUZ,ORODT,ORSTRT,ORSTOP,ORL,ORTO,ORSTS,ORNP,ORPV,ORTX
"RTN","VPRDJ05",17,0)
 N MED,CLS,OI,X,LOC,FAC,DRUG,DA,CNT,VPRESP
"RTN","VPRDJ05",18,0)
 S X=$S(ORPK:$E(ORPK,$L(ORPK)),1:"Z") S:X=+X X="R" ;last char = PS file
"RTN","VPRDJ05",19,0)
 S CLS=$S("RSN"[X:"O","UV"[X:"I",1:$$GET1^DIQ(100,ID_",",10,"I"))
"RTN","VPRDJ05",20,0)
 S MED("uid")=$$SETUID^VPRUTILS("med",DFN,ID)
"RTN","VPRDJ05",21,0)
 S MED("orders",1,"orderUid")=$$SETUID^VPRUTILS("order",DFN,ID)
"RTN","VPRDJ05",22,0)
 S X=$$GET1^DIQ(100,ID_",",9,"I") S:X MED("orders",1,"predecessor")=$$SETUID^VPRUTILS("med",DFN,+X)
"RTN","VPRDJ05",23,0)
 S X=$$GET1^DIQ(100,ID_",",9.1,"I") S:X MED("orders",1,"successor")=$$SETUID^VPRUTILS("med",DFN,+X)
"RTN","VPRDJ05",24,0)
 S:ORPK MED("localId")=ORPK_";"_CLS
"RTN","VPRDJ05",25,0)
 D EN^ORX8(ID) S X="" F  S X=$O(ORUPCHUK(X)) Q:X=""  S:$D(ORUPCHUK(X))#2 @X=ORUPCHUK(X)
"RTN","VPRDJ05",26,0)
 S:$G(ORODT) MED("orders",1,"ordered")=$$JSONDT^VPRUTILS(ORODT)
"RTN","VPRDJ05",27,0)
 S:$G(ORNP) MED("orders",1,"providerUid")=$$SETUID^VPRUTILS("user",,+ORNP),MED("orders",1,"providerName")=$P(ORNP,U,2)
"RTN","VPRDJ05",28,0)
 S LOC=+$G(ORL),FAC=$$FAC^VPRD(LOC) I LOC D
"RTN","VPRDJ05",29,0)
 . S MED("orders",1,"locationUid")=$$SETUID^VPRUTILS("location",,LOC)
"RTN","VPRDJ05",30,0)
 . S MED("orders",1,"locationName")=$P(^SC(LOC,0),U)
"RTN","VPRDJ05",31,0)
 D FACILITY^VPRUTILS(FAC,"MED")
"RTN","VPRDJ05",32,0)
 S:$G(ORSTRT) MED("overallStart")=$$JSONDT^VPRUTILS(ORSTRT)
"RTN","VPRDJ05",33,0)
 S:$G(ORSTOP) (MED("stopped"),MED("overallStop"))=$$JSONDT^VPRUTILS(ORSTOP)
"RTN","VPRDJ05",34,0)
 S MED("vaStatus")=$P($G(ORSTS),U,2)
"RTN","VPRDJ05",35,0)
 S MED("medStatusName")=$$STATUS^VPRDPSOR(+$G(ORSTS))
"RTN","VPRDJ05",36,0)
 S MED("medStatus")=$$MEDSTAT^VPRDJ05V(MED("medStatusName"))
"RTN","VPRDJ05",37,0)
 I CLS="I" D
"RTN","VPRDJ05",38,0)
 . S:$P($G(^SC(+$G(LOC),0)),U,25) MED("IMO")="true"
"RTN","VPRDJ05",39,0)
 . S X=$P($G(^OR(100,ID,3)),U,9) S:X MED("parent")=X
"RTN","VPRDJ05",40,0)
 I ORPK D OEL^PSOORRL(DFN,ORPK_";"_CLS)
"RTN","VPRDJ05",41,0)
 S X=$S(ORPK["N":"N",1:CLS),MED("vaType")=X,MED("medType")=$$TYPE^VPRDJ05V(X)
"RTN","VPRDJ05",42,0)
 I CLS="O" S MED("type")=$S(ORPK["N":"OTC",1:"Prescription")
"RTN","VPRDJ05",43,0)
 S X=$G(VPRESP("COMMENT",1)) S:$L(X) MED("comment")=X
"RTN","VPRDJ05",44,0)
 I $$ISIV^VPRDJ05V G IV1^VPRDJ05V
"RTN","VPRDJ05",45,0)
 ;
"RTN","VPRDJ05",46,0)
A ; - Get order responses
"RTN","VPRDJ05",47,0)
 S OI=$$OI^ORX8(ID) I OI D
"RTN","VPRDJ05",48,0)
 . S X=$P(OI,U,2) S:$E(X,$L(X))=" " X=$E(X,1,$L(X)-1)
"RTN","VPRDJ05",49,0)
 . S MED("name")=X
"RTN","VPRDJ05",50,0)
 . D ZERO^PSS50P7(+$P(OI,U,3),,,"PSOI")
"RTN","VPRDJ05",51,0)
 . S MED("productFormName")=$P($G(^TMP($J,"PSOI",+$P(OI,U,3),.02)),U,2)
"RTN","VPRDJ05",52,0)
 . S:+$G(^TMP($J,"PSOI",+$P(OI,U,3),.09)) MED("supply")="true"
"RTN","VPRDJ05",53,0)
 D RESP^VPRDPSOR(ID,.VPRESP) ;order responses
"RTN","VPRDJ05",54,0)
 S DRUG=+$G(^TMP("PS",$J,"DD",1,0)) S:'DRUG DRUG=+$G(VPRESP("DRUG",1))
"RTN","VPRDJ05",55,0)
 S MED("sig")=$S(CLS="I":"Give: ",1:"")_$G(VPRESP("SIG",1)) ;ORTX(2)
"RTN","VPRDJ05",56,0)
 I CLS="O",'$L($G(VPRESP("SIG",1))),'$D(VPRESP("INSTR")) S MED("sig")=$G(VPRESP("COMMENT",1)) ;old Rx
"RTN","VPRDJ05",57,0)
 ;
"RTN","VPRDJ05",58,0)
B ; - Get dosages
"RTN","VPRDJ05",59,0)
 I '$O(^OR(100,ID,2,0)) D  ;single dose or OP
"RTN","VPRDJ05",60,0)
 . N VPRY,START,STOP,DUR,CONJ,MIN
"RTN","VPRDJ05",61,0)
 . S START=$G(ORSTRT),STOP=$G(ORSTOP),MIN=0
"RTN","VPRDJ05",62,0)
 . S CNT=0 F  S CNT=$O(VPRESP("INSTR",CNT)) Q:CNT<1  D
"RTN","VPRDJ05",63,0)
 .. K VPRY D DOSE(.VPRY,CNT) M MED("dosages",CNT)=VPRY
"RTN","VPRDJ05",64,0)
 .. ;determine start & stop per dose
"RTN","VPRDJ05",65,0)
 .. S MED("dosages",CNT,"relativeStart")=MIN
"RTN","VPRDJ05",66,0)
 .. S DUR=$G(VPRY("complexDuration")),CONJ=$G(VPRY("complexConjunction"))
"RTN","VPRDJ05",67,0)
 .. S STOP=$S(DUR:$$STOP(START,DUR),1:STOP)
"RTN","VPRDJ05",68,0)
 .. S:START MED("dosages",CNT,"start")=$$JSONDT^VPRUTILS(START)
"RTN","VPRDJ05",69,0)
 .. S:STOP MED("dosages",CNT,"stop")=$$JSONDT^VPRUTILS(STOP)
"RTN","VPRDJ05",70,0)
 .. S X=$$RELTIME(START,STOP,DUR,MIN),MED("dosages",CNT,"relativeStop")=$S($E(X)=".":0_X,1:X)
"RTN","VPRDJ05",71,0)
 .. I $E(CONJ)="T",DUR S START=STOP,MIN=X
"RTN","VPRDJ05",72,0)
 I $O(^OR(100,ID,2,0)) D
"RTN","VPRDJ05",73,0)
 . N DD,CONJ,VPRY,MIN
"RTN","VPRDJ05",74,0)
 . M CONJ=VPRESP("CONJ"),DUR=VPRESP("DAYS") S MIN=0
"RTN","VPRDJ05",75,0)
 . S (DA,CNT)=0 F  S DA=$O(^OR(100,ID,2,DA)) Q:DA<1  D  ;child orders
"RTN","VPRDJ05",76,0)
 .. K VPRESP,VPRY D RESP^VPRDPSOR(DA,.VPRESP),DOSE(.VPRY,1)
"RTN","VPRDJ05",77,0)
 .. S CNT=CNT+1 M MED("dosages",CNT)=VPRY
"RTN","VPRDJ05",78,0)
 .. S MED("dosages",CNT,"relativeStart")=MIN
"RTN","VPRDJ05",79,0)
 .. S MED("dosages",CNT,"complexConjunction")=$G(CONJ(CNT))
"RTN","VPRDJ05",80,0)
 .. S MED("dosages",CNT,"complexDuration")=$G(DUR(CNT))
"RTN","VPRDJ05",81,0)
 .. S MED("dosages",CNT,"relatedOrder")=DA
"RTN","VPRDJ05",82,0)
 .. S X=$P($G(^OR(100,DA,0)),U,8,9)
"RTN","VPRDJ05",83,0)
 .. S:$P(X,U) MED("dosages",CNT,"start")=$$JSONDT^VPRUTILS($P(X,U))
"RTN","VPRDJ05",84,0)
 .. S:$P(X,U,2) MED("dosages",CNT,"stop")=$$JSONDT^VPRUTILS($P(X,U,2))
"RTN","VPRDJ05",85,0)
 .. I $P(X,U,2)>$G(ORSTOP) S ORSTOP=$P(X,U,2) ;get last stop time
"RTN","VPRDJ05",86,0)
 .. S X=$$RELTIME($P(X,U),$P(X,U,2),$G(DUR(CNT)),MIN)
"RTN","VPRDJ05",87,0)
 .. S MED("dosages",CNT,"relativeStop")=$S($E(X)=".":0_X,1:X) S:$G(CONJ(CNT))="T" MIN=X
"RTN","VPRDJ05",88,0)
 .. S:'DRUG DD=+$G(VPRESP("DRUG",1)),DD(DD,DA)="" ;dispense drug(s)
"RTN","VPRDJ05",89,0)
 .. ; get ^TMP("PS",$J) from 1st child, if Inpt parent:
"RTN","VPRDJ05",90,0)
 .. I '$D(^TMP("PS",$J)) S ORPK=$$PKGID^ORX8(DA) D OEL^PSOORRL(DFN,ORPK_";"_CLS)
"RTN","VPRDJ05",91,0)
 . S MED("stopped")=$$JSONDT^VPRUTILS($G(ORSTOP)) ;reset from last child order
"RTN","VPRDJ05",92,0)
 . S DD=$O(DD(0)) I DD,'$O(DD(DD)) S DRUG=DD Q    ;1 drug for order
"RTN","VPRDJ05",93,0)
 . S (DD,CNT)=0 F  S DD=$O(DD(DD)) Q:DD<1  S DA=0 F  S DA=$O(DD(DD,DA)) Q:DA<1  S CNT=CNT+1 D NDF(DD,CNT,DA)
"RTN","VPRDJ05",94,0)
 ;
"RTN","VPRDJ05",95,0)
C ; - Get OP data
"RTN","VPRDJ05",96,0)
 I CLS="O",ORPK'["N" D
"RTN","VPRDJ05",97,0)
 . S MED("orders",1,"quantityOrdered")=$G(VPRESP("QTY",1))
"RTN","VPRDJ05",98,0)
 . S MED("orders",1,"daysSupply")=$G(VPRESP("SUPPLY",1))
"RTN","VPRDJ05",99,0)
 . S MED("orders",1,"vaRouting")=$G(VPRESP("PICKUP",1))
"RTN","VPRDJ05",100,0)
 . S MED("orders",1,"fillsAllowed")=$G(VPRESP("REFILLS",1))
"RTN","VPRDJ05",101,0)
 . S MED("patientInstruction")=$G(VPRESP("PI",1))
"RTN","VPRDJ05",102,0)
 . Q:ORPK["P"!(ORPK["S")  ;pending
"RTN","VPRDJ05",103,0)
 . N VPR,RX0,RX1,FILL,RFD,MW,REL
"RTN","VPRDJ05",104,0)
 . K ^TMP("PSOR",$J) D EN^PSOORDER(DFN,+ORPK)
"RTN","VPRDJ05",105,0)
 . S RX0=$G(^TMP("PSOR",$J,+ORPK,0)),RX1=$G(^(1)),MED("orders",1,"prescriptionId")=$P(RX0,U,5)
"RTN","VPRDJ05",106,0)
 . I '$G(VPRESP("QTY",1)) S MED("orders",1,"quantityOrdered")=$P(RX0,U,6)
"RTN","VPRDJ05",107,0)
 . I '$G(VPRESP("SUPPLY",1)) S MED("orders",1,"daysSupply")=$P(RX0,U,7)
"RTN","VPRDJ05",108,0)
 . S MED("orders",1,"fillsRemaining")=$P(RX0,U,9),MED("lastFilled")=$$JSONDT^VPRUTILS($P(RX0,U,3))
"RTN","VPRDJ05",109,0)
 . S I=$P(RX0,U,2) I I S FILL(I)=I_"^^^"_$P(RX0,U,6,7)_"^^^"_$P(RX0,U,13)_"^^"_$P(RX1,U,6) ;original fill
"RTN","VPRDJ05",110,0)
 . S I=0 F  S I=$O(^TMP("PSOR",$J,+ORPK,"REF",I)) Q:I<1  S X=$G(^(I,0)),FILL(+X)=X
"RTN","VPRDJ05",111,0)
 . S I=0 F  S I=$O(^TMP("PSOR",$J,+ORPK,"RPAR",I)) Q:I<1  S X=$G(^(I,0)),$P(X,U,14)=1,FILL(+X)=X
"RTN","VPRDJ05",112,0)
 . S (I,RFD)=0 F  S RFD=$O(FILL(RFD)) Q:RFD<1  S X=$G(FILL(RFD)) D  ;sort 1st
"RTN","VPRDJ05",113,0)
 .. S I=I+1,MW=$P($P(X,U,10),";"),REL=$P($P(X,U,8),".")
"RTN","VPRDJ05",114,0)
 .. S MED("fills",I,"dispenseDate")=$$JSONDT^VPRUTILS($P(RFD,"."))
"RTN","VPRDJ05",115,0)
 .. S MED("fills",I,"releaseDate")=$$JSONDT^VPRUTILS(REL)
"RTN","VPRDJ05",116,0)
 .. S MED("fills",I,"routing")=MW
"RTN","VPRDJ05",117,0)
 .. S MED("fills",I,"quantityDispensed")=$P(X,U,4)
"RTN","VPRDJ05",118,0)
 .. S MED("fills",I,"daysSupplyDispensed")=$P(X,U,5)
"RTN","VPRDJ05",119,0)
 .. S:$P(X,U,14) MED("fills",I,"partial")=1 ;"true"
"RTN","VPRDJ05",120,0)
 . S X=$S($P(RX0,U,11):$P(RX0,U,11),$P(RX0,U,10):$P(RX0,U,10),1:0)
"RTN","VPRDJ05",121,0)
 . S:X MED("orders",1,"fillCost")=X
"RTN","VPRDJ05",122,0)
 . S X=$$GET1^PSODI(52,+ORPK_",",26,"I") S:X MED("overallStop")=$$JSONDT^VPRUTILS($P(X,U,2)) ;1^expirationDate
"RTN","VPRDJ05",123,0)
 I CLS="I" D
"RTN","VPRDJ05",124,0)
 . S X=$$GET1^DIQ(55.06,+ORPK_","_DFN_",",25,"I")
"RTN","VPRDJ05",125,0)
 . S:X MED("overallStop")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ05",126,0)
 . D BCMA^VPRDJ05V(.MED,DFN,ORPK)
"RTN","VPRDJ05",127,0)
 ;
"RTN","VPRDJ05",128,0)
PSQ ; finish
"RTN","VPRDJ05",129,0)
 D:DRUG NDF(+DRUG)
"RTN","VPRDJ05",130,0)
 S MED("qualifiedName")=$G(MED("name"))
"RTN","VPRDJ05",131,0)
 S X=+$P($G(^TMP("PS",$J,"RXN",0)),U,5)
"RTN","VPRDJ05",132,0)
 S:X MED("orders",1,"pharmacistUid")=$$SETUID^VPRUTILS("user",,X),MED("orders",1,"pharmacistName")=$P($G(^VA(200,X,0)),U)
"RTN","VPRDJ05",133,0)
 K ^TMP("PS",$J),^TMP($J,"PSOI"),^TMP("PSOR",$J)
"RTN","VPRDJ05",134,0)
 D ADD^VPRDJ("MED","med")
"RTN","VPRDJ05",135,0)
 Q
"RTN","VPRDJ05",136,0)
 ;
"RTN","VPRDJ05",137,0)
DOSE(Y,N) ; -- return dosage data from VPRESP(ID,N) to Y("name")
"RTN","VPRDJ05",138,0)
 N X,DUR,CONJ S N=+$G(N,1) K Y
"RTN","VPRDJ05",139,0)
 S X=$P($G(VPRESP("DOSE",N)),"&",1,2) ; units per dose + noun
"RTN","VPRDJ05",140,0)
 S Y("dose")=$S($L(X)>2:$TR(X,"&"," "),1:$P(X,"&"))
"RTN","VPRDJ05",141,0)
 S Y("units")=$P(X,"&",2)
"RTN","VPRDJ05",142,0)
 S X=+$G(VPRESP("ROUTE",N)) D ALL^PSS51P2(X,,,,"VPRTE")
"RTN","VPRDJ05",143,0)
 S Y("routeName")=$G(^TMP($J,"VPRTE",X,1))
"RTN","VPRDJ05",144,0)
 S X=$G(VPRESP("SCHEDULE",N)) I $L(X) S Y("scheduleName")=X D SCH^VPRDJ05V(X)
"RTN","VPRDJ05",145,0)
 S X=$G(VPRESP("ADMIN",N)) S:$L(X) Y("adminTimes")=X
"RTN","VPRDJ05",146,0)
 S X=$G(VPRESP("DAYS",N)) S:$L(X) Y("complexDuration")=X,DUR=X
"RTN","VPRDJ05",147,0)
 S X=$G(VPRESP("CONJ",N)) S:$L(X) Y("complexConjunction")=X,CONJ=X
"RTN","VPRDJ05",148,0)
 I $L($G(CONJ)),'$L($G(DUR)) D  ;look ahead to find duration
"RTN","VPRDJ05",149,0)
 . N I,D S I=$O(VPRESP("DAYS",N)),D=$S(I:$G(VPRESP("DAYS",I)),1:"")
"RTN","VPRDJ05",150,0)
 . S:$L(D) Y("complexDuration")=D
"RTN","VPRDJ05",151,0)
 K ^TMP($J,"VPRTE")
"RTN","VPRDJ05",152,0)
 Q
"RTN","VPRDJ05",153,0)
 ;
"RTN","VPRDJ05",154,0)
STOP(BEG,X) ; -- Return date after adding X to BEG
"RTN","VPRDJ05",155,0)
 N D,H,M,UNT,Y
"RTN","VPRDJ05",156,0)
 S Y=BEG,(D,H,M)=0,UNT=$P(X,+X,2),X=+X
"RTN","VPRDJ05",157,0)
 S UNT=$S($E(UNT)=" ":$E(UNT,2),1:$E(UNT)) I UNT="" S UNT="D"
"RTN","VPRDJ05",158,0)
 S:UNT="L" D=30*X
"RTN","VPRDJ05",159,0)
 S:UNT="W" D=7*X
"RTN","VPRDJ05",160,0)
 S:UNT="D" D=X
"RTN","VPRDJ05",161,0)
 S:UNT="H" H=X
"RTN","VPRDJ05",162,0)
 S:UNT="M" M=X
"RTN","VPRDJ05",163,0)
 S Y=$$FMADD^XLFDT(BEG,D,H,M)
"RTN","VPRDJ05",164,0)
 Q Y
"RTN","VPRDJ05",165,0)
 ;
"RTN","VPRDJ05",166,0)
NDF(DRUG,VPI,ORD) ; -- Set NDF data for dispense DRUG ien
"RTN","VPRDJ05",167,0)
 ; code ^ name ^ vuid [^ role ^ concentration ^ order]
"RTN","VPRDJ05",168,0)
 N LEN,VPRX,STR,VUID,X,I
"RTN","VPRDJ05",169,0)
 S DRUG=+$G(DRUG) Q:'DRUG
"RTN","VPRDJ05",170,0)
 D EN^PSSDI(50,,50,"901;902",DRUG,"VPRX")
"RTN","VPRDJ05",171,0)
 S STR=$S($G(VPRX(50,DRUG,901)):$G(VPRX(50,DRUG,901))_" "_$G(VPRX(50,DRUG,902)),1:"")
"RTN","VPRDJ05",172,0)
 D NDF^PSS50(DRUG,,,,,"NDF") S VPI=+$G(VPI,1)
"RTN","VPRDJ05",173,0)
 ;
"RTN","VPRDJ05",174,0)
 S MED("products",VPI,"ingredientRole")="urn:sct:410942007" ;Drug
"RTN","VPRDJ05",175,0)
 S:$G(ORD) MED("products",VPI,"relatedOrder")=ORD
"RTN","VPRDJ05",176,0)
 S:$G(STR) MED("products",VPI,"strength")=STR
"RTN","VPRDJ05",177,0)
 S X=$G(MED("name")) S:$L(X) MED("products",VPI,"ingredientName")=X
"RTN","VPRDJ05",178,0)
 ;
"RTN","VPRDJ05",179,0)
 S X=$G(^TMP($J,"NDF",DRUG,20)) ;VA Generic
"RTN","VPRDJ05",180,0)
 S MED("products",VPI,"ingredientCode")="urn:va:vuid:"_$$VUID^VPRD(+X,50.6)
"RTN","VPRDJ05",181,0)
 S MED("products",VPI,"ingredientCodeName")=$P(X,U,2)
"RTN","VPRDJ05",182,0)
 ;
"RTN","VPRDJ05",183,0)
 S X=$G(^TMP($J,"NDF",DRUG,22)) ;VA Product
"RTN","VPRDJ05",184,0)
 S MED("products",VPI,"suppliedCode")="urn:va:vuid:"_$$VUID^VPRD(+X,50.68)
"RTN","VPRDJ05",185,0)
 S MED("products",VPI,"suppliedName")=$P(X,U,2)
"RTN","VPRDJ05",186,0)
 ;
"RTN","VPRDJ05",187,0)
 S X=$G(^TMP($J,"NDF",DRUG,25)) ;VA Drug Class
"RTN","VPRDJ05",188,0)
 S MED("products",VPI,"drugClassCode")="urn:vadc:"_$P(X,U,2)
"RTN","VPRDJ05",189,0)
 S MED("products",VPI,"drugClassName")=$P(X,U,3)
"RTN","VPRDJ05",190,0)
 ;
"RTN","VPRDJ05",191,0)
 K ^TMP($J,"NDF")
"RTN","VPRDJ05",192,0)
 Q
"RTN","VPRDJ05",193,0)
 ;
"RTN","VPRDJ05",194,0)
RELTIME(START,STOP,DUR,MIN) ; -- Return #min for dose
"RTN","VPRDJ05",195,0)
 N Y S Y=0
"RTN","VPRDJ05",196,0)
 I START>0,STOP>0 S Y=$$FMDIFF^XLFDT(STOP,START,2)\60 I 1
"RTN","VPRDJ05",197,0)
 E  I DUR S Y=$$TOMIN(DUR) I 1
"RTN","VPRDJ05",198,0)
 E  S Y=$G(VPRESP("SUPPLY",1))*1440
"RTN","VPRDJ05",199,0)
 S Y=$S(Y:Y+MIN,1:MIN)
"RTN","VPRDJ05",200,0)
 Q Y
"RTN","VPRDJ05",201,0)
 ;
"RTN","VPRDJ05",202,0)
TOMIN(DUR) ;
"RTN","VPRDJ05",203,0)
 N RESULT,TIME,UNIT
"RTN","VPRDJ05",204,0)
 S UNIT=$$UP^XLFSTR($E($P(DUR," ",2)))
"RTN","VPRDJ05",205,0)
 I UNIT="" Q 0
"RTN","VPRDJ05",206,0)
 S TIME=$P(DUR," ")
"RTN","VPRDJ05",207,0)
 S RESULT=$S(UNIT="M":TIME,UNIT="H":TIME*60,UNIT="D":TIME*1440,UNIT="W":TIME*10080,UNIT="L":TIME*43200,1:0)
"RTN","VPRDJ05",208,0)
 Q RESULT
"RTN","VPRDJ06")
0^77^B58927484
"RTN","VPRDJ06",1,0)
VPRDJ06 ;SLC/MKB -- Laboratory ;6/25/12  16:11
"RTN","VPRDJ06",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ06",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ06",4,0)
 ;
"RTN","VPRDJ06",5,0)
 ; External References          DBIA#
"RTN","VPRDJ06",6,0)
 ; -------------------          -----
"RTN","VPRDJ06",7,0)
 ; ^LAB(60                      10054
"RTN","VPRDJ06",8,0)
 ; ^LR                            525
"RTN","VPRDJ06",9,0)
 ; ^PXRMINDX                     4290
"RTN","VPRDJ06",10,0)
 ; ^TMP("LRRR" [LR7OR1]          2503
"RTN","VPRDJ06",11,0)
 ; DIQ                           2056
"RTN","VPRDJ06",12,0)
 ; LR7OR1,^TMP("LRRR"            2503
"RTN","VPRDJ06",13,0)
 ; LRPXAPI                       4245
"RTN","VPRDJ06",14,0)
 ; LRPXAPIU                      4246
"RTN","VPRDJ06",15,0)
 ; XLFSTR                       10104
"RTN","VPRDJ06",16,0)
 ; XUAF4                         2171
"RTN","VPRDJ06",17,0)
 ;
"RTN","VPRDJ06",18,0)
 ; All tags expect DFN, ID, LRDFN, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ06",19,0)
 ;               & ^TMP("LRRR",$J,DFN,VPRSUB,VPRIDT,VPRP),VPRN
"RTN","VPRDJ06",20,0)
 ;
"RTN","VPRDJ06",21,0)
CH1 ; -- lab ID = CH;VPRIDT;VPRN
"RTN","VPRDJ06",22,0)
 N LAB,LRI,X,X0,SPC,LOINC,ORD,CMMT
"RTN","VPRDJ06",23,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ06",24,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ06",25,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the chemistry domain"
"RTN","VPRDJ06",26,0)
 ;
"RTN","VPRDJ06",27,0)
 M LAB=VPRACC ;get accession info
"RTN","VPRDJ06",28,0)
 S LAB("localId")=ID,LAB("uid")=$$SETUID^VPRUTILS("lab",DFN,ID)
"RTN","VPRDJ06",29,0)
 S LAB("categoryCode")="urn:va:lab-category:CH"
"RTN","VPRDJ06",30,0)
 S LAB("categoryName")="Laboratory"
"RTN","VPRDJ06",31,0)
 S LAB("displayOrder")=VPRP
"RTN","VPRDJ06",32,0)
 S LRI=$G(^LR(LRDFN,"CH",VPRIDT,VPRN))
"RTN","VPRDJ06",33,0)
 S X0=$G(^TMP("LRRR",$J,DFN,"CH",VPRIDT,VPRP)),SPC=+$P(X0,U,19)
"RTN","VPRDJ06",34,0)
 S LAB("typeId")=+X0,LAB("typeName")=$P($G(^LAB(60,+X0,0)),U)
"RTN","VPRDJ06",35,0)
 S:$L($P(X0,U,2)) LAB("result")=$P(X0,U,2)
"RTN","VPRDJ06",36,0)
 S:$L($P(X0,U,4)) LAB("units")=$P(X0,U,4)
"RTN","VPRDJ06",37,0)
 S X=$P(X0,U,5) I $L(X),X["-" S LAB("low")=$$TRIM^XLFSTR($P(X,"-")),LAB("high")=$$TRIM^XLFSTR($P(X,"-",2))
"RTN","VPRDJ06",38,0)
 S X=$P(X0,U,3) I $L(X) D
"RTN","VPRDJ06",39,0)
 . S:X["*" X=$S(X["L":"LL",1:"HH")
"RTN","VPRDJ06",40,0)
 . S LAB("interpretationCode")="urn:hl7:observation-interpretation:"_X
"RTN","VPRDJ06",41,0)
 . S LAB("interpretationName")=$S(X["L":"Low",1:"High")_$S($L(X)>1:" alert",1:"")
"RTN","VPRDJ06",42,0)
 S LAB("displayName")=$S($L($P(X0,U,15)):$P(X0,U,15),1:LAB("test"))
"RTN","VPRDJ06",43,0)
 S ORD=+$P(X0,U,17) S:ORD LAB("labOrderId")=ORD
"RTN","VPRDJ06",44,0)
 S X=$$ORDER^VPRDLR(ORD,+X0) S:X LAB("orderUid")=$$SETUID^VPRUTILS("order",DFN,X)
"RTN","VPRDJ06",45,0)
 S LOINC=$P($P(LRI,U,3),"!",3) S:'LOINC LOINC=$$LOINC(+X0,SPC)
"RTN","VPRDJ06",46,0)
 I LOINC S LAB("typeCode")="urn:lnc:"_$$GET1^DIQ(95.3,+LOINC_",",.01),LAB("vuid")="urn:va:vuid:"_$$VUID^VPRD(+LOINC,95.3)
"RTN","VPRDJ06",47,0)
 I 'LOINC S LAB("typeCode")="urn:va:ien:60:"_+X0_":"_SPC
"RTN","VPRDJ06",48,0)
 I $D(^TMP("LRRR",$J,DFN,"CH",VPRIDT,"N")) M CMMT=^("N") S LAB("comment")=$$STRING^VPRD(.CMMT)
"RTN","VPRDJ06",49,0)
 S LAB("statusCode")="urn:va:lab-status:completed",LAB("statusName")="completed"
"RTN","VPRDJ06",50,0)
 D ADD^VPRDJ("LAB","lab")
"RTN","VPRDJ06",51,0)
 Q
"RTN","VPRDJ06",52,0)
 ;
"RTN","VPRDJ06",53,0)
LOINC(TEST,SPEC) ; -- find LOINC ien, if not saved with result [for DEV only]
"RTN","VPRDJ06",54,0)
 N Y,X,LAM,I S Y=""
"RTN","VPRDJ06",55,0)
 I '$G(TEST)!'$G(SPEC) Q ""
"RTN","VPRDJ06",56,0)
 S Y=+$G(^LAB(60,TEST,1,SPEC,95.3)) I 'Y D
"RTN","VPRDJ06",57,0)
 . S LAM=$G(^LAB(60,TEST,64)),X=$S($P(LAM,U,2):$P(LAM,U,2),LAM:+LAM,1:"") Q:'X
"RTN","VPRDJ06",58,0)
 . S I=+$O(^LAM(X,5,SPEC,1,0)),Y=+$P($G(^(I,1)),U) Q:Y  ;first, node 1
"RTN","VPRDJ06",59,0)
 . S Y=$P($G(^LAM(X,9)),U) ;default LOINC
"RTN","VPRDJ06",60,0)
 Q Y
"RTN","VPRDJ06",61,0)
 ;
"RTN","VPRDJ06",62,0)
ACC ; -- put accession-level data in VPRACC("attribute")
"RTN","VPRDJ06",63,0)
 N LR0,CDT,SPC,X K VPRACC
"RTN","VPRDJ06",64,0)
 S LR0=$G(^LR(LRDFN,VPRSUB,VPRIDT,0))
"RTN","VPRDJ06",65,0)
 S CDT=9999999-VPRIDT,VPRACC("observed")=$$DATE(CDT)
"RTN","VPRDJ06",66,0)
 S VPRACC("resulted")=$$DATE($P(LR0,U,3)),SPC=+$P(LR0,U,5) I SPC D
"RTN","VPRDJ06",67,0)
 . N IENS,VPRY S IENS=SPC_","
"RTN","VPRDJ06",68,0)
 . D GETS^DIQ(61,IENS,".01;4.1",,"VPRY")
"RTN","VPRDJ06",69,0)
 . S VPRACC("specimen")=$G(VPRY(61,IENS,.01))
"RTN","VPRDJ06",70,0)
 . S VPRACC("sample")=$G(VPRY(61,IENS,4.1))
"RTN","VPRDJ06",71,0)
 S VPRACC("groupUid")=$$SETUID^VPRUTILS("accession",DFN,VPRSUB_";"_VPRIDT)
"RTN","VPRDJ06",72,0)
 S VPRACC("groupName")=$P(LR0,U,6)
"RTN","VPRDJ06",73,0)
 S X=+$P(LR0,U,14) D  D FACILITY^VPRUTILS(X,"VPRACC")
"RTN","VPRDJ06",74,0)
 . S:X X=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","VPRDJ06",75,0)
 . I 'X S X=$$FAC^VPRD ;local stn#^name
"RTN","VPRDJ06",76,0)
 Q
"RTN","VPRDJ06",77,0)
 ;
"RTN","VPRDJ06",78,0)
MI ; -- microbiology accession ID = MI;VPRIDT
"RTN","VPRDJ06",79,0)
 N LAB,CDT,LR0,X,ACC,FAC,X0,X1,X2,IDX,VPRM,VPRPX,VPRITM,DA,FLD
"RTN","VPRDJ06",80,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ06",81,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ06",82,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the microbiology domain"
"RTN","VPRDJ06",83,0)
 ;
"RTN","VPRDJ06",84,0)
 S LAB("localId")=ID,LAB("uid")=$$SETUID^VPRUTILS("lab",DFN,ID)
"RTN","VPRDJ06",85,0)
 S LAB("categoryCode")="urn:va:lab-category:MI"
"RTN","VPRDJ06",86,0)
 S LAB("categoryName")="Microbiology"
"RTN","VPRDJ06",87,0)
 S LAB("statusCode")="urn:va:lab-status:completed",LAB("statusName")="completed"
"RTN","VPRDJ06",88,0)
 S CDT=9999999-VPRIDT,LAB("observed")=$$DATE(CDT)
"RTN","VPRDJ06",89,0)
 S LR0=$G(^LR(LRDFN,"MI",VPRIDT,0))
"RTN","VPRDJ06",90,0)
 S:$P(LR0,U,3) LAB("resulted")=$$DATE($P(LR0,U,3))
"RTN","VPRDJ06",91,0)
 S X=+$P(LR0,U,5) I X D  ;specimen
"RTN","VPRDJ06",92,0)
 . N IENS,VPRY S IENS=X_","
"RTN","VPRDJ06",93,0)
 . D GETS^DIQ(61,IENS,".01;2",,"VPRY")
"RTN","VPRDJ06",94,0)
 . S LAB("specimen")=$G(VPRY(61,IENS,.01))
"RTN","VPRDJ06",95,0)
 . S LAB("sample")=$$GET1^DIQ(61,X_",",4.1)
"RTN","VPRDJ06",96,0)
 S LAB("groupName")=$P(LR0,U,6),ACC=$P(ID,";",1,2) ;accession#
"RTN","VPRDJ06",97,0)
 S LAB("groupUid")=$$SETUID^VPRUTILS("accession",DFN,ACC)
"RTN","VPRDJ06",98,0)
 S X=$P(LR0,U,14),FAC=$S(X:$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U),1:$$FAC^VPRD)
"RTN","VPRDJ06",99,0)
 D FACILITY^VPRUTILS(FAC,"LAB")
"RTN","VPRDJ06",100,0)
 ; get results from ^TMP
"RTN","VPRDJ06",101,0)
 S VPRN=0 F  S VPRN=$O(^TMP("LRRR",$J,DFN,VPRSUB,VPRIDT,VPRN)) Q:VPRN<1  D
"RTN","VPRDJ06",102,0)
 . S X0=$G(^TMP("LRRR",$J,DFN,"MI",VPRIDT,VPRN)),X1=$P(X0,U),X2=$P(X0,U,2)
"RTN","VPRDJ06",103,0)
 . I X1="URINE SCREEN" S LAB("urineScreen")=X2 Q
"RTN","VPRDJ06",104,0)
 . ; X1="ORGANISM" S LAB("organism")=$P(X2,";"),LAB("organismQty")=$P(X2,";",2)
"RTN","VPRDJ06",105,0)
 . I X1="GRAM STAIN" S LAB("gramStain",VPRN,"result")=X2 Q
"RTN","VPRDJ06",106,0)
 . I X1="Bacteriology Remark(s)" S LAB("bactRemarks")=X2 Q
"RTN","VPRDJ06",107,0)
 ; get other results from ^PXRMINDX
"RTN","VPRDJ06",108,0)
 S X=$O(^PXRMINDX(63,"PDI",DFN,CDT,"M;T;0")) I X?1"M;T;"1.N D
"RTN","VPRDJ06",109,0)
 . S IDX=$O(^PXRMINDX(63,"PDI",DFN,CDT,X,"")) K VPRM
"RTN","VPRDJ06",110,0)
 . D LRPXRM^LRPXAPI(.VPRM,IDX,X) Q:VPRM<1
"RTN","VPRDJ06",111,0)
 . S LAB("typeName")=$P(VPRM,U,2)
"RTN","VPRDJ06",112,0)
 . S LAB("typeCode")="urn:va:ien:60:"_+VPRM_":"_+$P(VPRM,U,7)
"RTN","VPRDJ06",113,0)
 F VPRPX="M;O;","M;A;" D
"RTN","VPRDJ06",114,0)
 . S VPRITM=VPRPX F  S VPRITM=$O(^PXRMINDX(63,"PDI",DFN,CDT,VPRITM)) Q:$E(VPRITM,1,4)'=VPRPX  D
"RTN","VPRDJ06",115,0)
 .. S IDX=$O(^PXRMINDX(63,"PDI",DFN,CDT,VPRITM,"")) K VPRM
"RTN","VPRDJ06",116,0)
 .. S DA=$P(IDX,";",5),FLD=$P(IDX,";",6)
"RTN","VPRDJ06",117,0)
 .. D LRPXRM^LRPXAPI(.VPRM,IDX,VPRITM) Q:'$L($G(VPRM))
"RTN","VPRDJ06",118,0)
 .. I VPRPX["O" S LAB("organisms",DA,"name")=$P(VPRM,U,2),LAB("organisms",DA,"qty")=$P(VPRM,U,4) Q
"RTN","VPRDJ06",119,0)
 .. I VPRPX["A" D  Q
"RTN","VPRDJ06",120,0)
 ... S LAB("organisms",DA,"drugs",FLD,"name")=$P(VPRM,U,2)
"RTN","VPRDJ06",121,0)
 ... S LAB("organisms",DA,"drugs",FLD,"result")=$P(VPRM,U,3)
"RTN","VPRDJ06",122,0)
 ... S LAB("organisms",DA,"drugs",FLD,"interp")=$P(VPRM,U,4)
"RTN","VPRDJ06",123,0)
 ... S:$L($P(VPRM,U,5)) LAB("organisms",DA,"drugs",FLD,"restrict")=$P(VPRM,U,5)
"RTN","VPRDJ06",124,0)
 ;
"RTN","VPRDJ06",125,0)
 S LAB("results",1,"uid")=ACC
"RTN","VPRDJ06",126,0)
 S LAB("results",1,"resultUid")=$$SETUID^VPRUTILS("document",DFN,ACC)
"RTN","VPRDJ06",127,0)
 S LAB("results",1,"localTitle")="LR MICROBIOLOGY REPORT"
"RTN","VPRDJ06",128,0)
 I $L($G(^LR(LRDFN,"MI",VPRIDT,99))) S LAB("comment")=^(99)
"RTN","VPRDJ06",129,0)
 D ADD^VPRDJ("LAB","lab")
"RTN","VPRDJ06",130,0)
 Q
"RTN","VPRDJ06",131,0)
 ;
"RTN","VPRDJ06",132,0)
ITEM() ; -- find ITEM string from ^PXRMINDX [uses LRDFN,ID,DFN,CDT]
"RTN","VPRDJ06",133,0)
 N ITM,IDX,Y S Y=""
"RTN","VPRDJ06",134,0)
 S IDX=LRDFN_";"_ID,ITM="M"
"RTN","VPRDJ06",135,0)
 F  S ITM=$O(^PXRMINDX(63,"PI",DFN,ITM)) Q:$E(ITM)'="M"  I $D(^PXRMINDX(63,"PI",DFN,ITM,CDT,IDX)) S Y=ITM Q
"RTN","VPRDJ06",136,0)
 Q Y
"RTN","VPRDJ06",137,0)
 ;
"RTN","VPRDJ06",138,0)
AP ; -- pathology ID = VPRSUB;VPRIDT
"RTN","VPRDJ06",139,0)
 N LAB,LR0,X,I,NODE
"RTN","VPRDJ06",140,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ06",141,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ06",142,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the pathology domain"
"RTN","VPRDJ06",143,0)
 ;
"RTN","VPRDJ06",144,0)
 S LAB("localId")=ID,LAB("organizerType")="accession"
"RTN","VPRDJ06",145,0)
 S LAB("uid")=$$SETUID^VPRUTILS("lab",DFN,ID)
"RTN","VPRDJ06",146,0)
 S LAB("categoryCode")="urn:va:lab-category:"_VPRSUB
"RTN","VPRDJ06",147,0)
 S LAB("categoryName")=$S(VPRSUB="BB":"Blood Bank",VPRSUB="SP":"Surgical Pathology",1:"Pathology")
"RTN","VPRDJ06",148,0)
 S LAB("statusCode")="urn:va:lab-status:completed",LAB("statusName")="completed"
"RTN","VPRDJ06",149,0)
 S CDT=9999999-VPRIDT,LAB("observed")=$$DATE(CDT)
"RTN","VPRDJ06",150,0)
 S LR0=$G(^LR(LRDFN,VPRSUB,VPRIDT,0))
"RTN","VPRDJ06",151,0)
 S LAB("resulted")=$$DATE($P(LR0,U,11)),LAB("groupName")=$P(LR0,U,6)
"RTN","VPRDJ06",152,0)
 S X="",I=0 F  S I=$O(^LR(LRDFN,VPRSUB,VPRIDT,.1,I)) Q:I<1  S X=X_$S($L(X):", ",1:"")_$P($G(^(I,0)),U)
"RTN","VPRDJ06",153,0)
 S:$L(X) LAB("specimen")=X
"RTN","VPRDJ06",154,0)
 D FACILITY^VPRUTILS($$FAC^VPRD,"LAB")
"RTN","VPRDJ06",155,0)
 S NODE=$S(VPRSUB="AU":$NA(^LR(LRDFN,101)),1:$NA(^LR(LRDFN,VPRSUB,VPRIDT,.05)))
"RTN","VPRDJ06",156,0)
 S I=0 F  S I=$O(@NODE@(I)) Q:I<1  S X=+$P($G(@NODE@(I,0)),U,2) I X D
"RTN","VPRDJ06",157,0)
 . N LT S LT=$$GET1^DIQ(8925,+X_",",.01) Q:$P(LT," ")="Addendum"
"RTN","VPRDJ06",158,0)
 . S LAB("results",I,"uid")=LAB("uid")
"RTN","VPRDJ06",159,0)
 . S LAB("results",I,"resultUid")=$$SETUID^VPRUTILS("document",DFN,X)
"RTN","VPRDJ06",160,0)
 . S LAB("results",I,"localTitle")=LT
"RTN","VPRDJ06",161,0)
 I '$O(LAB("results",0)) D  ;non-TIU reports
"RTN","VPRDJ06",162,0)
 . S LAB("results",1,"uid")=LAB("uid")
"RTN","VPRDJ06",163,0)
 . S LAB("results",1,"resultUid")=$$SETUID^VPRUTILS("document",DFN,ID)
"RTN","VPRDJ06",164,0)
 . S LAB("results",1,"localTitle")="LR "_$$NAME^VPRDLRA(VPRSUB)_" REPORT"
"RTN","VPRDJ06",165,0)
 D ADD^VPRDJ("LAB","lab")
"RTN","VPRDJ06",166,0)
 ;
"RTN","VPRDJ06",167,0)
DATE(X) ; -- strip off seconds, return JSON format
"RTN","VPRDJ06",168,0)
 N Y S Y=$G(X)
"RTN","VPRDJ06",169,0)
 I $L($P(Y,".",2))>4 S Y=$P(Y,".")_"."_$E($P(Y,".",2),1,4) ;strip seconds
"RTN","VPRDJ06",170,0)
 S:Y Y=$$JSONDT^VPRUTILS(Y)
"RTN","VPRDJ06",171,0)
 Q Y
"RTN","VPRDJ07")
0^78^B21890653
"RTN","VPRDJ07",1,0)
VPRDJ07 ;SLC/MKB -- Radiology,Surgery ;6/25/12  16:11
"RTN","VPRDJ07",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ07",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ07",4,0)
 ;
"RTN","VPRDJ07",5,0)
 ; External References          DBIA#
"RTN","VPRDJ07",6,0)
 ; -------------------          -----
"RTN","VPRDJ07",7,0)
 ; ^SC                          10040
"RTN","VPRDJ07",8,0)
 ; ^VA(200                      10060
"RTN","VPRDJ07",9,0)
 ; DIC                           2051
"RTN","VPRDJ07",10,0)
 ; DIQ                           2056
"RTN","VPRDJ07",11,0)
 ; RAO7PC1                  2043,2265
"RTN","VPRDJ07",12,0)
 ; SROESTV                       3533
"RTN","VPRDJ07",13,0)
 ;
"RTN","VPRDJ07",14,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ07",15,0)
 ;
"RTN","VPRDJ07",16,0)
RA1(ID) ; -- radiology exam ^TMP($J,"RAE1",DFN,ID)
"RTN","VPRDJ07",17,0)
 N EXAM,X0,SET,PROC,DATE,LOC,X,Y,IENS,ID3,N
"RTN","VPRDJ07",18,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ07",19,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ07",20,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the radiology domain"
"RTN","VPRDJ07",21,0)
 ;
"RTN","VPRDJ07",22,0)
 S X0=$G(^TMP($J,"RAE1",DFN,ID)),SET=$G(^(ID,"CPRS")),PROC=$P(X0,U) Q:X0=""
"RTN","VPRDJ07",23,0)
 S EXAM("localId")=ID,EXAM("uid")=$$SETUID^VPRUTILS("image",DFN,ID)
"RTN","VPRDJ07",24,0)
 S EXAM("name")=PROC,EXAM("case")=$P(X0,U,2),EXAM("category")="RA"
"RTN","VPRDJ07",25,0)
 S DATE=9999999.9999-+ID,EXAM("dateTime")=$$JSONDT^VPRUTILS(DATE)
"RTN","VPRDJ07",26,0)
 I $P(X0,U,5) D  ;report exists
"RTN","VPRDJ07",27,0)
 . N NM S NM=$S(+SET=2:$P(SET,U,2),1:PROC) ;2 = shared report
"RTN","VPRDJ07",28,0)
 . S EXAM("results",1,"uid")=$$SETUID^VPRUTILS("document",DFN,ID)
"RTN","VPRDJ07",29,0)
 . S EXAM("results",1,"localTitle")=NM
"RTN","VPRDJ07",30,0)
 . S EXAM("verified")=$S($E($P(X0,U,3))="V":"true",1:"false")
"RTN","VPRDJ07",31,0)
 S:$L($P(X0,U,6)) EXAM("statusName")=$P($P(X0,U,6),"~",2)
"RTN","VPRDJ07",32,0)
 S X=$P(X0,U,7),LOC="" I $L(X) D
"RTN","VPRDJ07",33,0)
 . S EXAM("imageLocation")=X,EXAM("locationName")=X
"RTN","VPRDJ07",34,0)
 . S LOC=+$O(^SC("B",X,0))
"RTN","VPRDJ07",35,0)
 . S EXAM("locationUid")=$$SETUID^VPRUTILS("location",,LOC)
"RTN","VPRDJ07",36,0)
 S X=$$FAC^VPRD(LOC) D FACILITY^VPRUTILS(X,"EXAM")
"RTN","VPRDJ07",37,0)
 I $L($P(X0,U,8)) S X=$P($P(X0,U,8),"~",2),EXAM("imagingTypeUid")=$$SETVURN^VPRUTILS("imaging-Type",X)
"RTN","VPRDJ07",38,0)
 S X=$P(X0,U,10) I X D
"RTN","VPRDJ07",39,0)
 . N CPT S CPT=$$CPT^VPRDRA(X)
"RTN","VPRDJ07",40,0)
 . S (EXAM("typeName"),EXAM("summary"))=$P(CPT,U,2)
"RTN","VPRDJ07",41,0)
 . ;I $D(^TMP($J,"RAE1",DFN,ID,"CMOD")) M EXAM("modifier")=^("CMOD")
"RTN","VPRDJ07",42,0)
 I $P(X0,U,11) D
"RTN","VPRDJ07",43,0)
 . S EXAM("orderUid")=$$SETUID^VPRUTILS("order",DFN,+$P(X0,U,11))
"RTN","VPRDJ07",44,0)
 . S EXAM("orderName")=$S($L(SET):$P(SET,U,2),1:PROC)
"RTN","VPRDJ07",45,0)
 S EXAM("hasImages")=$S($P(X0,U,12)="Y":"true",1:"false")
"RTN","VPRDJ07",46,0)
 I $P(X0,U,4)="Y"!($P(X0,U,9)="Y") S EXAM("interpretation")="ABNORMAL"
"RTN","VPRDJ07",47,0)
 S IENS=$P(ID,"-",2)_","_+ID_","_DFN_","
"RTN","VPRDJ07",48,0)
 S X=$$GET1^DIQ(70.03,IENS,27,"I") I X D
"RTN","VPRDJ07",49,0)
 . S EXAM("encounterUid")=$$SETUID^VPRUTILS("visit",DFN,+X)
"RTN","VPRDJ07",50,0)
 . S EXAM("encounterName")=$$NAME^VPRDJ04(+X)
"RTN","VPRDJ07",51,0)
 S ID3=DFN_U_$TR(ID,"-","^") D EN3^RAO7PC1(ID3) D  ;get additional values
"RTN","VPRDJ07",52,0)
 . S X=+$G(^TMP($J,"RAE2",DFN,+$P(ID3,U,3),PROC,"P")) Q:'X
"RTN","VPRDJ07",53,0)
 . S EXAM("providers",1,"providerUid")=$$SETUID^VPRUTILS("user",,X)
"RTN","VPRDJ07",54,0)
 . S EXAM("providers",1,"providerName")=$P($G(^VA(200,X,0)),U),N=0
"RTN","VPRDJ07",55,0)
 . F  S N=$O(^TMP($J,"RAE2",DFN,+$P(ID3,U,3),PROC,"D",N)) Q:N<1  S X=$G(^(N)) D
"RTN","VPRDJ07",56,0)
 .. S EXAM("diagnosis",N,"code")=X
"RTN","VPRDJ07",57,0)
 .. S:N=1 EXAM("diagnosis",N,"primary")="true"
"RTN","VPRDJ07",58,0)
 .. N EXP S EXP=$$LEX(X) S:EXP EXAM("diagnosis",N,"lexicon")=X
"RTN","VPRDJ07",59,0)
 . K ^TMP($J,"RAE2",DFN)
"RTN","VPRDJ07",60,0)
 S EXAM("kind")="Imaging"
"RTN","VPRDJ07",61,0)
 D ADD^VPRDJ("EXAM","image")
"RTN","VPRDJ07",62,0)
 Q
"RTN","VPRDJ07",63,0)
 ;
"RTN","VPRDJ07",64,0)
LEX(X) ; -- Return Lexicon ptr for a Dx Code
"RTN","VPRDJ07",65,0)
 N X,Y,DIC,LEX
"RTN","VPRDJ07",66,0)
 S DIC=78.3,DIC(0)="BFOXZ" D ^DIC
"RTN","VPRDJ07",67,0)
 S LEX=$P($G(Y(0)),U,6)
"RTN","VPRDJ07",68,0)
 Q LEX
"RTN","VPRDJ07",69,0)
 ;
"RTN","VPRDJ07",70,0)
SR1(ID) ; -- surgery
"RTN","VPRDJ07",71,0)
 N SURG,VPRX,VPRY,X,Y,I
"RTN","VPRDJ07",72,0)
 D ONE^SROESTV("VPRY",ID) S VPRX=$G(VPRY(ID)) Q:VPRX=""
"RTN","VPRDJ07",73,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ07",74,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ07",75,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the surgery domain"
"RTN","VPRDJ07",76,0)
 ;
"RTN","VPRDJ07",77,0)
 S SURG("localId")=ID,SURG("uid")=$$SETUID^VPRUTILS("surgery",DFN,ID)
"RTN","VPRDJ07",78,0)
 S X=$P(VPRX,U,2),SURG("statusName")="COMPLETED"
"RTN","VPRDJ07",79,0)
 I X?1"* Aborted * ".E S X=$E(X,13,999),SURG("statusName")="ABORTED"
"RTN","VPRDJ07",80,0)
 S (SURG("typeName"),SURG("summary"))=X
"RTN","VPRDJ07",81,0)
 S SURG("dateTime")=$$JSONDT^VPRUTILS($P(VPRX,U,3))
"RTN","VPRDJ07",82,0)
 S X=$P(VPRX,U,4) I X D
"RTN","VPRDJ07",83,0)
 . S SURG("providers",1,"providerUid")=$$SETUID^VPRUTILS("user",,+X)
"RTN","VPRDJ07",84,0)
 . S SURG("providers",1,"providerName")=$P(X,";",2)
"RTN","VPRDJ07",85,0)
 S X=$$GET1^DIQ(130,ID_",",50,"I"),X=$$FAC^VPRD(X)
"RTN","VPRDJ07",86,0)
 D FACILITY^VPRUTILS(X,"SURG")
"RTN","VPRDJ07",87,0)
 S X=$$GET1^DIQ(130,ID_",",.015,"I") I X D
"RTN","VPRDJ07",88,0)
 . S SURG("encounterUid")=$$SETUID^VPRUTILS("visit",DFN,+X)
"RTN","VPRDJ07",89,0)
 . S SURG("encounterName")=$$NAME^VPRDJ04(+X)
"RTN","VPRDJ07",90,0)
 S X=$$GET1^DIQ(136,ID_",",.02,"I") I X D
"RTN","VPRDJ07",91,0)
 . S X=$$CPT^VPRDSR(X)
"RTN","VPRDJ07",92,0)
 . S (SURG("typeName"),SURG("summary"))=$P(X,U,2)
"RTN","VPRDJ07",93,0)
 . S SURG("typeCode")=$$SETNCS^VPRUTILS("cpt",+X)
"RTN","VPRDJ07",94,0)
 S I=0 F  S I=$O(VPRY(ID,I)) Q:I<1  S X=$G(VPRY(ID,I)) I X D
"RTN","VPRDJ07",95,0)
 . N LT S LT=$P(X,U,2) Q:$P(LT," ")="Addendum"
"RTN","VPRDJ07",96,0)
 . S SURG("results",I,"uid")=$$SETUID^VPRUTILS("document",DFN,+X)
"RTN","VPRDJ07",97,0)
 . S SURG("results",I,"localTitle")=LT
"RTN","VPRDJ07",98,0)
 S SURG("kind")="Surgery",SURG("category")="SR"
"RTN","VPRDJ07",99,0)
 K ^TMP("TIULIST",$J)
"RTN","VPRDJ07",100,0)
 D ADD^VPRDJ("SURG","surgery")
"RTN","VPRDJ07",101,0)
 Q
"RTN","VPRDJ08")
0^79^B69321777
"RTN","VPRDJ08",1,0)
VPRDJ08 ;SLC/MKB -- Documents ;6/25/12  16:11
"RTN","VPRDJ08",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ08",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ08",4,0)
 ;
"RTN","VPRDJ08",5,0)
 ; External References          DBIA#
"RTN","VPRDJ08",6,0)
 ; -------------------          -----
"RTN","VPRDJ08",7,0)
 ; ^SC                          10040
"RTN","VPRDJ08",8,0)
 ; ^TIU(8925.1              2321,5677
"RTN","VPRDJ08",9,0)
 ; ^TIU(8926.1                   5678
"RTN","VPRDJ08",10,0)
 ; ^VA(200                      10060
"RTN","VPRDJ08",11,0)
 ; DIQ                           2056
"RTN","VPRDJ08",12,0)
 ; RAO7PC1                       2043
"RTN","VPRDJ08",13,0)
 ; TIUCNSLT                      5546
"RTN","VPRDJ08",14,0)
 ; TIUCP                         3568
"RTN","VPRDJ08",15,0)
 ; TIULQ                         2693
"RTN","VPRDJ08",16,0)
 ; TIULX                         3058
"RTN","VPRDJ08",17,0)
 ; TIUSROI                       5676
"RTN","VPRDJ08",18,0)
 ; TIUSRVLO                 2834,2865
"RTN","VPRDJ08",19,0)
 ; XLFSTR                       10104
"RTN","VPRDJ08",20,0)
 ;
"RTN","VPRDJ08",21,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ08",22,0)
 ;
"RTN","VPRDJ08",23,0)
TIU1(ID) ; -- document
"RTN","VPRDJ08",24,0)
 I ID[";" D   Q
"RTN","VPRDJ08",25,0)
 . I ID D EN1($$CP1^VPRDJ08A(DFN,ID),"CP") Q  ;CP
"RTN","VPRDJ08",26,0)
 . D EN1($$LR1^VPRDJ08A(DFN,ID),"LR") Q       ;Lab
"RTN","VPRDJ08",27,0)
 I ID["-" D  Q                                ;Radiology
"RTN","VPRDJ08",28,0)
 . S (BEG,END)=9999999.9999-+ID D EN1^RAO7PC1(DFN,BEG,END,"99P")
"RTN","VPRDJ08",29,0)
 . Q:'$D(^TMP($J,"RAE1",DFN,ID))              ;deleted
"RTN","VPRDJ08",30,0)
 . D EN1($$RA1^VPRDJ08A(DFN,ID),"RA") K ^TMP($J,"RAE1")
"RTN","VPRDJ08",31,0)
 D EN1(ID,38)
"RTN","VPRDJ08",32,0)
 Q
"RTN","VPRDJ08",33,0)
 ;
"RTN","VPRDJ08",34,0)
EN1(VPRX,TIU) ; -- document
"RTN","VPRDJ08",35,0)
 ;  Expects DFN, VPRX=IEN^$$RESOLVE^TIUSRVLO(IEN) or equivalent
"RTN","VPRDJ08",36,0)
 ;          TIU = document class#, or code (CP, RA, LR) if non-TIU
"RTN","VPRDJ08",37,0)
 N DOC,IEN,X,VPRTIU,ES,I,TEXT,SUB,VPRY,ERR
"RTN","VPRDJ08",38,0)
 S IEN=$P($G(VPRX),U),TIU=$G(TIU) Q:IEN=""  ;invalid ien
"RTN","VPRDJ08",39,0)
 ;
"RTN","VPRDJ08",40,0)
 I +VPRX=VPRX,TIU D  ;get TIU data string, if needed
"RTN","VPRDJ08",41,0)
 . N SHOWADD,DA S SHOWADD=1,DA=+VPRX
"RTN","VPRDJ08",42,0)
 . S VPRX=DA_U_$$RESOLVE^TIUSRVLO(DA)
"RTN","VPRDJ08",43,0)
 Q:"UNKNOWN"[$P($G(VPRX),U,2)  ;null or invalid
"RTN","VPRDJ08",44,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ08",45,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ08",46,0)
 S ERRMSG="A problem occurred converting record "_IEN_" for the document domain"
"RTN","VPRDJ08",47,0)
 S DOC("localId")=IEN,DOC("uid")=$$SETUID^VPRUTILS("document",DFN,IEN)
"RTN","VPRDJ08",48,0)
 S DOC("localTitle")=$P(VPRX,U,2)
"RTN","VPRDJ08",49,0)
 S DOC("referenceDateTime")=$$JSONDT^VPRUTILS($P(VPRX,U,3))
"RTN","VPRDJ08",50,0)
 S X=$P(VPRX,U,6) D  ;S:$L(X) DOC("location")=X
"RTN","VPRDJ08",51,0)
 . N LOC,FAC S LOC=$S($L(X):+$O(^SC("B",X,0)),1:0)
"RTN","VPRDJ08",52,0)
 . S X=$$FAC^VPRD(LOC)
"RTN","VPRDJ08",53,0)
 . S DOC("facilityCode")=$P(X,U),DOC("facilityName")=$P(X,U,2)
"RTN","VPRDJ08",54,0)
 S X=$P(VPRX,U,7) I $L(X) S DOC("status")=$$UP^XLFSTR(X)
"RTN","VPRDJ08",55,0)
 ;. N SUB S SUB=$$FIND1^DIC(8930.6,,"QX",X)
"RTN","VPRDJ08",56,0)
 ;. S:SUB>0 DOC("statusUid")=$$SETUID^VPRUTILS("doc-status",,SUB)
"RTN","VPRDJ08",57,0)
 S:$P(VPRX,U,11) DOC("images")=+$P(VPRX,U,11)
"RTN","VPRDJ08",58,0)
 S:$L($P(VPRX,U,12)) DOC("subject")=$P(VPRX,U,12)
"RTN","VPRDJ08",59,0)
 I $P(VPRX,U,14)>5 S DOC("parentUid")=$$SETUID^VPRUTILS("document",DFN,$P(VPRX,U,14)) ;ID notes
"RTN","VPRDJ08",60,0)
B ; other TIU data
"RTN","VPRDJ08",61,0)
 D:TIU EXTRACT^TIULQ(IEN,"VPRTIU",,,,1,,1) ;".01:.04;1501:1508")
"RTN","VPRDJ08",62,0)
 S X=$G(VPRTIU(IEN,.01,"I")) S:X DOC("documentDefUid")=$$SETUID^VPRUTILS("doc-def",,X)
"RTN","VPRDJ08",63,0)
 S X=$G(VPRTIU(IEN,1201,"I")) S:X DOC("entered")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ08",64,0)
 S X=$G(VPRTIU(IEN,.09,"E")) S:$L(X) DOC("urgency")=X
"RTN","VPRDJ08",65,0)
 S X=TIU I TIU S X=+$G(VPRTIU(IEN,.01,"I")),X=$$CATG^VPRDTIU(X) ;2U type code
"RTN","VPRDJ08",66,0)
 S DOC("documentTypeCode")=X,DOC("documentTypeName")=$$TYPE(X)
"RTN","VPRDJ08",67,0)
 S DOC("documentClass")=$S(X="LR":"LR LABORATORY REPORTS",X="SR":"SURGICAL REPORTS",X="CP":"CLINICAL PROCEDURES",X="RA":"RADIOLOGY REPORTS",X="DS":"DISCHARGE SUMMARY",1:"PROGRESS NOTES")
"RTN","VPRDJ08",68,0)
 S X=$S(TIU:$G(VPRTIU(IEN,.03,"I")),1:$P(VPRX,U,8)) ;visit#
"RTN","VPRDJ08",69,0)
 S:X DOC("encounterUid")=$$SETUID^VPRUTILS("visit",DFN,X),DOC("encounterName")=$$NAME^VPRDJ04(X)
"RTN","VPRDJ08",70,0)
C ; text blocks, signatures
"RTN","VPRDJ08",71,0)
 N VPRT,VPRA,VPRADD
"RTN","VPRDJ08",72,0)
 S DOC("text",1,"dateTime")=DOC("referenceDateTime")
"RTN","VPRDJ08",73,0)
 S DOC("text",1,"status")=$G(DOC("status"))
"RTN","VPRDJ08",74,0)
 S DOC("text",1,"uid")=DOC("uid")
"RTN","VPRDJ08",75,0)
 S VPRT=1,X=$P(VPRX,U,5),I=0
"RTN","VPRDJ08",76,0)
 I X D USER(.I,+X,$P(X,";",3),"AU")    ;author
"RTN","VPRDJ08",77,0)
 M ES=VPRTIU(IEN) S X=$P(VPRX,"//",2) ;non-TIU, put into ES for use:
"RTN","VPRDJ08",78,0)
 I $L(X) S ES(1502,"I")=+X,ES(1502,"E")=$P(X,";",2),ES(1501,"I")=$P(X,";",3)
"RTN","VPRDJ08",79,0)
 I $G(ES(1501,"I")) D USER(.I,ES(1502,"I"),ES(1502,"E"),"S",ES(1501,"I"),$G(ES(1503,"E")),$G(ES(1504,"E")))
"RTN","VPRDJ08",80,0)
 I $G(ES(1507,"I")) D USER(.I,ES(1508,"I"),ES(1508,"E"),"C",ES(1507,"I"),$G(ES(1509,"E")),$G(ES(1510,"E")))
"RTN","VPRDJ08",81,0)
 I $G(ES(1204,"I")) D USER(.I,ES(1204,"I"),ES(1204,"E"),"ES")    ;expected signer
"RTN","VPRDJ08",82,0)
 I $G(ES(1208,"I")) D USER(.I,ES(1208,"I"),ES(1208,"E"),"EC")    ;expected cosigner
"RTN","VPRDJ08",83,0)
 I $G(ES(1302,"I")) D USER(.I,ES(1302,"I"),ES(1302,"E"),"E")     ;entered
"RTN","VPRDJ08",84,0)
 I $G(ES(1209,"I")) D USER(.I,ES(1209,"I"),ES(1209,"E"),"ATT")   ;attending
"RTN","VPRDJ08",85,0)
 I $G(VPRTEXT) D
"RTN","VPRDJ08",86,0)
 . S X=$S(TIU:$NA(VPRTIU(IEN,"TEXT")),1:$NA(^TMP("VPRTEXT",$J,IEN)))
"RTN","VPRDJ08",87,0)
 . K ^TMP($J,"VPR TIU TEXT")
"RTN","VPRDJ08",88,0)
 . D SETTEXT^VPRUTILS(X,$NA(^TMP($J,"VPR TIU TEXT")))
"RTN","VPRDJ08",89,0)
 . M DOC("text",1,"content","\")=^TMP($J,"VPR TIU TEXT")
"RTN","VPRDJ08",90,0)
D ; addenda
"RTN","VPRDJ08",91,0)
 S VPRA=0 F  S VPRA=$O(VPRTIU(IEN,"ZADD",VPRA)) Q:VPRA<1  D
"RTN","VPRDJ08",92,0)
 . S VPRT=VPRT+1,I=0 K VPRADD M VPRADD=VPRTIU(IEN,"ZADD",VPRA)
"RTN","VPRDJ08",93,0)
 . S DOC("text",VPRT,"status")=$G(VPRADD(.05,"E"))
"RTN","VPRDJ08",94,0)
 . S DOC("text",VPRT,"uid")=$$SETUID^VPRUTILS("document",DFN,VPRA)
"RTN","VPRDJ08",95,0)
 . S DOC("text",VPRT,"dateTime")=$$JSONDT^VPRUTILS($G(VPRADD(1301,"I")))
"RTN","VPRDJ08",96,0)
 . I $G(VPRADD(1302,"I")) D USER(.I,VPRADD(1302,"I"),VPRADD(1302,"E"),"E")
"RTN","VPRDJ08",97,0)
 . I $G(VPRADD(1202,"I")) D USER(.I,VPRADD(1202,"I"),VPRADD(1202,"E"),"AU")
"RTN","VPRDJ08",98,0)
 . I $G(VPRADD(1501,"I")) D USER(.I,VPRADD(1502,"I"),VPRADD(1502,"E"),"S",VPRADD(1501,"I"))
"RTN","VPRDJ08",99,0)
 . I $G(VPRADD(1507,"I")) D USER(.I,VPRADD(1508,"I"),VPRADD(1508,"E"),"C",VPRADD(1507,"I"))
"RTN","VPRDJ08",100,0)
 . I $G(VPRADD(1204,"I")) D USER(.I,VPRADD(1204,"I"),VPRADD(1204,"E"),"ES")
"RTN","VPRDJ08",101,0)
 . I $G(VPRADD(1208,"I")) D USER(.I,VPRADD(1208,"I"),VPRADD(1208,"E"),"EC")
"RTN","VPRDJ08",102,0)
 . I $G(VPRADD(1209,"I")) D USER(.I,VPRADD(1209,"I"),VPRADD(1209,"E"),"ATT")
"RTN","VPRDJ08",103,0)
 . Q:'$G(VPRTEXT)  K ^TMP($J,"VPR TIU TEXT")
"RTN","VPRDJ08",104,0)
 . S X=$NA(VPRTIU(IEN,"ZADD",VPRA,"TEXT"))
"RTN","VPRDJ08",105,0)
 . D SETTEXT^VPRUTILS(X,$NA(^TMP($J,"VPR TIU TEXT")))
"RTN","VPRDJ08",106,0)
 . M DOC("text",VPRT,"content","\")=^TMP($J,"VPR TIU TEXT")
"RTN","VPRDJ08",107,0)
ENQ ; end
"RTN","VPRDJ08",108,0)
 K ^TMP($J,"VPR TIU TEXT")
"RTN","VPRDJ08",109,0)
 D ADD^VPRDJ("DOC","document")
"RTN","VPRDJ08",110,0)
 Q
"RTN","VPRDJ08",111,0)
 ;
"RTN","VPRDJ08",112,0)
USER(N,IEN,NAME,ROLE,DATE,SBN,SBT) ; -- set author, signer(s)
"RTN","VPRDJ08",113,0)
 Q:'$G(IEN)  S N=+$G(N)+1
"RTN","VPRDJ08",114,0)
 S DOC("text",VPRT,"clinicians",N,"uid")=$$SETUID^VPRUTILS("user",,IEN)
"RTN","VPRDJ08",115,0)
 S DOC("text",VPRT,"clinicians",N,"name")=$S($L($G(NAME)):NAME,1:$P($G(^VA(200,IEN,0)),U))
"RTN","VPRDJ08",116,0)
 S DOC("text",VPRT,"clinicians",N,"role")=$G(ROLE)
"RTN","VPRDJ08",117,0)
 Q:'$G(DATE)  ;not co/signed
"RTN","VPRDJ08",118,0)
 S DOC("text",VPRT,"clinicians",N,"signedDateTime")=$$JSONDT^VPRUTILS(DATE)
"RTN","VPRDJ08",119,0)
 I '$D(SBN) S SBN=NAME
"RTN","VPRDJ08",120,0)
 S DOC("text",VPRT,"clinicians",N,"signature")=SBN_$S($L($G(SBT)):" "_SBT,1:"")
"RTN","VPRDJ08",121,0)
 ;$$SIG^VPRDTIU(IEN)
"RTN","VPRDJ08",122,0)
 Q
"RTN","VPRDJ08",123,0)
 ;
"RTN","VPRDJ08",124,0)
NATL ; -- national title [not used -- in docDef now]
"RTN","VPRDJ08",125,0)
 S X=$S(TIU:$$GET1^DIQ(8925,IEN_",",".01:1501","I"),1:$P(VPRX,U,10))
"RTN","VPRDJ08",126,0)
 I X D  ;National Title + attributes
"RTN","VPRDJ08",127,0)
 . N IENS,TIU,Y,FNUM
"RTN","VPRDJ08",128,0)
 . S IENS=X_"," D GETS^DIQ(8926.1,IENS,"*","IE","TIU")
"RTN","VPRDJ08",129,0)
 . S DOC("nationalTitle","vuid")="urn:va:vuid:"_$G(TIU(8926.1,IENS,99.99,"E"))
"RTN","VPRDJ08",130,0)
 . S DOC("nationalTitle","name")=$G(TIU(8926.1,IENS,.01,"E"))
"RTN","VPRDJ08",131,0)
 . F I=".04^Subject^2",".05^Role^3",".06^Setting^4",".07^Service^5",".08^Type^6" D
"RTN","VPRDJ08",132,0)
 .. S Y=+$G(TIU(8926.1,IENS,+I,"I")) Q:Y'>0
"RTN","VPRDJ08",133,0)
 .. S FNUM="8926."_+$P(I,U,3)
"RTN","VPRDJ08",134,0)
 .. S DOC("nationalTitle"_$P(I,U,2),"vuid")="urn:va:vuid:"_$$VUID^VPRD(Y,FNUM)
"RTN","VPRDJ08",135,0)
 .. S DOC("nationalTitle"_$P(I,U,2),"name")=$G(TIU(8926.1,IENS,+I,"E"))
"RTN","VPRDJ08",136,0)
 Q
"RTN","VPRDJ08",137,0)
 ;
"RTN","VPRDJ08",138,0)
 ; ------------ Get/apply search criteria ------------
"RTN","VPRDJ08",139,0)
 ;               [from DOCUMENT^VPRDJ0]
"RTN","VPRDJ08",140,0)
 ;
"RTN","VPRDJ08",141,0)
SETUP ; -- convert FILTER("attribute") = value to TIU criteria
"RTN","VPRDJ08",142,0)
 ; Expects: FILTER("category") = code (see $$CATG)
"RTN","VPRDJ08",143,0)
 ;          FILTER("status")   = 'signed','unsigned','all'
"RTN","VPRDJ08",144,0)
 ; Returns: CLASS,[SUBCLASS,STATUS]
"RTN","VPRDJ08",145,0)
 ;
"RTN","VPRDJ08",146,0)
 N TYPE,STS,CP
"RTN","VPRDJ08",147,0)
 S TYPE=$$UP^XLFSTR($G(FILTER("category")))
"RTN","VPRDJ08",148,0)
 S CLASS=0,(SUBCLASS,STATUS)=""
"RTN","VPRDJ08",149,0)
 ;
"RTN","VPRDJ08",150,0)
 ; status [default='signed']
"RTN","VPRDJ08",151,0)
 S STS=$$LOW^XLFSTR($G(FILTER("status")))
"RTN","VPRDJ08",152,0)
 S STATUS=$S(STS?1"unsig".E:2,STS="all":"5^2",1:5)     ;TIUSRVLO statuses
"RTN","VPRDJ08",153,0)
 ;
"RTN","VPRDJ08",154,0)
 ; all documents
"RTN","VPRDJ08",155,0)
 S:TYPE="" TYPE="ALL"
"RTN","VPRDJ08",156,0)
 I TYPE="ALL" S CLASS="3^244^"_+$$CLASS^TIUSROI("SURGICAL REPORTS")_"^CP^LR^RA" Q
"RTN","VPRDJ08",157,0)
 ;
"RTN","VPRDJ08",158,0)
 I TYPE="PN"   S CLASS=3 Q                            ;Progress Notes
"RTN","VPRDJ08",159,0)
 I TYPE="CR"   S CLASS=3,SUBCLASS=$$CLASS^TIUCNSLT Q  ;Consults
"RTN","VPRDJ08",160,0)
 I TYPE="CWAD" S CLASS=3,SUBCLASS="25^27^30^31" Q     ;CWAD
"RTN","VPRDJ08",161,0)
 I TYPE="C"    S CLASS=3,SUBCLASS=30 Q                ;Crisis Note
"RTN","VPRDJ08",162,0)
 I TYPE="W"    S CLASS=3,SUBCLASS=31 Q                ;Clinical Warning
"RTN","VPRDJ08",163,0)
 I TYPE="A"    S CLASS=3,SUBCLASS=25 Q                ;Allergy Note
"RTN","VPRDJ08",164,0)
 I TYPE="D"    S CLASS=3,SUBCLASS=27 Q                ;Advance Directive
"RTN","VPRDJ08",165,0)
 ;
"RTN","VPRDJ08",166,0)
 I TYPE="DS"   S CLASS=244 Q                          ;Discharge Summary
"RTN","VPRDJ08",167,0)
 ;
"RTN","VPRDJ08",168,0)
 I TYPE="SR"   S CLASS=$$CLASS^TIUSROI("SURGICAL REPORTS") Q
"RTN","VPRDJ08",169,0)
 I TYPE="CP" D  Q                                     ;Clin Procedures
"RTN","VPRDJ08",170,0)
 . I STATUS'=2 S CLASS="CP"                           ; if unsigned,
"RTN","VPRDJ08",171,0)
 . E  D CPCLASS^TIUCP(.CP) S CLASS=CP                 ; use TIU class#
"RTN","VPRDJ08",172,0)
 ;
"RTN","VPRDJ08",173,0)
 I TYPE="LR"   S CLASS=$S(STATUS=2:$$LR,1:"LR") Q     ;Lab/Pathology
"RTN","VPRDJ08",174,0)
 ;
"RTN","VPRDJ08",175,0)
 I TYPE="RA"   S CLASS="RA" Q                         ;Radiology
"RTN","VPRDJ08",176,0)
 ;
"RTN","VPRDJ08",177,0)
 Q
"RTN","VPRDJ08",178,0)
 ;
"RTN","VPRDJ08",179,0)
LR() ; -- Return ien of Lab class
"RTN","VPRDJ08",180,0)
 N Y S Y=+$O(^TIU(8925.1,"B","LR LABORATORY REPORTS",0))
"RTN","VPRDJ08",181,0)
 I Y>0,$S($P($G(^TIU(8925.1,Y,0)),U,4)="CL":0,$P($G(^(0)),U,4)="DC":0,1:1) S Y=0
"RTN","VPRDJ08",182,0)
 Q Y
"RTN","VPRDJ08",183,0)
 ;
"RTN","VPRDJ08",184,0)
MATCH(DOC,STS) ; -- Return 1 or 0, if document DA matches search criteria
"RTN","VPRDJ08",185,0)
 N Y,DA,LOCAL,NATL,X0,OK S Y=0
"RTN","VPRDJ08",186,0)
 S DA=+$G(DOC) G:DA<1 MQ
"RTN","VPRDJ08",187,0)
 ; include addenda if pulling only unsigned items
"RTN","VPRDJ08",188,0)
 I $P(DOC,U,2)?1"Addendum ".E,STATUS'=2 G MQ
"RTN","VPRDJ08",189,0)
 ; TIU unsigned list can include completed parent notes
"RTN","VPRDJ08",190,0)
 I $G(STS)=2,$P(DOC,U,7)'="unsigned" G MQ
"RTN","VPRDJ08",191,0)
 S LOCAL=$$GET1^DIQ(8925,DA_",",.01,"I") ;local Title 8925.1 ien
"RTN","VPRDJ08",192,0)
 I $L(SUBCLASS) D  G:'OK MQ
"RTN","VPRDJ08",193,0)
 . N I,X S OK=0
"RTN","VPRDJ08",194,0)
 . F I=1:1:$L(SUBCLASS,"^") S X=$P(SUBCLASS,U,I) I $$ISA^TIULX(LOCAL,X) S OK=1 Q
"RTN","VPRDJ08",195,0)
 S Y=1
"RTN","VPRDJ08",196,0)
MQ Q Y
"RTN","VPRDJ08",197,0)
 ;
"RTN","VPRDJ08",198,0)
TYPE(X) ; -- Return name of category type X
"RTN","VPRDJ08",199,0)
 S X=$G(X)
"RTN","VPRDJ08",200,0)
 I X="PN" Q "Progress Note"
"RTN","VPRDJ08",201,0)
 I X="DS" Q "Discharge Summary"
"RTN","VPRDJ08",202,0)
 I X="CP" Q "Clinical Procedure"
"RTN","VPRDJ08",203,0)
 I X="SR" Q "Surgery Report"
"RTN","VPRDJ08",204,0)
 I X="LR" Q "Laboratory Report"
"RTN","VPRDJ08",205,0)
 I X="RA" Q "Radiology Report"
"RTN","VPRDJ08",206,0)
 I X="CR" Q "Consult Report"
"RTN","VPRDJ08",207,0)
 I X="C"  Q "Crisis Note"
"RTN","VPRDJ08",208,0)
 I X="W"  Q "Clinical Warning"
"RTN","VPRDJ08",209,0)
 I X="A"  Q "Allergy/Adverse Reaction"
"RTN","VPRDJ08",210,0)
 I X="D"  Q "Advance Directive"
"RTN","VPRDJ08",211,0)
 Q ""
"RTN","VPRDJ08A")
0^82^B44517876
"RTN","VPRDJ08A",1,0)
VPRDJ08A ;SLC/MKB -- Documents cont ;6/25/12  16:11
"RTN","VPRDJ08A",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ08A",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ08A",4,0)
 ;
"RTN","VPRDJ08A",5,0)
 ; External References          DBIA#
"RTN","VPRDJ08A",6,0)
 ; -------------------          -----
"RTN","VPRDJ08A",7,0)
 ; ^DPT                         10035
"RTN","VPRDJ08A",8,0)
 ; ^LR                            525
"RTN","VPRDJ08A",9,0)
 ; ^RADPT                        2480
"RTN","VPRDJ08A",10,0)
 ; ^RARPT                        5605
"RTN","VPRDJ08A",11,0)
 ; ^SC                          10040
"RTN","VPRDJ08A",12,0)
 ; ^TMP("MDHSP" [MDPS1]          4230
"RTN","VPRDJ08A",13,0)
 ; ^VA(200                      10060
"RTN","VPRDJ08A",14,0)
 ; %DT                          10003
"RTN","VPRDJ08A",15,0)
 ; DIQ                           2056
"RTN","VPRDJ08A",16,0)
 ; GMRCGUIB                      2980
"RTN","VPRDJ08A",17,0)
 ; LR7OR1,^TMP("LRRR"            2503
"RTN","VPRDJ08A",18,0)
 ; MCARUTL3                      3280
"RTN","VPRDJ08A",19,0)
 ; PXAPI                         1894
"RTN","VPRDJ08A",20,0)
 ; RAO7PC1                  2043,2265
"RTN","VPRDJ08A",21,0)
 ; RAO7PC3                       2877
"RTN","VPRDJ08A",22,0)
 ;
"RTN","VPRDJ08A",23,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ08A",24,0)
 ;
"RTN","VPRDJ08A",25,0)
 ; ------------------------------------------------------------------
"RTN","VPRDJ08A",26,0)
 ; documentClass = CLINICAL PROCEDURES
"RTN","VPRDJ08A",27,0)
 ; nationalTitle = 4696566^PROCEDURE REPORT
"RTN","VPRDJ08A",28,0)
 ;       Service = 4696471^PROCEDURE
"RTN","VPRDJ08A",29,0)
 ;          Type = 4696123^REPORT
"RTN","VPRDJ08A",30,0)
 ;
"RTN","VPRDJ08A",31,0)
CP(DFN,BEG,END,MAX) ; -- Medicine reports
"RTN","VPRDJ08A",32,0)
 N VPRN,VPRX,RTN,TIUN,CONS,VPRD,I,DA,X,Y,%DT,DATE,GBL
"RTN","VPRDJ08A",33,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","VPRDJ08A",34,0)
 D MDPS1^VPRDJ03(DFN,BEG,END,MAX)             ;gets ^TMP("MDHSP",$J)
"RTN","VPRDJ08A",35,0)
 S VPRN=0 F  S VPRN=$O(^TMP("MDHSP",$J,VPRN)) Q:VPRN<1  S VPRX=$G(^(VPRN)) D
"RTN","VPRDJ08A",36,0)
 . N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ08A",37,0)
 . S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ08A",38,0)
 . S ERRMSG="A problem occurred converting a medicine report."
"RTN","VPRDJ08A",39,0)
 . S RTN=$P(VPRX,U,3,4)  Q:RTN="PRPRO^MDPS4"  ;skip non-CP items
"RTN","VPRDJ08A",40,0)
 . S TIUN=+$P(VPRX,U,14)
"RTN","VPRDJ08A",41,0)
 . I TIUN D EN1^VPRDJ08(TIUN,38)              ;38=TIU Clinical Document
"RTN","VPRDJ08A",42,0)
 . S CONS=+$P(VPRX,U,13) D:CONS DOCLIST^GMRCGUIB(.VPRD,CONS)
"RTN","VPRDJ08A",43,0)
 . K DA S I=0 F  S I=$O(VPRD(50,I)) Q:I<1  D
"RTN","VPRDJ08A",44,0)
 .. S DA=+VPRD(50,I) Q:DA=TIUN
"RTN","VPRDJ08A",45,0)
 .. D EN1^VPRDJ08(DA,38)
"RTN","VPRDJ08A",46,0)
 . Q:TIUN!$G(DA)                              ;done [got TIU note(s)]
"RTN","VPRDJ08A",47,0)
 . Q:RTN="PR702^MDPS1"                        ;CP, but no TIU note yet
"RTN","VPRDJ08A",48,0)
 . Q:RTN="PRPRO^MDPS4"                        ;non-CP procedure
"RTN","VPRDJ08A",49,0)
 . ; find ID for pre-TIU report
"RTN","VPRDJ08A",50,0)
 . S X=$P(VPRX,U,6),%DT="TXS" D ^%DT Q:Y'>0  S DATE=Y
"RTN","VPRDJ08A",51,0)
 . S GBL=+$P(VPRX,U,2)_";"_$$ROOT^VPRDMC(DFN,$P(VPRX,U,11),DATE)
"RTN","VPRDJ08A",52,0)
 . I GBL S X=$$CP1(DFN,GBL) D EN1^VPRDJ08(X,"CP")
"RTN","VPRDJ08A",53,0)
 K ^TMP("MDHSP",$J),^TMP("VPRTEXT",$J)
"RTN","VPRDJ08A",54,0)
 Q
"RTN","VPRDJ08A",55,0)
 ;
"RTN","VPRDJ08A",56,0)
CP1(DFN,ID) ; -- return report data as TIU string [$$RESOLVE]
"RTN","VPRDJ08A",57,0)
 S DFN=+$G(DFN),ID=$G(ID) I DFN<1!'$L(ID) Q ""
"RTN","VPRDJ08A",58,0)
 N Y,VPRY,VPRFN,X,NAME,DATE,STS,USER,SIGN,TEXT
"RTN","VPRDJ08A",59,0)
 S VPRFN=+$P(ID,"(",2)
"RTN","VPRDJ08A",60,0)
 D MEDLKUP^MCARUTL3(.VPRY,VPRFN,+ID)
"RTN","VPRDJ08A",61,0)
 I VPRY<1 Q ""  ;error in CP
"RTN","VPRDJ08A",62,0)
 S NAME=$P(VPRY,U,9),DATE=$P(VPRY,U,6)
"RTN","VPRDJ08A",63,0)
 S X=$$GET1^DIQ(VPRFN,+ID_",",1506)
"RTN","VPRDJ08A",64,0)
 S STS=$S($L(X):X,1:"COMPLETED")
"RTN","VPRDJ08A",65,0)
 S X=+$$GET1^DIQ(VPRFN,+ID_",",701,"I"),(USER,SIGN)=""
"RTN","VPRDJ08A",66,0)
 S:X USER=X_";;"_$P($G(^VA(200,X,0)),U)
"RTN","VPRDJ08A",67,0)
 S X=+$$GET1^DIQ(VPRFN,+ID_",",1503,"I")
"RTN","VPRDJ08A",68,0)
 S:X SIGN="//"_X_";"_$P($G(^VA(200,X,0)),U)_";"_$$GET1^DIQ(VPRFN,+ID_",",1505,"I")
"RTN","VPRDJ08A",69,0)
 ; VST=$$GET1^DIQ(VPRFN,+ID_",",900,"I")
"RTN","VPRDJ08A",70,0)
 S Y=ID_U_NAME_U_DATE_U_U_USER_U_U_STS_"^^^2461^"_SIGN
"RTN","VPRDJ08A",71,0)
 S:$G(VPRTEXT) TEXT=$$TEXT^VPRDMC(DFN,ID,NAME) ;^TMP("VPRTEXT",$J,ID)
"RTN","VPRDJ08A",72,0)
 Q Y
"RTN","VPRDJ08A",73,0)
 ;
"RTN","VPRDJ08A",74,0)
 ; ------------------------------------------------------------------
"RTN","VPRDJ08A",75,0)
 ; documentClass = LR LABORATORY REPORTS
"RTN","VPRDJ08A",76,0)
 ; nationalTitle = 4697105^LABORATORY NOTE
"RTN","VPRDJ08A",77,0)
 ;       Subject = 4697104^LABORATORY
"RTN","VPRDJ08A",78,0)
 ;          Type = 4696120^NOTE
"RTN","VPRDJ08A",79,0)
 ;
"RTN","VPRDJ08A",80,0)
LR(DFN,BEG,END,MAX) ; -- Lab reports
"RTN","VPRDJ08A",81,0)
 N VPRSUB,VPRIDT,VPRITM,VPRTIU,VPRXID,LRDFN,IVDT,VPRN,DA
"RTN","VPRDJ08A",82,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","VPRDJ08A",83,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","VPRDJ08A",84,0)
 S LRDFN=+$G(^DPT(DFN,"LR")),IVDT=9999999-+$G(^LR(LRDFN,"AU")) ;LR7OB63D error
"RTN","VPRDJ08A",85,0)
 K ^TMP("LRRR",$J,DFN) D RR^LR7OR1(DFN,,BEG,END,"MIAP",,,MAX)
"RTN","VPRDJ08A",86,0)
 S VPRSUB="" F  S VPRSUB=$O(^TMP("LRRR",$J,DFN,VPRSUB)) Q:VPRSUB=""  D
"RTN","VPRDJ08A",87,0)
 . S VPRIDT=0 F  S VPRIDT=$O(^TMP("LRRR",$J,DFN,VPRSUB,VPRIDT)) Q:VPRIDT<1  I $O(^(VPRIDT,0)) D
"RTN","VPRDJ08A",88,0)
 .. S VPRTIU=$S(VPRSUB="AU":$NA(^LR(LRDFN,101)),1:$NA(^LR(LRDFN,VPRSUB,VPRIDT,.05)))
"RTN","VPRDJ08A",89,0)
 .. K VPRITM S VPRXID=VPRSUB_";"_VPRIDT
"RTN","VPRDJ08A",90,0)
 .. I '$O(@VPRTIU@(0)) S VPRX=$$LR1(DFN,VPRXID) D EN1^VPRDJ08(VPRX,"LR") Q
"RTN","VPRDJ08A",91,0)
 .. S VPRN=0 F  S VPRN=$O(@VPRTIU@(VPRN)) Q:VPRN<1  D  ;38=TIU Clin Doc
"RTN","VPRDJ08A",92,0)
 ... S DA=+$P($G(@VPRTIU@(VPRN,0)),U,2)
"RTN","VPRDJ08A",93,0)
 ... D:DA EN1^VPRDJ08(DA,38)
"RTN","VPRDJ08A",94,0)
 K ^TMP("LRRR",$J,DFN),^TMP("VPRTEXT",$J)
"RTN","VPRDJ08A",95,0)
 Q
"RTN","VPRDJ08A",96,0)
 ;
"RTN","VPRDJ08A",97,0)
LR1(DFN,ID) ; -- return report data as TIU string [$$RESOLVE]
"RTN","VPRDJ08A",98,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ08A",99,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ08A",100,0)
 S ERRMSG="A problem occurred converting lab report "_ID
"RTN","VPRDJ08A",101,0)
 S DFN=+$G(DFN),ID=$G(ID) I DFN<1!'$L(ID) Q ""
"RTN","VPRDJ08A",102,0)
 N Y,SUB,IDT,LRDFN,LR,NAME,LOC,USER,VST,SIGN,TEXT
"RTN","VPRDJ08A",103,0)
 K ^TMP("VPRTEXT",$J,ID)
"RTN","VPRDJ08A",104,0)
 S SUB=$P(ID,";"),IDT=+$P(ID,";",2),LRDFN=$G(^DPT(DFN,"LR"))
"RTN","VPRDJ08A",105,0)
 S LR=$S(SUB="AU":$G(^LR(LRDFN,"AU")),1:$G(^LR(LRDFN,SUB,IDT,0)))
"RTN","VPRDJ08A",106,0)
 S NAME="LR "_$$NAME^VPRDLRA(SUB)_" REPORT"
"RTN","VPRDJ08A",107,0)
 S LOC=$P(LR,U,$S(SUB="AU":5,1:8)) D  ;look-up visit
"RTN","VPRDJ08A",108,0)
 . N CDT,SC S CDT=9999999-IDT,SC="",X=0
"RTN","VPRDJ08A",109,0)
 . S:$L(LOC) SC=+$O(^SC("B",LOC,0))
"RTN","VPRDJ08A",110,0)
 . I CDT,LOC S X=$$GETENC^PXAPI(DFN,CDT,SC)
"RTN","VPRDJ08A",111,0)
 . S:X VST=+X
"RTN","VPRDJ08A",112,0)
 S X=+$P(LR,U,$S(SUB="AU":10,SUB="MI":4,1:2)) ;pathologist[author]
"RTN","VPRDJ08A",113,0)
 S USER=$S(X:X_";;"_$P($G(^VA(200,X,0)),U),1:""),SIGN=""
"RTN","VPRDJ08A",114,0)
 S X=$S(SUB="AU":$P(LR,U,15,16),SUB="MI":$P(LR,U,3,4),1:$P(LR,U,11)_U_$P(LR,U,13)) ;released
"RTN","VPRDJ08A",115,0)
 S:X SIGN="//"_+$P(X,U,2)_";"_$P($G(^VA(200,+$P(X,U,2),0)),U)_";"_+X
"RTN","VPRDJ08A",116,0)
 S Y=ID_U_NAME_U_(9999999-IDT)_U_U_USER_U_LOC_"^COMPLETED^"_$G(VST)_"^^2753^"_SIGN
"RTN","VPRDJ08A",117,0)
 S:$G(VPRTEXT) TEXT=$$TEXT^VPRDLRA(DFN,SUB,IDT) ;^TMP("VPRTEXT",$J,ID)
"RTN","VPRDJ08A",118,0)
 Q Y
"RTN","VPRDJ08A",119,0)
 ;
"RTN","VPRDJ08A",120,0)
 ; ------------------------------------------------------------------
"RTN","VPRDJ08A",121,0)
 ; nationalTitle = 4695068^RADIOLOGY REPORT
"RTN","VPRDJ08A",122,0)
 ;       Subject = 4693357^RADIOLOGY
"RTN","VPRDJ08A",123,0)
 ;          Type = 4696123^REPORT
"RTN","VPRDJ08A",124,0)
 ;
"RTN","VPRDJ08A",125,0)
RA(DFN,BEG,END,MAX) ; -- Radiology reports
"RTN","VPRDJ08A",126,0)
 N VPRXID,STS,PSET
"RTN","VPRDJ08A",127,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","VPRDJ08A",128,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)_"P"
"RTN","VPRDJ08A",129,0)
 K ^TMP($J,"RAE1") D EN1^RAO7PC1(DFN,BEG,END,MAX)
"RTN","VPRDJ08A",130,0)
 S VPRXID="" F  S VPRXID=$O(^TMP($J,"RAE1",DFN,VPRXID)) Q:VPRXID=""  D
"RTN","VPRDJ08A",131,0)
 . S STS=$P($G(^TMP($J,"RAE1",DFN,VPRXID)),U,3),PSET=$G(^(VPRXID,"CPRS"))
"RTN","VPRDJ08A",132,0)
 . Q:STS="No Report"!(STS="Deleted")  ;!(STS["Draft")
"RTN","VPRDJ08A",133,0)
 . I +PSET=2,$G(PSET(+VPRXID,$P(PSET,U,2))) Q  ;already have report
"RTN","VPRDJ08A",134,0)
 . S VPRX=$$RA1(DFN,VPRXID) D EN1^VPRDJ08(VPRX,"RA")
"RTN","VPRDJ08A",135,0)
 . I +PSET=2 S PSET(+VPRXID,$P(PSET,U,2))=$P(VPRXID,"-",2) ;parent
"RTN","VPRDJ08A",136,0)
 K ^TMP($J,"RAE1"),^TMP("VPRTEXT",$J)
"RTN","VPRDJ08A",137,0)
 Q
"RTN","VPRDJ08A",138,0)
 ;
"RTN","VPRDJ08A",139,0)
RA1(DFN,ID) ; -- return report data as TIU string [$$RESOLVE]
"RTN","VPRDJ08A",140,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ08A",141,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ08A",142,0)
 S ERRMSG="A problem occurred converting radiology report "_ID
"RTN","VPRDJ08A",143,0)
 S DFN=+$G(DFN),ID=$G(ID) I DFN<1!'$L(ID) Q ""
"RTN","VPRDJ08A",144,0)
 N EXAM,CASE,PROC,RAE3,RAE1,TEXT,I,X,Y,DATE,LOC,STS,IENS,VST,USER,SIGN
"RTN","VPRDJ08A",145,0)
 K RPT,^TMP("VPRTEXT",$J,ID)
"RTN","VPRDJ08A",146,0)
 S EXAM=DFN_U_$TR(ID,"-","^") D
"RTN","VPRDJ08A",147,0)
 . N DFN D EN3^RAO7PC3(EXAM) ;report
"RTN","VPRDJ08A",148,0)
 . D EN3^RAO7PC1(EXAM)       ;add'l values
"RTN","VPRDJ08A",149,0)
 S CASE=$O(^TMP($J,"RAE3",DFN,0)),PROC=$O(^(CASE,"")),RAE3=$G(^(PROC))
"RTN","VPRDJ08A",150,0)
 S RAE1=$G(^TMP($J,"RAE1",DFN,ID))
"RTN","VPRDJ08A",151,0)
 I $G(VPRTEXT) D
"RTN","VPRDJ08A",152,0)
 . S TEXT=$NA(^TMP("VPRTEXT",$J,ID))
"RTN","VPRDJ08A",153,0)
 . S I=0 F  S I=$O(^TMP($J,"RAE3",DFN,CASE,PROC,I)) Q:I<1  S X=^(I),@TEXT@(I)=X
"RTN","VPRDJ08A",154,0)
 S DATE=9999999.9999-(+ID),LOC=$P(RAE1,U,7),STS=$P(RAE3,U)
"RTN","VPRDJ08A",155,0)
 S IENS=$P(ID,"-",2)_","_+ID_","_DFN_","
"RTN","VPRDJ08A",156,0)
 S VST=$$GET1^DIQ(70.03,IENS,27,"I")
"RTN","VPRDJ08A",157,0)
 S X=+$G(^TMP($J,"RAE2",DFN,CASE,PROC,"P")),(USER,SIGN)=""
"RTN","VPRDJ08A",158,0)
 S:X USER=X_";;"_$P($G(^VA(200,X,0)),U)
"RTN","VPRDJ08A",159,0)
 S X=$G(^TMP($J,"RAE2",DFN,CASE,PROC,"V"))
"RTN","VPRDJ08A",160,0)
 S:X SIGN="//"_+X_";"_$P($G(^VA(200,+X,0)),U)_";"_$$GET1^DIQ(74,+$P(RAE1,U,5)_",",7,"I")
"RTN","VPRDJ08A",161,0)
 I $D(^TMP($J,"RAE3",DFN,"PRINT_SET")) S PROC=$G(^("ORD")) ;use parent, if printset
"RTN","VPRDJ08A",162,0)
 S Y=ID_U_PROC_U_DATE_U_U_USER_U_LOC_U_STS_U_VST_"^^1901^"_SIGN
"RTN","VPRDJ08A",163,0)
 K ^TMP($J,"RAE3",DFN),^TMP($J,"RAE2",DFN)
"RTN","VPRDJ08A",164,0)
 Q Y
"RTN","VPRDJ09")
0^80^B39174048
"RTN","VPRDJ09",1,0)
VPRDJ09 ;SLC/MKB -- PCE ;8/2/11  15:29
"RTN","VPRDJ09",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRDJ09",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ09",4,0)
 ;
"RTN","VPRDJ09",5,0)
 ; External References          DBIA#
"RTN","VPRDJ09",6,0)
 ; -------------------          -----
"RTN","VPRDJ09",7,0)
 ; ^AUPNVSIT                     2028
"RTN","VPRDJ09",8,0)
 ; ^PXRMINDX                     4290
"RTN","VPRDJ09",9,0)
 ; ^SC                          10040
"RTN","VPRDJ09",10,0)
 ; ^VA(200                      10060
"RTN","VPRDJ09",11,0)
 ; DIC                           2051
"RTN","VPRDJ09",12,0)
 ; DILFD                         2055
"RTN","VPRDJ09",13,0)
 ; DIQ                           2056
"RTN","VPRDJ09",14,0)
 ; PXAPI,^TMP("PXKENC"           1894
"RTN","VPRDJ09",15,0)
 ; VALM1                        10116
"RTN","VPRDJ09",16,0)
 ; XUAF4                         2171
"RTN","VPRDJ09",17,0)
 ;
"RTN","VPRDJ09",18,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ09",19,0)
 ;
"RTN","VPRDJ09",20,0)
PX(FNUM) ; -- PCE item(s)
"RTN","VPRDJ09",21,0)
 I $G(VPRID) D PXA(VPRID) Q
"RTN","VPRDJ09",22,0)
 N VPRIDT,ID D SORT ;sort ^PXRMINDX into ^TMP("VPRPX",$J,IDT)
"RTN","VPRDJ09",23,0)
 S VPRIDT=0 F  S VPRIDT=$O(^TMP("VPRPX",$J,VPRIDT)) Q:VPRIDT<1  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ09",24,0)
 . S ID=0 F  S ID=$O(^TMP("VPRPX",$J,VPRIDT,ID)) Q:ID<1  D PX1 Q:VPRI'<VPRMAX
"RTN","VPRDJ09",25,0)
 K ^TMP("VPRPX",$J)
"RTN","VPRDJ09",26,0)
 Q
"RTN","VPRDJ09",27,0)
 ;
"RTN","VPRDJ09",28,0)
PXA(ID) ; -- find ID in ^PXRMINDX(FNUM), fall thru to PX1 if successful
"RTN","VPRDJ09",29,0)
 N N,ROOT,IDX,P,ITEM,DATE,VPRIDT
"RTN","VPRDJ09",30,0)
 S N=+$P(FNUM,".",2) K ^TMP("VPRPX",$J)
"RTN","VPRDJ09",31,0)
 I N=7!(N=18) S ROOT="^PXRMINDX("_FNUM_",""PPI"","_+$G(DFN)
"RTN","VPRDJ09",32,0)
 E  S ROOT="^PXRMINDX("_FNUM_",""PI"","_+$G(DFN)
"RTN","VPRDJ09",33,0)
 S IDX=ROOT_")" F  S IDX=$Q(@IDX) Q:$P(IDX,",",1,3)'=ROOT  D
"RTN","VPRDJ09",34,0)
 . S P=$L(IDX,",") Q:ID'=+$P(IDX,",",P)  ;last subscript
"RTN","VPRDJ09",35,0)
 . S DATE=+$P(IDX,",",P-1),ITEM=+$P(IDX,",",P-2)
"RTN","VPRDJ09",36,0)
 . S VPRIDT=9999999-DATE,^TMP("VPRPX",$J,VPRIDT,ID)=ITEM_U_DATE
"RTN","VPRDJ09",37,0)
 Q:'$D(^TMP("VPRPX",$J))  ;not found
"RTN","VPRDJ09",38,0)
PX1 ; -- PCE ^TMP("VPRPX",$J,VPRIDT,ID)=ITM^DATE for FNUM
"RTN","VPRDJ09",39,0)
 N N,COLL,TAG,VPRF,FLD,TMP,VISIT,X0,X12,FAC,LOC,X,Y,PCE
"RTN","VPRDJ09",40,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJ09",41,0)
 S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJ09",42,0)
 S N=+$P(FNUM,".",2),TAG=$S(N=7:"VPOV",N=11:"VIMM",N=12:"VSKIN",N=13:"VXAM",N=16:"VPEDU",N=18:"VCPT",1:"VHF")
"RTN","VPRDJ09",43,0)
 S ERRMSG="A problem occurred converting record "_ID_" for "_TAG
"RTN","VPRDJ09",44,0)
 D @(TAG_"^PXPXRM(ID,.VPRF)")
"RTN","VPRDJ09",45,0)
 ;
"RTN","VPRDJ09",46,0)
 S PCE("localId")=ID,TMP=$G(^TMP("VPRPX",$J,VPRIDT,ID))
"RTN","VPRDJ09",47,0)
 S COLL=$S(N=7:"pov",N=11:"immunization",N=12:"skin",N=13:"exam",N=16:"education",N=18:"cpt",1:"factor")
"RTN","VPRDJ09",48,0)
 S PCE("uid")=$$SETUID^VPRUTILS(COLL,DFN,ID)
"RTN","VPRDJ09",49,0)
 ; TAG=$S(N=23:"recorded",N=11:"administeredDateTime",1:"dateTimeEntered")
"RTN","VPRDJ09",50,0)
 S TAG=$S(N=11:"administeredDateTime",1:"entered")
"RTN","VPRDJ09",51,0)
 S PCE(TAG)=$$JSONDT^VPRUTILS($P(TMP,U,2))
"RTN","VPRDJ09",52,0)
 S PCE("name")=$$EXTERNAL^DILFD(FNUM,.01,,+TMP)
"RTN","VPRDJ09",53,0)
 S VISIT=+$G(VPRF("VISIT")),PCE("encounterUid")=$$SETUID^VPRUTILS("visit",DFN,VISIT)
"RTN","VPRDJ09",54,0)
 S PCE("encounterName")=$$NAME^VPRDJ04(VISIT)
"RTN","VPRDJ09",55,0)
 S X0=$G(^AUPNVSIT(+VISIT,0)),FAC=+$P(X0,U,6),LOC=+$P(X0,U,22)
"RTN","VPRDJ09",56,0)
 S:FAC X=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","VPRDJ09",57,0)
 S:'FAC X=$$FAC^VPRD(LOC)
"RTN","VPRDJ09",58,0)
 D FACILITY^VPRUTILS(X,"PCE")
"RTN","VPRDJ09",59,0)
 S:LOC PCE("locationUid")=$$SETUID^VPRUTILS("location",,LOC),PCE("locationName")=$P($G(^SC(LOC,0)),U)
"RTN","VPRDJ09",60,0)
 S X=$G(VPRF("COMMENTS")) S:$L(X) PCE("comment")=X
"RTN","VPRDJ09",61,0)
POV I FNUM=9000010.07 D  G PXQ
"RTN","VPRDJ09",62,0)
 . S X=$G(VPRF("PRIMARY/SECONDARY")),PCE("type")=$S($L(X):X,1:"U")
"RTN","VPRDJ09",63,0)
 . S X=PCE("name"),PCE("icdCode")=$$SETNCS^VPRUTILS("icd",X)
"RTN","VPRDJ09",64,0)
 . S X=$G(VPRF("PROVIDER NARRATIVE")),PCE("name")=$$EXTERNAL^DILFD(9000010.07,.04,,X)
"RTN","VPRDJ09",65,0)
CPT I FNUM=9000010.18 D  G PXQ
"RTN","VPRDJ09",66,0)
 . S X=$G(VPRF("PRINCIPAL PROCEDURE")),PCE("type")=$S($L(X):X,1:"U")
"RTN","VPRDJ09",67,0)
 . S X=PCE("name"),PCE("cptCode")=$$SETNCS^VPRUTILS("cpt",X)
"RTN","VPRDJ09",68,0)
 . S X=$G(VPRF("PROVIDER NARRATIVE")),PCE("name")=$$EXTERNAL^DILFD(9000010.18,.04,,X)
"RTN","VPRDJ09",69,0)
 . S PCE("quantity")=VPRF("QUANTITY")
"RTN","VPRDJ09",70,0)
 S X=$G(VPRF("VALUE")),FLD=$S(FNUM=9000010.16:.06,1:.04)
"RTN","VPRDJ09",71,0)
 S Y=$$EXTERNAL^DILFD(FNUM,FLD,,X)
"RTN","VPRDJ09",72,0)
IM I FNUM=9000010.11 D  G PXQ ;immunization
"RTN","VPRDJ09",73,0)
 . S:$L(Y) PCE("seriesName")=Y,PCE("seriesCode")=$$SETUID^VPRUTILS("series",DFN,Y)
"RTN","VPRDJ09",74,0)
 . S X=$G(VPRF("REACTION")) I $L(X) D
"RTN","VPRDJ09",75,0)
 .. S PCE("reactionName")=$$EXTERNAL^DILFD(9000010.11,.06,,X)
"RTN","VPRDJ09",76,0)
 .. S PCE("reactionCode")=$$SETUID^VPRUTILS("reaction",DFN,X)
"RTN","VPRDJ09",77,0)
 . S PCE("contraindicated")=$S(+$G(VPRF("CONTRAINDICATED")):"true",1:"false")
"RTN","VPRDJ09",78,0)
 . I '$D(^TMP("PXKENC",$J,VISIT)) D ENCEVENT^PXAPI(VISIT,1)
"RTN","VPRDJ09",79,0)
 . S X12=$G(^TMP("PXKENC",$J,VISIT,"IMM",ID,12))
"RTN","VPRDJ09",80,0)
 . S X=$P(X12,U,4) S:'X X=$P(X12,U,2)
"RTN","VPRDJ09",81,0)
 . I 'X S I=0 F  S I=$O(^TMP("PXKENC",$J,VISIT,"PRV",I)) Q:I<1  I $P($G(^(I,0)),U,4)="P" S X=+^(0) Q
"RTN","VPRDJ09",82,0)
 . S:X PCE("performerUid")=$$SETUID^VPRUTILS("user",,+X),PCE("performerName")=$P($G(^VA(200,X,0)),U)
"RTN","VPRDJ09",83,0)
 . ; CPT mapping
"RTN","VPRDJ09",84,0)
 . S X=+$$FIND1^DIC(811.1,,"QX",+TMP_";AUTTIMM(","B") I X>0 D
"RTN","VPRDJ09",85,0)
 .. S Y=$$GET1^DIQ(811.1,X_",",.02,"I") Q:Y<1
"RTN","VPRDJ09",86,0)
 .. N CPT S CPT=$G(@(U_$P(Y,";",2)_+Y_",0)"))
"RTN","VPRDJ09",87,0)
 .. S PCE("cptCode")=$$SETNCS^VPRUTILS("cpt",+CPT)
"RTN","VPRDJ09",88,0)
 .. S (PCE("summary"),PCE("cptName"))=$P(CPT,U,2)
"RTN","VPRDJ09",89,0)
HF I FNUM=9000010.23 D  G PXQ ;health factor
"RTN","VPRDJ09",90,0)
 . S:$L(X) PCE("severityUid")=$$SETVURN^VPRUTILS("factor-severity",X),PCE("severityName")=$$LOWER^VALM1(Y)
"RTN","VPRDJ09",91,0)
 . S X=$$GET1^DIQ(9999999.64,+TMP_",",.03,"I") I X D
"RTN","VPRDJ09",92,0)
 .. S PCE("categoryUid")=$$SETVURN^VPRUTILS("factor-category",X)
"RTN","VPRDJ09",93,0)
 .. S PCE("categoryName")=$$EXTERNAL^DILFD(9999999.64,.03,"",X)
"RTN","VPRDJ09",94,0)
 . S X=$$GET1^DIQ(9999999.64,+TMP_",",.08)
"RTN","VPRDJ09",95,0)
 . I $E(X)="Y" S PCE("display")="true"
"RTN","VPRDJ09",96,0)
 . S PCE("kind")="Health Factor",PCE("summary")=PCE("name")
"RTN","VPRDJ09",97,0)
SK I FNUM=9000010.12 D  ;skin test [fall thru to set result]
"RTN","VPRDJ09",98,0)
 . S X=$G(VPRF("READING")) S:$L(X) PCE("reading")=X
"RTN","VPRDJ09",99,0)
 . S X=$G(VPRF("DATE READ")) S:X PCE("dateRead")=$$JSONDT^VPRUTILS(X)
"RTN","VPRDJ09",100,0)
 S:$L(Y) PCE("result")=Y
"RTN","VPRDJ09",101,0)
PXQ ;finish
"RTN","VPRDJ09",102,0)
 D ADD^VPRDJ("PCE",COLL)
"RTN","VPRDJ09",103,0)
 Q
"RTN","VPRDJ09",104,0)
 ;
"RTN","VPRDJ09",105,0)
SORT ; -- build ^TMP("VPRPX",$J,9999999-DATE,DA)=ITEM^DATE in range
"RTN","VPRDJ09",106,0)
 N TYPE,ITEM,DATE,DA,IDT K ^TMP("VPRPX",$J)
"RTN","VPRDJ09",107,0)
 I FNUM=9000010.07!(FNUM=9000010.18) G PPI
"RTN","VPRDJ09",108,0)
PI ; from ^PXRMINDX(FNUM,"PI",DFN,ITEM,DATE,DA)
"RTN","VPRDJ09",109,0)
 S ITEM=0 F  S ITEM=$O(^PXRMINDX(FNUM,"PI",+$G(DFN),ITEM)) Q:ITEM<1  D
"RTN","VPRDJ09",110,0)
 . S DATE=0 F  S DATE=$O(^PXRMINDX(FNUM,"PI",+$G(DFN),ITEM,DATE)) Q:DATE<1  D
"RTN","VPRDJ09",111,0)
 .. Q:DATE<VPRSTART  Q:DATE>VPRSTOP  S IDT=9999999-DATE
"RTN","VPRDJ09",112,0)
 .. S DA=0 F  S DA=$O(^PXRMINDX(FNUM,"PI",+$G(DFN),ITEM,DATE,DA)) Q:DA<1  S ^TMP("VPRPX",$J,IDT,DA)=ITEM_U_DATE
"RTN","VPRDJ09",113,0)
 Q
"RTN","VPRDJ09",114,0)
PPI ; from ^PXRMINDX(FNUM,"PPI",DFN,TYPE,ITEM,DATE,DA)
"RTN","VPRDJ09",115,0)
 S TYPE="" F  S TYPE=$O(^PXRMINDX(FNUM,"PPI",+$G(DFN),TYPE)) Q:TYPE=""  D
"RTN","VPRDJ09",116,0)
 . S ITEM=0 F  S ITEM=$O(^PXRMINDX(FNUM,"PPI",+$G(DFN),TYPE,ITEM)) Q:ITEM<1  D
"RTN","VPRDJ09",117,0)
 .. S DATE=0 F  S DATE=$O(^PXRMINDX(FNUM,"PPI",+$G(DFN),TYPE,ITEM,DATE)) Q:DATE<1  D
"RTN","VPRDJ09",118,0)
 ... Q:DATE<VPRSTART  Q:DATE>VPRSTOP  S IDT=9999999-DATE
"RTN","VPRDJ09",119,0)
 ... S DA=0 F  S DA=$O(^PXRMINDX(FNUM,"PPI",+$G(DFN),TYPE,ITEM,DATE,DA)) Q:DA<1  S ^TMP("VPRPX",$J,IDT,DA)=ITEM_U_DATE
"RTN","VPRDJ09",120,0)
 Q
"RTN","VPRDJ09",121,0)
PTF ; from ^PXRMINDX(45,"ICD9","PNI",DFN,TYPE,ITEM,DATE,DA)
"RTN","VPRDJ09",122,0)
 S TYPE="" F  S TYPE=$O(^PXRMINDX(45,"ICD9","PNI",+$G(DFN),TYPE)) Q:TYPE=""  D
"RTN","VPRDJ09",123,0)
 . S ITEM=0 F  S ITEM=$O(^PXRMINDX(45,"ICD9","PNI",+$G(DFN),TYPE,ITEM)) Q:ITEM<1  D
"RTN","VPRDJ09",124,0)
 .. S DATE=0 F  S DATE=$O(^PXRMINDX(45,"ICD9","PNI",+$G(DFN),TYPE,ITEM,DATE)) Q:DATE<1  D
"RTN","VPRDJ09",125,0)
 ... Q:DATE<VPRSTART  Q:DATE>VPRSTOP  S IDT=9999999-DATE
"RTN","VPRDJ09",126,0)
 ... S DA="" F  S DA=$O(^PXRMINDX(45,"ICD9","PNI",+$G(DFN),TYPE,ITEM,DATE,DA)) Q:DA=""  S ^TMP("VPRPX",$J,IDT,DA_";"_TYPE)=ITEM_U_DATE
"RTN","VPRDJ09",127,0)
 Q
"RTN","VPRDJ09M")
0^65^B10204859
"RTN","VPRDJ09M",1,0)
VPRDJ09M ;SLC/MKB -- Mental Health ;9/9/13 4:51pm
"RTN","VPRDJ09M",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJ09M",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ09M",4,0)
 ;
"RTN","VPRDJ09M",5,0)
 ; All tags expect DFN, ID, [VPRSTART, VPRSTOP, VPRMAX, VPRTEXT]
"RTN","VPRDJ09M",6,0)
 ;
"RTN","VPRDJ09M",7,0)
 ;
"RTN","VPRDJ09M",8,0)
MH ; -- Mental Health Administrations [from ^VPRDJ0]
"RTN","VPRDJ09M",9,0)
 I $G(VPRID) D MH1(VPRID) Q
"RTN","VPRDJ09M",10,0)
 N CNT,VPRIDT,ID,FNUM,TOTAL,VPROUT,VPRYS,IEN
"RTN","VPRDJ09M",11,0)
 ;
"RTN","VPRDJ09M",12,0)
 S IEN=0 F  S IEN=$O(^YTT(601.71,IEN)) Q:IEN'>0  D
"RTN","VPRDJ09M",13,0)
 .S VPRYS("CODE")=IEN,VPRYS("DFN")=+$G(DFN),VPRYS("LIMIT")=999
"RTN","VPRDJ09M",14,0)
 .K VPROUT
"RTN","VPRDJ09M",15,0)
 .D PTTEST^YTQPXRM2(.VPROUT,.VPRYS)
"RTN","VPRDJ09M",16,0)
 .I VPROUT(1)["[ERROR]" Q
"RTN","VPRDJ09M",17,0)
 .S TOTAL=$P(VPROUT(1),U,2)+1
"RTN","VPRDJ09M",18,0)
 .I $P(VPROUT(1),U,2)<1 Q
"RTN","VPRDJ09M",19,0)
 .;S CNT=1 F  S CNT=$O(VPROUT(CNT)) Q:CNT'>0  D
"RTN","VPRDJ09M",20,0)
 .F CNT=2:1:TOTAL D
"RTN","VPRDJ09M",21,0)
 ..I $G(VPROUT(CNT))="" Q
"RTN","VPRDJ09M",22,0)
 ..S ID=$P(VPROUT(CNT),U)
"RTN","VPRDJ09M",23,0)
 ..D MH1(ID,IEN)
"RTN","VPRDJ09M",24,0)
 ;handle old MH test before the lastest revision to their package
"RTN","VPRDJ09M",25,0)
 ;S FNUM=601.2 D SORT^VPRDJ09 ;sort ^PXRMINDX into ^TMP("VPRPX",$J,IDT)
"RTN","VPRDJ09M",26,0)
 ;S VPRIDT=0 F  S VPRIDT=$O(^TMP("VPRPX",$J,VPRIDT)) Q:VPRIDT<1  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ09M",27,0)
 ;. S ID=0 F  S ID=$O(^TMP("VPRPX",$J,VPRIDT,ID)) Q:ID<1  D YT1^VPRDJ09(ID) Q:VPRI'<VPRMAX
"RTN","VPRDJ09M",28,0)
 ;I VPRI'<VPRMAX Q
"RTN","VPRDJ09M",29,0)
 ;handle new MH test  after revision to their package
"RTN","VPRDJ09M",30,0)
 ;S FNUM=601.84 D SORT^VPRDJ09 ;sort ^PXRMINDX into ^TMP("VPRPX",$J,IDT)
"RTN","VPRDJ09M",31,0)
 ;S VPRIDT=0 F  S VPRIDT=$O(^TMP("VPRPX",$J,VPRIDT)) Q:VPRIDT<1  D  Q:VPRI'<VPRMAX
"RTN","VPRDJ09M",32,0)
 ;. S ID=0 F  S ID=$O(^TMP("VPRPX",$J,VPRIDT,ID)) Q:ID<1  D YT1^VPRDJ09(ID) Q:VPRI'<VPRMAX
"RTN","VPRDJ09M",33,0)
 K ^TMP("VPRPX",$J)
"RTN","VPRDJ09M",34,0)
 Q
"RTN","VPRDJ09M",35,0)
 ;
"RTN","VPRDJ09M",36,0)
MH1(ID,IEN) ; -- MH Administration
"RTN","VPRDJ09M",37,0)
 N VPRY,COPY,GBL,ISCOPY,MH,NAME,NODE,CNT,I,X2,X,Y,TEMP,TEXT
"RTN","VPRDJ09M",38,0)
 D ENDAS71^YTQPXRM6(.VPRY,ID)
"RTN","VPRDJ09M",39,0)
 ;
"RTN","VPRDJ09M",40,0)
 S NAME=$P($G(^YTT(601.71,IEN,0)),U)
"RTN","VPRDJ09M",41,0)
 S COPY=$G(^YTT(601.71,IEN,7))
"RTN","VPRDJ09M",42,0)
 S ISCOPY=+$P($G(^YTT(601.71,IEN,8)),U,5)
"RTN","VPRDJ09M",43,0)
 S MH("localId")=ID,X2=$G(VPRY(2))
"RTN","VPRDJ09M",44,0)
 S MH("uid")=$$SETUID^VPRUTILS("mh",DFN,ID)
"RTN","VPRDJ09M",45,0)
 S MH("displayName")=$P(X2,U,2),MH("name")=$S(NAME'="":NAME,1:$P(X2,U,3))
"RTN","VPRDJ09M",46,0)
 S MH("administeredDateTime")=$$JSONDT^VPRUTILS($P(X2,U,4))
"RTN","VPRDJ09M",47,0)
 S X=$P(X2,U,6) I $L(X) D  ;ordered by
"RTN","VPRDJ09M",48,0)
 . S Y=+$O(^VA(200,"B",X,0)),MH("providerName")=X
"RTN","VPRDJ09M",49,0)
 . S:Y MH("providerUid")=$$SETUID^VPRUTILS("user",,Y)
"RTN","VPRDJ09M",50,0)
 ;get questions/answers for test
"RTN","VPRDJ09M",51,0)
 S I=0,CNT=0 F  S I=$O(VPRY("R",I)) Q:I'>0  D
"RTN","VPRDJ09M",52,0)
 .S NODE=$G(VPRY("R",I))
"RTN","VPRDJ09M",53,0)
 .S CNT=CNT+1
"RTN","VPRDJ09M",54,0)
 .K TEMP,^TMP($J,"VPR MH TEXT")
"RTN","VPRDJ09M",55,0)
 .;answers
"RTN","VPRDJ09M",56,0)
 .S TEMP=$P(NODE,U,2) I TEMP>0 D
"RTN","VPRDJ09M",57,0)
 ..S MH("responses",CNT,"answer","uid")=$$SETVURN^VPRUTILS("mha-answer",TEMP)
"RTN","VPRDJ09M",58,0)
 ..S MH("responses",CNT,"answer","text")=$P(NODE,U,6)
"RTN","VPRDJ09M",59,0)
 .;questions
"RTN","VPRDJ09M",60,0)
 .S TEMP=$P(NODE,U,3) I TEMP>0 D
"RTN","VPRDJ09M",61,0)
 ..S MH("responses",CNT,"question","uid")=$$SETVURN^VPRUTILS("mha-question",TEMP)
"RTN","VPRDJ09M",62,0)
 ..S GBL=$NA(^YTT(601.72,TEMP,1))
"RTN","VPRDJ09M",63,0)
 ..D SETTEXT^VPRUTILS(GBL,$NA(^TMP($J,"VPR MH TEXT")))
"RTN","VPRDJ09M",64,0)
 ..M MH("responses",CNT,"question","text","\")=^TMP($J,"VPR MH TEXT")
"RTN","VPRDJ09M",65,0)
 ; get scale(s) for test
"RTN","VPRDJ09M",66,0)
 S I=0,CNT=0 F  S I=$O(VPRY("SI",I)) Q:I'>0  D
"RTN","VPRDJ09M",67,0)
 .S NODE=$G(VPRY("SI",I))
"RTN","VPRDJ09M",68,0)
 .S CNT=CNT+1
"RTN","VPRDJ09M",69,0)
 .S MH("scales",CNT,"scale","uid")=$$SETVURN^VPRUTILS("mha-scale",I)
"RTN","VPRDJ09M",70,0)
 .S MH("scales",CNT,"scale","name")=$P(NODE,U,2)
"RTN","VPRDJ09M",71,0)
 .S MH("scales",CNT,"scale","rawScore")=$P(NODE,U,3)
"RTN","VPRDJ09M",72,0)
 .I $P(NODE,U,4)'="" S MH("scales",CNT,"scale","transformScore")=$P(NODE,U,4)
"RTN","VPRDJ09M",73,0)
 S MH("isCopyright")=$S(ISCOPY=1:"true",1:"false")
"RTN","VPRDJ09M",74,0)
 I ISCOPY=1 S MH("copyrightText")=COPY
"RTN","VPRDJ09M",75,0)
 D ADD^VPRDJ("MH","mh")
"RTN","VPRDJ09M",76,0)
 Q
"RTN","VPRDJ1")
0^50^B18149314
"RTN","VPRDJ1",1,0)
VPRDJ1 ;SLC/MKB -- VPR Patient Object RPCs ; 11/2/12 5:45pm
"RTN","VPRDJ1",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJ1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ1",4,0)
 ;
"RTN","VPRDJ1",5,0)
 ;
"RTN","VPRDJ1",6,0)
PUT(VPR,PAT,TYPE,JSON) ; -- Save/update JSON OBJECT in ^VPR(560.1), return UID if successful
"RTN","VPRDJ1",7,0)
 ; RPC = VPR PUT PATIENT DATA
"RTN","VPRDJ1",8,0)
 ;
"RTN","VPRDJ1",9,0)
 N ARRAY,CNT,ERR,VPRERR,UID,DA,X,I,DFN,VPRSYS
"RTN","VPRDJ1",10,0)
 ;M JSON=INPUT(0)
"RTN","VPRDJ1",11,0)
 D DECODE^VPRJSON("JSON","ARRAY","VPRERR")
"RTN","VPRDJ1",12,0)
 ;N XCNT S XCNT=$O(^XTMP("AGPARRAY",""),-1),XCNT=XCNT+1
"RTN","VPRDJ1",13,0)
 ;M ^XTMP("AGPARRAY",XCNT,"DATA")=ARRAY
"RTN","VPRDJ1",14,0)
 ;S ^XTMP("AGPARRAY",XCNT,"TYPE")=TYPE
"RTN","VPRDJ1",15,0)
 ;M ^XTMP("AGPARRAY")=ARRAY
"RTN","VPRDJ1",16,0)
 I $D(VPRERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X G PTQ
"RTN","VPRDJ1",17,0)
 . K ARRAY N VPRTMP,VPRTXT
"RTN","VPRDJ1",18,0)
 . S VPRTXT(1)="Problem decoding json input."
"RTN","VPRDJ1",19,0)
 . D SETERROR^VPRUTILS(.VPRTMP,.VPRERR,.VPRTXT,.JSON)
"RTN","VPRDJ1",20,0)
 . K VPRERR D ENCODE^VPRJSON("VPRTMP","ARRAY","VPRERR")
"RTN","VPRDJ1",21,0)
 . S VPR(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","VPRDJ1",22,0)
 . M VPR(1)=ARRAY
"RTN","VPRDJ1",23,0)
 . S VPR(2)="}}"
"RTN","VPRDJ1",24,0)
 ;
"RTN","VPRDJ1",25,0)
 S UID=$G(ARRAY("uid")),VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRDJ1",26,0)
 I $L(UID) S DA=+$O(^VPR(560.1,"B",UID,0)) I DA<1 S ERR=$$ERR(3,UID) G PTQ
"RTN","VPRDJ1",27,0)
 I '$L(UID) D  G:$D(ERR) PTQ Q:$D(VPRERR)
"RTN","VPRDJ1",28,0)
 . D NEW Q:$D(ERR)
"RTN","VPRDJ1",29,0)
 . S ARRAY("uid")=UID K JSON
"RTN","VPRDJ1",30,0)
 . D ENCODE^VPRJSON("ARRAY","JSON","VPRERR")
"RTN","VPRDJ1",31,0)
 . I $D(VPRERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X Q
"RTN","VPRDJ1",32,0)
 .. K JSON N VPRTMP,VPRTXT
"RTN","VPRDJ1",33,0)
 .. S VPRTXT(1)="Problem encoding json output."
"RTN","VPRDJ1",34,0)
 .. D SETERROR^VPRUTILS(.VPRTMP,.VPRERR,.VPRTXT,.ARRAY)
"RTN","VPRDJ1",35,0)
 .. K VPRERR D ENCODE^VPRJSON("VPRTMP","JSON","VPRERR")
"RTN","VPRDJ1",36,0)
 .. S VPR(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","VPRDJ1",37,0)
 .. M VPR(1)=JSON
"RTN","VPRDJ1",38,0)
 .. S VPR(2)="}}"
"RTN","VPRDJ1",39,0)
 ;
"RTN","VPRDJ1",40,0)
 K ^VPR(560.1,DA,1) S ^(1,0)="^560.101^^",CNT=0
"RTN","VPRDJ1",41,0)
 S I="" F  S I=$O(JSON(I)) Q:I=""  S CNT=CNT+1,^VPR(560.1,DA,1,CNT,0)=JSON(I)
"RTN","VPRDJ1",42,0)
 S:$G(CNT) ^VPR(560.1,DA,1,0)="^560.101^"_CNT_U_CNT
"RTN","VPRDJ1",43,0)
 ;
"RTN","VPRDJ1",44,0)
PTQ ; add item count and terminating characters
"RTN","VPRDJ1",45,0)
 I $D(ERR) S VPR="{""apiVersion"":""1.01"",""error"":{""message"":"""_ERR_"""},""success"":false}" Q
"RTN","VPRDJ1",46,0)
 S VPR="{""apiVersion"":""1.01"",""data"":{""updated"":"_""""_$$HL7NOW_""""_",""uid"":"""_UID_"""},""success"":true}"
"RTN","VPRDJ1",47,0)
 S DFN=+$P(UID,":",5)
"RTN","VPRDJ1",48,0)
 D POST^VPREVNT(DFN,TYPE,DA) ;UID)
"RTN","VPRDJ1",49,0)
 Q
"RTN","VPRDJ1",50,0)
 ;
"RTN","VPRDJ1",51,0)
NEW ; -- create new entry in ^VPR(560.1) from PAT,TYPE,VPRSYS
"RTN","VPRDJ1",52,0)
 ;  Return UID & DA, or ERR
"RTN","VPRDJ1",53,0)
 N DFN,ICN
"RTN","VPRDJ1",54,0)
 S DFN=+$G(PAT),ICN="",TYPE=$G(TYPE)
"RTN","VPRDJ1",55,0)
 I DFN<1,DFN[";" S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN)
"RTN","VPRDJ1",56,0)
 I DFN<1,ICN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","VPRDJ1",57,0)
 I DFN<1!'$D(^DPT(DFN)) S ERR=$$ERR(1,DFN) Q
"RTN","VPRDJ1",58,0)
 I TYPE="" S ERR=$$ERR(2,"null") Q
"RTN","VPRDJ1",59,0)
 ;
"RTN","VPRDJ1",60,0)
 S DA=$$NEXTIFN I DA<1 S ERR=$$ERR(4) Q
"RTN","VPRDJ1",61,0)
 S UID="urn:va:"_TYPE_":"_VPRSYS_":"_DFN_":"_DA
"RTN","VPRDJ1",62,0)
 S ^VPR(560.1,DA,0)=UID_U_DFN_U_TYPE
"RTN","VPRDJ1",63,0)
 S ^VPR(560.1,"B",UID,DA)=""
"RTN","VPRDJ1",64,0)
 S ^VPR(560.1,"C",DFN,TYPE,DA)=""
"RTN","VPRDJ1",65,0)
 Q
"RTN","VPRDJ1",66,0)
 ;
"RTN","VPRDJ1",67,0)
NEXTIFN() ; -- Returns next available IFN
"RTN","VPRDJ1",68,0)
 N I,HDR,TOTAL,DA
"RTN","VPRDJ1",69,0)
 L +^VPR(560.1,0):$S($G(DILOCKTM)>0:DILOCKTM,1:5)
"RTN","VPRDJ1",70,0)
 I '$T Q "^"
"RTN","VPRDJ1",71,0)
 S HDR=$G(^VPR(560.1,0)),TOTAL=+$P(HDR,U,4),I=$O(^VPR(560.1,"?"),-1)
"RTN","VPRDJ1",72,0)
 F I=(I+1):1 Q:'$D(^VPR(560.1,I,0))
"RTN","VPRDJ1",73,0)
 S DA=I,$P(HDR,U,3,4)=DA_U_(TOTAL+1) S ^VPR(560.1,0)=HDR
"RTN","VPRDJ1",74,0)
 L -^VPR(560.1,0)
"RTN","VPRDJ1",75,0)
 Q DA
"RTN","VPRDJ1",76,0)
 ;
"RTN","VPRDJ1",77,0)
ERR(X,VAL) ; -- return error message
"RTN","VPRDJ1",78,0)
 N MSG  S MSG="Error"
"RTN","VPRDJ1",79,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","VPRDJ1",80,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","VPRDJ1",81,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","VPRDJ1",82,0)
 I X=4  S MSG="Unable to create new object"
"RTN","VPRDJ1",83,0)
 I X=99 S MSG="Unknown request"
"RTN","VPRDJ1",84,0)
 Q MSG
"RTN","VPRDJ1",85,0)
 ;
"RTN","VPRDJ1",86,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","VPRDJ1",87,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","VPRDJ1",88,0)
 ;
"RTN","VPRDJ1",89,0)
CONV ; -- convert uid format
"RTN","VPRDJ1",90,0)
 N DA,X0,UID,VPRSYS,DFN,COLL,NEW,I,JSON,VPRY,ERR,CNT
"RTN","VPRDJ1",91,0)
 S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRDJ1",92,0)
 S DA=0 F  S DA=$O(^VPR(560.1,DA)) Q:DA<1  D
"RTN","VPRDJ1",93,0)
 . S X0=$G(^VPR(560.1,DA,0)),UID=$P(X0,U)
"RTN","VPRDJ1",94,0)
 . K ^VPR(560.1,"B",UID,DA),JSON
"RTN","VPRDJ1",95,0)
 . S DFN=$P(X0,"^",2),COLL=$P(X0,"^",3)
"RTN","VPRDJ1",96,0)
 . S NEW="urn:va:"_COLL_":"_VPRSYS_":"_DFN_":"_DA
"RTN","VPRDJ1",97,0)
 . S $P(^VPR(560.1,DA,0),U)=NEW,^VPR(560.1,"B",NEW,DA)=""
"RTN","VPRDJ1",98,0)
 . ;decode JSON object, reset uid
"RTN","VPRDJ1",99,0)
 . S I=0 F  S I=$O(^VPR(560.1,DA,1,I)) Q:I<1  S JSON(I)=$G(^(I,0))
"RTN","VPRDJ1",100,0)
 . Q:'$D(JSON)  K VPRY,ERR
"RTN","VPRDJ1",101,0)
 . D DECODE^VPRJSON("JSON","VPRY","ERR") I $D(ERR) W !,DA Q
"RTN","VPRDJ1",102,0)
 . S VPRY("uid")=NEW K JSON
"RTN","VPRDJ1",103,0)
 . D ENCODE^VPRJSON("VPRY","JSON","ERR") I $D(ERR) W !,DA Q
"RTN","VPRDJ1",104,0)
 . K ^VPR(560.1,DA,1) S ^(1,0)="^560.101^^",CNT=0
"RTN","VPRDJ1",105,0)
 . S I="" F  S I=$O(JSON(I)) Q:I=""  S CNT=CNT+1,^VPR(560.1,DA,1,CNT,0)=JSON(I)
"RTN","VPRDJ1",106,0)
 . S:$G(CNT) ^VPR(560.1,DA,1,0)="^560.101^"_CNT_U_CNT
"RTN","VPRDJ1",107,0)
 Q
"RTN","VPRDJ2")
0^51^B21100510
"RTN","VPRDJ2",1,0)
VPRDJ2 ;SLC/MKB -- VPR Object RPCs ; 1/18/13 3:54pm
"RTN","VPRDJ2",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJ2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJ2",4,0)
 ;
"RTN","VPRDJ2",5,0)
 ;
"RTN","VPRDJ2",6,0)
GET(VPR,FILTER) ; -- Return search results as JSON in @VPR@(n)
"RTN","VPRDJ2",7,0)
 ; RPC = VPR GET OBJECT
"RTN","VPRDJ2",8,0)
 N TYPE,VPRMAX,VPRI,VPRID,VPRERR,IEN
"RTN","VPRDJ2",9,0)
 S VPR=$NA(^TMP("VPR",$J)),VPRI=0 K @VPR
"RTN","VPRDJ2",10,0)
 ;
"RTN","VPRDJ2",11,0)
 ; parse & validate input parameters
"RTN","VPRDJ2",12,0)
 S TYPE=$G(FILTER("collection")),TYPE=$$LOW^XLFSTR(TYPE)
"RTN","VPRDJ2",13,0)
 S VPRMAX=+$G(FILTER("max"),9999) ;??
"RTN","VPRDJ2",14,0)
 S VPRID=$G(FILTER("id"))
"RTN","VPRDJ2",15,0)
 ;
"RTN","VPRDJ2",16,0)
 ;set error trap
"RTN","VPRDJ2",17,0)
 N $ES,$ET,ERRARRY,ERRDOM,ERRPAT,ERRMSG
"RTN","VPRDJ2",18,0)
 ;S $ET="D ERRHDLR^VPRDERRH G ERRQ^VPRDJ0"
"RTN","VPRDJ2",19,0)
 S ERRDOM="vpr",ERRMSG=$G(TYPE)
"RTN","VPRDJ2",20,0)
 K ^TMP($J,"VPR ERROR")
"RTN","VPRDJ2",21,0)
 ;
"RTN","VPRDJ2",22,0)
 ; extract data
"RTN","VPRDJ2",23,0)
 I $L(VPRID) D  G GQ
"RTN","VPRDJ2",24,0)
 . S IEN=+VPRID I 'IEN S IEN=+$O(^VPR(560.11,"B",VPRID,0)) ;IEN or UID
"RTN","VPRDJ2",25,0)
 . D:IEN VPR1^VPRDJ02(560.11,IEN)
"RTN","VPRDJ2",26,0)
 I TYPE="" S VPRERR="Missing or invalid collection type" G GQ
"RTN","VPRDJ2",27,0)
 S IEN=0 F  S IEN=$O(^VPR(560.11,"C",TYPE,IEN)) Q:IEN<1  D VPR1^VPRDJ02(560.11,IEN)
"RTN","VPRDJ2",28,0)
 ;
"RTN","VPRDJ2",29,0)
GQ ;build return JSON
"RTN","VPRDJ2",30,0)
 D GTQ^VPRDJ
"RTN","VPRDJ2",31,0)
 Q
"RTN","VPRDJ2",32,0)
 ;
"RTN","VPRDJ2",33,0)
DEL(VPR,VPRID) ; -- Delete object VPRID from ^VPR(560.11)
"RTN","VPRDJ2",34,0)
 ; RPC = VPR DELETE OBJECT
"RTN","VPRDJ2",35,0)
 ;
"RTN","VPRDJ2",36,0)
 N ACTION,ERR,UID,DA,DIK,TYPE
"RTN","VPRDJ2",37,0)
 S UID=$G(VPRID) I '$L(UID) S ERR=$$ERR(3,"null") G PTQ
"RTN","VPRDJ2",38,0)
 S DA=+$O(^VPR(560.11,"B",UID,0)) I DA<1 S ERR=$$ERR(3,UID) G PTQ
"RTN","VPRDJ2",39,0)
 S DIK="^VPR(560.11," D ^DIK
"RTN","VPRDJ2",40,0)
 S ACTION="@",TYPE=$P(UID,":",3)
"RTN","VPRDJ2",41,0)
 G PTQ
"RTN","VPRDJ2",42,0)
 Q
"RTN","VPRDJ2",43,0)
 ;
"RTN","VPRDJ2",44,0)
PUT(VPR,TYPE,JSON) ; -- Save/update JSON OBJECT in ^VPR(560.11), return UID if successful
"RTN","VPRDJ2",45,0)
 ; RPC = VPR PUT OBJECT
"RTN","VPRDJ2",46,0)
 ;
"RTN","VPRDJ2",47,0)
 N ACTION,ARRAY,CNT,ERR,VPRERR,UID,DA,X,I,VPRSYS
"RTN","VPRDJ2",48,0)
 D DECODE^VPRJSON("JSON","ARRAY","VPRERR")
"RTN","VPRDJ2",49,0)
 ;N XCNT S XCNT=$O(^XTMP("AGPARRAY",""),-1),XCNT=XCNT+1
"RTN","VPRDJ2",50,0)
 ;M ^XTMP("AGPARRAY",XCNT,"DATA")=ARRAY
"RTN","VPRDJ2",51,0)
 ;S ^XTMP("AGPARRAY",XCNT,"TYPE")=TYPE
"RTN","VPRDJ2",52,0)
 I $D(VPRERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X G PTQ
"RTN","VPRDJ2",53,0)
 . K ARRAY N VPRTMP,VPRTXT
"RTN","VPRDJ2",54,0)
 . S VPRTXT(1)="Problem decoding json input."
"RTN","VPRDJ2",55,0)
 . D SETERROR^VPRUTILS(.VPRTMP,.VPRERR,.VPRTXT,.JSON)
"RTN","VPRDJ2",56,0)
 . K VPRERR D ENCODE^VPRJSON("VPRTMP","ARRAY","VPRERR")
"RTN","VPRDJ2",57,0)
 . S VPR(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","VPRDJ2",58,0)
 . M VPR(1)=ARRAY
"RTN","VPRDJ2",59,0)
 . S VPR(2)="}}"
"RTN","VPRDJ2",60,0)
 ;
"RTN","VPRDJ2",61,0)
 S UID=$G(ARRAY("uid")),VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRDJ2",62,0)
 I $L(UID) S DA=+$O(^VPR(560.11,"B",UID,0)) I DA<1 S ERR=$$ERR(3,UID) G PTQ
"RTN","VPRDJ2",63,0)
 ;I $L(UID) S DA=+$O(^VPR(560.11,"B",UID,0)) I DA<1 D NEW1(UID)
"RTN","VPRDJ2",64,0)
 I '$L(UID) D  G:$D(ERR) PTQ Q:$D(VPRERR)
"RTN","VPRDJ2",65,0)
 . D NEW Q:$D(ERR)
"RTN","VPRDJ2",66,0)
 . S ARRAY("uid")=UID K JSON
"RTN","VPRDJ2",67,0)
 . D ENCODE^VPRJSON("ARRAY","JSON","VPRERR")
"RTN","VPRDJ2",68,0)
 . I $D(VPRERR) D  Q  ;S X=$G(ERR(1)) K ERR S ERR=X Q
"RTN","VPRDJ2",69,0)
 .. K JSON N VPRTMP,VPRTXT
"RTN","VPRDJ2",70,0)
 .. S VPRTXT(1)="Problem encoding json output."
"RTN","VPRDJ2",71,0)
 .. D SETERROR^VPRUTILS(.VPRTMP,.VPRERR,.VPRTXT,.ARRAY)
"RTN","VPRDJ2",72,0)
 .. K VPRERR D ENCODE^VPRJSON("VPRTMP","JSON","VPRERR")
"RTN","VPRDJ2",73,0)
 .. S VPR(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","VPRDJ2",74,0)
 .. M VPR(1)=JSON
"RTN","VPRDJ2",75,0)
 .. S VPR(2)="}}"
"RTN","VPRDJ2",76,0)
 ;
"RTN","VPRDJ2",77,0)
 K ^VPR(560.11,DA,1) S ^(1,0)="^560.111^^",CNT=0
"RTN","VPRDJ2",78,0)
 S I="" F  S I=$O(JSON(I)) Q:I=""  S CNT=CNT+1,^VPR(560.11,DA,1,CNT,0)=JSON(I)
"RTN","VPRDJ2",79,0)
 S:$G(CNT) ^VPR(560.11,DA,1,0)="^560.111^"_CNT_U_CNT
"RTN","VPRDJ2",80,0)
 ;
"RTN","VPRDJ2",81,0)
PTQ ; add item count and terminating characters
"RTN","VPRDJ2",82,0)
 I $D(ERR) S VPR="{""apiVersion"":""1.01"",""error"":{""message"":"""_ERR_"""},""success"":false}" Q
"RTN","VPRDJ2",83,0)
 S VPR="{""apiVersion"":""1.01"",""data"":{""updated"":"_""""_$$HL7NOW_""""_",""uid"":"""_UID_"""},""success"":true}"
"RTN","VPRDJ2",84,0)
 D POSTX^VPREVNT(TYPE,DA,$G(ACTION)) ;UID)
"RTN","VPRDJ2",85,0)
 Q
"RTN","VPRDJ2",86,0)
 ;
"RTN","VPRDJ2",87,0)
NEW1(UID) ; -- create new entry in ^VPR(560.11) from PAT,TYPE,VPRSYS
"RTN","VPRDJ2",88,0)
 ;  Return UID & DA, or ERR
"RTN","VPRDJ2",89,0)
 S TYPE=$G(TYPE)
"RTN","VPRDJ2",90,0)
 I TYPE="" S ERR=$$ERR(2,"null") Q
"RTN","VPRDJ2",91,0)
 ;
"RTN","VPRDJ2",92,0)
 S DA=$$NEXTIFN I DA<1 S ERR=$$ERR(4) Q
"RTN","VPRDJ2",93,0)
 S UID="urn:va:"_TYPE_":"_VPRSYS_":"_DA
"RTN","VPRDJ2",94,0)
 S ^VPR(560.11,DA,0)=UID_U_U_TYPE
"RTN","VPRDJ2",95,0)
 S ^VPR(560.11,"B",UID,DA)=""
"RTN","VPRDJ2",96,0)
 S ^VPR(560.11,"C",TYPE,DA)=""
"RTN","VPRDJ2",97,0)
 Q
"RTN","VPRDJ2",98,0)
 ;
"RTN","VPRDJ2",99,0)
NEW ; -- create new entry in ^VPR(560.11) from PAT,TYPE,VPRSYS
"RTN","VPRDJ2",100,0)
 ;  Return UID & DA, or ERR
"RTN","VPRDJ2",101,0)
 S TYPE=$G(TYPE)
"RTN","VPRDJ2",102,0)
 I TYPE="" S ERR=$$ERR(2,"null") Q
"RTN","VPRDJ2",103,0)
 ;
"RTN","VPRDJ2",104,0)
 S DA=$$NEXTIFN I DA<1 S ERR=$$ERR(4) Q
"RTN","VPRDJ2",105,0)
 S UID="urn:va:"_TYPE_":"_VPRSYS_":"_DA
"RTN","VPRDJ2",106,0)
 S ^VPR(560.11,DA,0)=UID_U_U_TYPE
"RTN","VPRDJ2",107,0)
 S ^VPR(560.11,"B",UID,DA)=""
"RTN","VPRDJ2",108,0)
 S ^VPR(560.11,"C",TYPE,DA)=""
"RTN","VPRDJ2",109,0)
 Q
"RTN","VPRDJ2",110,0)
 ;
"RTN","VPRDJ2",111,0)
NEXTIFN() ; -- Returns next available IFN
"RTN","VPRDJ2",112,0)
 N I,HDR,TOTAL,DA
"RTN","VPRDJ2",113,0)
 L +^VPR(560.11,0):$S($G(DILOCKTM)>0:DILOCKTM,1:5)
"RTN","VPRDJ2",114,0)
 I '$T Q "^"
"RTN","VPRDJ2",115,0)
 S HDR=$G(^VPR(560.11,0)),TOTAL=+$P(HDR,U,4),I=$O(^VPR(560.11,"?"),-1)
"RTN","VPRDJ2",116,0)
 F I=(I+1):1 Q:'$D(^VPR(560.11,I,0))
"RTN","VPRDJ2",117,0)
 S DA=I,$P(HDR,U,3,4)=DA_U_(TOTAL+1) S ^VPR(560.11,0)=HDR
"RTN","VPRDJ2",118,0)
 L -^VPR(560.11,0)
"RTN","VPRDJ2",119,0)
 Q DA
"RTN","VPRDJ2",120,0)
 ;
"RTN","VPRDJ2",121,0)
ERR(X,VAL) ; -- return error message
"RTN","VPRDJ2",122,0)
 N MSG  S MSG="Error"
"RTN","VPRDJ2",123,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","VPRDJ2",124,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","VPRDJ2",125,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","VPRDJ2",126,0)
 I X=4  S MSG="Unable to create new object"
"RTN","VPRDJ2",127,0)
 I X=99 S MSG="Unknown request"
"RTN","VPRDJ2",128,0)
 Q MSG
"RTN","VPRDJ2",129,0)
 ;
"RTN","VPRDJ2",130,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","VPRDJ2",131,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","VPRDJFS")
0^85^B54169565
"RTN","VPRDJFS",1,0)
VPRDJFS ;SLC/KCM -- Asynchronous Extracts and Freshness via stream
"RTN","VPRDJFS",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJFS",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJFS",4,0)
 ;
"RTN","VPRDJFS",5,0)
 ;
"RTN","VPRDJFS",6,0)
 ; PUT/POST   call $$TAG^ROUTINE(.args,.body)
"RTN","VPRDJFS",7,0)
 ; GET/DELETE call   TAG^ROUTINE(.response,.args)
"RTN","VPRDJFS",8,0)
 ;
"RTN","VPRDJFS",9,0)
 ; TODO: change this to use ^VPR(560) instead of ^XTMP("VPRFP")
"RTN","VPRDJFS",10,0)
 ; TODO: create function to build ARGS from PATH
"RTN","VPRDJFS",11,0)
 ; TODO: create function to return TAG^ROUTINE from MTHD,PATH
"RTN","VPRDJFS",12,0)
 ;
"RTN","VPRDJFS",13,0)
 ; todo: get the big sync working
"RTN","VPRDJFS",14,0)
 ; todo: change to use RPC calls
"RTN","VPRDJFS",15,0)
 ; todo: add in freshness 
"RTN","VPRDJFS",16,0)
 ;
"RTN","VPRDJFS",17,0)
API(VPRFRSP,ARGS) ;
"RTN","VPRDJFS",18,0)
 N VPRFERR,VPRFHMP,CNT,ACNT
"RTN","VPRDJFS",19,0)
 K ^TMP("VPRF",$J)
"RTN","VPRDJFS",20,0)
 S VPRFRSP=$NA(^TMP("VPRF",$J))
"RTN","VPRDJFS",21,0)
 S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRDJFS",22,0)
 S VPRFHMP=$TR($G(ARGS("server")),"~","=")
"RTN","VPRDJFS",23,0)
 I ARGS("command")="putPtSubscription" D  Q
"RTN","VPRDJFS",24,0)
 . N LOC
"RTN","VPRDJFS",25,0)
 . S LOC=$$PUTSUB^VPRDJFSP(.ARGS)
"RTN","VPRDJFS",26,0)
 . I $L(LOC) S ^TMP("VPRF",$J,1)="{""apiVersion"":""1.0"",""location"":"""_LOC_""""_$$PROGRESS_"}"
"RTN","VPRDJFS",27,0)
 I ARGS("command")="startOperationalDataExtract" D  Q
"RTN","VPRDJFS",28,0)
 . N LOC
"RTN","VPRDJFS",29,0)
 . S ARGS("localId")="OPD"  ; use OPD to indicate "sync operational"
"RTN","VPRDJFS",30,0)
 . S LOC=$$PUTSUB^VPRDJFSP(.ARGS)
"RTN","VPRDJFS",31,0)
 . I $L(LOC) S ^TMP("VPRF",$J,1)="{""apiVersion"":""1.0"",""location"":"""_LOC_"""}"
"RTN","VPRDJFS",32,0)
 I ARGS("command")="getPtUpdates" D  Q
"RTN","VPRDJFS",33,0)
 . D GETSUB^VPRDJFSG(VPRFRSP,.ARGS)
"RTN","VPRDJFS",34,0)
 I ARGS("command")="resetAllSubscriptions" D  Q
"RTN","VPRDJFS",35,0)
 . D RESETSVR(.ARGS)
"RTN","VPRDJFS",36,0)
 . S ^TMP("VPRF",$J,1)="{""apiVersion"":""1.0"",""removed"":""true""}"
"RTN","VPRDJFS",37,0)
 ;
"RTN","VPRDJFS",38,0)
 D SETERR("command not recognized")  ; should not get this far
"RTN","VPRDJFS",39,0)
 Q
"RTN","VPRDJFS",40,0)
 ;
"RTN","VPRDJFS",41,0)
 ; --- delete a patient subscription
"RTN","VPRDJFS",42,0)
 ;
"RTN","VPRDJFS",43,0)
DELSUB(RSP,ARGS) ; cancel a subscription
"RTN","VPRDJFS",44,0)
 ; DELETE with: /vpr/subscription/{hmpSrvId}/patient/{pid}
"RTN","VPRDJFS",45,0)
 ; remove patient from VPR SUBSCRIPTION file
"RTN","VPRDJFS",46,0)
 ; remove ^XTMP(VPRX and ^XTMP(VPRH nodes
"RTN","VPRDJFS",47,0)
 ; look ahead (from lastId) and remove any nodes for the patient
"RTN","VPRDJFS",48,0)
 N DFN,HMPSRV,BATCH,HMPSRVID
"RTN","VPRDJFS",49,0)
 S DFN=$$DFN(ARGS("pid")) Q:$D(VPRFERR)
"RTN","VPRDJFS",50,0)
 S HMPSRV=ARGS("hmpSrvId")
"RTN","VPRDJFS",51,0)
 S BATCH="VPRFX~"_HMPSRV_"~"_DFN
"RTN","VPRDJFS",52,0)
 L +^XTMP("VPRFP",DFN,HMPSRV):20 E  D SETERR("unable to get lock") Q
"RTN","VPRDJFS",53,0)
 ; if extract still running, it should remove itself when it finishes
"RTN","VPRDJFS",54,0)
 K ^XTMP("VPRFX~"_HMPSRV_"~"_DFN) ; kill extract nodes
"RTN","VPRDJFS",55,0)
 K ^XTMP("VPRFH~"_HMPSRV_"~"_DFN) ; kill held freshness updates
"RTN","VPRDJFS",56,0)
 ; remove all nodes for this patient between "last" and "next"
"RTN","VPRDJFS",57,0)
 ; loop forward from "last" in ^XTMP("VPRFP",0,hmpSrv) and remove nodes for this DFN
"RTN","VPRDJFS",58,0)
 K ^XTMP("VPRFP",DFN,HMPSRV)      ; kill subscription
"RTN","VPRDJFS",59,0)
 D DELPT(DFN,HMPSRV)
"RTN","VPRDJFS",60,0)
 ;K ^VPR(560,$O(^VPR(560,"B",HMPSRV,"")),1,DFN),^VPR(560,"AITEM",DFN,HMPSRV)
"RTN","VPRDJFS",61,0)
 L -^XTMP("VPRFP",DFN,HMPSRV)
"RTN","VPRDJFS",62,0)
 S RSP="{""apiVersion"":""1.0"",""success"":""true""}" ; if successful
"RTN","VPRDJFS",63,0)
 Q
"RTN","VPRDJFS",64,0)
DELPT(DFN,SRV) ; delete patient DFN for server SRV
"RTN","VPRDJFS",65,0)
 N DIK,DA
"RTN","VPRDJFS",66,0)
 S DA(1)=$O(^VPR(560,"B",SRV,"")) Q:'DA(1)
"RTN","VPRDJFS",67,0)
 S DA=DFN Q:'DA
"RTN","VPRDJFS",68,0)
 S DIK="^VPR(560,"_DA(1)_",1,"
"RTN","VPRDJFS",69,0)
 D ^DIK
"RTN","VPRDJFS",70,0)
 Q
"RTN","VPRDJFS",71,0)
 ;
"RTN","VPRDJFS",72,0)
 ; --- post freshness updates (internal to VistA)
"RTN","VPRDJFS",73,0)
 ;
"RTN","VPRDJFS",74,0)
POST(DFN,TYPE,ID,ACT,SERVER,NODES) ; adds new freshness item, return DT-seq
"RTN","VPRDJFS",75,0)
 ; if initializing use: ^XTMP("VPRFH-hmpserverid-dfn",seq#)    -hold
"RTN","VPRDJFS",76,0)
 ;       otherwise use: ^XTMP("VPRFS-hmpserverid-date",seq#)   -stream
"RTN","VPRDJFS",77,0)
 ;
"RTN","VPRDJFS",78,0)
 ; loop through subscribing streams for this patient
"RTN","VPRDJFS",79,0)
 ; if patient is initialized for an hmp server send events directly to stream
"RTN","VPRDJFS",80,0)
 ; otherwise, events go to temporary holding area
"RTN","VPRDJFS",81,0)
 ; initial extracts always sent directly to stream
"RTN","VPRDJFS",82,0)
 N HMPSRV,INIT,STREAM,DATE,SEQ,CNT
"RTN","VPRDJFS",83,0)
 S DATE=$$DT^XLFDT
"RTN","VPRDJFS",84,0)
 S HMPSRV="" F  S HMPSRV=$O(^VPR(560,"AITEM",DFN,HMPSRV)) Q:'$L(HMPSRV)  D
"RTN","VPRDJFS",85,0)
 .I SERVER'="",HMPSRV'=SERVER Q
"RTN","VPRDJFS",86,0)
 . I '$D(^VPR(560,"AITEM",DFN,HMPSRV)) Q          ; patient not subscribed
"RTN","VPRDJFS",87,0)
 . S INIT=(^VPR(560,"AITEM",DFN,HMPSRV)=2),CNT=1  ; 2 means patient initialized
"RTN","VPRDJFS",88,0)
 . I $E(TYPE,1,4)="sync" S INIT=1                 ; sync* goes to main stream
"RTN","VPRDJFS",89,0)
 . I TYPE="syncDomain" S CNT=+$P(ID,":",3) S:CNT<1 CNT=1 ; CNT must be >0
"RTN","VPRDJFS",90,0)
 . S STREAM=$S(INIT:"VPRFS~",1:"VPRFH~")_HMPSRV_"~"_$S(INIT:DATE,1:DFN)
"RTN","VPRDJFS",91,0)
 . I '$D(^XTMP(STREAM)) D NEWXTMP(STREAM,2,"VPR Freshness Stream")
"RTN","VPRDJFS",92,0)
 . L +^XTMP(STREAM):5 E  S $EC=",Uno lock obtained," Q  ; throw error
"RTN","VPRDJFS",93,0)
 . S SEQ=$G(^XTMP(STREAM,"last"),0)+CNT
"RTN","VPRDJFS",94,0)
 . S ^XTMP(STREAM,SEQ)=DFN_U_TYPE_U_ID_U_$G(ACT)_U_$P($H,",",2)
"RTN","VPRDJFS",95,0)
 . S ^XTMP(STREAM,"last")=SEQ
"RTN","VPRDJFS",96,0)
 . L -^XTMP(STREAM)
"RTN","VPRDJFS",97,0)
 . ; NODES(hmpserverid)=streamDate^sequence -- optionally returned
"RTN","VPRDJFS",98,0)
 . S NODES($P(STREAM,"~",2))=$S(INIT:DATE,1:0)_U_SEQ
"RTN","VPRDJFS",99,0)
 Q
"RTN","VPRDJFS",100,0)
 ;
"RTN","VPRDJFS",101,0)
NEWXTMP(NODE,DAYS,DESC) ; Set a new node in ^XTMP
"RTN","VPRDJFS",102,0)
 K ^XTMP(NODE)
"RTN","VPRDJFS",103,0)
 S ^XTMP(NODE,0)=$$HTFM^XLFDT(+$H+DAYS)_U_$$HTFM^XLFDT(+$H)_U_DESC
"RTN","VPRDJFS",104,0)
 Q
"RTN","VPRDJFS",105,0)
PIDS(DFN) ; return string containing patient id's ready for JSON
"RTN","VPRDJFS",106,0)
 ; expects VPRFSYS, VPRFHMP
"RTN","VPRDJFS",107,0)
 Q:'DFN ""
"RTN","VPRDJFS",108,0)
 ;
"RTN","VPRDJFS",109,0)
 N X
"RTN","VPRDJFS",110,0)
 S X=",""pid"":"""_$$PID(DFN)_""""
"RTN","VPRDJFS",111,0)
 S X=X_",""systemId"":"""_VPRSYS_""""
"RTN","VPRDJFS",112,0)
 S X=X_",""localId"":"""_DFN_""""
"RTN","VPRDJFS",113,0)
 S X=X_",""icn"":"""_+$$GETICN^MPIF001(DFN)_""""
"RTN","VPRDJFS",114,0)
 Q X
"RTN","VPRDJFS",115,0)
 ;
"RTN","VPRDJFS",116,0)
PID(DFN) ; return most likely PID (ICN or SYS;DFN)
"RTN","VPRDJFS",117,0)
 Q:'DFN ""
"RTN","VPRDJFS",118,0)
 I '$D(VPRSYS) S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRDJFS",119,0)
 Q VPRSYS_";"_DFN            ; otherwise use SysId;DFN
"RTN","VPRDJFS",120,0)
 ;
"RTN","VPRDJFS",121,0)
DFN(PID) ; return the DFN given the PID (ICN or SYS;DFN)
"RTN","VPRDJFS",122,0)
 N DFN
"RTN","VPRDJFS",123,0)
 S PID=$TR(PID,":",";")
"RTN","VPRDJFS",124,0)
 I PID'[";" D  Q DFN  ; treat as ICN
"RTN","VPRDJFS",125,0)
 . S DFN=$$GETDFN^MPIF001(PID)
"RTN","VPRDJFS",126,0)
 . I DFN<0 D SETERR($P(DFN,"^",2))
"RTN","VPRDJFS",127,0)
 ; otherwise
"RTN","VPRDJFS",128,0)
 I $P(PID,";")'=$$GET^XPAR("SYS","VPR SYSTEM NAME") D SETERR("DFN unknown to this system") Q 0
"RTN","VPRDJFS",129,0)
 Q $P(PID,";",2)
"RTN","VPRDJFS",130,0)
 ;
"RTN","VPRDJFS",131,0)
PROGRESS(LASTITM) ; set the node in REF with progress properties
"RTN","VPRDJFS",132,0)
 ; expects VPRFHMP,VPRSYS
"RTN","VPRDJFS",133,0)
 N RSLT,HMPIEN,CNT,STS,TS,DFN,FIRST
"RTN","VPRDJFS",134,0)
 S HMPIEN=$O(^VPR(560,"B",VPRFHMP,0)) Q:'HMPIEN
"RTN","VPRDJFS",135,0)
 S CNT=0,RSLT=""
"RTN","VPRDJFS",136,0)
 F STS=0,1 D  ; 0=uninitialized, 1=initializing
"RTN","VPRDJFS",137,0)
 . S FIRST=1
"RTN","VPRDJFS",138,0)
 . S RSLT=$S(STS=0:",""waitingPids"":[",1:RSLT_"],""processingPids"":[")
"RTN","VPRDJFS",139,0)
 . S TS=0 F  S TS=$O(^VPR(560,HMPIEN,1,"AP",STS,TS)) Q:'TS  D  Q:CNT>99
"RTN","VPRDJFS",140,0)
 . . S DFN=0 F  S DFN=$O(^VPR(560,HMPIEN,1,"AP",STS,TS,DFN)) Q:'DFN  D
"RTN","VPRDJFS",141,0)
 . . . S CNT=CNT+1
"RTN","VPRDJFS",142,0)
 . . . S RSLT=RSLT_$S(FIRST=1:"",1:",")_""""_VPRSYS_";"_DFN_""""
"RTN","VPRDJFS",143,0)
 . . . S FIRST=0
"RTN","VPRDJFS",144,0)
 S RSLT=RSLT_"]"
"RTN","VPRDJFS",145,0)
 ;
"RTN","VPRDJFS",146,0)
 N STRM,STRMDT,CURRDT
"RTN","VPRDJFS",147,0)
 I $G(LASTITM)="" S LASTITM=$P(^VPR(560,HMPIEN,0),U,2)
"RTN","VPRDJFS",148,0)
 I $L(LASTITM,"-")<2 S LASTITM=$$DT^XLFDT_"-"_+LASTITM
"RTN","VPRDJFS",149,0)
 S STRMDT=$P(LASTITM,"-"),CURRDT=$$DT^XLFDT,SEQ=$P(LASTITM,"-",2)
"RTN","VPRDJFS",150,0)
 S CNT=0 F  D  Q:$$FMDIFF^XLFDT(STRMDT,CURRDT,1)'<0
"RTN","VPRDJFS",151,0)
 . S STRM="VPRFS~"_VPRFHMP_"~"_STRMDT
"RTN","VPRDJFS",152,0)
 . S CNT=CNT+$G(^XTMP(STRM,"last"))-SEQ
"RTN","VPRDJFS",153,0)
 . S STRMDT=$$FMADD^XLFDT(STRMDT,1),SEQ=0
"RTN","VPRDJFS",154,0)
 S RSLT=RSLT_",""remainingObjects"":"_CNT
"RTN","VPRDJFS",155,0)
 Q RSLT
"RTN","VPRDJFS",156,0)
 ;
"RTN","VPRDJFS",157,0)
 ; --- handle errors
"RTN","VPRDJFS",158,0)
 ;
"RTN","VPRDJFS",159,0)
SETERR(MSG) ; create error object in ^TMP("VPRFERR",$J) and set VPRFERR
"RTN","VPRDJFS",160,0)
 ; TODO: escape MSG for JSON
"RTN","VPRDJFS",161,0)
 S @VPRFRSP@(1)="{""apiVersion"":""1.0"",""error"":{""message"":"""_MSG_"""}}"
"RTN","VPRDJFS",162,0)
 S ^TMP("VPRFERR",$J,$H)=MSG
"RTN","VPRDJFS",163,0)
 S VPRFERR=1
"RTN","VPRDJFS",164,0)
 Q
"RTN","VPRDJFS",165,0)
 ;
"RTN","VPRDJFS",166,0)
DEBUG(MSG) ;
"RTN","VPRDJFS",167,0)
 S ^TMP("VPRDEBUG",$J,0)=$G(^TMP("VPRDEBUG",$J,0),0)+1
"RTN","VPRDJFS",168,0)
 I $D(MSG)'=1 M ^TMP("VPRDEBUG",$J,^TMP("VPRDEBUG",$J,0))=MSG
"RTN","VPRDJFS",169,0)
 E  S ^TMP("VPRDEBUG",$J,^TMP("VPRDEBUG",$J,0))=MSG
"RTN","VPRDJFS",170,0)
 Q
"RTN","VPRDJFS",171,0)
RESETSVR(ARGS) ;
"RTN","VPRDJFS",172,0)
 N DA,DIE,DIK,DR,IEN,SRV,SRVIEN,X
"RTN","VPRDJFS",173,0)
 S SRV=$G(ARGS("server")) I SRV="" Q
"RTN","VPRDJFS",174,0)
 S DA=$O(^VPR(560,"B",SRV,"")) I DA'>0 Q
"RTN","VPRDJFS",175,0)
 S SRVIEN=DA
"RTN","VPRDJFS",176,0)
 L +^VPR(560,SRVIEN):5 E  S $EC=",Uno lock obtained," Q
"RTN","VPRDJFS",177,0)
 ;delete operational data field
"RTN","VPRDJFS",178,0)
 S DIE="^VPR(560,",DR=".03///@" D ^DIE
"RTN","VPRDJFS",179,0)
 S DA(1)=DA,DA=0
"RTN","VPRDJFS",180,0)
 ;delate patient multiple values
"RTN","VPRDJFS",181,0)
 S DIK="^VPR(560,"_DA(1)_",1,"
"RTN","VPRDJFS",182,0)
 F  S DA=$O(^VPR(560,DA(1),1,DA)) Q:DA'>0  D ^DIK
"RTN","VPRDJFS",183,0)
 ;kill server ^XTMP
"RTN","VPRDJFS",184,0)
 S X="VPRF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="VPRF"  D
"RTN","VPRDJFS",185,0)
 . I X[SRV K ^XTMP(X) I 1
"RTN","VPRDJFS",186,0)
 ;kill tidy node
"RTN","VPRDJFS",187,0)
 K ^XTMP("VPRFP","tidy",SRV)
"RTN","VPRDJFS",188,0)
 L -^VPR(560,SRVIEN)
"RTN","VPRDJFS",189,0)
 Q
"RTN","VPRDJFS",190,0)
 ;
"RTN","VPRDJFS",191,0)
CLEARDOM(SVR,PAT) ;
"RTN","VPRDJFS",192,0)
 Q
"RTN","VPRDJFS",193,0)
 ;
"RTN","VPRDJFS",194,0)
CLEARPAT(SVR,PAT) ;
"RTN","VPRDJFS",195,0)
 I '$D(^XTMP("VPRFP",PAT,SVR)) Q
"RTN","VPRDJFS",196,0)
 ;do we need a check for patient initialized?
"RTN","VPRDJFS",197,0)
 K ^XTMP("VPRFP",PAT,SVR)
"RTN","VPRDJFS",198,0)
 Q
"RTN","VPRDJFS",199,0)
 ;
"RTN","VPRDJFS",200,0)
VPRSET(DA,NEW) ;
"RTN","VPRDJFS",201,0)
 N IEN,NAME
"RTN","VPRDJFS",202,0)
 S IEN=0 F  S IEN=$O(^VPR(560,IEN)) Q:IEN'>0  D
"RTN","VPRDJFS",203,0)
 .S NAME=$P(^VPR(560,IEN,0),U)
"RTN","VPRDJFS",204,0)
 .I $D(^VPR(560,IEN,1,NEW(1)))>0 S ^VPR(560,"AITEM",NEW(1),NAME)=NEW(2)
"RTN","VPRDJFS",205,0)
 Q
"RTN","VPRDJFS",206,0)
 ;
"RTN","VPRDJFS",207,0)
VPRKILL(DA,OLD) ;
"RTN","VPRDJFS",208,0)
 N NAME
"RTN","VPRDJFS",209,0)
 S NAME=$P($G(^VPR(560,DA(1),0)),U) I NAME="" Q
"RTN","VPRDJFS",210,0)
 K ^VPR(560,"AITEM",OLD(1),NAME)
"RTN","VPRDJFS",211,0)
 Q
"RTN","VPRDJFS",212,0)
 ;
"RTN","VPRDJFS",213,0)
VPROSET(DA,NEW) ;
"RTN","VPRDJFS",214,0)
 N IEN,NAME
"RTN","VPRDJFS",215,0)
 S IEN=0 F  S IEN=$O(^VPR(560,IEN)) Q:IEN'>0  D
"RTN","VPRDJFS",216,0)
 .S NAME=$P(^VPR(560,IEN,0),U)
"RTN","VPRDJFS",217,0)
 .S ^VPR(560,"AITEM","OPD",NAME)=NEW
"RTN","VPRDJFS",218,0)
 Q
"RTN","VPRDJFS",219,0)
 ;
"RTN","VPRDJFS",220,0)
VPROKILL(DA) ;
"RTN","VPRDJFS",221,0)
 N NAME
"RTN","VPRDJFS",222,0)
 S NAME=$P($G(^VPR(560,DA,0)),U) I NAME="" Q
"RTN","VPRDJFS",223,0)
 K ^VPR(560,"AITEM","OPD",NAME)
"RTN","VPRDJFS",224,0)
 Q
"RTN","VPRDJFS",225,0)
KILL ; clear out all ^XTMP nodes
"RTN","VPRDJFS",226,0)
 N X
"RTN","VPRDJFS",227,0)
 S X="VPRF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="VPRF"  W !,X  K ^XTMP(X)
"RTN","VPRDJFS",228,0)
 Q
"RTN","VPRDJFS",229,0)
KILLSVR(SVR) ; clear out for specific mashine
"RTN","VPRDJFS",230,0)
 N X
"RTN","VPRDJFS",231,0)
 S X="VPRF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="VPRF"  D
"RTN","VPRDJFS",232,0)
 . I X[SVR W !,X  K ^XTMP(X) I 1
"RTN","VPRDJFS",233,0)
 S X="" F  S X=$O(^XTMP("VPRFP",X)) Q:X=""  D
"RTN","VPRDJFS",234,0)
 . I $D(^XTMP("VPRFP",X,SVR)) K ^XTMP("VPRFP",X,SVR)
"RTN","VPRDJFS",235,0)
 Q
"RTN","VPRDJFSD")
0^101^B4802393
"RTN","VPRDJFSD",1,0)
VPRDJFSD ;SLC/KCM -- Domain Lists for Extract and Freshness Stream
"RTN","VPRDJFSD",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJFSD",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJFSD",4,0)
 ;
"RTN","VPRDJFSD",5,0)
PTDOMS(LIST) ; load default patient domains (put in parameter?)
"RTN","VPRDJFSD",6,0)
 ;;allergy
"RTN","VPRDJFSD",7,0)
 ;;auxiliary
"RTN","VPRDJFSD",8,0)
 ;;appointment
"RTN","VPRDJFSD",9,0)
 ;;diagnosis
"RTN","VPRDJFSD",10,0)
 ;;document
"RTN","VPRDJFSD",11,0)
 ;;factor
"RTN","VPRDJFSD",12,0)
 ;;immunization
"RTN","VPRDJFSD",13,0)
 ;;lab
"RTN","VPRDJFSD",14,0)
 ;;med
"RTN","VPRDJFSD",15,0)
 ;;obs
"RTN","VPRDJFSD",16,0)
 ;;order
"RTN","VPRDJFSD",17,0)
 ;;problem
"RTN","VPRDJFSD",18,0)
 ;;procedure
"RTN","VPRDJFSD",19,0)
 ;;consult
"RTN","VPRDJFSD",20,0)
 ;;image
"RTN","VPRDJFSD",21,0)
 ;;surgery
"RTN","VPRDJFSD",22,0)
 ;;task
"RTN","VPRDJFSD",23,0)
 ;;visit
"RTN","VPRDJFSD",24,0)
 ;;vital
"RTN","VPRDJFSD",25,0)
 ;;mh
"RTN","VPRDJFSD",26,0)
 ;;ptf
"RTN","VPRDJFSD",27,0)
 ;;exam
"RTN","VPRDJFSD",28,0)
 ;;cpt
"RTN","VPRDJFSD",29,0)
 ;;education
"RTN","VPRDJFSD",30,0)
 ;;pov
"RTN","VPRDJFSD",31,0)
 ;;skin
"RTN","VPRDJFSD",32,0)
 ;;treatment
"RTN","VPRDJFSD",33,0)
 ;;roadtrip
"RTN","VPRDJFSD",34,0)
 ;;zzzzz
"RTN","VPRDJFSD",35,0)
 ;
"RTN","VPRDJFSD",36,0)
 N I,X
"RTN","VPRDJFSD",37,0)
 F I=1:1 S X=$P($T(PTDOMS+I),";;",2,99) Q:X="zzzzz"  S LIST(I)=X
"RTN","VPRDJFSD",38,0)
 Q
"RTN","VPRDJFSD",39,0)
 ;
"RTN","VPRDJFSD",40,0)
OPDOMS(LIST) ; load default operational domains (put in parameter?)
"RTN","VPRDJFSD",41,0)
 ;;asu-class;^USR(8930)
"RTN","VPRDJFSD",42,0)
 ;;asu-rule;^USR(8930.1)
"RTN","VPRDJFSD",43,0)
 ;;category;^VPR(560.11)
"RTN","VPRDJFSD",44,0)
 ;;charttab;^VPR(560.11)
"RTN","VPRDJFSD",45,0)
 ;;displaygroup;^ORD(100.98)
"RTN","VPRDJFSD",46,0)
 ;;doc-def;^TIU(8925.1)
"RTN","VPRDJFSD",47,0)
 ;;labgroup;^LAB(64.5,1,1)
"RTN","VPRDJFSD",48,0)
 ;;labpanel;^LAB(60)
"RTN","VPRDJFSD",49,0)
 ;;location;^SC
"RTN","VPRDJFSD",50,0)
 ;;orderable;^ORD(101.43)
"RTN","VPRDJFSD",51,0)
 ;;page;^VPR(560.11)
"RTN","VPRDJFSD",52,0)
 ;;pt-select;^DPT
"RTN","VPRDJFSD",53,0)
 ;;personphoto;^VPR(560.11)
"RTN","VPRDJFSD",54,0)
 ;;pointofcare;^VPR(560.11)
"RTN","VPRDJFSD",55,0)
 ;;quick;^ORD(101.41)
"RTN","VPRDJFSD",56,0)
 ;;roster;^VPROSTER
"RTN","VPRDJFSD",57,0)
 ;;route;^PS(51.2)
"RTN","VPRDJFSD",58,0)
 ;;schedule;^PS(51.1)
"RTN","VPRDJFSD",59,0)
 ;;team;^VPR(560.11)
"RTN","VPRDJFSD",60,0)
 ;;teamposition;^VPR(560.11)
"RTN","VPRDJFSD",61,0)
 ;;user;^VA(200)
"RTN","VPRDJFSD",62,0)
 ;;usertabprefs;^VPR(560.11)
"RTN","VPRDJFSD",63,0)
 ;;viewdefdef;^VPR(560.11)
"RTN","VPRDJFSD",64,0)
 ;;viewdefdefcoldefconfigtemplate;^VPR(560.11)
"RTN","VPRDJFSD",65,0)
 ;;zzzzz
"RTN","VPRDJFSD",66,0)
 ;;
"RTN","VPRDJFSD",67,0)
 ;;clioterminology
"RTN","VPRDJFSD",68,0)
 ;;doc-action
"RTN","VPRDJFSD",69,0)
 ;;doc-status
"RTN","VPRDJFSD",70,0)
 ;
"RTN","VPRDJFSD",71,0)
 N I,X
"RTN","VPRDJFSD",72,0)
 F I=1:1 S X=$P($T(OPDOMS+I),";",3) Q:X="zzzzz"  S LIST(I)=X
"RTN","VPRDJFSD",73,0)
 Q
"RTN","VPRDJFSD",74,0)
 ;
"RTN","VPRDJFSG")
0^86^B97049334
"RTN","VPRDJFSG",1,0)
VPRDJFSG ;SLC/KCM -- GET for Extract and Freshness Stream
"RTN","VPRDJFSG",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJFSG",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJFSG",4,0)
 ;
"RTN","VPRDJFSG",5,0)
 ;
"RTN","VPRDJFSG",6,0)
 ; --- retrieve updates for an HMP server's subscriptions
"RTN","VPRDJFSG",7,0)
 ;
"RTN","VPRDJFSG",8,0)
GETSUB(VPRFRSP,ARGS) ; retrieve items from stream
"RTN","VPRDJFSG",9,0)
 ;      GET from: /vpr/subscription/{hmpSrvId}/{last}?limit={limit}
"RTN","VPRDJFSG",10,0)
 ; ARGS("last") : date-seq of last item retrieved (ex. 3131206-27)
"RTN","VPRDJFSG",11,0)
 ; ARGS("limit"): maximum number of items to return (default 99999)
"RTN","VPRDJFSG",12,0)
 ;
"RTN","VPRDJFSG",13,0)
 ; VPRFSYS : the id (hash) of the VistA system
"RTN","VPRDJFSG",14,0)
 ; VPRFHMP : the name of the HMP server 
"RTN","VPRDJFSG",15,0)
 ; VPRFSEQ : final sequence (becomes next LASTSEQ)
"RTN","VPRDJFSG",16,0)
 ; VPRFIDX : index to iterate from LASTSEQ to final sequence
"RTN","VPRDJFSG",17,0)
 ; VPRFLAST: used to clean up extracts prior to this
"RTN","VPRDJFSG",18,0)
 ; VPRFSTRM: the extract/freshness stream (VPRFS-hmpSrvId-fmDate) 
"RTN","VPRDJFSG",19,0)
 ; (most variables namespaced since calling variety of extracts)
"RTN","VPRDJFSG",20,0)
 ;
"RTN","VPRDJFSG",21,0)
 K ^TMP("VPRF",$J)
"RTN","VPRDJFSG",22,0)
 N VPRFSYS,VPRFSTRM,VPRFLAST,VPRFDT,VPRFLIM,VPRFSEQ,VPRFIDX,VPRFCNT,SNODE,STYPE,VPRFERR,VPRDEL,VPRERR,VPRSTGET
"RTN","VPRDJFSG",23,0)
 S VPRFRSP=$NA(^TMP("VPRF",$J))
"RTN","VPRDJFSG",24,0)
 S VPRFSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME") ; TODO -- switch to VPRSYS
"RTN","VPRDJFSG",25,0)
 I '$L(VPRFHMP) D SETERR^VPRDJFS("Missing HMP Server ID") Q
"RTN","VPRDJFSG",26,0)
 S VPRFHMP("ien")=$O(^VPR(560,"B",VPRFHMP,0))
"RTN","VPRDJFSG",27,0)
 S VPRFDT=$P($G(ARGS("lastUpdate")),"-")
"RTN","VPRDJFSG",28,0)
 S VPRFSEQ=+$P($G(ARGS("lastUpdate")),"-",2)
"RTN","VPRDJFSG",29,0)
 S VPRSTGET=$G(ARGS("getStatus"))
"RTN","VPRDJFSG",30,0)
 ; stream goes back a maximum of 2 days
"RTN","VPRDJFSG",31,0)
 I VPRFDT<$$FMADD^XLFDT($$DT^XLFDT,-2) S VPRFDT=$$HTFM^XLFDT(+$H-2),VPRFSEQ=0
"RTN","VPRDJFSG",32,0)
 S VPRFLAST=VPRFDT_"-"_VPRFSEQ
"RTN","VPRDJFSG",33,0)
 D LASTUPD(VPRFHMP,VPRFLAST)
"RTN","VPRDJFSG",34,0)
 S VPRFLIM=$G(ARGS("max"),99999)
"RTN","VPRDJFSG",35,0)
 S VPRFSTRM="VPRFS~"_VPRFHMP_"~"_VPRFDT       ; stream identifier
"RTN","VPRDJFSG",36,0)
 S ^XTMP(VPRFSTRM,"job",$J)=""                   ; record job number
"RTN","VPRDJFSG",37,0)
 S VPRFCNT=0,VPRFIDX=VPRFSEQ
"RTN","VPRDJFSG",38,0)
 F  D  Q:VPRFCNT'<VPRFLIM  D NXTSTRM Q:VPRFSTRM=""
"RTN","VPRDJFSG",39,0)
 . F  S VPRFIDX=$O(^XTMP(VPRFSTRM,VPRFIDX)) Q:'VPRFIDX  D  Q:VPRFCNT'<VPRFLIM
"RTN","VPRDJFSG",40,0)
 . . S SNODE=^XTMP(VPRFSTRM,VPRFIDX),STYPE=$P(SNODE,U,2)
"RTN","VPRDJFSG",41,0)
 . . S $P(^XTMP(VPRFSTRM,VPRFIDX),U,6)=$P($H,",",2) ; timestamp when sent
"RTN","VPRDJFSG",42,0)
 . . I STYPE="syncNoop" Q                     ; skip, patient was unsubscribed
"RTN","VPRDJFSG",43,0)
 . . I STYPE="syncDomain" D DOMITMS Q         ; add multiple extract items
"RTN","VPRDJFSG",44,0)
 . . S VPRFSEQ=VPRFIDX
"RTN","VPRDJFSG",45,0)
 . . I STYPE="syncError" D SYNCERR(SNODE,.VPRERR) Q
"RTN","VPRDJFSG",46,0)
 . . I STYPE="syncStart" D SYNCSTRT(SNODE) Q  ; begin initial extraction
"RTN","VPRDJFSG",47,0)
 . . I STYPE="syncDone" D SYNCDONE(SNODE) Q   ; end of initial extraction
"RTN","VPRDJFSG",48,0)
 . . D FRESHITM(SNODE,.VPRDEL,.VPRERR)        ; otherwise, freshness item
"RTN","VPRDJFSG",49,0)
 Q:$G(VPRFERR)
"RTN","VPRDJFSG",50,0)
 D FINISH(.VPRDEL,.VPRERR)
"RTN","VPRDJFSG",51,0)
 Q
"RTN","VPRDJFSG",52,0)
DOMITMS ; loop thru extract items, OFFSET is last sent
"RTN","VPRDJFSG",53,0)
 ; expects VPRFSTRM,VPRFIDX,VPRFHMP,VPRFSYS
"RTN","VPRDJFSG",54,0)
 ; changes VPRFSEQ,VPRFCNT as each item added
"RTN","VPRDJFSG",55,0)
 N X,OFFSET,DFN,PIDS,DOMAIN,TASK,BATCH,COUNT,ITEMNUM,DOMSIZE,SECSIZE
"RTN","VPRDJFSG",56,0)
 S X=^XTMP(VPRFSTRM,VPRFIDX),DFN=$P(X,U),X=$P(X,U,3)
"RTN","VPRDJFSG",57,0)
 S PIDS=$S(DFN:$$PIDS^VPRDJFS(DFN),1:"")
"RTN","VPRDJFSG",58,0)
 S DOMAIN=$P(X,":")               ; domain{#sectionNumber}
"RTN","VPRDJFSG",59,0)
 S TASK=$P(X,":",2)               ; task number in ^XTMP
"RTN","VPRDJFSG",60,0)
 S COUNT=$P(X,":",3)              ; count in this section
"RTN","VPRDJFSG",61,0)
 S DOMSIZE=$P(X,":",4)            ; estimated total for the domain
"RTN","VPRDJFSG",62,0)
 S SECSIZE=$P(X,":",5)            ; section size (for operational)
"RTN","VPRDJFSG",63,0)
 S BATCH="VPRFX~"_VPRFHMP_"~"_DFN ; extract node in ^XTMP
"RTN","VPRDJFSG",64,0)
 S OFFSET=COUNT-(VPRFIDX-VPRFSEQ)
"RTN","VPRDJFSG",65,0)
 F  S OFFSET=$O(^XTMP(BATCH,TASK,DOMAIN,OFFSET)) Q:'OFFSET  D  Q:VPRFCNT'<VPRFLIM
"RTN","VPRDJFSG",66,0)
 . S VPRFCNT=VPRFCNT+1            ; increment the count of returned items
"RTN","VPRDJFSG",67,0)
 . S VPRFSEQ=VPRFSEQ+1            ; increment the sequence number in the stream
"RTN","VPRDJFSG",68,0)
 . S ITEMNUM=OFFSET+($P(DOMAIN,"#",2)*SECSIZE)
"RTN","VPRDJFSG",69,0)
 . M ^TMP("VPRF",$J,VPRFCNT)=^XTMP(BATCH,TASK,DOMAIN,OFFSET)
"RTN","VPRDJFSG",70,0)
 . S ^TMP("VPRF",$J,VPRFCNT,.3)=$$WRAPPER(DOMAIN,PIDS,$S('COUNT:0,1:ITEMNUM),+DOMSIZE)
"RTN","VPRDJFSG",71,0)
 Q
"RTN","VPRDJFSG",72,0)
MIDXTRCT() ; Return true if mid-extract
"RTN","VPRDJFSG",73,0)
 ; from GETSUB expects VPRFSTRM,VPRFSEQ
"RTN","VPRDJFSG",74,0)
 I 'VPRFSEQ Q 0
"RTN","VPRDJFSG",75,0)
 I '$D(^XTMP(VPRFSTRM,VPRFSEQ)) Q 1                  ; middle of extract
"RTN","VPRDJFSG",76,0)
 I $P(^XTMP(VPRFSTRM,VPRFSEQ),U,2)="syncDomain" Q 1  ; just starting extract
"RTN","VPRDJFSG",77,0)
 Q 0
"RTN","VPRDJFSG",78,0)
 ;
"RTN","VPRDJFSG",79,0)
NXTSTRM ; Reset variables for next date in this HMP stream
"RTN","VPRDJFSG",80,0)
 ; from GETSUB expects VPRFSTRM,VPRFDT,VPRFIDX
"RTN","VPRDJFSG",81,0)
 ; VPRFSTRM set to "" if no next stream
"RTN","VPRDJFSG",82,0)
 ; VPRFIDX  set to 0 if next stream, or left as is
"RTN","VPRDJFSG",83,0)
 ; VPRFDT   set to last date actually used
"RTN","VPRDJFSG",84,0)
 N NEXTDT,DONE
"RTN","VPRDJFSG",85,0)
 S NEXTDT=VPRFDT,DONE=0
"RTN","VPRDJFSG",86,0)
 F  D  Q:DONE
"RTN","VPRDJFSG",87,0)
 . S NEXTDT=$$FMADD^XLFDT(NEXTDT,1)
"RTN","VPRDJFSG",88,0)
 . I NEXTDT>$$DT^XLFDT S VPRFSTRM="" S DONE=1 Q
"RTN","VPRDJFSG",89,0)
 . S $P(VPRFSTRM,"~",3)=NEXTDT
"RTN","VPRDJFSG",90,0)
 . I '+$O(^XTMP(VPRFSTRM,0)) Q  ; nothing here, try next date
"RTN","VPRDJFSG",91,0)
 . S VPRFDT=NEXTDT,VPRFIDX=0,VPRFSEQ=0,DONE=1
"RTN","VPRDJFSG",92,0)
 Q
"RTN","VPRDJFSG",93,0)
FINISH(VPRDEL,VPRERR) ;reset the FIRST object delimiter, add header and tail
"RTN","VPRDJFSG",94,0)
 ; expects VPRFCNT,VPRFDT,VPRFSEQ,VPRFHMP,VPRFLAST
"RTN","VPRDJFSG",95,0)
 N CLOSE,I,START,TEXT,UID,X,II
"RTN","VPRDJFSG",96,0)
 S X=$G(^TMP("VPRF",$J,1,.3))
"RTN","VPRDJFSG",97,0)
 I $E(X,1,2)="}," S X=$E(X,3,$L(X)),^TMP("VPRF",$J,1,.3)=X
"RTN","VPRDJFSG",98,0)
 S ^TMP("VPRF",$J,.5)=$$APIHDR(VPRFCNT,VPRFDT_"-"_VPRFSEQ)
"RTN","VPRDJFSG",99,0)
 ;delete node
"RTN","VPRDJFSG",100,0)
 I $D(VPRDEL) D
"RTN","VPRDJFSG",101,0)
 .S CLOSE=$S(VPRFCNT:"},",1:""),START=1
"RTN","VPRDJFSG",102,0)
 .;S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)=CLOSE_"]}"
"RTN","VPRDJFSG",103,0)
 .S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)=CLOSE_"{""deletes"":["
"RTN","VPRDJFSG",104,0)
 .S UID="" F  S UID=$O(VPRDEL(UID)) Q:UID=""  D
"RTN","VPRDJFSG",105,0)
 ..S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)=$S(START:"",1:",")_"{""uid"":"""_UID_"""}" S START=0
"RTN","VPRDJFSG",106,0)
 .S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)="]"
"RTN","VPRDJFSG",107,0)
 ;error node
"RTN","VPRDJFSG",108,0)
 I $D(VPRERR) D
"RTN","VPRDJFSG",109,0)
 .S CLOSE=$S(VPRFCNT:"},",1:""),START=1
"RTN","VPRDJFSG",110,0)
 .;S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)=CLOSE_"]}"
"RTN","VPRDJFSG",111,0)
 .S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)=CLOSE_"{""error"":["
"RTN","VPRDJFSG",112,0)
 .S I=0 F  S I=$O(VPRERR(I)) Q:I'>0  D
"RTN","VPRDJFSG",113,0)
 ..S TEXT=VPRERR(I)
"RTN","VPRDJFSG",114,0)
 ..S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)=$S(START:"",1:",")_TEXT S START=0
"RTN","VPRDJFSG",115,0)
 .S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)="]"
"RTN","VPRDJFSG",116,0)
 S ^TMP("VPRF",$J,VPRFCNT+1)=$S(VPRFCNT:"}",1:"")_"]",VPRFCNT=VPRFCNT+1
"RTN","VPRDJFSG",117,0)
 I $G(VPRSTGET)="true" D
"RTN","VPRDJFSG",118,0)
 . S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)=",""syncStatii"":[",START=1
"RTN","VPRDJFSG",119,0)
 . S I=0 F  S I=$O(^VPR(560,I)) Q:+I=0  D
"RTN","VPRDJFSG",120,0)
 . . I $P($G(^VPR(560,I,0)),"^",1)=VPRFHMP D
"RTN","VPRDJFSG",121,0)
 . . . S II=0 F  S II=$O(^VPR(560,I,1,II)) Q:+II=0  D
"RTN","VPRDJFSG",122,0)
 . . . . S TEXT="{""pid"":"_II_",""status"":"_$P(^VPR(560,I,1,II,0),"^",2)_"}"
"RTN","VPRDJFSG",123,0)
 . . . . S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)=$S(START:"",1:",")_TEXT S START=0
"RTN","VPRDJFSG",124,0)
 . S VPRFCNT=VPRFCNT+1,^TMP("VPRF",$J,VPRFCNT)="]"
"RTN","VPRDJFSG",125,0)
 S ^TMP("VPRF",$J,VPRFCNT+1)="}}"
"RTN","VPRDJFSG",126,0)
 ;I '$D(VPRDEL),'$D(VPRERR) S ^TMP("VPRF",$J,VPRFCNT+1)=$S(VPRFCNT:"}",1:"")_"]}}"
"RTN","VPRDJFSG",127,0)
 ;I $D(VPRDEL)!($D(VPRERR)) S ^TMP("VPRF",$J,VPRFCNT+1)="}"
"RTN","VPRDJFSG",128,0)
 ;
"RTN","VPRDJFSG",129,0)
 ; remove any ^XTMP nodes that have been successfully sent based on LAST
"RTN","VPRDJFSG",130,0)
 N DATE,SEQ,LASTDT,LASTSEQ,STRM,LSTRM,RSTRM
"RTN","VPRDJFSG",131,0)
 S LASTDT=+$P(VPRFLAST,"-"),LASTSEQ=+$P(VPRFLAST,"-",2)
"RTN","VPRDJFSG",132,0)
 S RSTRM="VPRFS~"_VPRFHMP_"~",LSTRM=$L(RSTRM),STRM=RSTRM
"RTN","VPRDJFSG",133,0)
 F  S STRM=$O(^XTMP(STRM)) Q:'$L(STRM)  Q:$E(STRM,1,LSTRM)'=RSTRM  D
"RTN","VPRDJFSG",134,0)
 . S DATE=$P(STRM,"~",3) Q:DATE>LASTDT
"RTN","VPRDJFSG",135,0)
 . S SEQ=0 F  S SEQ=$O(^XTMP(STRM,"tidy",SEQ)) Q:'SEQ  Q:(DATE=LASTDT)&(SEQ>LASTSEQ)  D TIDYX(STRM,SEQ)
"RTN","VPRDJFSG",136,0)
 Q
"RTN","VPRDJFSG",137,0)
TIDYX(STREAM,SEQ) ; clean up extracts after they have been retrieved
"RTN","VPRDJFSG",138,0)
 ; from FINISH
"RTN","VPRDJFSG",139,0)
 N BATCH,DOMAIN,TASK
"RTN","VPRDJFSG",140,0)
 S BATCH=^XTMP(STREAM,"tidy",SEQ,"batch")
"RTN","VPRDJFSG",141,0)
 S DOMAIN=^XTMP(STREAM,"tidy",SEQ,"domain")
"RTN","VPRDJFSG",142,0)
 S TASK=^XTMP(STREAM,"tidy",SEQ,"task")
"RTN","VPRDJFSG",143,0)
 I DOMAIN="<done>" K ^XTMP(BATCH) I 1
"RTN","VPRDJFSG",144,0)
 E  K ^XTMP(BATCH,TASK,DOMAIN)
"RTN","VPRDJFSG",145,0)
 K ^XTMP(STREAM,"tidy",SEQ)
"RTN","VPRDJFSG",146,0)
 Q
"RTN","VPRDJFSG",147,0)
SYNCSTRT(SEQNODE) ; Build syncStart object with demograhics
"RTN","VPRDJFSG",148,0)
 ; expects VPRFSYS, VPRFHMP, VPRFCNT
"RTN","VPRDJFSG",149,0)
 S VPRFCNT=VPRFCNT+1
"RTN","VPRDJFSG",150,0)
 N DFN,FILTER,DFN,WRAP
"RTN","VPRDJFSG",151,0)
 S DFN=$P($P(SEQNODE,U,3),"~",3) ; VPRFX~hmpSrvId~dfn
"RTN","VPRDJFSG",152,0)
 I DFN D
"RTN","VPRDJFSG",153,0)
 . S FILTER("patientId")=DFN,FILTER("domain")="patient"
"RTN","VPRDJFSG",154,0)
 . D GET^VPRDJ(.RSLT,.FILTER)
"RTN","VPRDJFSG",155,0)
 . M ^TMP("VPRF",$J,VPRFCNT)=^TMP("VPR",$J,1)
"RTN","VPRDJFSG",156,0)
 ; for OPD there is no object, so 4th argument is 0 
"RTN","VPRDJFSG",157,0)
 S ^TMP("VPRF",$J,VPRFCNT,.3)=$$WRAPPER("syncStart",$$PIDS^VPRDJFS(DFN),$S(DFN:1,1:-1),$S(DFN:1,1:-1))
"RTN","VPRDJFSG",158,0)
 Q
"RTN","VPRDJFSG",159,0)
SYNCDONE(SEQNODE) ; Build syncStatus object and stick in ^TMP
"RTN","VPRDJFSG",160,0)
 ;  expects: VPRFSYS,VPRFCNT, VPRFHMP
"RTN","VPRDJFSG",161,0)
 N VPRBATCH,DFN,VPRBATCH,STS,STSJSON,X,ERR
"RTN","VPRDJFSG",162,0)
 S VPRBATCH=$P(SEQNODE,U,3) ; VPRFX~hmpSrvId~dfn
"RTN","VPRDJFSG",163,0)
 S DFN=$P(VPRBATCH,"~",3)
"RTN","VPRDJFSG",164,0)
 S STS("uid")="urn:va:syncStatus:"_VPRFSYS_":"_DFN
"RTN","VPRDJFSG",165,0)
 S STS("initialized")="true"
"RTN","VPRDJFSG",166,0)
 I DFN S STS("localId")=DFN
"RTN","VPRDJFSG",167,0)
 S X="" F  S X=$O(^XTMP(VPRBATCH,0,"count",X)) Q:'$L(X)  D
"RTN","VPRDJFSG",168,0)
 . S STS("domainTotals",X)=^XTMP(VPRBATCH,0,"count",X)
"RTN","VPRDJFSG",169,0)
 D ENCODE^VPRJSON("STS","STSJSON","ERR")
"RTN","VPRDJFSG",170,0)
 I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","VPRDJFSG",171,0)
 S VPRFCNT=VPRFCNT+1
"RTN","VPRDJFSG",172,0)
 M ^TMP("VPRF",$J,VPRFCNT)=STSJSON
"RTN","VPRDJFSG",173,0)
 S ^TMP("VPRF",$J,VPRFCNT,.3)=$$WRAPPER("syncStatus",$$PIDS^VPRDJFS(DFN),1,1)
"RTN","VPRDJFSG",174,0)
 Q
"RTN","VPRDJFSG",175,0)
 ;
"RTN","VPRDJFSG",176,0)
SYNCERR(SNODE,VPRERR) ;
"RTN","VPRDJFSG",177,0)
 ;M ^AGP("snode")=SNODE
"RTN","VPRDJFSG",178,0)
 N BATCH,CNT,DFN,NUM,OFFSET,PIDS,TASK,TOTAL,X
"RTN","VPRDJFSG",179,0)
 S DFN=$P(SNODE,U),X=$P(SNODE,U,3)
"RTN","VPRDJFSG",180,0)
 S PIDS=$$PIDS^VPRDJFS(DFN)
"RTN","VPRDJFSG",181,0)
 S TASK=$P(X,":",2),TOTAL=$P(X,":",4)
"RTN","VPRDJFSG",182,0)
 S BATCH="VPRFX~"_VPRFHMP_"~"_DFN       ; extract node in ^XTMP
"RTN","VPRDJFSG",183,0)
 ;S OFFSET=TOTAL-(VPRFIDX-VPRFSEQ)
"RTN","VPRDJFSG",184,0)
 ;S OFFSET=.9                            ; skip nodes < 1
"RTN","VPRDJFSG",185,0)
 ;I 'VPRFCNT S OFFSET=VPRFIDX-VPRFSEQ+.9 ; in case starting mid-extract
"RTN","VPRDJFSG",186,0)
 S CNT=$O(VPRERR(""),-1)
"RTN","VPRDJFSG",187,0)
 S NUM=0 F  S NUM=$O(^XTMP(BATCH,TASK,"error",NUM)) Q:NUM'>0  D
"RTN","VPRDJFSG",188,0)
 .S CNT=CNT+1 S VPRERR(CNT)=$G(^XTMP(BATCH,TASK,"error",NUM,1))
"RTN","VPRDJFSG",189,0)
 . ;M ^TMP("VPRF",$J,VPRFCNT)=^XTMP(BATCH,TASK,DOMAIN,OFFSET)
"RTN","VPRDJFSG",190,0)
 . ;S ^TMP("VPRF",$J,VPRFCNT,.3)=$$WRAPPER(DOMAIN,PID,$S('TOTAL:0,1:OFFSET),+TOTAL)
"RTN","VPRDJFSG",191,0)
 ;I $G(ERRVAL)="" Q
"RTN","VPRDJFSG",192,0)
 ;S ERRVAL="{"_ERRVAL_"}"
"RTN","VPRDJFSG",193,0)
 ;D DECODE^VPRJSON("ERRVAL","ERROBJ","ERR")
"RTN","VPRDJFSG",194,0)
 ;I $D(ERR) M ^AGP("ERR")=ERR
"RTN","VPRDJFSG",195,0)
 ;I $D(ERR) S $EC=",UJSON decode error,"
"RTN","VPRDJFSG",196,0)
 ;K ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,"error")
"RTN","VPRDJFSG",197,0)
 ;S ERRMSG=ERROBJ("error","message")
"RTN","VPRDJFSG",198,0)
 ;Q:'$L(ERRMSG)
"RTN","VPRDJFSG",199,0)
 ;S SYNCERR("uid")="urn:va:syncError:"_VPRFSYS_":"_DFN_":"_DOMAIN
"RTN","VPRDJFSG",200,0)
 ;S SYNCERR("collection")=DOMAIN
"RTN","VPRDJFSG",201,0)
 ;S SYNCERR("error")=ERRMSG
"RTN","VPRDJFSG",202,0)
 ;D ENCODE^VPRJSON("SYNCERR","ERRJSON","ERR") I $D(ERR) S $EC=",UJSON encode error,"
"RTN","VPRDJFSG",203,0)
 ;D POST^VPRDJFS(DFN,"syncError","error:"_VPRFZTSK_":1:1","",HMPSRV)
"RTN","VPRDJFSG",204,0)
 Q
"RTN","VPRDJFSG",205,0)
FRESHITM(SEQNODE,DELETE,ERROR) ; Get freshness item and stick in ^TMP
"RTN","VPRDJFSG",206,0)
 ; expects VPRFSYS, VPRFHMP
"RTN","VPRDJFSG",207,0)
 N ACT,DFN,DOMAIN,ECNT,FILTER,ID,RSLT,UID,VPRI,WRAP
"RTN","VPRDJFSG",208,0)
 S FILTER("noHead")=1
"RTN","VPRDJFSG",209,0)
 S DFN=$P(SEQNODE,U),DOMAIN=$P(SEQNODE,U,2),ID=$P(SEQNODE,U,3),ACT=$P(SEQNODE,U,4)
"RTN","VPRDJFSG",210,0)
 I ACT="@" D  Q
"RTN","VPRDJFSG",211,0)
 . S UID=$$SETUID^VPRUTILS(DOMAIN,$S(+DFN>0:DFN,1:""),ID)
"RTN","VPRDJFSG",212,0)
 . S DELETE(UID)=""
"RTN","VPRDJFSG",213,0)
 S FILTER("id")=ID
"RTN","VPRDJFSG",214,0)
 S FILTER("domain")=DOMAIN
"RTN","VPRDJFSG",215,0)
 I DFN="OPD" D GET^VPREF(.RSLT,.FILTER)
"RTN","VPRDJFSG",216,0)
 I +DFN>0 D
"RTN","VPRDJFSG",217,0)
 . S FILTER("patientId")=DFN
"RTN","VPRDJFSG",218,0)
 . D GET^VPRDJ(.RSLT,.FILTER)
"RTN","VPRDJFSG",219,0)
 I $L($G(^TMP("VPR",$J,"error")))>0 D BLDSERR(DFN,.ERROR)  Q
"RTN","VPRDJFSG",220,0)
 ;
"RTN","VPRDJFSG",221,0)
 I '$D(^TMP("VPR",$J,1)) D  Q
"RTN","VPRDJFSG",222,0)
 . S UID=$$SETUID^VPRUTILS(DOMAIN,$S(+DFN>0:DFN,1:""),ID)
"RTN","VPRDJFSG",223,0)
 . S DELETE(UID)=""
"RTN","VPRDJFSG",224,0)
 ;
"RTN","VPRDJFSG",225,0)
 S WRAP=$$WRAPPER(DOMAIN,$$PIDS^VPRDJFS(DFN),1,1)
"RTN","VPRDJFSG",226,0)
 F VPRI=1:1 Q:'$D(^TMP("VPR",$J,VPRI))  D
"RTN","VPRDJFSG",227,0)
 . S VPRFCNT=VPRFCNT+1
"RTN","VPRDJFSG",228,0)
 . M ^TMP("VPRF",$J,VPRFCNT)=^TMP("VPR",$J,VPRI)
"RTN","VPRDJFSG",229,0)
 . S ^TMP("VPRF",$J,VPRFCNT,.3)=WRAP
"RTN","VPRDJFSG",230,0)
 Q
"RTN","VPRDJFSG",231,0)
 ;
"RTN","VPRDJFSG",232,0)
BLDSERR(DFN,ERROR) ; Create syncError object in ERRJSON
"RTN","VPRDJFSG",233,0)
 ; expects: VPRBATCH, VPRFSYS, VPRFZTSK
"RTN","VPRDJFSG",234,0)
 N COUNT,ERRVAL,ERROBJ,ERR,ERRMSG,SYNCERR
"RTN","VPRDJFSG",235,0)
 ;S ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,NODE,.3)="{"  ; replace , with { for decoding JSON
"RTN","VPRDJFSG",236,0)
 M ERRVAL=^TMP("VPR",$J,"error")
"RTN","VPRDJFSG",237,0)
 I $G(ERRVAL)="" Q
"RTN","VPRDJFSG",238,0)
 S ERRVAL="{"_ERRVAL_"}"
"RTN","VPRDJFSG",239,0)
 D DECODE^VPRJSON("ERRVAL","ERROBJ","ERR")
"RTN","VPRDJFSG",240,0)
 I $D(ERR) S $EC=",UJSON decode error,"
"RTN","VPRDJFSG",241,0)
 S ERRMSG=ERROBJ("error","message")
"RTN","VPRDJFSG",242,0)
 Q:'$L(ERRMSG)
"RTN","VPRDJFSG",243,0)
 S SYNCERR("uid")="urn:va:syncError:"_VPRFSYS_":"_DFN_":FRESHNESS"
"RTN","VPRDJFSG",244,0)
 S SYNCERR("collection")=DOMAIN
"RTN","VPRDJFSG",245,0)
 S SYNCERR("error")=ERRMSG
"RTN","VPRDJFSG",246,0)
 D ENCODE^VPRJSON("SYNCERR","ERRJSON","ERR") I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","VPRDJFSG",247,0)
 S COUNT=$O(ERROR(""),-1)+1
"RTN","VPRDJFSG",248,0)
 M ERROR(COUNT)=ERRJSON
"RTN","VPRDJFSG",249,0)
 Q
"RTN","VPRDJFSG",250,0)
WRAPPER(DOMAIN,PIDS,OFFSET,DOMSIZE) ; return JSON wrapper for each item
"RTN","VPRDJFSG",251,0)
 ; add object tag if extract total not zero or if total passed as -1
"RTN","VPRDJFSG",252,0)
 ; seq and total tags only added if non-zero
"RTN","VPRDJFSG",253,0)
 N X
"RTN","VPRDJFSG",254,0)
 S X="},{""collection"":"""_$P(DOMAIN,"#")_""""_PIDS
"RTN","VPRDJFSG",255,0)
 I $G(OFFSET)>-1 S X=X_",""seq"":"_OFFSET
"RTN","VPRDJFSG",256,0)
 I $G(DOMSIZE)>-1 S X=X_",""total"":"_DOMSIZE
"RTN","VPRDJFSG",257,0)
 I $G(OFFSET)>-1 S X=X_",""object"":"
"RTN","VPRDJFSG",258,0)
 Q X
"RTN","VPRDJFSG",259,0)
 ;
"RTN","VPRDJFSG",260,0)
APIHDR(COUNT,LASTITM) ; return JSON
"RTN","VPRDJFSG",261,0)
 ; expects VPRFSYS
"RTN","VPRDJFSG",262,0)
 N X
"RTN","VPRDJFSG",263,0)
 S X="{""apiVersion"":1.02,""params"":{""domain"":"""_$$KSP^XUPARAM("WHERE")_""""
"RTN","VPRDJFSG",264,0)
 S X=X_",""systemId"":"""_VPRFSYS_"""},""data"":{""updated"":"""_$$HL7NOW^VPRDJ_""""
"RTN","VPRDJFSG",265,0)
 S X=X_",""totalItems"":"_COUNT_",""lastUpdate"":"""_LASTITM_""""_$$PROGRESS^VPRDJFS(LASTITM)
"RTN","VPRDJFSG",266,0)
 S X=X_",""items"":["
"RTN","VPRDJFSG",267,0)
 Q X
"RTN","VPRDJFSG",268,0)
 ;
"RTN","VPRDJFSG",269,0)
LASTUPD(HMPSRV,LASTUPD) ; save the last update
"RTN","VPRDJFSG",270,0)
 ; TODO: change this to use Fileman call
"RTN","VPRDJFSG",271,0)
 N IEN,CURRUPD,REPEAT
"RTN","VPRDJFSG",272,0)
 S IEN=$O(^VPR(560,"B",HMPSRV,0)) Q:'IEN
"RTN","VPRDJFSG",273,0)
 Q:LASTUPD["^"
"RTN","VPRDJFSG",274,0)
 S CURRUPD=$P(^VPR(560,IEN,0),"^",2),REPEAT=$P(^VPR(560,IEN,0),"^",4)
"RTN","VPRDJFSG",275,0)
 I LASTUPD=CURRUPD S $P(^VPR(560,IEN,0),"^",4)=REPEAT+1 QUIT
"RTN","VPRDJFSG",276,0)
 S $P(^VPR(560,IEN,0),"^",2)=LASTUPD,$P(^VPR(560,IEN,0),"^",4)=0
"RTN","VPRDJFSG",277,0)
 Q
"RTN","VPRDJFSG",278,0)
JSONOUT ; Write out JSON in ^TMP
"RTN","VPRDJFSG",279,0)
 N X
"RTN","VPRDJFSG",280,0)
 S X=$NA(^TMP("VPRF",$J))
"RTN","VPRDJFSG",281,0)
 F  S X=$Q(@X) Q:($QS(X,1)'="VPRF")!($QS(X,2)'=$J)  W !,@X
"RTN","VPRDJFSG",282,0)
 Q
"RTN","VPRDJFSM")
0^99^B49639419
"RTN","VPRDJFSM",1,0)
VPRDJFSM ;SLC/KCM -- Monitoring Tools for Extracts
"RTN","VPRDJFSM",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJFSM",3,0)
 ;
"RTN","VPRDJFSM",4,0)
EN ; Show information for one server
"RTN","VPRDJFSM",5,0)
 N IEN
"RTN","VPRDJFSM",6,0)
 S IEN=$$GETSRV() Q:IEN'>0
"RTN","VPRDJFSM",7,0)
 D LOOP(IEN)
"RTN","VPRDJFSM",8,0)
 Q
"RTN","VPRDJFSM",9,0)
ALL ; Show information for all servers
"RTN","VPRDJFSM",10,0)
 S IEN=0 F  S IEN=$O(^VPR(560,IEN)) Q:'IEN  W ! D SHOWSRV(IEN)
"RTN","VPRDJFSM",11,0)
 Q
"RTN","VPRDJFSM",12,0)
ADDPT(PAT) ; Add patient to server
"RTN","VPRDJFSM",13,0)
 N SRV,ARGS,RESULT
"RTN","VPRDJFSM",14,0)
 I '$G(PAT) S PAT=$$GETPAT() Q:'PAT
"RTN","VPRDJFSM",15,0)
 S SRV=$$GETSRV() Q:SRV'>0
"RTN","VPRDJFSM",16,0)
 I $G(^VPR(560,"AITEM",PAT,SRV))>0 W !,"Patient "_PAT_" already synced."
"RTN","VPRDJFSM",17,0)
 ;
"RTN","VPRDJFSM",18,0)
 S ARGS("command")="putPtSubscription"
"RTN","VPRDJFSM",19,0)
 S ARGS("server")=$P(^VPR(560,SRV,0),"^")
"RTN","VPRDJFSM",20,0)
 S ARGS("localId")=PAT
"RTN","VPRDJFSM",21,0)
 D API^VPRDJFS(.RESULT,.ARGS)
"RTN","VPRDJFSM",22,0)
 I ^TMP("VPRF",$J,1)["location" W !,$P($G(^DPT(PAT,0)),"^")," is being synced."
"RTN","VPRDJFSM",23,0)
 E  W !,"Subscription failed."
"RTN","VPRDJFSM",24,0)
 Q
"RTN","VPRDJFSM",25,0)
 ;
"RTN","VPRDJFSM",26,0)
LOOP(SRV) ; Monitor refresh loop
"RTN","VPRDJFSM",27,0)
 D HOME^%ZIS
"RTN","VPRDJFSM",28,0)
 N ACT,IEN
"RTN","VPRDJFSM",29,0)
 S ACT="R" F  D  Q:"RV"'[ACT
"RTN","VPRDJFSM",30,0)
 . I ACT="R" D SHOWMAIN(SRV)
"RTN","VPRDJFSM",31,0)
 . I ACT="V" D SHOWVPRN
"RTN","VPRDJFSM",32,0)
 . W ! S ACT=$$GETCMD
"RTN","VPRDJFSM",33,0)
 Q
"RTN","VPRDJFSM",34,0)
GETSRV() ; Return the IEN for the server to monitor
"RTN","VPRDJFSM",35,0)
 N DIC,Y
"RTN","VPRDJFSM",36,0)
 S DIC="^VPR(560,",DIC(0)="AEMQ",DIC("A")="Select HMP server instance: "
"RTN","VPRDJFSM",37,0)
 D ^DIC
"RTN","VPRDJFSM",38,0)
 Q +Y
"RTN","VPRDJFSM",39,0)
 ;
"RTN","VPRDJFSM",40,0)
GETPAT() ; Return DFN for a patient
"RTN","VPRDJFSM",41,0)
 N DIC,Y
"RTN","VPRDJFSM",42,0)
 S DIC="^DPT(",DIC(0)="AEMQ"
"RTN","VPRDJFSM",43,0)
 D ^DIC
"RTN","VPRDJFSM",44,0)
 Q +Y
"RTN","VPRDJFSM",45,0)
 ;
"RTN","VPRDJFSM",46,0)
GETCMD() ; Get the next command
"RTN","VPRDJFSM",47,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","VPRDJFSM",48,0)
 S DIR(0)="SB^R:Refresh;V:View VPR Nodes;Q:Quit"
"RTN","VPRDJFSM",49,0)
 S DIR("B")="Refresh"
"RTN","VPRDJFSM",50,0)
 D ^DIR
"RTN","VPRDJFSM",51,0)
 I $D(DIRUT)!$D(DIROUT) S Y="Q"
"RTN","VPRDJFSM",52,0)
 Q Y
"RTN","VPRDJFSM",53,0)
 ;
"RTN","VPRDJFSM",54,0)
SHOWVPRN ; Show VPR global nodes
"RTN","VPRDJFSM",55,0)
 W !!,"Current VPR temporary nodes",?40,"High Numeric or Last Subscript",!
"RTN","VPRDJFSM",56,0)
 N X,Y,J
"RTN","VPRDJFSM",57,0)
 S X="VPQ~" F  S X=$O(^XTMP(X)) Q:$E(X,1,3)'="VPR"  D
"RTN","VPRDJFSM",58,0)
 . W !,"^XTMP("""_X_""")"
"RTN","VPRDJFSM",59,0)
 . S Y=$O(^XTMP(X," "),-1) S:'$L(Y) Y=$O(^XTMP(X,""),-1) W ?40,Y
"RTN","VPRDJFSM",60,0)
 W !
"RTN","VPRDJFSM",61,0)
 S X="VPQ~" F  S X=$O(^TMP(X)) Q:$E(X,1,3)'="VPR"  D
"RTN","VPRDJFSM",62,0)
 . S J=0 F  S J=$O(^TMP(X,J)) Q:'J  D
"RTN","VPRDJFSM",63,0)
 . . W !,"^TMP("""_X_""","_J_")"
"RTN","VPRDJFSM",64,0)
 . . S Y=$O(^TMP(X,J," "),-1) S:'$L(Y) Y=$O(^TMP(X,J,""),-1) W ?40,Y
"RTN","VPRDJFSM",65,0)
 S J=0 F  S J=$O(^TMP(J)) Q:'J  D
"RTN","VPRDJFSM",66,0)
 . S X="VPQ~" F  S X=$O(^TMP(J,X)) Q:$E(X,1,3)'="VPR"  D
"RTN","VPRDJFSM",67,0)
 . . W !,"^TMP("_J_","""_X_""")"
"RTN","VPRDJFSM",68,0)
 . . S Y=$O(^TMP(J,X," "),-1) S:'$L(Y) Y=$O(^TMP(J,X,""),-1) W ?40,Y
"RTN","VPRDJFSM",69,0)
 Q
"RTN","VPRDJFSM",70,0)
SHOWMAIN(SRV) ; Show main information for server
"RTN","VPRDJFSM",71,0)
 N STREAM
"RTN","VPRDJFSM",72,0)
 S STREAM=$$LSTREAM(SRV)
"RTN","VPRDJFSM",73,0)
 W @IOF
"RTN","VPRDJFSM",74,0)
 W !,$$HTE^XLFDT($H),?64,"Slots Open: ",$$SLOTS,!
"RTN","VPRDJFSM",75,0)
 I STREAM="" W !,"No VPR extract stream found." Q
"RTN","VPRDJFSM",76,0)
 D SHOWSRV(SRV)
"RTN","VPRDJFSM",77,0)
 D LJOBS(SRV)
"RTN","VPRDJFSM",78,0)
 D LQUEUE(SRV,10)
"RTN","VPRDJFSM",79,0)
 Q 
"RTN","VPRDJFSM",80,0)
SHOWSRV(IEN) ; Show information for a server
"RTN","VPRDJFSM",81,0)
 N X0,ROOT,BATCH,STREAM,SRVNM,LASTUP,REPEAT,TASK,TASKS
"RTN","VPRDJFSM",82,0)
 S X0=^VPR(560,IEN,0)
"RTN","VPRDJFSM",83,0)
 S SRVNM=$P(X0,"^"),LASTUP=$P(X0,"^",2),REPEAT=$P(X0,"^",4)
"RTN","VPRDJFSM",84,0)
 S STREAM=$$LSTREAM(SRV)
"RTN","VPRDJFSM",85,0)
 W !,SRVNM,?30,"Last Update: ",LASTUP W:REPEAT "  x",REPEAT
"RTN","VPRDJFSM",86,0)
 I $D(^XTMP(STREAM)) D
"RTN","VPRDJFSM",87,0)
 . W !,?29,"End of Queue: ",$P(STREAM,"~",3),"-",$G(^XTMP(STREAM,"last"))
"RTN","VPRDJFSM",88,0)
 ; loop thru extracts for this server
"RTN","VPRDJFSM",89,0)
 S ROOT="VPRFX~"_SRVNM_"~",BATCH=ROOT
"RTN","VPRDJFSM",90,0)
 S BATCH=ROOT F  S BATCH=$O(^XTMP(BATCH)) Q:$E(BATCH,1,$L(ROOT))'=ROOT  D
"RTN","VPRDJFSM",91,0)
 . W !,$J($P(BATCH,"~",3),12)
"RTN","VPRDJFSM",92,0)
 . S TASK=0,TASKS=""
"RTN","VPRDJFSM",93,0)
 . F  S TASK=$O(^XTMP(BATCH,0,"task",TASK)) Q:'TASK  S TASKS=TASKS_$S($L(TASKS):",",1:"")_TASK
"RTN","VPRDJFSM",94,0)
 . W ?14,"Task(s)"_TASKS
"RTN","VPRDJFSM",95,0)
 . I '$D(^XTMP(BATCH,0,"wait")) W ?34,"waiting: ",$$WAIT(BATCH)," seconds" Q
"RTN","VPRDJFSM",96,0)
 . W ?31,"extracting: ",$$LOBJ(BATCH,TASK)
"RTN","VPRDJFSM",97,0)
 Q
"RTN","VPRDJFSM",98,0)
WAIT(BATCH) ; Return the number of seconds the batch has been waiting
"RTN","VPRDJFSM",99,0)
 N START
"RTN","VPRDJFSM",100,0)
 S START=$G(^XTMP(BATCH,0,"time")) Q:'START 0
"RTN","VPRDJFSM",101,0)
 Q $$HDIFF^XLFDT($H,START,2)
"RTN","VPRDJFSM",102,0)
 ;
"RTN","VPRDJFSM",103,0)
LOBJ(BATCH,TASK) ; Return the last domain>count retrieved for this batch
"RTN","VPRDJFSM",104,0)
 Q:'TASK "no task"
"RTN","VPRDJFSM",105,0)
 N LASTITM,DOMAIN,NUM
"RTN","VPRDJFSM",106,0)
 S LASTITM=""
"RTN","VPRDJFSM",107,0)
 S DOMAIN="",LASTITM=""
"RTN","VPRDJFSM",108,0)
 F  S DOMAIN=$O(^XTMP(BATCH,0,"status",DOMAIN)) Q:'$L(DOMAIN)  D  Q:$L(LASTITM)
"RTN","VPRDJFSM",109,0)
 . I $G(^XTMP(BATCH,0,"status",DOMAIN)) Q  ; domain complete
"RTN","VPRDJFSM",110,0)
 . S NUM=$O(^XTMP(BATCH,TASK,DOMAIN,""),-1)
"RTN","VPRDJFSM",111,0)
 . S LASTITM=DOMAIN_$S(NUM:" #"_NUM,1:"")
"RTN","VPRDJFSM",112,0)
 Q $S('$L(LASTITM):"<finished>",1:LASTITM)
"RTN","VPRDJFSM",113,0)
 ;
"RTN","VPRDJFSM",114,0)
SLOTS() ; Return the number of slots available
"RTN","VPRDJFSM",115,0)
 N OUT
"RTN","VPRDJFSM",116,0)
 D FIND^DIC(3.54,"","1","BX","VPR EXTRACT RESOURCE","","","","","OUT")
"RTN","VPRDJFSM",117,0)
 Q $G(OUT("DILIST","ID",1,1))
"RTN","VPRDJFSM",118,0)
 ;
"RTN","VPRDJFSM",119,0)
LJOBS(SRV) ; Show jobs polling in this stream
"RTN","VPRDJFSM",120,0)
 N STREAM,X,JOBNUM
"RTN","VPRDJFSM",121,0)
 S STREAM=$$LSTREAM(SRV),X=""
"RTN","VPRDJFSM",122,0)
 S JOBNUM="" F  S JOBNUM=$O(^XTMP(STREAM,"job",JOBNUM)) Q:'JOBNUM  D
"RTN","VPRDJFSM",123,0)
 . S X=X_$S($L(X):", ",1:"")_JOBNUM
"RTN","VPRDJFSM",124,0)
 W !!,"Polling job number(s):  "_X
"RTN","VPRDJFSM",125,0)
 Q
"RTN","VPRDJFSM",126,0)
LQUEUE(SRV,MAX) ; Show last MAX items in freshness queue
"RTN","VPRDJFSM",127,0)
 W !!,"Last items in the queue ---"
"RTN","VPRDJFSM",128,0)
 N CNT,SEQ,LIST,STREAM
"RTN","VPRDJFSM",129,0)
 S STREAM=$$LSTREAM(SRV)
"RTN","VPRDJFSM",130,0)
 S CNT=0,SEQ=" " ; reverse from space to get numeric entries
"RTN","VPRDJFSM",131,0)
 F  S SEQ=$O(^XTMP(STREAM,SEQ),-1) Q:'SEQ  D  Q:CNT>9
"RTN","VPRDJFSM",132,0)
 . S CNT=CNT+1
"RTN","VPRDJFSM",133,0)
 . S LIST(SEQ)=^XTMP(STREAM,SEQ)
"RTN","VPRDJFSM",134,0)
 S SEQ="" F  S SEQ=$O(LIST(SEQ)) Q:'SEQ  W !,SEQ,?8,LIST(SEQ)
"RTN","VPRDJFSM",135,0)
 Q
"RTN","VPRDJFSM",136,0)
LSTREAM(SRV) ; Return the latest stream for this server
"RTN","VPRDJFSM",137,0)
 N STREAM
"RTN","VPRDJFSM",138,0)
 S STREAM="VPRFS~"_$P($G(^VPR(560,SRV,0)),"^")_"~9999999"
"RTN","VPRDJFSM",139,0)
 S STREAM=$O(^XTMP(STREAM),-1)
"RTN","VPRDJFSM",140,0)
 Q STREAM
"RTN","VPRDJFSM",141,0)
 ;
"RTN","VPRDJFSM",142,0)
EMERSTOP ; Emergency Stop for Freshness
"RTN","VPRDJFSM",143,0)
 D SETFRUP(0)
"RTN","VPRDJFSM",144,0)
 Q
"RTN","VPRDJFSM",145,0)
RSTRTFR ; Re-start freshness updates
"RTN","VPRDJFSM",146,0)
 D SETFRUP(1)
"RTN","VPRDJFSM",147,0)
 Q
"RTN","VPRDJFSM",148,0)
SETFRUP(START) ; Set flag for freshness updates
"RTN","VPRDJFSM",149,0)
 I 'START D
"RTN","VPRDJFSM",150,0)
 . W !,"WARNING!  This will stop freshness updates for the VPR."
"RTN","VPRDJFSM",151,0)
 . W !,"          It will be necessary to re-synch patient data.",!
"RTN","VPRDJFSM",152,0)
 I START D
"RTN","VPRDJFSM",153,0)
 . W !,"This will --RESUME-- freshness updates for the VPR."
"RTN","VPRDJFSM",154,0)
 . W !,"It may be necessary to re-synch patient and operational data.",!
"RTN","VPRDJFSM",155,0)
 N TYPLST,ALPHA,I,TYPE
"RTN","VPRDJFSM",156,0)
 D EVNTYPS(.TYPLST)
"RTN","VPRDJFSM",157,0)
 S I=0 F  S I=$O(TYPLST(I)) Q:'I  S ALPHA(TYPLST(I))=""
"RTN","VPRDJFSM",158,0)
 S TYPE=$$GETFTYP(.ALPHA,START)
"RTN","VPRDJFSM",159,0)
 Q:TYPE=""
"RTN","VPRDJFSM",160,0)
 I TYPE="*" D  Q
"RTN","VPRDJFSM",161,0)
 . S TYPE="" F  S TYPE=$O(ALPHA(TYPE)) Q:TYPE=""  D CHGFTYP(TYPE,START)
"RTN","VPRDJFSM",162,0)
 D CHGFTYP(TYPE,START)
"RTN","VPRDJFSM",163,0)
 Q
"RTN","VPRDJFSM",164,0)
CHGFTYP(TYPE,START) ; Change the freshness update flag for a type
"RTN","VPRDJFSM",165,0)
 I START D STRTFTYP(TYPE) Q
"RTN","VPRDJFSM",166,0)
 ; otherwise
"RTN","VPRDJFSM",167,0)
 D STOPFTYP(TYPE)
"RTN","VPRDJFSM",168,0)
 Q
"RTN","VPRDJFSM",169,0)
STOPFTYP(TYPE) ; Stop freshness updates for type
"RTN","VPRDJFSM",170,0)
 I '$D(^XTMP("VPR-off",0)) D NEWXTMP^VPRDJFS("VPR-off",999,"Switch off VPR freshness updates")
"RTN","VPRDJFSM",171,0)
 W !,"Stopping freshess updates for: ",TYPE
"RTN","VPRDJFSM",172,0)
 S ^XTMP("VPR-off",TYPE)=1
"RTN","VPRDJFSM",173,0)
 Q
"RTN","VPRDJFSM",174,0)
STRTFTYP(TYPE) ; Resume freshness updates for type
"RTN","VPRDJFSM",175,0)
 W !,"Resuming freshness updates for: ",TYPE
"RTN","VPRDJFSM",176,0)
 K ^XTMP("VPR-off",TYPE)
"RTN","VPRDJFSM",177,0)
 Q
"RTN","VPRDJFSM",178,0)
GETFTYP(ALPHA,START) ; Return item from the list
"RTN","VPRDJFSM",179,0)
 N X,T,P
"RTN","VPRDJFSM",180,0)
 S P=$S(START:"start",1:"stop")
"RTN","VPRDJFSM",181,0)
 F  D  Q:X'["?"
"RTN","VPRDJFSM",182,0)
 . D SHOWFTYP(.ALPHA)
"RTN","VPRDJFSM",183,0)
 . W !!,"Choose domain to "_P_" (* "_P_"s all): "
"RTN","VPRDJFSM",184,0)
 . R X:300 S:$E(X)="^" X="" Q:X=""  Q:X="*"
"RTN","VPRDJFSM",185,0)
 . S X=$$LOW^XLFSTR(X)
"RTN","VPRDJFSM",186,0)
 . Q:$D(ALPHA(X))
"RTN","VPRDJFSM",187,0)
 . S T=$O(ALPHA(X))
"RTN","VPRDJFSM",188,0)
 . I X=$E(T,1,$L(X)) W "  ",T S X=T Q
"RTN","VPRDJFSM",189,0)
 . W "  ??",! S X="?"
"RTN","VPRDJFSM",190,0)
 Q X
"RTN","VPRDJFSM",191,0)
 ;
"RTN","VPRDJFSM",192,0)
SHOWFTYP(ALPHA) ; Show freshness types
"RTN","VPRDJFSM",193,0)
 N I,X,P
"RTN","VPRDJFSM",194,0)
 S I=0,X="" F  S X=$O(ALPHA(X)) Q:'$L(X)  D
"RTN","VPRDJFSM",195,0)
 . S I=I+1,P=I#3
"RTN","VPRDJFSM",196,0)
 . W:P=1 !,X
"RTN","VPRDJFSM",197,0)
 . W:P=2 ?26,X
"RTN","VPRDJFSM",198,0)
 . W:P=0 ?52,X
"RTN","VPRDJFSM",199,0)
 Q
"RTN","VPRDJFSM",200,0)
EVNTYPS(LIST) ; load event types
"RTN","VPRDJFSM",201,0)
 ;;allergy
"RTN","VPRDJFSM",202,0)
 ;;med
"RTN","VPRDJFSM",203,0)
 ;;auxiliary
"RTN","VPRDJFSM",204,0)
 ;;appointment
"RTN","VPRDJFSM",205,0)
 ;;diagnosis
"RTN","VPRDJFSM",206,0)
 ;;document
"RTN","VPRDJFSM",207,0)
 ;;factor
"RTN","VPRDJFSM",208,0)
 ;;immunization
"RTN","VPRDJFSM",209,0)
 ;;lab
"RTN","VPRDJFSM",210,0)
 ;;obs
"RTN","VPRDJFSM",211,0)
 ;;order
"RTN","VPRDJFSM",212,0)
 ;;problem
"RTN","VPRDJFSM",213,0)
 ;;procedure
"RTN","VPRDJFSM",214,0)
 ;;consult
"RTN","VPRDJFSM",215,0)
 ;;image
"RTN","VPRDJFSM",216,0)
 ;;surgery
"RTN","VPRDJFSM",217,0)
 ;;task
"RTN","VPRDJFSM",218,0)
 ;;visit
"RTN","VPRDJFSM",219,0)
 ;;vital
"RTN","VPRDJFSM",220,0)
 ;;mh
"RTN","VPRDJFSM",221,0)
 ;;ptf
"RTN","VPRDJFSM",222,0)
 ;;exam
"RTN","VPRDJFSM",223,0)
 ;;cpt
"RTN","VPRDJFSM",224,0)
 ;;education
"RTN","VPRDJFSM",225,0)
 ;;pov
"RTN","VPRDJFSM",226,0)
 ;;skin
"RTN","VPRDJFSM",227,0)
 ;;treatment
"RTN","VPRDJFSM",228,0)
 ;;roadtrip
"RTN","VPRDJFSM",229,0)
 ;;diet
"RTN","VPRDJFSM",230,0)
 ;;pt-select
"RTN","VPRDJFSM",231,0)
 ;;patient
"RTN","VPRDJFSM",232,0)
 ;;roster
"RTN","VPRDJFSM",233,0)
 ;;user
"RTN","VPRDJFSM",234,0)
 ;;zzzzz
"RTN","VPRDJFSM",235,0)
 N I,X
"RTN","VPRDJFSM",236,0)
 F I=1:1 S X=$P($T(EVNTYPS+I),";;",2,99) Q:X="zzzzz"  S LIST(I)=X
"RTN","VPRDJFSM",237,0)
 Q
"RTN","VPRDJFSM",238,0)
 ;
"RTN","VPRDJFSP")
0^87^B140822334
"RTN","VPRDJFSP",1,0)
VPRDJFSP ;SLC/KCM -- PUT/POST for Extract and Freshness Stream
"RTN","VPRDJFSP",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJFSP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJFSP",4,0)
 ;
"RTN","VPRDJFSP",5,0)
 ;
"RTN","VPRDJFSP",6,0)
 ; --- create a new patient subscription
"RTN","VPRDJFSP",7,0)
 ;
"RTN","VPRDJFSP",8,0)
PUTSUB(ARGS) ; return location after creating a new subscription
"RTN","VPRDJFSP",9,0)
 ;  fn returns      : /vpr/subscription/{hmpSrvId}/patient/{sysId;dfn}
"RTN","VPRDJFSP",10,0)
 ;                  : "" if error, errors in ^TMP("VPRFERR",$J)
"RTN","VPRDJFSP",11,0)
 ; .ARGS("server")  : name of HMP server
"RTN","VPRDJFSP",12,0)
 ; .ARGS("localId") : dfn for patient to subscribe or "OPD" (operational data)
"RTN","VPRDJFSP",13,0)
 ; .ARGS("icn")     : icn for patient to subscribe
"RTN","VPRDJFSP",14,0)
 ; .ARGS("domains") : optional array of domains to initialize (deprecated)
"RTN","VPRDJFSP",15,0)
 ;
"RTN","VPRDJFSP",16,0)
 I '$$TM^%ZTLOAD D SETERR^VPRDJFS("Taskman not running") Q ""
"RTN","VPRDJFSP",17,0)
 ;
"RTN","VPRDJFSP",18,0)
 N HMPSRV,VPRFDFN,VPRBATCH,VPRFERR,NEWSUB,DOMAINS
"RTN","VPRDJFSP",19,0)
 ;
"RTN","VPRDJFSP",20,0)
 ; make sure we can identify the patient ("OPD" signals sync operational)
"RTN","VPRDJFSP",21,0)
 S VPRFDFN=$G(ARGS("localId"))
"RTN","VPRDJFSP",22,0)
 I VPRFDFN'="OPD" D  Q:$G(VPRFERR) ""
"RTN","VPRDJFSP",23,0)
 . I '$L(VPRFDFN),$L(ARGS("icn")) S VPRFDFN=+$$GETDFN^MPIF001(ARGS("icn"))
"RTN","VPRDJFSP",24,0)
 . I 'VPRFDFN D SETERR^VPRDJFS("No patient specified") Q
"RTN","VPRDJFSP",25,0)
 . I '$D(^DPT(VPRFDFN)) D SETERR^VPRDJFS("Patient not found")
"RTN","VPRDJFSP",26,0)
 ;
"RTN","VPRDJFSP",27,0)
 ; make sure server is known and create batch id
"RTN","VPRDJFSP",28,0)
 S HMPSRV=VPRFHMP  ; TODO: switch to VPRFHMP as server ien
"RTN","VPRDJFSP",29,0)
 I '$L(HMPSRV) D SETERR^VPRDJFS("Missing HMP Server ID") Q ""
"RTN","VPRDJFSP",30,0)
 S HMPSRV("ien")=$O(^VPR(560,"B",HMPSRV,0))
"RTN","VPRDJFSP",31,0)
 I 'HMPSRV("ien") D SETERR^VPRDJFS("HMP Server not registered") Q ""
"RTN","VPRDJFSP",32,0)
 S VPRBATCH="VPRFX~"_HMPSRV_"~"_VPRFDFN
"RTN","VPRDJFSP",33,0)
 ;
"RTN","VPRDJFSP",34,0)
 ; set up domains to extract
"RTN","VPRDJFSP",35,0)
 D @($S(VPRFDFN="OPD":"OPDOMS",1:"PTDOMS")_"^VPRDJFSD(.DOMAINS)")
"RTN","VPRDJFSP",36,0)
 ;
"RTN","VPRDJFSP",37,0)
 ; see if this is new subscription and task extract if new
"RTN","VPRDJFSP",38,0)
 D SETPAT(VPRFDFN,HMPSRV,.NEWSUB) Q:$G(VPRFERR) ""
"RTN","VPRDJFSP",39,0)
 I NEWSUB D  Q:$G(VPRFERR) ""
"RTN","VPRDJFSP",40,0)
 . I VPRFDFN="OPD" D                       ; queue each operational domain
"RTN","VPRDJFSP",41,0)
 . . S I="" F  S I=$O(DOMAINS(I)) Q:'I  D
"RTN","VPRDJFSP",42,0)
 . . . N VPRFDOM
"RTN","VPRDJFSP",43,0)
 . . . S VPRFDOM(1)=DOMAINS(I)
"RTN","VPRDJFSP",44,0)
 . . . D QUINIT(VPRBATCH,VPRFDFN,.VPRFDOM)
"RTN","VPRDJFSP",45,0)
 . E  D                                    ; queue all domains for patient
"RTN","VPRDJFSP",46,0)
 . . N VPRFDOM
"RTN","VPRDJFSP",47,0)
 . . M VPRFDOM=DOMAINS
"RTN","VPRDJFSP",48,0)
 . . D QUINIT(VPRBATCH,VPRFDFN,.VPRFDOM)
"RTN","VPRDJFSP",49,0)
 Q "/vpr/subscription/"_HMPSRV_"/patient/"_$$PID^VPRDJFS(VPRFDFN) ;_"?task="_$O(^XTMP(VPRBATCH,0,"task",0))
"RTN","VPRDJFSP",50,0)
 ;
"RTN","VPRDJFSP",51,0)
QUINIT(VPRBATCH,VPRFDFN,VPRFDOM) ; Queue the initial extracts for a patient
"RTN","VPRDJFSP",52,0)
 ; VPRBATCH="VPRFX~hmpsrvid~dfn"  example: VPRFX~hmpXYZ~229
"RTN","VPRDJFSP",53,0)
 ; VPRFDOM(n)="domainName"
"RTN","VPRDJFSP",54,0)
 ; 
"RTN","VPRDJFSP",55,0)
 ; ^XTMP("VPRFX~hmpsrvid~dfn",0)=expires^created^VPR Patient Extract
"RTN","VPRDJFSP",56,0)
 ;                           ,0,"status",domain)=0:waiting;1:ready
"RTN","VPRDJFSP",57,0)
 ;                           ,0,"task",taskIen)=""
"RTN","VPRDJFSP",58,0)
 ;                           ,taskIen,domain,... (extract data)
"RTN","VPRDJFSP",59,0)
 ;
"RTN","VPRDJFSP",60,0)
 ; only done once when beginning the batch, no matter how many tasked jobs
"RTN","VPRDJFSP",61,0)
 L +^XTMP(VPRBATCH):5 E  D SETERR^VPRDJFS("Cannot lock batch:"_VPRBATCH) QUIT
"RTN","VPRDJFSP",62,0)
 I '$D(^XTMP(VPRBATCH)) D
"RTN","VPRDJFSP",63,0)
 . D NEWXTMP^VPRDJFS(VPRBATCH,2,"VPR Patient Extract")
"RTN","VPRDJFSP",64,0)
 . S ^XTMP(VPRBATCH,0,"time")=$H
"RTN","VPRDJFSP",65,0)
 . D SETMARK("Start",VPRFDFN,VPRBATCH) ; sends full demographics
"RTN","VPRDJFSP",66,0)
 L -^XTMP(VPRBATCH)
"RTN","VPRDJFSP",67,0)
 ;
"RTN","VPRDJFSP",68,0)
 ; set up the domains to be done by this task
"RTN","VPRDJFSP",69,0)
 N I S I=0 F  S I=$O(VPRFDOM(I)) Q:'I  D SETDOM("status",VPRFDOM(I),0)
"RTN","VPRDJFSP",70,0)
 ;
"RTN","VPRDJFSP",71,0)
 ; now create the task for this set of domains within the batch
"RTN","VPRDJFSP",72,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","VPRDJFSP",73,0)
 S ZTRTN="DQINIT^VPRDJFSP",ZTIO="VPR EXTRACT RESOURCE",ZTDTH=$H
"RTN","VPRDJFSP",74,0)
 S ZTSAVE("VPRBATCH")="",ZTSAVE("VPRFDFN")="",ZTSAVE("VPRFDOM(")=""
"RTN","VPRDJFSP",75,0)
 S ZTDESC="Build VPR domains for a patient"
"RTN","VPRDJFSP",76,0)
 D ^%ZTLOAD
"RTN","VPRDJFSP",77,0)
 ;
"RTN","VPRDJFSP",78,0)
 I $G(ZTSK) S ^XTMP(VPRBATCH,0,"task",ZTSK)="" I 1
"RTN","VPRDJFSP",79,0)
 E  D SETERR^VPRDJFS("Task not created")
"RTN","VPRDJFSP",80,0)
 Q
"RTN","VPRDJFSP",81,0)
SETDOM(ATTRIB,DOMAIN,VALUE) ; Set value for a domain
"RTN","VPRDJFSP",82,0)
 ; ATTRIB: "status" or "count" attribute
"RTN","VPRDJFSP",83,0)
 ; for status, VALUE: 0=waiting, 1=ready
"RTN","VPRDJFSP",84,0)
 ; for count,  VALUE: count of items
"RTN","VPRDJFSP",85,0)
 S ^XTMP(VPRBATCH,0,ATTRIB,DOMAIN)=VALUE
"RTN","VPRDJFSP",86,0)
 Q
"RTN","VPRDJFSP",87,0)
SETMARK(TYPE,VPRFDFN,VPRBATCH) ; Post markers for begin and end of initial synch
"RTN","VPRDJFSP",88,0)
 ; ^XTMP("VPRFP","tidy",hmpServer,fmDate,sequence)=batch
"RTN","VPRDJFSP",89,0)
 N HPMSRV,NODES,X
"RTN","VPRDJFSP",90,0)
 S HMPSRV=$P(VPRBATCH,"~",2)
"RTN","VPRDJFSP",91,0)
 D POST^VPRDJFS(VPRFDFN,"sync"_TYPE,VPRBATCH,"",HMPSRV,.NODES)
"RTN","VPRDJFSP",92,0)
 Q:TYPE="Start"
"RTN","VPRDJFSP",93,0)
 D SETTIDY("<done>",.NODES)
"RTN","VPRDJFSP",94,0)
 Q
"RTN","VPRDJFSP",95,0)
DQINIT ; Dequeue initial extracts
"RTN","VPRDJFSP",96,0)
 ; expects:  VPRBATCH, VPRFDFN, VPRFDOM, ZTSK
"RTN","VPRDJFSP",97,0)
 I '$D(^XTMP(VPRBATCH,0,"task",ZTSK)) Q  ; extract was superceded
"RTN","VPRDJFSP",98,0)
 N COUNT,VPRFDOMI,VPRFSYS,VPRFZTSK
"RTN","VPRDJFSP",99,0)
 K ^TMP("VPRERR",$J)
"RTN","VPRDJFSP",100,0)
 S VPRFSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRDJFSP",101,0)
 S VPRFZTSK=ZTSK ; just in case the unexpected happens to ZTSK
"RTN","VPRDJFSP",102,0)
 S ^XTMP(VPRBATCH,0,"task",ZTSK,"job")=$J
"RTN","VPRDJFSP",103,0)
 S ^XTMP(VPRBATCH,0,"task",ZTSK,"wait")=$$HDIFF^XLFDT($H,$G(^XTMP(VPRBATCH,0,"time")),2)
"RTN","VPRDJFSP",104,0)
 D UPDSTS(VPRFDFN,$P(VPRBATCH,"~",2),1)
"RTN","VPRDJFSP",105,0)
 S VPRFDOMI="" F  S VPRFDOMI=$O(VPRFDOM(VPRFDOMI)) Q:'VPRFDOMI  D
"RTN","VPRDJFSP",106,0)
 . I VPRFDFN="OPD" D DOMOPD(VPRFDOM(VPRFDOMI))
"RTN","VPRDJFSP",107,0)
 . I +VPRFDFN D DOMPT(VPRFDOM(VPRFDOMI))
"RTN","VPRDJFSP",108,0)
 . ; if superceded, stop processing domains
"RTN","VPRDJFSP",109,0)
 . I '$D(^XTMP(VPRBATCH,0,"task",VPRFZTSK)) S VPRFDOMI=999 Q
"RTN","VPRDJFSP",110,0)
 . D SETDOM("status",VPRFDOM(VPRFDOMI),1) ; ready
"RTN","VPRDJFSP",111,0)
 ; if superceded, remove extracts produced by this task
"RTN","VPRDJFSP",112,0)
 I '$D(^XTMP(VPRBATCH,0,"task",VPRFZTSK)) K ^XTMP(VPRBATCH,VPRFZTSK) Q
"RTN","VPRDJFSP",113,0)
 ; don't assume initialized, since we may split domains to other tasks
"RTN","VPRDJFSP",114,0)
 I $$INITDONE(VPRBATCH) D             ; if all domains extracted
"RTN","VPRDJFSP",115,0)
 . S COUNT=$O(^TMP("VPRERR",$J,"")) I COUNT>0 D POSTERR(COUNT,VPRFDFN)
"RTN","VPRDJFSP",116,0)
 . D SETMARK("Done",VPRFDFN,VPRBATCH) ; - add updated syncStatus
"RTN","VPRDJFSP",117,0)
 . D MVFRUPD(VPRBATCH,VPRFDFN)        ; - move freshness updates over
"RTN","VPRDJFSP",118,0)
 K ^XTMP(VPRBATCH,0,"task",VPRFZTSK)  ; this task is done
"RTN","VPRDJFSP",119,0)
 Q
"RTN","VPRDJFSP",120,0)
DOMPT(VPRFADOM) ; Load a patient domain
"RTN","VPRDJFSP",121,0)
 N FILTER,RSLT,VPRFEST
"RTN","VPRDJFSP",122,0)
 S FILTER("noHead")=1
"RTN","VPRDJFSP",123,0)
 S FILTER("domain")=VPRFADOM
"RTN","VPRDJFSP",124,0)
 S FILTER("patientId")=VPRFDFN
"RTN","VPRDJFSP",125,0)
 D GET^VPRDJ(.RSLT,.FILTER)
"RTN","VPRDJFSP",126,0)
 D MOD4STRM(VPRFADOM)
"RTN","VPRDJFSP",127,0)
 D POSTSEC(VPRFADOM)
"RTN","VPRDJFSP",128,0)
 Q
"RTN","VPRDJFSP",129,0)
DOMOPD(VPRFADOM) ; Load an operational domain in smaller batches
"RTN","VPRDJFSP",130,0)
 ; expects VPRBATCH,VPRFZTSK
"RTN","VPRDJFSP",131,0)
 N FILTER,RSLT,NEXTID,DONE,VPRFEST,VPRFSEC,VPRFSIZE
"RTN","VPRDJFSP",132,0)
 S VPRFSIZE=1000               ; section size (adjust to taste)
"RTN","VPRDJFSP",133,0)
 S VPRFEST=$$TOTAL(VPRFADOM)   ; set estimated domain total
"RTN","VPRDJFSP",134,0)
 S NEXTID=0,VPRFSEC=0,DONE=0
"RTN","VPRDJFSP",135,0)
 S VPRFADOM=VPRFADOM_"#"_VPRFSEC
"RTN","VPRDJFSP",136,0)
 F  D  Q:DONE
"RTN","VPRDJFSP",137,0)
 . N FILTER,RSLT
"RTN","VPRDJFSP",138,0)
 . S FILTER("noHead")=1
"RTN","VPRDJFSP",139,0)
 . S FILTER("domain")=VPRFADOM ; include section for ^XTMP location
"RTN","VPRDJFSP",140,0)
 . S FILTER("start")=NEXTID
"RTN","VPRDJFSP",141,0)
 . S FILTER("limit")=VPRFSIZE
"RTN","VPRDJFSP",142,0)
 . D GET^VPREF(.RSLT,.FILTER)
"RTN","VPRDJFSP",143,0)
 . I '$D(^XTMP(VPRBATCH,0,"task",VPRFZTSK)) S DONE=1 QUIT  ; superceded
"RTN","VPRDJFSP",144,0)
 . I $G(^XTMP(VPRBATCH,VPRFZTSK,VPRFADOM,"total"),0)=0,(VPRFSEC>0) S DONE=1 QUIT
"RTN","VPRDJFSP",145,0)
 . I $G(^XTMP(VPRBATCH,VPRFZTSK,VPRFADOM,"finished")) S DONE=1
"RTN","VPRDJFSP",146,0)
 . D MOD4STRM(VPRFADOM)
"RTN","VPRDJFSP",147,0)
 . I DONE S VPRFEST=^XTMP(VPRBATCH,0,"count",$P(VPRFADOM,"#")) S:'VPRFEST VPRFEST=1
"RTN","VPRDJFSP",148,0)
 . D POSTSEC(VPRFADOM,VPRFEST,VPRFSIZE)
"RTN","VPRDJFSP",149,0)
 . Q:DONE
"RTN","VPRDJFSP",150,0)
 . S NEXTID=$G(^XTMP(VPRBATCH,VPRFZTSK,VPRFADOM,"last"),0)
"RTN","VPRDJFSP",151,0)
 . S VPRFSEC=VPRFSEC+1
"RTN","VPRDJFSP",152,0)
 . S $P(VPRFADOM,"#",2)=VPRFSEC
"RTN","VPRDJFSP",153,0)
 Q
"RTN","VPRDJFSP",154,0)
MOD4STRM(DOMAIN) ; modify extract to be ready for stream
"RTN","VPRDJFSP",155,0)
 ; expects: VPRBATCH, VPRFSYS, VPRFZTSK
"RTN","VPRDJFSP",156,0)
 ; results are in ^XTMP("VPRFX~hmpsrv~dfn",DFN,DOMAIN,...)
"RTN","VPRDJFSP",157,0)
 ; syncError: {uid,collection,error}  uid=urn:va:syncError:sysId:dfn:extract
"RTN","VPRDJFSP",158,0)
 N DFN,HMPSRV,COUNT,DOMONLY
"RTN","VPRDJFSP",159,0)
 S DOMONLY=$P(DOMAIN,"#")
"RTN","VPRDJFSP",160,0)
 S DFN=$P(VPRBATCH,"~",3),HMPSRV=$P(VPRBATCH,"~",2)
"RTN","VPRDJFSP",161,0)
 S COUNT=+$G(^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,"total"),0)
"RTN","VPRDJFSP",162,0)
 I COUNT=0 S ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,1,1)="null"
"RTN","VPRDJFSP",163,0)
 ; if error, add syncError object (from COUNT+2)
"RTN","VPRDJFSP",164,0)
 I $D(^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,"error")) D
"RTN","VPRDJFSP",165,0)
 . N JSON
"RTN","VPRDJFSP",166,0)
 . ;D BLDSERR(DFN,DOMAIN,.JSON) Q:'$D(JSON)
"RTN","VPRDJFSP",167,0)
 . ;S COUNT=COUNT+1
"RTN","VPRDJFSP",168,0)
 . ;S ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,COUNT,1)=","
"RTN","VPRDJFSP",169,0)
 . ;M ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,COUNT,1)=JSON
"RTN","VPRDJFSP",170,0)
 S ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,"total")=COUNT    ;incl errors and/or empty
"RTN","VPRDJFSP",171,0)
 D SETDOM("count",DOMONLY,$G(^XTMP(VPRBATCH,0,"count",DOMONLY),0)+COUNT)
"RTN","VPRDJFSP",172,0)
 Q
"RTN","VPRDJFSP",173,0)
POSTSEC(DOMAIN,ETOTAL,SECSIZE) ; post domain section to stream and set tidy nodes
"RTN","VPRDJFSP",174,0)
 N DFN,HMPSRV,COUNT,X,NODES
"RTN","VPRDJFSP",175,0)
 S COUNT=^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,"total")
"RTN","VPRDJFSP",176,0)
 S ETOTAL=$G(ETOTAL,COUNT)
"RTN","VPRDJFSP",177,0)
 s SECSIZE=$G(SECSIZE,0)
"RTN","VPRDJFSP",178,0)
 S DFN=$P(VPRBATCH,"~",3)
"RTN","VPRDJFSP",179,0)
 S HMPSRV=$P(VPRBATCH,"~",2)
"RTN","VPRDJFSP",180,0)
 D POST^VPRDJFS(DFN,"syncDomain",DOMAIN_":"_VPRFZTSK_":"_COUNT_":"_ETOTAL_":"_SECSIZE,"",HMPSRV,.NODES)
"RTN","VPRDJFSP",181,0)
 D SETTIDY(DOMAIN,.NODES)
"RTN","VPRDJFSP",182,0)
 Q
"RTN","VPRDJFSP",183,0)
SETTIDY(DOMAIN,NODES) ; Set tidy nodes for clean-up of the extracts in ^XTMP
"RTN","VPRDJFSP",184,0)
 ; expects VPRBATCH,VPRFZTSK
"RTN","VPRDJFSP",185,0)
 N X,STREAM,SEQ
"RTN","VPRDJFSP",186,0)
 S X="" F  S X=$O(NODES(X)) Q:X=""  D      ; iterate hmp servers
"RTN","VPRDJFSP",187,0)
 . S STREAM="VPRFS~"_X_"~"_$P(NODES(X),U)  ; VPRFS~hmpSrv~fmDate
"RTN","VPRDJFSP",188,0)
 . S SEQ=$P(NODES(X),U,2)
"RTN","VPRDJFSP",189,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"batch")=VPRBATCH
"RTN","VPRDJFSP",190,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"domain")=DOMAIN
"RTN","VPRDJFSP",191,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"task")=VPRFZTSK
"RTN","VPRDJFSP",192,0)
 Q
"RTN","VPRDJFSP",193,0)
MVFRUPD(VPRBATCH,VPRFDFN) ; Move freshness updates over active stream
"RTN","VPRDJFSP",194,0)
 N I,X,FROM,HMPSRV,DFN,TYPE,ID,ACT
"RTN","VPRDJFSP",195,0)
 S HMPSRV=$P(VPRBATCH,"~",2)
"RTN","VPRDJFSP",196,0)
 D UPDSTS(VPRFDFN,HMPSRV,2)              ; now initialized 
"RTN","VPRDJFSP",197,0)
 S FROM="VPRFH~"_HMPSRV_"~"_VPRFDFN
"RTN","VPRDJFSP",198,0)
 S I=0 F  S I=$O(^XTMP(FROM,I)) Q:'I  D  ; move over held updates
"RTN","VPRDJFSP",199,0)
 . S X=^XTMP(FROM,I)
"RTN","VPRDJFSP",200,0)
 . S DFN=$P(X,U),TYPE=$P(X,U,2),ID=$P(X,U,3),ACT=$P(X,U,4)
"RTN","VPRDJFSP",201,0)
 . D POST^VPRDJFS(DFN,TYPE,ID,ACT,HMPSRV)
"RTN","VPRDJFSP",202,0)
 K ^XTMP(FROM)
"RTN","VPRDJFSP",203,0)
 Q
"RTN","VPRDJFSP",204,0)
BLDSERR(DFN,DOMAIN,ERRJSON) ; Create syncError object in ERRJSON
"RTN","VPRDJFSP",205,0)
 ; expects: VPRBATCH, VPRFSYS, VPRFZTSK
"RTN","VPRDJFSP",206,0)
 N COUNT,ERRVAL,ERROBJ,ERR,ERRMSG,SYNCERR
"RTN","VPRDJFSP",207,0)
 ;S ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,NODE,.3)="{"  ; replace , with { for decoding JSON
"RTN","VPRDJFSP",208,0)
 M ERRVAL=^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,"error")
"RTN","VPRDJFSP",209,0)
 I $G(ERRVAL)="" Q
"RTN","VPRDJFSP",210,0)
 S ERRVAL="{"_ERRVAL_"}"
"RTN","VPRDJFSP",211,0)
 D DECODE^VPRJSON("ERRVAL","ERROBJ","ERR")
"RTN","VPRDJFSP",212,0)
 I $D(ERR) S $EC=",UJSON decode error,"
"RTN","VPRDJFSP",213,0)
 K ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,"error")
"RTN","VPRDJFSP",214,0)
 S ERRMSG=ERROBJ("error","message")
"RTN","VPRDJFSP",215,0)
 Q:'$L(ERRMSG)
"RTN","VPRDJFSP",216,0)
 S SYNCERR("uid")="urn:va:syncError:"_VPRFSYS_":"_DFN_":"_DOMAIN
"RTN","VPRDJFSP",217,0)
 S SYNCERR("collection")=DOMAIN
"RTN","VPRDJFSP",218,0)
 S SYNCERR("error")=ERRMSG
"RTN","VPRDJFSP",219,0)
 D ENCODE^VPRJSON("SYNCERR","ERRJSON","ERR") I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","VPRDJFSP",220,0)
 S COUNT=$O(^TMP("VPRERR",$J,""),-1)+1
"RTN","VPRDJFSP",221,0)
 ;D POST^VPRDJFS(DFN,"syncError","error:"_VPRFZTSK_":1:1","",HMPSRV)
"RTN","VPRDJFSP",222,0)
 M ^TMP("VPRERR",$J,COUNT)=ERRJSON
"RTN","VPRDJFSP",223,0)
 Q
"RTN","VPRDJFSP",224,0)
 ;
"RTN","VPRDJFSP",225,0)
POSTERR(COUNT,DFN) ;
"RTN","VPRDJFSP",226,0)
 N CNT,NODE,HMPSRV
"RTN","VPRDJFSP",227,0)
 S HMPSRV=$P(VPRBATCH,"~",2)
"RTN","VPRDJFSP",228,0)
 S CNT=0 F  S CNT=$O(^TMP("VPRERR",$J,CNT)) Q:CNT'>0  D
"RTN","VPRDJFSP",229,0)
 .S NODE=$G(^TMP("VPRERR",$J,CNT,1))
"RTN","VPRDJFSP",230,0)
 .S ^XTMP(VPRBATCH,VPRFZTSK,"error",CNT,1)=NODE
"RTN","VPRDJFSP",231,0)
 .I CNT>1 S ^XTMP(VPRBATCH,VPRFZTSK,"error",CNT,.3)=","
"RTN","VPRDJFSP",232,0)
 D POST^VPRDJFS(DFN,"syncError","error:"_VPRFZTSK_":"_COUNT_":"_COUNT,"",HMPSRV)
"RTN","VPRDJFSP",233,0)
 Q
"RTN","VPRDJFSP",234,0)
 ;
"RTN","VPRDJFSP",235,0)
INITDONE(VPRBATCH) ; Return 1 if all domains are done
"RTN","VPRDJFSP",236,0)
 N X,DONE
"RTN","VPRDJFSP",237,0)
 S X="",DONE=1
"RTN","VPRDJFSP",238,0)
 F  S X=$O(^XTMP(VPRBATCH,0,"status",X)) Q:'$L(X)  I '^(X) S DONE=0
"RTN","VPRDJFSP",239,0)
 Q DONE
"RTN","VPRDJFSP",240,0)
 ;
"RTN","VPRDJFSP",241,0)
SETPAT(DFN,SRV,NEWSUB) ; Add patient to 560 if not there
"RTN","VPRDJFSP",242,0)
 N ERR,FDA,IEN,IENROOT
"RTN","VPRDJFSP",243,0)
 S IEN=$O(^VPR(560,"B",SRV,0))
"RTN","VPRDJFSP",244,0)
 I 'IEN D SETERR^VPRDJFS("Unable to find server: "_SRV) QUIT
"RTN","VPRDJFSP",245,0)
 ; for operational, only start sync if not yet subscribed
"RTN","VPRDJFSP",246,0)
 I DFN="OPD" D  QUIT
"RTN","VPRDJFSP",247,0)
 . L +^VPR(560,IEN):5 E  D SETERR^VPRDJFS("Unable to lock server: "_SVR) Q
"RTN","VPRDJFSP",248,0)
 . ; status is empty string (not 0) when unsubscribed
"RTN","VPRDJFSP",249,0)
 . S NEWSUB='$L($P($G(^VPR(560,IEN,0)),U,3))
"RTN","VPRDJFSP",250,0)
 . I NEWSUB D UPDOPD(IEN,0) ; set to subscribed
"RTN","VPRDJFSP",251,0)
 . L -^VPR(560,IEN)
"RTN","VPRDJFSP",252,0)
 ;
"RTN","VPRDJFSP",253,0)
 ; for patient, check subscribed and get the PID
"RTN","VPRDJFSP",254,0)
 L +^VPR(560,IEN,1,DFN):5 E  D SETERR^VPRDJFS("Unable to lock patient: "_DFN) Q
"RTN","VPRDJFSP",255,0)
 S NEWSUB='$D(^VPR(560,IEN,1,DFN))
"RTN","VPRDJFSP",256,0)
 I NEWSUB D ADDPAT(DFN,IEN)
"RTN","VPRDJFSP",257,0)
 L -^VPR(560,IEN,1,DFN)
"RTN","VPRDJFSP",258,0)
 Q
"RTN","VPRDJFSP",259,0)
 ;
"RTN","VPRDJFSP",260,0)
UPDOPD(SRV,STS) ; Update status of operational synch
"RTN","VPRDJFSP",261,0)
 N FDA,ERR,DIERR
"RTN","VPRDJFSP",262,0)
 S FDA(560,SRV_",",.03)=STS
"RTN","VPRDJFSP",263,0)
 D FILE^DIE("","FDA","ERR")
"RTN","VPRDJFSP",264,0)
 I $D(ERR) D SETERR^VPRDJFS("Error changing operational status")
"RTN","VPRDJFSP",265,0)
 D CLEAN^DILF
"RTN","VPRDJFSP",266,0)
 Q
"RTN","VPRDJFSP",267,0)
ADDPAT(DFN,SRV) ; Add a patient as subscribed for server
"RTN","VPRDJFSP",268,0)
 N FDA,FDAIEN,DIERR,ERR,IENS
"RTN","VPRDJFSP",269,0)
 S IENS="?+"_DFN_","_SRV_","
"RTN","VPRDJFSP",270,0)
 S FDAIEN(DFN)=DFN  ; help DINUM to work
"RTN","VPRDJFSP",271,0)
 S FDA(560.01,IENS,.01)=DFN
"RTN","VPRDJFSP",272,0)
 S FDA(560.01,IENS,2)=0
"RTN","VPRDJFSP",273,0)
 S FDA(560.01,IENS,3)=$$NOW^XLFDT
"RTN","VPRDJFSP",274,0)
 D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","VPRDJFSP",275,0)
 I $D(ERR) D SETERR^VPRDJFS("Error adding patient subscription")
"RTN","VPRDJFSP",276,0)
 D CLEAN^DILF
"RTN","VPRDJFSP",277,0)
 Q
"RTN","VPRDJFSP",278,0)
UPDSTS(DFN,SRVNM,STS) ; Update the sync status
"RTN","VPRDJFSP",279,0)
 N SRV
"RTN","VPRDJFSP",280,0)
 S SRV=$O(^VPR(560,"B",SRVNM,0)) I 'SRV D SETERR^VPRDJFS("Missing Server") Q
"RTN","VPRDJFSP",281,0)
 I DFN="OPD" D UPDOPD(SRV,STS) QUIT
"RTN","VPRDJFSP",282,0)
 ;
"RTN","VPRDJFSP",283,0)
 S FDA(560.01,DFN_","_SRV_",",2)=STS
"RTN","VPRDJFSP",284,0)
 S FDA(560.01,DFN_","_SRV_",",3)=$$NOW^XLFDT
"RTN","VPRDJFSP",285,0)
 D FILE^DIE("","FDA","ERR")
"RTN","VPRDJFSP",286,0)
 I $D(ERR) D SETERR^VPRDJFS("Error updating patient sync status")
"RTN","VPRDJFSP",287,0)
 D CLEAN^DILF
"RTN","VPRDJFSP",288,0)
 Q
"RTN","VPRDJFSP",289,0)
UPDPAT(DFN,SRV,STS) ; DEPRECATED?
"RTN","VPRDJFSP",290,0)
 N ERR,FDA,IEN
"RTN","VPRDJFSP",291,0)
 S IEN=$O(^VPR(560,"B",SRV,"")) I +IEN'>0 Q
"RTN","VPRDJFSP",292,0)
 I DFN="OPD" D
"RTN","VPRDJFSP",293,0)
 . S FDA(560,"?"_IEN_",",.01)=SRV
"RTN","VPRDJFSP",294,0)
 . S FDA(560,"?"_IEN_",",.03)=STS
"RTN","VPRDJFSP",295,0)
 I +DFN>0 D
"RTN","VPRDJFSP",296,0)
 .S FDA(560.01,"?"_DFN_","_IEN_",",.01)=DFN
"RTN","VPRDJFSP",297,0)
 .S FDA(560.01,"?"_DFN_","_IEN_",",2)=STS
"RTN","VPRDJFSP",298,0)
 D UPDATE^DIE("","FDA","","ERR")
"RTN","VPRDJFSP",299,0)
 ;I $D(ERR) M ^AGP("error")=ERR
"RTN","VPRDJFSP",300,0)
 Q
"RTN","VPRDJFSP",301,0)
TOTAL(DOMAIN) ;
"RTN","VPRDJFSP",302,0)
 N I,X,SIZE
"RTN","VPRDJFSP",303,0)
 S SIZE=0
"RTN","VPRDJFSP",304,0)
 F I=1:1 S X=$T(OPDOMS+I^VPRDJFSD) Q:$P(X,";",3)="zzzzz"  D  Q:SIZE
"RTN","VPRDJFSP",305,0)
 . I $P(X,";",3)'=DOMAIN Q
"RTN","VPRDJFSP",306,0)
 . S ROOT=$P(X,";",4)
"RTN","VPRDJFSP",307,0)
 . I ROOT="^VPR(560.11)" S SIZE=$G(^VPR(560.11,"ACNT",DOMAIN)) Q
"RTN","VPRDJFSP",308,0)
 . I $L(ROOT) S SIZE=$P(@ROOT@(0),U,4)
"RTN","VPRDJFSP",309,0)
 Q $S(SIZE:SIZE,1:9999)
"RTN","VPRDJFSP",310,0)
 ;
"RTN","VPRDJFSP",311,0)
TESTPUT ;
"RTN","VPRDJFSP",312,0)
 ;;{"server":"hmpTest","localId":"229"}
"RTN","VPRDJFSP",313,0)
 ;;{"server":"hmpTest","localId":"229","domains":["allergy","lab","med"]}
"RTN","VPRDJFSP",314,0)
 S U="^"
"RTN","VPRDJFSP",315,0)
 D KILL^VPRDJFS
"RTN","VPRDJFSP",316,0)
 N JSON S JSON=$P($T(TESTPUT+1),";;",2,99)
"RTN","VPRDJFSP",317,0)
 W !,$$PUTSUB("",.JSON)
"RTN","VPRDJFSP",318,0)
 Q
"RTN","VPRDJFSP",319,0)
TESTDQ ;
"RTN","VPRDJFSP",320,0)
 D KILL^VPRDJFS
"RTN","VPRDJFSP",321,0)
 N VPRBATCH,VPRFDFN,VPRFDOM,ZTSK
"RTN","VPRDJFSP",322,0)
 S VPRBATCH="VPRFX~hmpTest~229"
"RTN","VPRDJFSP",323,0)
 S VPRFDFN=229
"RTN","VPRDJFSP",324,0)
 S VPRFDOM(1)="allergy",VPRFDOM(2)="lab",VPRFDOM(3)="med"
"RTN","VPRDJFSP",325,0)
 D NEWXTMP^VPRDJFS(VPRBATCH,1,"VPR Test Patient Extract")
"RTN","VPRDJFSP",326,0)
 N I S I=0 F  S I=$O(VPRFDOM(I)) Q:'I  D SETDOM("status",VPRFDOM(I),0)
"RTN","VPRDJFSP",327,0)
 S ZTSK=99999,ZTQUEUED=1
"RTN","VPRDJFSP",328,0)
 K ^XTMP(VPRBATCH)
"RTN","VPRDJFSP",329,0)
 S ^XTMP(VPRBATCH,0,"task",ZTSK)=""
"RTN","VPRDJFSP",330,0)
 D DQINIT
"RTN","VPRDJFSP",331,0)
 Q
"RTN","VPRDJFSP",332,0)
 ;
"RTN","VPRDJFSP",333,0)
TESTFRSH(SERVER,LASTUPD) ;
"RTN","VPRDJFSP",334,0)
 N I,C,LI,FILTER,RESULT
"RTN","VPRDJFSP",335,0)
 S FILTER("command")="getPtUpdates"
"RTN","VPRDJFSP",336,0)
 S FILTER("lastUpdate")=LASTUPD
"RTN","VPRDJFSP",337,0)
 S FILTER("server")=SERVER
"RTN","VPRDJFSP",338,0)
 D API^VPRDJFS(.RESULT,.FILTER)
"RTN","VPRDJFSP",339,0)
 S I=""
"RTN","VPRDJFSP",340,0)
 F  S I=$O(^TMP("VPRF",$J,I)) Q:I=""  D
"RTN","VPRDJFSP",341,0)
 .W $G(^TMP("VPRF",$J,I))
"RTN","VPRDJFSP",342,0)
 .S LI=I
"RTN","VPRDJFSP",343,0)
 .S C="" F  S C=$O(^TMP("VPRF",$J,I,C)) Q:C=""  W ^TMP("VPRF",$J,I,C)
"RTN","VPRDJFSP",344,0)
 Q
"RTN","VPRDJFSP",345,0)
 ;
"RTN","VPRDJFSP",346,0)
TESTOPD(VPRFADOM) ;
"RTN","VPRDJFSP",347,0)
 S VPRBATCH="VPRFX~test-1~OPD"
"RTN","VPRDJFSP",348,0)
 K ^XTMP(VPRBATCH)
"RTN","VPRDJFSP",349,0)
 S VPRFZTSK="123"
"RTN","VPRDJFSP",350,0)
 S ZTQUEUED=1
"RTN","VPRDJFSP",351,0)
 S ^XTMP(VPRBATCH,0,"task",VPRFZTSK)=0
"RTN","VPRDJFSP",352,0)
 D DOMOPD(VPRFADOM)
"RTN","VPRDJFSP",353,0)
 ;
"RTN","VPRDJFST")
0^88^B45475446
"RTN","VPRDJFST",1,0)
VPRDJFST ;SLC/KCM -- Tests for extract and freshness stream
"RTN","VPRDJFST",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJFST",3,0)
 ;
"RTN","VPRDJFST",4,0)
 ; Test Operational Synchronization
"RTN","VPRDJFST",5,0)
 ;
"RTN","VPRDJFST",6,0)
TESTOPD(NUM) ; Test operational data for server NUM
"RTN","VPRDJFST",7,0)
 Q:'NUM
"RTN","VPRDJFST",8,0)
 N SERVER
"RTN","VPRDJFST",9,0)
 S SERVER="Test-Server-"_NUM
"RTN","VPRDJFST",10,0)
 D RUNOPD(SERVER)
"RTN","VPRDJFST",11,0)
 Q
"RTN","VPRDJFST",12,0)
RUNOPD(SERVER) ; Test operational data
"RTN","VPRDJFST",13,0)
 K ^TMP("VPRF",$J)
"RTN","VPRDJFST",14,0)
 N LASTUP,COLLECT,DOMTOT,TOTAL,DONE,STRTERR
"RTN","VPRDJFST",15,0)
 S LASTUP=0,TOTAL=0,DONE=0
"RTN","VPRDJFST",16,0)
 D ADDSRVR(SERVER)
"RTN","VPRDJFST",17,0)
 D RSETSRV(SERVER)
"RTN","VPRDJFST",18,0)
 D OPDSTRT(SERVER) Q:$G(STRTERR)
"RTN","VPRDJFST",19,0)
 F  H 2 D GETUPDS(SERVER,.LASTUP) Q:DONE
"RTN","VPRDJFST",20,0)
 D GETUPDS(SERVER,.LASTUP) ; one last time to clear ^XTMP
"RTN","VPRDJFST",21,0)
 ; Write out the collection counts and domain totals.
"RTN","VPRDJFST",22,0)
 ; They should be the same unless 1 item, which may be just the wrapper.
"RTN","VPRDJFST",23,0)
 N NM
"RTN","VPRDJFST",24,0)
 W !!!,"Collection",?20,"Objects",?30,"Domain Totals",!
"RTN","VPRDJFST",25,0)
 S NM="" F  S NM=$O(COLLECT(NM)) Q:NM=""  D
"RTN","VPRDJFST",26,0)
 . W !,NM,?20,$J($G(COLLECT(NM)),7),?30,$J($G(COLLECT(NM,"total")),13)
"RTN","VPRDJFST",27,0)
 W !!,"Total Objects: ",TOTAL
"RTN","VPRDJFST",28,0)
 K ^TMP("VPRF",$J)
"RTN","VPRDJFST",29,0)
 Q
"RTN","VPRDJFST",30,0)
ADDSRVR(SERVER) ; add a SERVER if not there
"RTN","VPRDJFST",31,0)
 Q:$D(^VPR(560,"B",SERVER))
"RTN","VPRDJFST",32,0)
 N FDA,FDAIEN,DIERR,ERR
"RTN","VPRDJFST",33,0)
 S FDA(560,"+1,",.01)=SERVER
"RTN","VPRDJFST",34,0)
 D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","VPRDJFST",35,0)
 I $D(DIERR) W !,"Error saving server"
"RTN","VPRDJFST",36,0)
 D CLEAN^DILF
"RTN","VPRDJFST",37,0)
 Q
"RTN","VPRDJFST",38,0)
RSETSRV(SERVER) ; Reset subscriptions for named SERVER
"RTN","VPRDJFST",39,0)
 N ARGS,RSP
"RTN","VPRDJFST",40,0)
 S ARGS("command")="resetAllSubscriptions"
"RTN","VPRDJFST",41,0)
 S ARGS("server")=SERVER
"RTN","VPRDJFST",42,0)
 D API^VPRDJFS(.RSP,.ARGS)
"RTN","VPRDJFST",43,0)
 W !,"Reset",?10,@RSP@(1) ;{"apiVersion":"1.0","removed":"true"}
"RTN","VPRDJFST",44,0)
 Q
"RTN","VPRDJFST",45,0)
OPDSTRT(SERVER) ; Start operational data extracts for SERVER
"RTN","VPRDJFST",46,0)
 N ARGS,RSP
"RTN","VPRDJFST",47,0)
 S ARGS("command")="startOperationalDataExtract"
"RTN","VPRDJFST",48,0)
 S ARGS("server")=SERVER
"RTN","VPRDJFST",49,0)
 D API^VPRDJFS(.RSP,.ARGS) ;SHOULD THIS RETURN TASK #?
"RTN","VPRDJFST",50,0)
 W !,"Start",?10,@RSP@(1) ;{"apiVersion":"1.0","location":"/vpr/subscription/Test-Server-1/patient/"}
"RTN","VPRDJFST",51,0)
 I @RSP@(1)["""error"":" S STRTERR=1
"RTN","VPRDJFST",52,0)
 Q
"RTN","VPRDJFST",53,0)
GETUPDS(SERVER,LASTUP) ; Get updates for the named SERVER
"RTN","VPRDJFST",54,0)
 ; expects COLLECT,DOMTOT,TOTAL,DONE
"RTN","VPRDJFST",55,0)
 N ARGS,RSP,CNT
"RTN","VPRDJFST",56,0)
 S ARGS("command")="getPtUpdates"
"RTN","VPRDJFST",57,0)
 S ARGS("server")=SERVER
"RTN","VPRDJFST",58,0)
 S ARGS("lastUpdate")=LASTUP
"RTN","VPRDJFST",59,0)
 S ARGS("max")=1000
"RTN","VPRDJFST",60,0)
 D API^VPRDJFS(.RSP,.ARGS)
"RTN","VPRDJFST",61,0)
 S LASTUP=$$GETLUPD(),CNT=$$CNTOBJS(),TOTAL=TOTAL+CNT
"RTN","VPRDJFST",62,0)
 W !,^TMP("VPRF",$J,.5)
"RTN","VPRDJFST",63,0)
 W !,"Fetch",?10,"Object Count: ",$J(CNT,7),"   Last Update: ",LASTUP
"RTN","VPRDJFST",64,0)
 D CNTCOLL(.COLLECT,.DONE) ; count collections
"RTN","VPRDJFST",65,0)
 D VALOBJS
"RTN","VPRDJFST",66,0)
 ;D SHOWHDRS
"RTN","VPRDJFST",67,0)
 ;D SHOWDATA("pt-select^displaygroup^")
"RTN","VPRDJFST",68,0)
 Q
"RTN","VPRDJFST",69,0)
CNTCOLL(COLL,DONE) ; add collection counts
"RTN","VPRDJFST",70,0)
 N I,NM
"RTN","VPRDJFST",71,0)
 S I=.9 F  S I=$O(^TMP("VPRF",$J,I)) Q:'I  D
"RTN","VPRDJFST",72,0)
 . S NM=$P($P($G(^TMP("VPRF",$J,I,.3)),"""collection"":""",2),"""")
"RTN","VPRDJFST",73,0)
 . Q:'$L(NM)
"RTN","VPRDJFST",74,0)
 . I NM="syncStatus" D DOMTOT(.COLL,I) S DONE=1 Q
"RTN","VPRDJFST",75,0)
 . S COLL(NM)=$G(COLL(NM))+1
"RTN","VPRDJFST",76,0)
 Q
"RTN","VPRDJFST",77,0)
DOMTOT(COLL,I) ; add domain totals to collection array
"RTN","VPRDJFST",78,0)
 N JSON,OBJ,ERR
"RTN","VPRDJFST",79,0)
 M JSON=^TMP("VPRF",$J,I)
"RTN","VPRDJFST",80,0)
 K JSON(.3)
"RTN","VPRDJFST",81,0)
 D DECODE^VPRJSON("JSON","OBJ","ERR")
"RTN","VPRDJFST",82,0)
 I $D(ERR) W !,"ERROR:  decoding syncStatus object"
"RTN","VPRDJFST",83,0)
 S NM="" F  S NM=$O(OBJ("domainTotals",NM)) Q:NM=""  S COLL(NM,"total")=OBJ("domainTotals",NM)
"RTN","VPRDJFST",84,0)
 Q
"RTN","VPRDJFST",85,0)
 ;
"RTN","VPRDJFST",86,0)
 ; Test Patient Syncronization
"RTN","VPRDJFST",87,0)
 ;
"RTN","VPRDJFST",88,0)
TESTPT(NUM) ; Test operational data for server NUM
"RTN","VPRDJFST",89,0)
 Q:'NUM
"RTN","VPRDJFST",90,0)
 N SERVER
"RTN","VPRDJFST",91,0)
 S SERVER="Test-Server-"_NUM
"RTN","VPRDJFST",92,0)
 D RUNPT(SERVER)
"RTN","VPRDJFST",93,0)
 Q
"RTN","VPRDJFST",94,0)
RUNPT(SERVER) ; Test operational data
"RTN","VPRDJFST",95,0)
 K ^TMP("VPRF",$J)
"RTN","VPRDJFST",96,0)
 N LASTUPD,COLLECT,DOMTOT,TOTAL,TOTPTS,DONEPTS,START
"RTN","VPRDJFST",97,0)
 S LASTUPD=0,TOTPTS=0,DONEPTS=0,START=$P($H,",",2)
"RTN","VPRDJFST",98,0)
 D ADDSRVR(SERVER)
"RTN","VPRDJFST",99,0)
 D RSETSRV(SERVER)
"RTN","VPRDJFST",100,0)
 D ADDPTS(SERVER,.TOTPTS)
"RTN","VPRDJFST",101,0)
 F  H 2 D LOADUPD(SERVER,.LASTUPD,.DONEPTS,.TOTPTS) Q:DONEPTS'<TOTPTS
"RTN","VPRDJFST",102,0)
 D LOADUPD(SERVER,.LASTUPD,.DONEPTS,.TOTPTS) ; one moreto clear ^XTMP
"RTN","VPRDJFST",103,0)
 W !,"Elapsed Seconds: ",$P($H,",",2)-START
"RTN","VPRDJFST",104,0)
 Q
"RTN","VPRDJFST",105,0)
ADDPTS(SERVER,TOTPTS) ; Add patients for synchronization
"RTN","VPRDJFST",106,0)
 F I=1:1 S X=$P($T(PATIENTS+I),";;",2,999) Q:X="zzzzz"  D
"RTN","VPRDJFST",107,0)
 . N ARGS,RSP
"RTN","VPRDJFST",108,0)
 . S ARGS("command")="putPtSubscription"
"RTN","VPRDJFST",109,0)
 . S ARGS("server")=SERVER
"RTN","VPRDJFST",110,0)
 . S ARGS("localId")=+X
"RTN","VPRDJFST",111,0)
 . D API^VPRDJFS(.RSP,.ARGS)
"RTN","VPRDJFST",112,0)
 . W !,$S(@RSP@(1)["""error"":":"ERROR",1:"Start"),?10,@RSP@(1)
"RTN","VPRDJFST",113,0)
 . S TOTPTS=TOTPTS+1
"RTN","VPRDJFST",114,0)
 Q
"RTN","VPRDJFST",115,0)
LOADUPD(SERVER,LASTUPD,DONEPTS,TOTPTS) ; Load updates
"RTN","VPRDJFST",116,0)
 ; expects LASTUPD
"RTN","VPRDJFST",117,0)
 N RSP,ARGS,ERR,CNT,LNODE
"RTN","VPRDJFST",118,0)
 S ARGS("command")="getPtUpdates"
"RTN","VPRDJFST",119,0)
 S ARGS("server")=SERVER
"RTN","VPRDJFST",120,0)
 S ARGS("lastUpdate")=LASTUPD
"RTN","VPRDJFST",121,0)
 S ARGS("max")=1000
"RTN","VPRDJFST",122,0)
 D API^VPRDJFS(.RSP,.ARGS)
"RTN","VPRDJFST",123,0)
 S DONEPTS=DONEPTS+$$SCAN4STS
"RTN","VPRDJFST",124,0)
 S LASTUPD=$$GETLUPD
"RTN","VPRDJFST",125,0)
 S CNT=$$CNTOBJS
"RTN","VPRDJFST",126,0)
 D VALOBJS
"RTN","VPRDJFST",127,0)
 W !,^TMP("VPRF",$J,.5)
"RTN","VPRDJFST",128,0)
 W !,"lastUpdate: ",LASTUPD,"  items: ",CNT,?50,"loaded: ",DONEPTS_"/"_TOTPTS Q
"RTN","VPRDJFST",129,0)
 ;
"RTN","VPRDJFST",130,0)
 ; Common functions
"RTN","VPRDJFST",131,0)
 ;
"RTN","VPRDJFST",132,0)
SCAN4STS() ; Scan headers for syncDone objects
"RTN","VPRDJFST",133,0)
 N I,STSCNT
"RTN","VPRDJFST",134,0)
 S STSCNT=0,I=0 F  S I=$O(^TMP("VPRF",$J,I)) Q:'I  D
"RTN","VPRDJFST",135,0)
 . I $G(^TMP("VPRF",$J,I,.3))["syncStatus" S STSCNT=STSCNT+1
"RTN","VPRDJFST",136,0)
 Q STSCNT
"RTN","VPRDJFST",137,0)
 ;
"RTN","VPRDJFST",138,0)
GETLUPD() ; Return last update value
"RTN","VPRDJFST",139,0)
 N X
"RTN","VPRDJFST",140,0)
 S X=^TMP("VPRF",$J,.5),X=$P(X,"""lastUpdate"":""",2),X=$P(X,""",")
"RTN","VPRDJFST",141,0)
 Q X
"RTN","VPRDJFST",142,0)
 ;
"RTN","VPRDJFST",143,0)
SHOWHDRS ; Show object header info
"RTN","VPRDJFST",144,0)
 N I,X
"RTN","VPRDJFST",145,0)
 S I=0 F  S I=$O(^TMP("VPRF",$J,I)) Q:'I  D
"RTN","VPRDJFST",146,0)
 . S X=$G(^TMP("VPRF",$J,I,.3))
"RTN","VPRDJFST",147,0)
 . Q:'$L(X)
"RTN","VPRDJFST",148,0)
 . W !,"Hdr: ",X
"RTN","VPRDJFST",149,0)
 Q
"RTN","VPRDJFST",150,0)
SHOWDATA(COLL) ; Show the JSON objects being returned
"RTN","VPRDJFST",151,0)
 N I,X
"RTN","VPRDJFST",152,0)
 S I=.5 F  S I=$O(^TMP("VPRF",$J,I)) Q:'I  D
"RTN","VPRDJFST",153,0)
 . S X=$G(^TMP("VPRF",$J,I,.3))
"RTN","VPRDJFST",154,0)
 . S X=$P($P(X,"collection"":""",2),"""")
"RTN","VPRDJFST",155,0)
 . Q:'$L(X)  Q:'(COLL[X)
"RTN","VPRDJFST",156,0)
 . W !,"Hdr:",$G(^TMP("VPRF",$J,I,.3))
"RTN","VPRDJFST",157,0)
 . W !,"Dta:",$G(^TMP("VPRF",$J,I,1))
"RTN","VPRDJFST",158,0)
 Q
"RTN","VPRDJFST",159,0)
VALOBJS ; Validate objects
"RTN","VPRDJFST",160,0)
 N I,HDR
"RTN","VPRDJFST",161,0)
 S I=.5 F  S I=$O(^TMP("VPRF",$J,I)) Q:'I  D
"RTN","VPRDJFST",162,0)
 . S HDR=$G(^TMP("VPRF",$J,I,.3))
"RTN","VPRDJFST",163,0)
 . Q:'$L(HDR)
"RTN","VPRDJFST",164,0)
 . ;W !,"Hdr: ",HDR
"RTN","VPRDJFST",165,0)
 . N OBJ,JSON,LAST,ERROR
"RTN","VPRDJFST",166,0)
 . M JSON=^TMP("VPRF",$J,I)
"RTN","VPRDJFST",167,0)
 . I $E(JSON(.3))="}" S JSON(.3)=$E(JSON(.3),3,$L(JSON(.3)))
"RTN","VPRDJFST",168,0)
 . S LAST=$O(JSON(""),-1),LAST=LAST+1 S JSON(LAST)="}"
"RTN","VPRDJFST",169,0)
 . D DECODE^VPRJSON("JSON","OBJ","ERROR")
"RTN","VPRDJFST",170,0)
 . ;W:'$D(ERROR) " ok"
"RTN","VPRDJFST",171,0)
 . I $D(ERROR) W !,"  >>> ERROR:  ",HDR
"RTN","VPRDJFST",172,0)
 Q
"RTN","VPRDJFST",173,0)
CNTOBJS() ; Return count of objects returned
"RTN","VPRDJFST",174,0)
 N I,C
"RTN","VPRDJFST",175,0)
 S C=0
"RTN","VPRDJFST",176,0)
 S I=.9 ; skip .5 header node
"RTN","VPRDJFST",177,0)
 F  S I=$O(^TMP("VPRF",$J,I)) Q:'I  I $L($G(^TMP("VPRF",$J,I,1))) S C=C+1
"RTN","VPRDJFST",178,0)
 Q C
"RTN","VPRDJFST",179,0)
 ;
"RTN","VPRDJFST",180,0)
TOTALS ;
"RTN","VPRDJFST",181,0)
 N P,T
"RTN","VPRDJFST",182,0)
 S T=0
"RTN","VPRDJFST",183,0)
 S P=0 F  S P=$O(^XTMP("VPRFP",P)) Q:'P  S T=T+^XTMP("VPRFP",P,"hmpTest","total")
"RTN","VPRDJFST",184,0)
 W !,"TOTAL: ",T
"RTN","VPRDJFST",185,0)
 Q
"RTN","VPRDJFST",186,0)
GETFEW ;
"RTN","VPRDJFST",187,0)
 S ARGS("command")="getPtUpdates"
"RTN","VPRDJFST",188,0)
 S ARGS("server")="hmpTest"
"RTN","VPRDJFST",189,0)
 S ARGS("lastUpdate")="3140115-251"
"RTN","VPRDJFST",190,0)
 S ARGS("max")=10
"RTN","VPRDJFST",191,0)
 D API^VPRDJFS(.RSP,.ARGS)
"RTN","VPRDJFST",192,0)
 Q
"RTN","VPRDJFST",193,0)
PATIENTS ; list of patients
"RTN","VPRDJFST",194,0)
 ;;25     AVIVAPATIENT,TWENTYTHREE
"RTN","VPRDJFST",195,0)
 ;;100848 AVIVAPATIENT,EIGHT
"RTN","VPRDJFST",196,0)
 ;;100851 AVIVAPATIENT,ELEVEN
"RTN","VPRDJFST",197,0)
 ;;100846 AVIVAPATIENT,FIVE
"RTN","VPRDJFST",198,0)
 ;;100845 AVIVAPATIENT,FOUR
"RTN","VPRDJFST",199,0)
 ;;100849 AVIVAPATIENT,NINE
"RTN","VPRDJFST",200,0)
 ;;100842 AVIVAPATIENT,ONE
"RTN","VPRDJFST",201,0)
 ;;100841 AVIVAPATIENT,SEVEN
"RTN","VPRDJFST",202,0)
 ;;100847 AVIVAPATIENT,SIX
"RTN","VPRDJFST",203,0)
 ;;100850 AVIVAPATIENT,TEN
"RTN","VPRDJFST",204,0)
 ;;8      AVIVAPATIENT,THIRTY
"RTN","VPRDJFST",205,0)
 ;;100844 AVIVAPATIENT,THREE
"RTN","VPRDJFST",206,0)
 ;;100852 AVIVAPATIENT,TWELVE
"RTN","VPRDJFST",207,0)
 ;;3      AVIVAPATIENT,TWENTYEIGHT
"RTN","VPRDJFST",208,0)
 ;;231    AVIVAPATIENT,TWENTYFIVE
"RTN","VPRDJFST",209,0)
 ;;229    AVIVAPATIENT,TWENTYFOUR
"RTN","VPRDJFST",210,0)
 ;;217    AVIVAPATIENT,TWENTYNINE
"RTN","VPRDJFST",211,0)
 ;;237    AVIVAPATIENT,TWENTYONE
"RTN","VPRDJFST",212,0)
 ;;253    AVIVAPATIENT,TWENTYSEVEN
"RTN","VPRDJFST",213,0)
 ;;418    AVIVAPATIENT,TWENTYSIX
"RTN","VPRDJFST",214,0)
 ;;205    AVIVAPATIENT,TWENTYTWO
"RTN","VPRDJFST",215,0)
 ;;100843 AVIVAPATIENT,TWO
"RTN","VPRDJFST",216,0)
 ;;zzzzz
"RTN","VPRDJX")
0^52^B36169855
"RTN","VPRDJX",1,0)
VPRDJX ;SLC/MKB -- New data update ; 11/5/13 7:02pm
"RTN","VPRDJX",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRDJX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRDJX",4,0)
 ;
"RTN","VPRDJX",5,0)
 ; External References          DBIA#
"RTN","VPRDJX",6,0)
 ; -------------------          -----
"RTN","VPRDJX",7,0)
 ; ^DPT                         10035
"RTN","VPRDJX",8,0)
 ; MPIF001                       2701
"RTN","VPRDJX",9,0)
 ; XLFSTR                       10104
"RTN","VPRDJX",10,0)
 ;
"RTN","VPRDJX",11,0)
EN(LAST,MAX) ; -- get data from ^XTMP("VPR-<date>",n)
"RTN","VPRDJX",12,0)
 ; Expects VPR=$NA(^TMP("VPR",$J))
"RTN","VPRDJX",13,0)
 ;
"RTN","VPRDJX",14,0)
 N SYS,X,Y,VPRTOTL,DFN,PATCNT,ICN,DOMCNT,TYPE,RTN,VPRLASTI,VPRID,DATA,DELETE,UID,CNT,TSTART,TSTOP
"RTN","VPRDJX",15,0)
 S TSTART=$$NOW^XLFDT()
"RTN","VPRDJX",16,0)
 S LAST=$G(LAST),SYS=$G(FILTER("systemID")) Q:SYS=""
"RTN","VPRDJX",17,0)
 S MAX=$G(MAX,999)
"RTN","VPRDJX",18,0)
 D GETLIST(LAST,SYS,MAX)
"RTN","VPRDJX",19,0)
 ;
"RTN","VPRDJX",20,0)
 S (DFN,PATCNT,VPRTOTL)=0 F  S DFN=$O(^TMP("VPRX",$J,DFN)) Q:DFN<1  D
"RTN","VPRDJX",21,0)
 . K ^TMP($J,"VPR ERROR")
"RTN","VPRDJX",22,0)
 . S PATCNT=PATCNT+1,ICN=+$$GETICN^MPIF001(DFN),ERRPAT=DFN
"RTN","VPRDJX",23,0)
 . S DOMCNT=0 K DATA,DELETE
"RTN","VPRDJX",24,0)
 . S TYPE="" F  S TYPE=$O(^TMP("VPRX",$J,DFN,TYPE)) Q:TYPE=""  D
"RTN","VPRDJX",25,0)
 .. S RTN=$$TAG^VPRDJ(TYPE)_"^VPRDJ0" Q:'$L($T(@RTN))
"RTN","VPRDJX",26,0)
 .. S DOMCNT=DOMCNT+1
"RTN","VPRDJX",27,0)
 .. ;
"RTN","VPRDJX",28,0)
 .. N VPR S VPR=$NA(^TMP("VPR",$J,PATCNT,DOMCNT)),VPRI=0,VPRID=""
"RTN","VPRDJX",29,0)
 .. F  S VPRID=$O(^TMP("VPRX",$J,DFN,TYPE,VPRID)) Q:VPRID=""  S X=$G(^(VPRID)) D
"RTN","VPRDJX",30,0)
 ... N $ES,$ET,ERRPAT,ERRMSG
"RTN","VPRDJX",31,0)
 ... S $ET="D ERRHDLR^VPRDERRH",ERRPAT=DFN
"RTN","VPRDJX",32,0)
 ... S ERRMSG="A problem occurred when trying to refresh patient data from an API."
"RTN","VPRDJX",33,0)
 ... ;
"RTN","VPRDJX",34,0)
 ... I X="@" D DELETE(TYPE,DFN,VPRID) Q
"RTN","VPRDJX",35,0)
 ... S VPRLASTI=VPRI D @RTN   ;creates @VPR@(VPRI+1)
"RTN","VPRDJX",36,0)
 ... ;
"RTN","VPRDJX",37,0)
 ... ; if no new item, assume the record has been deleted
"RTN","VPRDJX",38,0)
 ... I VPRI'>VPRLASTI D DELETE(TYPE,DFN,VPRID) Q
"RTN","VPRDJX",39,0)
 ... S VPRTOTL=VPRTOTL+1,DATA=1
"RTN","VPRDJX",40,0)
 .. I 'VPRI S DOMCNT=DOMCNT-1 Q   ;no data, or error
"RTN","VPRDJX",41,0)
 .. ;
"RTN","VPRDJX",42,0)
 .. S:DOMCNT>1 @VPR@(.3)=","
"RTN","VPRDJX",43,0)
 .. S @VPR@(.5)="{""domainName"":"""_TYPE_""",""total"":"_VPRI_",""items"":["
"RTN","VPRDJX",44,0)
 .. S VPRI=VPRI+1,@VPR@(VPRI)="]}"
"RTN","VPRDJX",45,0)
 . ;
"RTN","VPRDJX",46,0)
A . ; VPR=$NA(^TMP("VPR",$J)) again
"RTN","VPRDJX",47,0)
 . S:PATCNT>1 @VPR@(PATCNT,.3)=","
"RTN","VPRDJX",48,0)
 . S @VPR@(PATCNT,.5)="{""patientDfn"":"_DFN_",""patientIcn"":"""_ICN_""""
"RTN","VPRDJX",49,0)
 . I DOMCNT D
"RTN","VPRDJX",50,0)
 .. S @VPR@(PATCNT,.6)=",""domains"":["
"RTN","VPRDJX",51,0)
 .. S DOMCNT=DOMCNT+1,@VPR@(PATCNT,DOMCNT)="]"
"RTN","VPRDJX",52,0)
 . ;
"RTN","VPRDJX",53,0)
 . I $D(DELETE) D
"RTN","VPRDJX",54,0)
 .. S DOMCNT=DOMCNT+1,@VPR@(PATCNT,DOMCNT,.5)=",""deletes"":["
"RTN","VPRDJX",55,0)
 .. S VPRI=0,UID="" F  S UID=$O(DELETE(UID)) Q:UID=""  D
"RTN","VPRDJX",56,0)
 ... S TYPE=DELETE(UID),VPRI=VPRI+1
"RTN","VPRDJX",57,0)
 ... S:VPRI>1 @VPR@(PATCNT,DOMCNT,VPRI,.3)=","
"RTN","VPRDJX",58,0)
 ... S @VPR@(PATCNT,DOMCNT,VPRI,1)="{""uid"":"""_UID_""",""domainName"":"""_TYPE_"""}"
"RTN","VPRDJX",59,0)
 .. S VPRI=VPRI+1,@VPR@(PATCNT,DOMCNT,VPRI)="]"
"RTN","VPRDJX",60,0)
 . ;
"RTN","VPRDJX",61,0)
 . I $D(^TMP($J,"VPR ERROR")) D
"RTN","VPRDJX",62,0)
 .. N ERROR D BUILDERR^VPRDJ(.ERROR)
"RTN","VPRDJX",63,0)
 .. S DOMCNT=DOMCNT+1,@VPR@(PATCNT,DOMCNT,.3)=","
"RTN","VPRDJX",64,0)
 .. M @VPR@(PATCNT,DOMCNT)=ERROR
"RTN","VPRDJX",65,0)
 .. K ^TMP($J,"VPR ERROR")
"RTN","VPRDJX",66,0)
 . ;
"RTN","VPRDJX",67,0)
 . S DOMCNT=DOMCNT+1,@VPR@(PATCNT,DOMCNT)="}"
"RTN","VPRDJX",68,0)
 ;
"RTN","VPRDJX",69,0)
 S Y=$G(^TMP("VPRX",$J,0)) S:Y="" Y=LAST
"RTN","VPRDJX",70,0)
 S T=$$NOW^XLFDT()
"RTN","VPRDJX",71,0)
 S @VPR@(.5)="{""apiVersion"":""1.01"",""data"":{""lastUpdate"":"""_Y_""",""startDateTime"":"""_TSTART_""",""totalPatients"":"_PATCNT
"RTN","VPRDJX",72,0)
 S:PATCNT @VPR@(.6)=",""patients"":[",PATCNT=PATCNT+1,@VPR@(PATCNT)="]"
"RTN","VPRDJX",73,0)
 ;
"RTN","VPRDJX",74,0)
B ;
"RTN","VPRDJX",75,0)
 I $D(^TMP("VPRX",$J,"OP")) D         ;operational data
"RTN","VPRDJX",76,0)
 . S (VPRTOTL,DOMCNT)=0,PATCNT=PATCNT+1 K DATA,DELETE
"RTN","VPRDJX",77,0)
 . S TYPE="" F  S TYPE=$O(^TMP("VPRX",$J,"OP",TYPE)) Q:TYPE=""  D
"RTN","VPRDJX",78,0)
 .. S RTN=$$TAG^VPREF(TYPE)_"^VPREF" Q:'$L($T(@RTN))
"RTN","VPRDJX",79,0)
 .. S DOMCNT=DOMCNT+1,DFN=""
"RTN","VPRDJX",80,0)
 .. ;
"RTN","VPRDJX",81,0)
 .. N VPR S VPR=$NA(^TMP("VPR",$J,PATCNT,DOMCNT)),VPRI=0,VPRID=""
"RTN","VPRDJX",82,0)
 .. F  S VPRID=$O(^TMP("VPRX",$J,"OP",TYPE,VPRID)) Q:VPRID=""  S X=$G(^(VPRID)) D
"RTN","VPRDJX",83,0)
 ... I X="@" D DELETE(TYPE,DFN,VPRID) Q
"RTN","VPRDJX",84,0)
 ... S VPRLASTI=VPRI D @RTN           ;creates @VPR@(VPRI+1)
"RTN","VPRDJX",85,0)
 ... ; if no new item, assume the record has been deleted
"RTN","VPRDJX",86,0)
 ... I VPRI'>VPRLASTI D DELETE(TYPE,DFN,VPRID) Q
"RTN","VPRDJX",87,0)
 ... S VPRTOTL=VPRTOTL+1,DATA=1
"RTN","VPRDJX",88,0)
 .. I 'VPRI S DOMCNT=DOMCNT-1 Q       ;no data, or error
"RTN","VPRDJX",89,0)
 .. ;
"RTN","VPRDJX",90,0)
 .. S:DOMCNT>1 @VPR@(.3)=","
"RTN","VPRDJX",91,0)
 .. S @VPR@(.5)="{""domainName"":"""_TYPE_""",""total"":"_VPRI_",""items"":["
"RTN","VPRDJX",92,0)
 .. S VPRI=VPRI+1,@VPR@(VPRI)="]}"
"RTN","VPRDJX",93,0)
 . ;
"RTN","VPRDJX",94,0)
C . ; VPR=$NA(^TMP("VPR",$J)) again
"RTN","VPRDJX",95,0)
 . I 'DOMCNT,'$D(DELETE) Q  ;no data, or error
"RTN","VPRDJX",96,0)
 . S @VPR@(PATCNT,.5)=",""operational"":{"
"RTN","VPRDJX",97,0)
 . I DOMCNT D
"RTN","VPRDJX",98,0)
 .. S @VPR@(PATCNT,.6)="""domains"":["
"RTN","VPRDJX",99,0)
 .. S DOMCNT=DOMCNT+1 S @VPR@(PATCNT,DOMCNT)="]"
"RTN","VPRDJX",100,0)
 . ;
"RTN","VPRDJX",101,0)
 . I $D(DELETE) D
"RTN","VPRDJX",102,0)
 .. S DOMCNT=DOMCNT+1 S:DOMCNT>1 @VPR@(PATCNT,DOMCNT,.3)=","
"RTN","VPRDJX",103,0)
 .. S @VPR@(PATCNT,DOMCNT,.5)="""deletes"":["
"RTN","VPRDJX",104,0)
 .. S VPRI=0,UID="" F  S UID=$O(DELETE(UID)) Q:UID=""  D
"RTN","VPRDJX",105,0)
 ... S TYPE=DELETE(UID),VPRI=VPRI+1
"RTN","VPRDJX",106,0)
 ... S:VPRI>1 @VPR@(PATCNT,DOMCNT,VPRI,.3)=","
"RTN","VPRDJX",107,0)
 ... S @VPR@(PATCNT,DOMCNT,VPRI,1)="{""uid"":"""_UID_""",""domainName"":"""_TYPE_"""}"
"RTN","VPRDJX",108,0)
 .. S VPRI=VPRI+1,@VPR@(PATCNT,DOMCNT,VPRI)="]"
"RTN","VPRDJX",109,0)
 . ;
"RTN","VPRDJX",110,0)
 . S DOMCNT=DOMCNT+1,@VPR@(PATCNT,DOMCNT)="}"
"RTN","VPRDJX",111,0)
 ; 
"RTN","VPRDJX",112,0)
 S TSTOP=$$NOW^XLFDT()
"RTN","VPRDJX",113,0)
 S PATCNT=PATCNT+1,@VPR@(PATCNT)=",""endDateTime"":"""_TSTOP_"""}}" ;close JSON
"RTN","VPRDJX",114,0)
 K ^TMP("VPRX",$J),^TMP("VPRTEXT",$J)
"RTN","VPRDJX",115,0)
 Q
"RTN","VPRDJX",116,0)
 ;
"RTN","VPRDJX",117,0)
DELETE(NAME,DFN,ID) ; -- set DELETE nodes
"RTN","VPRDJX",118,0)
 N UID
"RTN","VPRDJX",119,0)
 S UID=$$SETUID^VPRUTILS(NAME,DFN,ID)
"RTN","VPRDJX",120,0)
 S DELETE(UID)=NAME
"RTN","VPRDJX",121,0)
 Q
"RTN","VPRDJX",122,0)
 ;
"RTN","VPRDJX",123,0)
GETLIST(LAST,SYS,MAX) ; -- build list of updates for client
"RTN","VPRDJX",124,0)
 ; Returns ^TMP("VPRX",$J,0) = last DATE:SEQ included
"RTN","VPRDJX",125,0)
 ;         ^TMP("VPRX",$J,DFN,TYPE,ID)=ACT
"RTN","VPRDJX",126,0)
 N DATE,SEQ,DA,END,IDX,X0,DFN,TYPE,ID,ACT,D,N,CNT
"RTN","VPRDJX",127,0)
 K ^TMP("VPRX",$J)
"RTN","VPRDJX",128,0)
 S DATE=+LAST,SEQ=+$P(LAST,":",2),CNT=0
"RTN","VPRDJX",129,0)
 S DA=$$FIND^VPRPATS(SYS) Q:'DA
"RTN","VPRDJX",130,0)
 ;
"RTN","VPRDJX",131,0)
 ; generate list ID, and end point
"RTN","VPRDJX",132,0)
 S D=DT,N=+$O(^XTMP("VPR-"_DT,"A"),-1)       ;last entry, as of now
"RTN","VPRDJX",133,0)
 I DATE=DT,SEQ=N S ^TMP("VPRX",$J,0)=LAST Q  ;no new items
"RTN","VPRDJX",134,0)
 ;
"RTN","VPRDJX",135,0)
 S IDX=$NA(^XTMP("VPR-"_DATE,SEQ)),END=N     ;init loop where left off
"RTN","VPRDJX",136,0)
 F  S IDX=$Q(@IDX) Q:$$DONE  D  Q:CNT'<MAX
"RTN","VPRDJX",137,0)
 . S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","VPRDJX",138,0)
 . S X0=@IDX,DFN=$P(X0,U) S:DFN="" DFN="OP"
"RTN","VPRDJX",139,0)
 . I DFN,'$D(^VPR(560,"ADFN",DFN,DA)) Q
"RTN","VPRDJX",140,0)
 . S TYPE=$P(X0,U,2),ID=$P(X0,U,3),ACT=$P(X0,U,4)
"RTN","VPRDJX",141,0)
 . I TYPE=""!(ID="") Q  ;error
"RTN","VPRDJX",142,0)
 . I TYPE="ROSTER",'$D(^VPR(560,"AROS",ID,DA)) Q
"RTN","VPRDJX",143,0)
 . S:'$D(^TMP("VPRX",$J,DFN,TYPE,ID)) CNT=CNT+1
"RTN","VPRDJX",144,0)
 . S ^TMP("VPRX",$J,DFN,TYPE,ID)=ACT
"RTN","VPRDJX",145,0)
 S ^TMP("VPRX",$J,0)=D_":"_N                 ;final date:seq
"RTN","VPRDJX",146,0)
 Q
"RTN","VPRDJX",147,0)
 ;
"RTN","VPRDJX",148,0)
DONE() ; -- Return 1 or 0, if loop has finished
"RTN","VPRDJX",149,0)
 I IDX'?1"^XTMP(""VPR-"7N.E  Q 1       ;end of ^XTMP("VPR")
"RTN","VPRDJX",150,0)
 N D,N S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","VPRDJX",151,0)
 ; check VPR-DATE subscript
"RTN","VPRDJX",152,0)
 I D<DT Q 0                            ;prior day: keep going
"RTN","VPRDJX",153,0)
 I D>DT Q 1                            ;next day:  stop loop
"RTN","VPRDJX",154,0)
 ; D=DT: check sequence# subscript
"RTN","VPRDJX",155,0)
 I N>END Q 1
"RTN","VPRDJX",156,0)
 Q 0
"RTN","VPRDX")
1^43
"RTN","VPREASU")
0^53^B59801408
"RTN","VPREASU",1,0)
VPREASU ;SLC/GRR -- Serve VistA reference data as JSON via RPC ; 10/18/12 6:26pm
"RTN","VPREASU",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPREASU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPREASU",4,0)
 ;
"RTN","VPREASU",5,0)
CLASS ; -- USR Class file #8930
"RTN","VPREASU",6,0)
 N PRV S PRV=+$G(VPRLAST)
"RTN","VPREASU",7,0)
 S VPRCNT=$$TOTAL^VPREF("^USR(8930)")
"RTN","VPREASU",8,0)
 I PRV=0 S PRV=.9
"RTN","VPREASU",9,0)
 I $L(VPRID) D CLS1(VPRID) Q
"RTN","VPREASU",10,0)
 F  S PRV=$O(^USR(8930,PRV)) Q:PRV'>0  D CLS1(PRV) I VPRMAX,VPRI'<VPRMAX Q
"RTN","VPREASU",11,0)
 I PRV'>0 S VPRFINI=1
"RTN","VPREASU",12,0)
 Q
"RTN","VPREASU",13,0)
 ;
"RTN","VPREASU",14,0)
CLS1(IEN) ;
"RTN","VPREASU",15,0)
 N $ES,$ET,ERRMSG
"RTN","VPREASU",16,0)
 S ERRMSG=$$ERRMSG^VPREF("User Class",IEN)
"RTN","VPREASU",17,0)
 S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREASU",18,0)
 N VPRV,FLDS,X,Y,INREC
"RTN","VPREASU",19,0)
 K VPRV S FLDS=".01:.05;1*"
"RTN","VPREASU",20,0)
 D GETS^DIQ(8930,IEN_",",FLDS,"IEN","VPRV")
"RTN","VPREASU",21,0)
 S Y=$NA(VPRV(8930,IEN_","))
"RTN","VPREASU",22,0)
 S INREC("name")=$G(@Y@(.01,"E"))
"RTN","VPREASU",23,0)
 S INREC("localId")=IEN,INREC("uid")=$$SETUID^VPRUTILS("asu-class",,IEN)
"RTN","VPREASU",24,0)
 S INREC("abbreviation")=$G(@Y@(.02,"E")),INREC("active")=$S($G(@Y@(.03,"I"))=1:"true",1:"false")
"RTN","VPREASU",25,0)
 S INREC("displayName")=$G(@Y@(.04,"E"))
"RTN","VPREASU",26,0)
 I $D(VPRV("8930.01")) D
"RTN","VPREASU",27,0)
 . N IEN2,ID,CNT
"RTN","VPREASU",28,0)
 . S IEN2="",CNT=0
"RTN","VPREASU",29,0)
 . F  S IEN2=$O(VPRV(8930.01,IEN2)) Q:IEN2=""  D
"RTN","VPREASU",30,0)
 . . S CNT=CNT+1,INREC("subClass",CNT,"name")=VPRV("8930.01",IEN2,".01","E")
"RTN","VPREASU",31,0)
 . . S ID=VPRV(8930.01,IEN2,.01,"I"),INREC("subClass",CNT,"uid")=$$SETUID^VPRUTILS("asu-class",,ID)
"RTN","VPREASU",32,0)
 D ADD^VPREF("INREC") S VPRLAST=IEN
"RTN","VPREASU",33,0)
 Q
"RTN","VPREASU",34,0)
 ;
"RTN","VPREASU",35,0)
RULE ; -- USR Authorization/Subscription file #8930.1
"RTN","VPREASU",36,0)
 N PRV S PRV=+$G(VPRLAST)
"RTN","VPREASU",37,0)
 S VPRCNT=$$TOTAL^VPREF("^USR(8930.1)")
"RTN","VPREASU",38,0)
 I PRV=0 S PRV=.9
"RTN","VPREASU",39,0)
 I $L(VPRID) D RULE1(VPRID) Q
"RTN","VPREASU",40,0)
 F  S PRV=$O(^USR(8930.1,PRV)) Q:PRV'>0  D RULE1(PRV) I VPRMAX,VPRI'<VPRMAX Q
"RTN","VPREASU",41,0)
 I PRV'>0 S VPRFINI=1
"RTN","VPREASU",42,0)
 Q
"RTN","VPREASU",43,0)
 ;
"RTN","VPREASU",44,0)
RULE1(IEN) ;
"RTN","VPREASU",45,0)
 N $ES,$ET,ERRMSG
"RTN","VPREASU",46,0)
 S ERRMSG=$$ERRMSG^VPREF("ASU Rule",IEN)
"RTN","VPREASU",47,0)
 S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREASU",48,0)
 N VPRV,FLDS,X,Y,INREC,DESC
"RTN","VPREASU",49,0)
 K VPRV S FLDS=".01:1"
"RTN","VPREASU",50,0)
 D GETS^DIQ(8930.1,IEN_",",FLDS,"IEN","VPRV")
"RTN","VPREASU",51,0)
 S Y=$NA(VPRV(8930.1,IEN_","))
"RTN","VPREASU",52,0)
 S INREC("localId")=IEN,INREC("uid")=$$SETUID^VPRUTILS("asu-rule",,IEN)
"RTN","VPREASU",53,0)
 S X=$G(@Y@(.01,"I")) S:X INREC("docDefUid")=$$SETUID^VPRUTILS("doc-def",,X),INREC("docDefName")=$G(@Y@(.01,"E"))
"RTN","VPREASU",54,0)
 S X=$G(@Y@(.02,"I")) S:X INREC("statusUid")=$$SETUID^VPRUTILS("doc-status",,X),INREC("statusName")=$G(@Y@(.02,"E"))
"RTN","VPREASU",55,0)
 S X=$G(@Y@(.03,"I")) S:X INREC("actionUid")=$$SETUID^VPRUTILS("doc-action",,X),INREC("actionName")=$G(@Y@(.03,"E"))
"RTN","VPREASU",56,0)
 S X=$G(@Y@(.04,"I")) S:X INREC("userClassUid")=$$SETUID^VPRUTILS("asu-class",,X),INREC("userClassName")=$G(@Y@(.04,"E"))
"RTN","VPREASU",57,0)
 S X=$G(@Y@(.05,"I")),INREC("isAnd")=$S(X="&":"true",1:"false") ;,INREC("isOr")=$S(X="!":"true",1:"false")
"RTN","VPREASU",58,0)
 S X=$G(@Y@(.06,"I")) S:X INREC("userRoleUid")=$$SETUID^VPRUTILS("asu-role",,X),INREC("userRoleName")=$G(@Y@(.06,"E"))
"RTN","VPREASU",59,0)
 I $D(@Y@(1)) D
"RTN","VPREASU",60,0)
 . N I S I=0 F  S I=$O(@Y@(1,I)) Q:I<1  S DESC(I)=@Y@(1,I)
"RTN","VPREASU",61,0)
 . S INREC("description")=$$STRING^VPRD(.DESC)
"RTN","VPREASU",62,0)
 D ADD^VPREF("INREC") S VPRLAST=IEN
"RTN","VPREASU",63,0)
 Q
"RTN","VPREASU",64,0)
 ;
"RTN","VPREASU",65,0)
ROLE ; -- USR Role file #8930.2
"RTN","VPREASU",66,0)
 N PRV S PRV=+$G(VPRLAST)
"RTN","VPREASU",67,0)
 S VPRCNT=$$TOTAL^VPREF("^USR(8930.2)")
"RTN","VPREASU",68,0)
 I PRV=0 S PRV=.9
"RTN","VPREASU",69,0)
 I $L(VPRID) D ROLE1(VPRID) Q
"RTN","VPREASU",70,0)
 F  S PRV=$O(^USR(8930.2,PRV)) Q:PRV'>0  D ROLE1(PRV) I VPRMAX,VPRI'<VPRMAX Q
"RTN","VPREASU",71,0)
 I PRV'>0 S VPRFINI=1
"RTN","VPREASU",72,0)
 Q
"RTN","VPREASU",73,0)
 ;
"RTN","VPREASU",74,0)
ROLE1(IEN) ;
"RTN","VPREASU",75,0)
 N $ES,$ET,ERRMSG
"RTN","VPREASU",76,0)
 S ERRMSG=$$ERRMSG^VPREF("User Rule",IEN)
"RTN","VPREASU",77,0)
 S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREASU",78,0)
 N VPRV,FLDS,X,Y,INREC
"RTN","VPREASU",79,0)
 K VPRV S FLDS=".01:.03"
"RTN","VPREASU",80,0)
 D GETS^DIQ(8930.2,IEN_",",FLDS,"IEN","VPRV")
"RTN","VPREASU",81,0)
 S Y=$NA(VPRV(8930.2,IEN_","))
"RTN","VPREASU",82,0)
 S INREC("name")=$G(@Y@(.01,"E"))
"RTN","VPREASU",83,0)
 S INREC("uid")=$$SETUID^VPRUTILS("asu-role",,IEN)
"RTN","VPREASU",84,0)
 S INREC("displayName")=$G(@Y@(.02,"E"))
"RTN","VPREASU",85,0)
 S INREC("abbreviation")=$G(@Y@(.03,"E"))
"RTN","VPREASU",86,0)
 D ADD^VPREF("INREC") S VPRLAST=IEN
"RTN","VPREASU",87,0)
 Q
"RTN","VPREASU",88,0)
 ;
"RTN","VPREASU",89,0)
ACTION ; -- USR Action file #8930.8
"RTN","VPREASU",90,0)
 N PRV S PRV=+$G(VPRLAST)
"RTN","VPREASU",91,0)
 S VPRCNT=$$TOTAL^VPREF("^USR(8930.8)")
"RTN","VPREASU",92,0)
 I PRV=0 S PRV=.9
"RTN","VPREASU",93,0)
 I $L(VPRID) D ACT1(VPRID) Q
"RTN","VPREASU",94,0)
 F  S PRV=$O(^USR(8930.8,PRV)) Q:PRV'>0  D ACT1(PRV) I VPRMAX,VPRI'<VPRMAX Q
"RTN","VPREASU",95,0)
 I PRV'>0 S VPRFINI=1
"RTN","VPREASU",96,0)
 Q
"RTN","VPREASU",97,0)
 ;
"RTN","VPREASU",98,0)
ACT1(IEN) ;
"RTN","VPREASU",99,0)
 N $ES,$ET,ERRMSG
"RTN","VPREASU",100,0)
 S ERRMSG=$$ERRMSG^VPREF("ASU Action",IEN)
"RTN","VPREASU",101,0)
 S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREASU",102,0)
 N VPRV,FLDS,X,Y,INREC
"RTN","VPREASU",103,0)
 K VPRV S FLDS=".01:.08;1*"
"RTN","VPREASU",104,0)
 D GETS^DIQ(8930.8,IEN_",",FLDS,"IEN","VPRV")
"RTN","VPREASU",105,0)
 S Y=$NA(VPRV(8930.8,IEN_","))
"RTN","VPREASU",106,0)
 S INREC("name")=$G(@Y@(.01,"E")),INREC("actionUid")=$$SETUID^VPRUTILS("doc-action",,IEN)
"RTN","VPREASU",107,0)
 ; INREC("isAuthorization")=$S(@Y@(.02,"E")="A":"true",1:"false")
"RTN","VPREASU",108,0)
 ; INREC("isSubscription")=$S(@Y@(.02,"E")="S":"true",1:"false")
"RTN","VPREASU",109,0)
 S INREC("eventType")=$G(@Y@(.02,"E"))
"RTN","VPREASU",110,0)
 S INREC("appliesTo")=$G(@Y@(.03,"E"))
"RTN","VPREASU",111,0)
 S INREC("userVerb")=$G(@Y@(.05,"E"))
"RTN","VPREASU",112,0)
 S INREC("documentVerb")=$G(@Y@(.06,"E"))
"RTN","VPREASU",113,0)
 S INREC("userVerbModifier")=$G(@Y@(.07,"E"))
"RTN","VPREASU",114,0)
 S INREC("identifyingPhrase")=$G(@Y@(.08,"E"))
"RTN","VPREASU",115,0)
 I $D(VPRV(8930.81)) D
"RTN","VPREASU",116,0)
 . N CNT,SNODE S CNT=0,SNODE=""
"RTN","VPREASU",117,0)
 . F  S SNODE=$O(VPRV(8930.81,SNODE)) Q:SNODE=""  D
"RTN","VPREASU",118,0)
 . . S CNT=CNT+1,INREC("impliedAction",CNT,"name")=VPRV(8930.81,SNODE,.01,"E")
"RTN","VPREASU",119,0)
 . . S X=VPRV(8930.81,SNODE,.01,"I"),INREC("impliedAction",CNT,"uid")=$$SETUID^VPRUTILS("doc-action",,X)
"RTN","VPREASU",120,0)
 D ADD^VPREF("INREC") S VPRLAST=IEN
"RTN","VPREASU",121,0)
 Q
"RTN","VPREASU",122,0)
 ;
"RTN","VPREASU",123,0)
STATUS ; -- USR Record Status file #8930.6
"RTN","VPREASU",124,0)
 N PRV S PRV=+$G(VPRLAST)
"RTN","VPREASU",125,0)
 S VPRCNT=$$TOTAL^VPREF("^USR(8930.6)")
"RTN","VPREASU",126,0)
 I PRV=0 S PRV=.9
"RTN","VPREASU",127,0)
 I $L(VPRID) D STS1(VPRID) Q
"RTN","VPREASU",128,0)
 F  S PRV=$O(^USR(8930.6,PRV)) Q:PRV'>0  D STS1(PRV) I VPRMAX,VPRI'<VPRMAX Q
"RTN","VPREASU",129,0)
 I PRV'>0 S VPRFINI=1
"RTN","VPREASU",130,0)
 Q
"RTN","VPREASU",131,0)
 ;
"RTN","VPREASU",132,0)
STS1(IEN) ;
"RTN","VPREASU",133,0)
 N $ES,$ET,ERRMSG
"RTN","VPREASU",134,0)
 S ERRMSG=$$ERRMSG^VPREF("ASU Status",IEN)
"RTN","VPREASU",135,0)
 S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREASU",136,0)
 N VPRV,FLDS,Y,INREC
"RTN","VPREASU",137,0)
 K VPRV S FLDS=".01:.04"
"RTN","VPREASU",138,0)
 D GETS^DIQ(8930.6,IEN_",",FLDS,"IEN","VPRV")
"RTN","VPREASU",139,0)
 S Y=$NA(VPRV(8930.6,IEN_","))
"RTN","VPREASU",140,0)
 S INREC("name")=$G(@Y@(.01,"E"))
"RTN","VPREASU",141,0)
 S INREC("uid")=$$SETUID^VPRUTILS("doc-status",,IEN)
"RTN","VPREASU",142,0)
 S INREC("abbreviation")=$G(@Y@(.02,"E"))
"RTN","VPREASU",143,0)
 S INREC("sequence")=$G(@Y@(.03,"E"))
"RTN","VPREASU",144,0)
 S INREC("appliesTo")=$G(@Y@(.04,"E"))
"RTN","VPREASU",145,0)
 D ADD^VPREF("INREC") S VPRLAST=IEN
"RTN","VPREASU",146,0)
 Q
"RTN","VPREASU",147,0)
 ;
"RTN","VPREASU",148,0)
DEF ; -- TIU Document Definition file #8925.1
"RTN","VPREASU",149,0)
 N PRV S PRV=+$G(VPRLAST)
"RTN","VPREASU",150,0)
 S VPRCNT=$$TOTAL^VPREF("^TIU(8925.1)")
"RTN","VPREASU",151,0)
 I PRV=0 S PRV=.9
"RTN","VPREASU",152,0)
 I $L(VPRID) D DEF1(VPRID) Q
"RTN","VPREASU",153,0)
 F  S PRV=$O(^TIU(8925.1,PRV)) Q:PRV'>0  D DEF1(PRV) I VPRMAX,VPRI'<VPRMAX Q
"RTN","VPREASU",154,0)
 I PRV'>0 S VPRFINI=1
"RTN","VPREASU",155,0)
 Q
"RTN","VPREASU",156,0)
 ;
"RTN","VPREASU",157,0)
DEF1(IEN) ;
"RTN","VPREASU",158,0)
 N $ES,$ET,ERRMSG
"RTN","VPREASU",159,0)
 S ERRMSG=$$ERRMSG^VPREF("TIU Doc Def",IEN)
"RTN","VPREASU",160,0)
 S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREASU",161,0)
 N VPRV,FLDS,X,Y,I,INREC
"RTN","VPREASU",162,0)
 K VPRV S FLDS=".01:.14;1501"
"RTN","VPREASU",163,0)
 D GETS^DIQ(8925.1,IEN_",",FLDS,"IEN","VPRV")
"RTN","VPREASU",164,0)
 S Y=$NA(VPRV(8925.1,IEN_","))
"RTN","VPREASU",165,0)
 S INREC("name")=$G(@Y@(.01,"E"))
"RTN","VPREASU",166,0)
 S INREC("uid")=$$SETUID^VPRUTILS("doc-def",,IEN)
"RTN","VPREASU",167,0)
 S INREC("abbreviation")=$G(@Y@(.02,"E"))
"RTN","VPREASU",168,0)
 S INREC("displayName")=$G(@Y@(.03,"E"))
"RTN","VPREASU",169,0)
 S INREC("typeName")=$G(@Y@(.04,"E"))
"RTN","VPREASU",170,0)
 S INREC("typeUid")=$$SETUID^VPRUTILS("doc-type",,$G(@Y@(.04,"I")))
"RTN","VPREASU",171,0)
 S X=$G(@Y@(.05,"I")) I X D
"RTN","VPREASU",172,0)
 . S INREC("ownerUid")=$$SETUID^VPRUTILS("user",,X)
"RTN","VPREASU",173,0)
 . S INREC("ownerName")=$G(@Y@(.05,"E"))
"RTN","VPREASU",174,0)
 S X=$G(@Y@(.06,"I")) S:X INREC("classOwner")=$$SETUID^VPRUTILS("asu-class",,X)
"RTN","VPREASU",175,0)
 S X=$G(@Y@(.07,"I")) I X D
"RTN","VPREASU",176,0)
 . S INREC("statusUid")=$$SETUID^VPRUTILS("doc-status",,X)
"RTN","VPREASU",177,0)
 . S INREC("statusName")=$G(@Y@(.07,"E"))
"RTN","VPREASU",178,0)
 S X=$G(@Y@(.1,"I")) S:X INREC("shared")="true"
"RTN","VPREASU",179,0)
 S X=$G(@Y@(.13,"I")) S:X INREC("nationalStandard")="true"
"RTN","VPREASU",180,0)
 S X=$G(@Y@(.14,"I")) S:X INREC("postingCode")=$$SETUID^VPRUTILS("doc-posting",,X)
"RTN","VPREASU",181,0)
 S I=0 F  S I=$O(^TIU(8925.1,IEN,10,I)) Q:I<1  S X=+$G(^(I,0)) D
"RTN","VPREASU",182,0)
 . S INREC("item",I,"uid")=$$SETUID^VPRUTILS("doc-def",,X)
"RTN","VPREASU",183,0)
 . S INREC("item",I,"name")=$$GET1^DIQ(8925.1,X_",",.01)
"RTN","VPREASU",184,0)
 ; national title info
"RTN","VPREASU",185,0)
 S X=$G(@Y@(1501,"I")) I X D  ;National Title + attributes
"RTN","VPREASU",186,0)
 . N IENS,TIU,DA,FNUM,NAME
"RTN","VPREASU",187,0)
 . S IENS=X_"," D GETS^DIQ(8926.1,IENS,"*","IE","TIU")
"RTN","VPREASU",188,0)
 . S INREC("nationalTitle","vuid")="urn:va:vuid:"_$G(TIU(8926.1,IENS,99.99,"E"))
"RTN","VPREASU",189,0)
 . S INREC("nationalTitle","name")=$G(TIU(8926.1,IENS,.01,"E"))
"RTN","VPREASU",190,0)
 . F I=".04^Subject^2",".05^Role^3",".06^Setting^4",".07^Service^5",".08^Type^6" D
"RTN","VPREASU",191,0)
 .. S DA=+$G(TIU(8926.1,IENS,+I,"I")) Q:DA'>0
"RTN","VPREASU",192,0)
 .. S FNUM="8926."_+$P(I,U,3),NAME=$$LOW^XLFSTR($P(I,U,2))
"RTN","VPREASU",193,0)
 .. S INREC("nationalTitle"_$P(I,U,2),"vuid")="urn:va:vuid:"_$$VUID^VPRD(DA,FNUM)
"RTN","VPREASU",194,0)
 .. S INREC("nationalTitle"_$P(I,U,2),"name")=$G(TIU(8926.1,IENS,+I,"E"))
"RTN","VPREASU",195,0)
 ;
"RTN","VPREASU",196,0)
 D ADD^VPREF("INREC") S VPRLAST=IEN
"RTN","VPREASU",197,0)
 Q
"RTN","VPREF")
0^54^B160851666
"RTN","VPREF",1,0)
VPREF ;SLC/MKB -- Serve VistA operational data as JSON via RPC ; 10/18/12 6:26pm
"RTN","VPREF",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPREF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPREF",4,0)
 ;
"RTN","VPREF",5,0)
GET(VPR,FILTER) ; -- Return search results as JSON in @VPR@(n)
"RTN","VPREF",6,0)
 ; RPC = VPR GET OPERATIONAL DATA
"RTN","VPREF",7,0)
 ; where FILTER("domain")  = name of desired data type (see $$TAG)
"RTN","VPREF",8,0)
 ;       FILTER("limit")   = maximum number of items to return [opt]
"RTN","VPREF",9,0)
 ;       FILTER("start")   = ien to start search from          [opt]
"RTN","VPREF",10,0)
 ;       FILTER("id")      = single item id to return          [opt]
"RTN","VPREF",11,0)
 ;
"RTN","VPREF",12,0)
 N VPRSYS,TYPE,VPRMAX,VPRI,VPRID,VPRERR,VPRTN,VPRLAST,VPRCNT,VPRFINI
"RTN","VPREF",13,0)
 S VPR=$NA(^TMP("VPR",$J)),VPRI=0 K @VPR
"RTN","VPREF",14,0)
 S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPREF",15,0)
 ;
"RTN","VPREF",16,0)
 ; parse & validate input parameters
"RTN","VPREF",17,0)
 S TYPE=$P($G(FILTER("domain")),"#") ;,TYPE=$$LOW^XLFSTR(TYPE)
"RTN","VPREF",18,0)
 S VPRMAX=+$G(FILTER("limit")),VPRCNT=0
"RTN","VPREF",19,0)
 S VPRLAST=+$G(FILTER("start"))
"RTN","VPREF",20,0)
 S VPRID=$G(FILTER("id"))
"RTN","VPREF",21,0)
 ;
"RTN","VPREF",22,0)
 ;set error trap
"RTN","VPREF",23,0)
 K ^TMP($J,"VPR ERROR")
"RTN","VPREF",24,0)
 ;
"RTN","VPREF",25,0)
 ; extract data
"RTN","VPREF",26,0)
 I TYPE="" S VPRERR="Missing or invalid reference type" G GTQ
"RTN","VPREF",27,0)
 I $D(ZTQUEUED) S VPR=$NA(^XTMP(VPRBATCH,VPRFZTSK,FILTER("domain"))) K @VPR
"RTN","VPREF",28,0)
 I TYPE="new",$L($T(EN^VPREFX)) D EN^VPREFX(VPRID,VPRMAX) Q
"RTN","VPREF",29,0)
 S VPRTN=$$TAG(TYPE) Q:'$L(VPRTN)  ;D ERR(2) Q
"RTN","VPREF",30,0)
 ;N $ES,$ET,ERRMSG
"RTN","VPREF",31,0)
 ;S $ET="D ERRHDLR^VPRDERRH",ERRMSG="A MUMPS error occurred while extracting "_TYPE_" data"
"RTN","VPREF",32,0)
 D @VPRTN
"RTN","VPREF",33,0)
 ;
"RTN","VPREF",34,0)
GTQ ; add item count and terminating characters
"RTN","VPREF",35,0)
 N ERROR I $D(^TMP($J,"VPR ERROR"))>0 D BUILDERR(.ERROR) S ERROR(1)=ERROR(1)_"}"
"RTN","VPREF",36,0)
 I +$G(FILTER("noHead"))=1 D  Q
"RTN","VPREF",37,0)
 .S @VPR@("total")=+$G(VPRI)
"RTN","VPREF",38,0)
 .S @VPR@("last")=VPRLAST
"RTN","VPREF",39,0)
 .S @VPR@("finished")=+$G(VPRFINI)
"RTN","VPREF",40,0)
 .I $L($G(ERROR(1)))>1 S @VPR@("error")=ERROR(1)
"RTN","VPREF",41,0)
 I '$D(@VPR)!'$G(VPRI) D  Q
"RTN","VPREF",42,0)
 .I '$D(^TMP($J,"VPR ERROR")) S @VPR@(1)="""data"":{""totalItems"":0,""items"":[]}}" Q
"RTN","VPREF",43,0)
 .S @VPR@(1)="""data"":{""totalItems"":0,""items"":[]},"
"RTN","VPREF",44,0)
 .M @VPR@(2)=ERROR
"RTN","VPREF",45,0)
 ;
"RTN","VPREF",46,0)
 I $D(@VPR),$G(VPRI) D
"RTN","VPREF",47,0)
 . S @VPR@(.5)="{""apiVersion"":""1.01"",""data"":{""updated"":"""_$$HL7NOW_""",""currentItemCount"":"_VPRI
"RTN","VPREF",48,0)
 . S:$G(VPRCNT) @VPR@(.5)=@VPR@(.5)_",""totalItems"":"_VPRCNT
"RTN","VPREF",49,0)
 . S:$G(VPRLAST) @VPR@(.5)=@VPR@(.5)_",""last"":"_VPRLAST
"RTN","VPREF",50,0)
 . S @VPR@(.5)=@VPR@(.5)_",""items"":["
"RTN","VPREF",51,0)
 . S VPRI=VPRI+1,@VPR@(VPRI)=$S($D(^TMP($J,"VPR ERROR"))>0:"]}",1:"]}}")
"RTN","VPREF",52,0)
 I $D(^TMP($J,"VPR ERROR"))>0 S VPRI=VPRI+1,@VPR@(VPRI,.3)="," M @VPR@(VPRI)=ERROR ;S VPRI=VPRI+1,@VPR@(VPRI)="}"
"RTN","VPREF",53,0)
 K ^TMP($J,"VPR ERROR")
"RTN","VPREF",54,0)
 Q
"RTN","VPREF",55,0)
 ;
"RTN","VPREF",56,0)
BUILDERR(RESULT) ; -- build error array
"RTN","VPREF",57,0)
 N CNT,COUNT,DOM,DOMCNT,ERRMSG,ERROR,FIELD,MESSAGE,MSG,MSGCNT,T,TEMP
"RTN","VPREF",58,0)
 S COUNT=$G(^TMP($J,"VPR ERROR","# of Errors"))
"RTN","VPREF",59,0)
 S MESSAGE="A mumps error occurred when extracting data. A total of "_COUNT_" occurred.\n\r"
"RTN","VPREF",60,0)
 S CNT=1,ERROR("error","message","\",CNT)="A mumps error occurred when extracting patient data. A total of "_COUNT_" occurred.\n\r"
"RTN","VPREF",61,0)
 S MSGCNT=0 F  S MSGCNT=$O(^TMP($J,"VPR ERROR","ERROR MESSAGE",MSGCNT)) Q:MSGCNT'>0  D
"RTN","VPREF",62,0)
 . S CNT=CNT+1,MESSAGE=MESSAGE_$G(^TMP($J,"VPR ERROR","ERROR MESSAGE",MSGCNT))_"\n\r"
"RTN","VPREF",63,0)
 S RESULT(1)="""error"":{""message"":"_""""_MESSAGE_""""_"}"
"RTN","VPREF",64,0)
 Q
"RTN","VPREF",65,0)
 ;
"RTN","VPREF",66,0)
TAG(X) ; -- Return linetag for reference domain X
"RTN","VPREF",67,0)
 N Y S Y="VPR",X=$G(X)
"RTN","VPREF",68,0)
 ; default = VPR Object (various types)
"RTN","VPREF",69,0)
 I X="location"      S Y="LOC"
"RTN","VPREF",70,0)
 I X="pt-select"     S Y="PAT"
"RTN","VPREF",71,0)
 I X="person"        S Y="NP"
"RTN","VPREF",72,0)
 I X="user"          S Y="NP"
"RTN","VPREF",73,0)
 I X="roster"        S Y="ROS"
"RTN","VPREF",74,0)
 I X="labgroup"      S Y="LABGRP"
"RTN","VPREF",75,0)
 I X="labpanel"      S Y="LABPNL"
"RTN","VPREF",76,0)
 I X["orderable"     S Y="OI"
"RTN","VPREF",77,0)
 I X["schedule"      S Y="SCHEDULE"
"RTN","VPREF",78,0)
 I X["route"         S Y="ROUTE"
"RTN","VPREF",79,0)
 I X["quick"         S Y="QO"
"RTN","VPREF",80,0)
 I X="displayGroup"  S Y="ODG"
"RTN","VPREF",81,0)
 I X["asu-"          S Y="ASU"
"RTN","VPREF",82,0)
 I X["doc-"          S Y="ASU"
"RTN","VPREF",83,0)
 I X["clioterm"      S Y="MDTERMS" ;blj
"RTN","VPREF",84,0)
 Q Y
"RTN","VPREF",85,0)
 ;
"RTN","VPREF",86,0)
ERR(X,VAL) ; -- return error message
"RTN","VPREF",87,0)
 N MSG  S MSG="Error"
"RTN","VPREF",88,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","VPREF",89,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","VPREF",90,0)
 I X=99 S MSG="Unknown request"
"RTN","VPREF",91,0)
 Q MSG
"RTN","VPREF",92,0)
 ;
"RTN","VPREF",93,0)
ERRMSG(X,VAL) ; -- return error message, if needed
"RTN","VPREF",94,0)
 N Y S Y="A MUMPS error occurred while extracting "_X_" data"
"RTN","VPREF",95,0)
 S:$G(VAL) Y=Y_", ien "_VAL
"RTN","VPREF",96,0)
 Q Y
"RTN","VPREF",97,0)
 ;
"RTN","VPREF",98,0)
ERRQ ; -- Quit for error handling
"RTN","VPREF",99,0)
 Q
"RTN","VPREF",100,0)
 ;
"RTN","VPREF",101,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","VPREF",102,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","VPREF",103,0)
 ;
"RTN","VPREF",104,0)
ALL() ;
"RTN","VPREF",105,0)
 Q "location;patient;person;orderable;schedule;route;quick;displayGroup;asu-class;asu-rule;asu-role;doc-action;doc-status;clioterm"
"RTN","VPREF",106,0)
 ;
"RTN","VPREF",107,0)
ADD(ITEM) ; -- add ITEM to @VPR@(VPRI)
"RTN","VPREF",108,0)
 N VPRY,VPRERR
"RTN","VPREF",109,0)
 D ENCODE^VPRJSON(ITEM,"VPRY","VPRERR")
"RTN","VPREF",110,0)
 I $D(VPRERR) D  ;return ERRor instead of ITEM
"RTN","VPREF",111,0)
 . N VPRTMP,VPRTXT,VPRITM
"RTN","VPREF",112,0)
 . M VPRITM=@ITEM K VPRY
"RTN","VPREF",113,0)
 . S VPRTXT(1)="Problem encoding json output."
"RTN","VPREF",114,0)
 . D SETERROR^VPRUTILS(.VPRTMP,.VPRERR,.VPRTXT,.VPRITM)
"RTN","VPREF",115,0)
 . K VPRERR D ENCODE^VPRJSON("VPRTMP","VPRY","VPRERR")
"RTN","VPREF",116,0)
 I $D(VPRY) D
"RTN","VPREF",117,0)
 . I VPRI D COMMA(VPRI)
"RTN","VPREF",118,0)
 . ;I VPRI,'$G(FILTER("noHead")) D COMMA(VPRI)
"RTN","VPREF",119,0)
 . S VPRI=VPRI+1 M @VPR@(VPRI)=VPRY
"RTN","VPREF",120,0)
 Q
"RTN","VPREF",121,0)
 ;
"RTN","VPREF",122,0)
COMMA(I) ; -- add comma between items
"RTN","VPREF",123,0)
 I $D(ZTQUEUED) Q
"RTN","VPREF",124,0)
 N J S J=+$O(@VPR@(I,"A"),-1) ;last sub-node for item I
"RTN","VPREF",125,0)
 S J=J+1,@VPR@(I,J)=","
"RTN","VPREF",126,0)
 Q
"RTN","VPREF",127,0)
 ;
"RTN","VPREF",128,0)
TOTAL(ROOT) ; -- Return total #items in @ROOT@(n)
"RTN","VPREF",129,0)
 Q $P($G(@ROOT@(0)),U,4)
"RTN","VPREF",130,0)
 ;
"RTN","VPREF",131,0)
 N I,Y S (I,Y)=0
"RTN","VPREF",132,0)
 F  S I=$O(@ROOT@(I)) Q:I<1  S Y=Y+1
"RTN","VPREF",133,0)
 Q Y
"RTN","VPREF",134,0)
 ;
"RTN","VPREF",135,0)
TEST(TYPE,ID,IN) ; -- test GET, write results to screen
"RTN","VPREF",136,0)
 N OUT,IDX
"RTN","VPREF",137,0)
 S U="^"
"RTN","VPREF",138,0)
 S IN("domain")=$G(TYPE)
"RTN","VPREF",139,0)
 S:$D(ID) IN("id")=ID
"RTN","VPREF",140,0)
 D GET(.OUT,.IN)
"RTN","VPREF",141,0)
 ;
"RTN","VPREF",142,0)
 S IDX=OUT
"RTN","VPREF",143,0)
 F  S IDX=$Q(@IDX) Q:IDX'?1"^TMP(""VPR"","1.N.E  Q:+$P(IDX,",",2)'=$J  W !,@IDX
"RTN","VPREF",144,0)
 Q
"RTN","VPREF",145,0)
 ;
"RTN","VPREF",146,0)
 ; ** Reference file searches, using FILTER("parameter")
"RTN","VPREF",147,0)
 ;
"RTN","VPREF",148,0)
PAT ; -- Return Patients [use shorter DEM^VPRDJ00?]
"RTN","VPREF",149,0)
 N DFN,PAT,VPRPOPD
"RTN","VPREF",150,0)
 S VPRPOPD=1
"RTN","VPREF",151,0)
 S VPRCNT=$$TOTAL("^DPT")
"RTN","VPREF",152,0)
 I $G(VPRID) S DFN=+VPRID D LKUP^VPRDJ00 Q
"RTN","VPREF",153,0)
 ;I $G(VPRID) S DFN=VPRID D DPT1^VPRDJ00 Q
"RTN","VPREF",154,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extracting patients."
"RTN","VPREF",155,0)
 ;Q:VPRI'<VPRMAX
"RTN","VPREF",156,0)
 S DFN=+$G(VPRLAST) F  S DFN=$O(^DPT(DFN)) Q:DFN<1  D  I VPRMAX>0,VPRI'<VPRMAX Q
"RTN","VPREF",157,0)
 . N $ES,$ET
"RTN","VPREF",158,0)
 . S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREF",159,0)
 . I $P($G(^DPT(DFN,0)),U)="" Q
"RTN","VPREF",160,0)
 . S ERRMSG=$$ERRMSG("Patient",DFN)
"RTN","VPREF",161,0)
 . ;K PAT D DPT1^VPRDJ00
"RTN","VPREF",162,0)
 . K PAT D LKUP^VPRDJ00
"RTN","VPREF",163,0)
 . S VPRLAST=DFN
"RTN","VPREF",164,0)
 I DFN<1 S VPRFINI=1
"RTN","VPREF",165,0)
 Q
"RTN","VPREF",166,0)
LOC ; -- Return Hospital Locations
"RTN","VPREF",167,0)
 S VPRCNT=$$TOTAL("^SC")
"RTN","VPREF",168,0)
 I $G(VPRID) D LOC1(VPRID) Q
"RTN","VPREF",169,0)
 N HL S HL=+$G(VPRLAST)
"RTN","VPREF",170,0)
 F  S HL=$O(^SC(HL)) Q:HL<1  D LOC1(HL) I VPRMAX>0,VPRI'<VPRMAX Q
"RTN","VPREF",171,0)
 I HL<1 S VPRFINI=1
"RTN","VPREF",172,0)
 Q
"RTN","VPREF",173,0)
 ;
"RTN","VPREF",174,0)
LOC1(IEN) ; -- get one location
"RTN","VPREF",175,0)
 N $ES,$ET,ERRMSG
"RTN","VPREF",176,0)
 S ERRMSG=$$ERRMSG("Location",IEN)
"RTN","VPREF",177,0)
 S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREF",178,0)
 N LOC,X0,X,Y
"RTN","VPREF",179,0)
 S X0=$G(^SC(IEN,0)),LOC("name")=$P(X0,U)
"RTN","VPREF",180,0)
 S LOC("localId")=IEN,LOC("uid")=$$SETUID^VPRUTILS("location",,IEN)
"RTN","VPREF",181,0)
 S LOC("shortName")=$P(X0,U,2),LOC("type")=$P(X0,U,3)
"RTN","VPREF",182,0)
 S LOC("refId")=IEN
"RTN","VPREF",183,0)
 I $G(^SC(IEN,42))'="" D
"RTN","VPREF",184,0)
 .I $D(^DIC(42,+^SC(IEN,42))) S LOC("refId")=+^SC(IEN,42)
"RTN","VPREF",185,0)
 S X=+$P(X0,U,4) I X D
"RTN","VPREF",186,0)
 . S Y=$$NS^XUAF4(X),X=$P(Y,U,2)_U_$P(Y,U)
"RTN","VPREF",187,0)
 . D FACILITY^VPRUTILS(X,"LOC")
"RTN","VPREF",188,0)
 I '$$ACTLOC(IEN) S LOC("inactive")="true"
"RTN","VPREF",189,0)
 D ADD("LOC") S VPRLAST=IEN
"RTN","VPREF",190,0)
 Q
"RTN","VPREF",191,0)
 ;
"RTN","VPREF",192,0)
ACTLOC(LOC) ; Function: returns TRUE if active hospital location
"RTN","VPREF",193,0)
 ; IA# 10040.
"RTN","VPREF",194,0)
 N D0,X I +$G(^SC(LOC,"OOS")) Q 0                ; screen out OOS entry
"RTN","VPREF",195,0)
 S D0=+$G(^SC(LOC,42)) I D0 D WIN^DGPMDDCF Q 'X  ; chk out of svc wards
"RTN","VPREF",196,0)
 S X=$G(^SC(LOC,"I")) I +X=0 Q 1                 ; no inactivate date
"RTN","VPREF",197,0)
 I DT>$P(X,U)&($P(X,U,2)=""!(DT<$P(X,U,2))) Q 0  ; chk reactivate date
"RTN","VPREF",198,0)
 Q 1                                             ; must still be active
"RTN","VPREF",199,0)
 ;
"RTN","VPREF",200,0)
NP ; -- Return New Persons
"RTN","VPREF",201,0)
 N PRV
"RTN","VPREF",202,0)
 S VPRCNT=$$TOTAL("^VA(200)")
"RTN","VPREF",203,0)
 I $G(VPRID) D NP1(VPRID) Q
"RTN","VPREF",204,0)
 S PRV=+$G(VPRLAST) ;$S(VPRLAST:VPRLAST,1:.9)
"RTN","VPREF",205,0)
 I PRV=0 S PRV=.9
"RTN","VPREF",206,0)
 F  S PRV=$O(^VA(200,PRV)) Q:PRV<1  D NP1(PRV) I VPRMAX>0,VPRI'<VPRMAX Q
"RTN","VPREF",207,0)
 I PRV<1 S VPRFINI=1
"RTN","VPREF",208,0)
 Q
"RTN","VPREF",209,0)
 ;
"RTN","VPREF",210,0)
NP1(IEN) ; -- get one person
"RTN","VPREF",211,0)
 N $ES,$ET,ERRMSG
"RTN","VPREF",212,0)
 S ERRMSG=$$ERRMSG("person",IEN)
"RTN","VPREF",213,0)
 S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREF",214,0)
 N VPRV,FLDS,USER,X,Y
"RTN","VPREF",215,0)
 I $$ISPROXY(IEN)=1 Q
"RTN","VPREF",216,0)
 K VPRV S FLDS=".01;4:9.2;9.5*;19:53.8;654.3;.132:.138"
"RTN","VPREF",217,0)
 D GETS^DIQ(200,IEN_",",FLDS,"IEN","VPRV")
"RTN","VPREF",218,0)
 S Y=$NA(VPRV(200,IEN_","))
"RTN","VPREF",219,0)
 S USER("name")=$G(@Y@(.01,"E"))
"RTN","VPREF",220,0)
 S USER("localId")=IEN,USER("uid")=$$SETUID^VPRUTILS("user",,IEN)
"RTN","VPREF",221,0)
 S:$D(@Y@(4)) USER("genderCode")="urn:va:gender:"_@Y@(4,"I"),USER("genderName")=@Y@(4,"E")
"RTN","VPREF",222,0)
 S X=+$P($G(@Y@(5,"I")),".") S:X USER("dateOfBirth")=$$JSONDT^VPRUTILS(X)
"RTN","VPREF",223,0)
 S X=$G(@Y@(7,"I")) S:$L(X) USER("disuser")=$S(X:"true",1:"false")
"RTN","VPREF",224,0)
 S X=$G(@Y@(8,"E")) S:$L(X) USER("title")=X
"RTN","VPREF",225,0)
 S X=$G(@Y@(9,"E")) S:$L(X) USER("ssn")=X
"RTN","VPREF",226,0)
 S X=$G(@Y@(9.2,"I")) S:$L(X) USER("terminated")=$$JSONDT^VPRUTILS(X)
"RTN","VPREF",227,0)
 S X=+$G(@Y@(19,"I")) S:X USER("delegateCode")=$$SETUID^VPRUTILS("user",,X),USER("delegateName")=$G(@Y@(19,"E"))
"RTN","VPREF",228,0)
 S X=$G(@Y@(29,"E")) S:$L(X) USER("service")=X
"RTN","VPREF",229,0)
 S X=$G(@Y@(53.5,"E")) S:$L(X) USER("providerClass")=X
"RTN","VPREF",230,0)
 S X=$G(@Y@(53.6,"E")) S:$L(X) USER("providerType")=X
"RTN","VPREF",231,0)
 S X=+$G(@Y@(654.3,"I")) S:X USER("surrogateCode")=$$SETUID^VPRUTILS("user",,X),USER("surrogateName")=$G(@Y@(654.3,"E"))
"RTN","VPREF",232,0)
 S X=$G(@Y@(.132,"E")) S:$L(X) USER("officePhone")=X
"RTN","VPREF",233,0)
 S X=$G(@Y@(.133,"E")) S:$L(X) USER("phone3")=X
"RTN","VPREF",234,0)
 S X=$G(@Y@(.134,"E")) S:$L(X) USER("phone4")=X
"RTN","VPREF",235,0)
 S X=$G(@Y@(.135,"E")) S:$L(X) USER("commercialPhone")=X
"RTN","VPREF",236,0)
 S X=$G(@Y@(.136,"E")) S:$L(X) USER("fax")=X
"RTN","VPREF",237,0)
 S X=$G(@Y@(.137,"E")) S:$L(X) USER("voicePager")=X
"RTN","VPREF",238,0)
 S X=$G(@Y@(.138,"E")) S:$L(X) USER("digitalPager")=X
"RTN","VPREF",239,0)
 D KEYS(IEN)
"RTN","VPREF",240,0)
 D ADD("USER") S VPRLAST=IEN
"RTN","VPREF",241,0)
 Q
"RTN","VPREF",242,0)
 ;
"RTN","VPREF",243,0)
KEYS(IEN) ; -- get user's keys
"RTN","VPREF",244,0)
 N VPRKEY,IENS,X,CNT
"RTN","VPREF",245,0)
 D GETS^DIQ(200,IEN_",","51*","IE","VPRKEY") S CNT=0
"RTN","VPREF",246,0)
 S IENS="" F  S IENS=$O(VPRKEY(200.051,IENS)) Q:IENS=""  D
"RTN","VPREF",247,0)
 . S X=$G(VPRKEY(200.051,IENS,.01,"E")),CNT=CNT+1
"RTN","VPREF",248,0)
 . S USER("vistaKeys",CNT,"name")=X
"RTN","VPREF",249,0)
 . S X=$G(VPRKEY(200.051,IENS,3,"I"))
"RTN","VPREF",250,0)
 . S:X USER("vistaKeys",CNT,"reviewDate")=$$JSONDT^VPRUTILS(X)
"RTN","VPREF",251,0)
 Q
"RTN","VPREF",252,0)
 ;
"RTN","VPREF",253,0)
ODG ;
"RTN","VPREF",254,0)
 D ADDODG^VPRCORD4
"RTN","VPREF",255,0)
 Q
"RTN","VPREF",256,0)
 ;
"RTN","VPREF",257,0)
OI ;
"RTN","VPREF",258,0)
 ;I 1/0
"RTN","VPREF",259,0)
 D OI^VPRCORD4("PS^RAP^LRT")
"RTN","VPREF",260,0)
 Q
"RTN","VPREF",261,0)
 ;
"RTN","VPREF",262,0)
QO ;
"RTN","VPREF",263,0)
 D QO^VPRCORD4
"RTN","VPREF",264,0)
 Q
"RTN","VPREF",265,0)
 ;
"RTN","VPREF",266,0)
SCHEDULE ;
"RTN","VPREF",267,0)
 N RESULT
"RTN","VPREF",268,0)
 D ADDSCH^VPRCORD4
"RTN","VPREF",269,0)
 ;D ADD("RESULT")
"RTN","VPREF",270,0)
 Q
"RTN","VPREF",271,0)
 ;
"RTN","VPREF",272,0)
ROUTE ;
"RTN","VPREF",273,0)
 N RESULT
"RTN","VPREF",274,0)
 D ADDROUTE^VPRCORD4
"RTN","VPREF",275,0)
 ;D ADD("RESULT")
"RTN","VPREF",276,0)
 Q
"RTN","VPREF",277,0)
 ;
"RTN","VPREF",278,0)
VPR ; -- Return VPR Objects
"RTN","VPREF",279,0)
 N IEN
"RTN","VPREF",280,0)
 S VPRCNT=$$TOTAL("^VPR(560.11)")
"RTN","VPREF",281,0)
 I $L(VPRID) D  Q
"RTN","VPREF",282,0)
 . I VPRID=+VPRID S IEN=VPRID
"RTN","VPREF",283,0)
 . E  S IEN=+$O(^VPR(560.11,"B",VPRID,0))
"RTN","VPREF",284,0)
 . S ERRMSG=$$ERRMSG("VPR Object",IEN)
"RTN","VPREF",285,0)
 . D:IEN VPR1^VPRDJ02(560.11,IEN)
"RTN","VPREF",286,0)
 S IEN=+$G(VPRLAST) F  S IEN=$O(^VPR(560.11,"C",TYPE,IEN)) Q:IEN<1  D  I VPRMAX>0,VPRI'<VPRMAX Q
"RTN","VPREF",287,0)
 . S ERRMSG=$$ERRMSG("VPR Object",IEN)
"RTN","VPREF",288,0)
 . D VPR1^VPRDJ02(560.11,IEN) S VPRLAST=IEN
"RTN","VPREF",289,0)
 I IEN<1 S VPRFINI=1
"RTN","VPREF",290,0)
 Q
"RTN","VPREF",291,0)
 ;
"RTN","VPREF",292,0)
ROS ; -- Return rosters
"RTN","VPREF",293,0)
 N PRV
"RTN","VPREF",294,0)
 S VPRCNT=$$TOTAL("^VPROSTER")
"RTN","VPREF",295,0)
 I $L(VPRID) D:$D(^VPROSTER(VPRID,0)) ROS1(VPRID) Q
"RTN","VPREF",296,0)
 S PRV=+$G(VPRLAST)
"RTN","VPREF",297,0)
 I PRV=0 S PRV=.9
"RTN","VPREF",298,0)
 F  S PRV=$O(^VPROSTER(PRV)) Q:PRV'>0  D ROS1(PRV) I VPRMAX,VPRI'<VPRMAX Q
"RTN","VPREF",299,0)
 I PRV'>0 S VPRFINI=1
"RTN","VPREF",300,0)
 Q
"RTN","VPREF",301,0)
 ;
"RTN","VPREF",302,0)
ROS1(IEN) ; -- get one roster
"RTN","VPREF",303,0)
 N ERRMSG
"RTN","VPREF",304,0)
 S ERRMSG="A mumps error occurred while extaracting roster."
"RTN","VPREF",305,0)
 ;S ERRMSG=$$ERRMSG("roster",IEN)
"RTN","VPREF",306,0)
 ;S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPREF",307,0)
 N VPRLIST,VPRLIST2 ; these get defined by VPRROS6
"RTN","VPREF",308,0)
 D GET^VPRROS6(IEN)
"RTN","VPREF",309,0)
 N ROSTER,GBL,FLDS,RESULT,VPRZ,X,Y,VPRSEQ,VPRACT,VPRSOURCE,VPRV,NODE,VPRPAT,ID
"RTN","VPREF",310,0)
 K VPRV S FLDS=".01:.06;1*;2;3*;99",ID=IEN
"RTN","VPREF",311,0)
 D GETS^DIQ(561.2,IEN_",",FLDS,"IEN","VPRV")
"RTN","VPREF",312,0)
 S Y=$NA(VPRV(561.2,IEN_","))
"RTN","VPREF",313,0)
 S ROSTER("name")=$G(@Y@(.01,"E"))
"RTN","VPREF",314,0)
 S ROSTER("localId")=ID,ROSTER("uid")=$$SETUID^VPRUTILS("roster",,ID)
"RTN","VPREF",315,0)
 S X=$G(@Y@(99,"I")) S:X ROSTER("dateUpdated")=$$JSONDT^VPRUTILS(X)
"RTN","VPREF",316,0)
 S X=$G(@Y@(.04,"I")) S:X ROSTER("ownerLocalId")=X,ROSTER("ownerUid")=$$SETUID^VPRUTILS("user",,X)
"RTN","VPREF",317,0)
 S X=$G(@Y@(.06,"E")) S:X ROSTER("patientListName")=X
"RTN","VPREF",318,0)
 S X=$G(@Y@(.03,"I")) S ROSTER("disabled")=$S(X=1:"true",1:"false")
"RTN","VPREF",319,0)
 S X=$G(@Y@(.05,"I")) S ROSTER("private")=$S(X="PR":"true",1:"false")
"RTN","VPREF",320,0)
 S X=$G(@Y@(2,"E")) S:X ROSTER("specialHandling")=X
"RTN","VPREF",321,0)
 I $D(VPRV(561.21)) S NODE="",VPRZ=0 D
"RTN","VPREF",322,0)
 . F  S NODE=$O(VPRV(561.21,NODE)) Q:NODE=""  D 
"RTN","VPREF",323,0)
 . . S VPRSEQ=VPRV(561.21,NODE,.01,"I") S ROSTER("sources",VPRSEQ,"sequence")=VPRSEQ
"RTN","VPREF",324,0)
 . . S VPRACT=VPRV(561.21,NODE,.03,"E") S ROSTER("sources",VPRSEQ,"action")=VPRACT
"RTN","VPREF",325,0)
 . . S VPRSOURCE=VPRV(561.21,NODE,.02,"I"),ROSTER("sources",VPRSEQ,"source")=$$SOURCE(VPRSOURCE)
"RTN","VPREF",326,0)
 . . S ROSTER("sources",VPRSEQ,"localId")=+VPRSOURCE
"RTN","VPREF",327,0)
 . . S GBL=U_$$CREF^DILF($P(VPRSOURCE,";",2)) S ROSTER("sources",VPRSEQ,"name")=$P($G(@GBL@(+VPRSOURCE,0)),U)
"RTN","VPREF",328,0)
 I $D(VPRV(561.23)) S NODE="",VPRZ=0 D
"RTN","VPREF",329,0)
 . F  S NODE=$O(VPRV(561.23,NODE)) Q:NODE=""  D
"RTN","VPREF",330,0)
 . . S VPRZ=VPRZ+1,VPRPAT=VPRV(561.23,NODE,.01,"E"),DFN=VPRV(561.23,NODE,.01,"I"),ICN=$$GETICN^MPIF001(DFN)
"RTN","VPREF",331,0)
 . . S ROSTER("patients",VPRZ,"name")=VPRPAT,ROSTER("patients",VPRZ,"localId")=DFN
"RTN","VPREF",332,0)
 . . S ROSTER("patients",VPRZ,"uid")=$$SETUID^VPRUTILS("patient",DFN,DFN)
"RTN","VPREF",333,0)
 . . I $D(VPRV(561.23,NODE,.02)) S ROSTER("patients",VPRZ,"sourceSequence")=VPRV(561.23,NODE,.02,"I")
"RTN","VPREF",334,0)
 . . I ICN>0 S ROSTER("patients",VPRZ,"icn")=ICN
"RTN","VPREF",335,0)
 . . S ROSTER("patients",VPRZ,"pid")=$$PID^VPRDJFS(DFN)
"RTN","VPREF",336,0)
 D ADD("ROSTER") S VPRLAST=ID
"RTN","VPREF",337,0)
 Q
"RTN","VPREF",338,0)
 ;
"RTN","VPREF",339,0)
SOURCE(SRC) ;
"RTN","VPREF",340,0)
 N X S X=""
"RTN","VPREF",341,0)
 I SRC["SC("        S X="clinic"
"RTN","VPREF",342,0)
 I SRC["DPT("       S X="patient"
"RTN","VPREF",343,0)
 I SRC["DIC(42"     S X="ward"
"RTN","VPREF",344,0)
 I SRC["SCTM"       S X="pcmm"
"RTN","VPREF",345,0)
 I SRC["OR(100.21"  S X="cprs"
"RTN","VPREF",346,0)
 I SRC["VPROSTER"   S X="roster"
"RTN","VPREF",347,0)
 I SRC["DIC(45.7"   S X="specialty"
"RTN","VPREF",348,0)
 I SRC["VA(200"     S X="provider"
"RTN","VPREF",349,0)
 I SRC["PXRM(810.4" S X="pxrm"
"RTN","VPREF",350,0)
 Q X
"RTN","VPREF",351,0)
 ;
"RTN","VPREF",352,0)
TESTROS ; TEMPORARY FOR TESTING
"RTN","VPREF",353,0)
 S FILT("domain")="roster"
"RTN","VPREF",354,0)
 S FILT("id")=277
"RTN","VPREF",355,0)
 D GET^VPREF(.ZZ,.FILT)
"RTN","VPREF",356,0)
 Q
"RTN","VPREF",357,0)
 ;
"RTN","VPREF",358,0)
ASU ; -- ASU files
"RTN","VPREF",359,0)
 N X,RTN S X=$P($G(TYPE),"-",2)
"RTN","VPREF",360,0)
 S RTN=$$UP^XLFSTR(X)_"^VPREASU"
"RTN","VPREF",361,0)
 I X'="",$L($T(@RTN)) D @RTN
"RTN","VPREF",362,0)
 Q
"RTN","VPREF",363,0)
 ;
"RTN","VPREF",364,0)
MDTERMS ; -- CP Terminology
"RTN","VPREF",365,0)
 D:$L($T(TERM^VPRMDUTL)) TERM^VPRMDUTL
"RTN","VPREF",366,0)
 Q
"RTN","VPREF",367,0)
LABGRP ;
"RTN","VPREF",368,0)
 D SHWCUMR2^VPRELAB
"RTN","VPREF",369,0)
 Q
"RTN","VPREF",370,0)
LABPNL ;
"RTN","VPREF",371,0)
 D SHWORPNL^VPRELAB
"RTN","VPREF",372,0)
 Q
"RTN","VPREF",373,0)
 ;
"RTN","VPREF",374,0)
ISPROXY(IEN) ;
"RTN","VPREF",375,0)
 N APP
"RTN","VPREF",376,0)
 S APP=$O(^VA(201,"B","APPLICATION PROXY","")) I APP'>0 Q 0
"RTN","VPREF",377,0)
 I $D(^VA(200,IEN,"USC3","B",APP)) Q 1
"RTN","VPREF",378,0)
 Q 0
"RTN","VPREFSG")
0^89^B7186739
"RTN","VPREFSG",1,0)
VPREFSG ;SLC/KCM -- GET for Extract and Freshness Stream
"RTN","VPREFSG",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPREFSG",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPREFSG",4,0)
 ;
"RTN","VPREFSG",5,0)
 ;
"RTN","VPREFSG",6,0)
DOMITMS ; loop thru extract items, OFFSET is last sent
"RTN","VPREFSG",7,0)
 ; expects VPRFSTRM,VPRFIDX,VPRFHMP
"RTN","VPREFSG",8,0)
 ; changes VPRFSEQ,VPRFCNT as each item added
"RTN","VPREFSG",9,0)
 N X,OFFSET,DOMAIN,TASK,BATCH,TOTAL
"RTN","VPREFSG",10,0)
 S X=^XTMP(VPRFSTRM,VPRFIDX)
"RTN","VPREFSG",11,0)
 S X=$P(X,U,3),DOMAIN=$P(X,":"),TASK=$P(X,":",2),TOTAL=$P(X,":",4)
"RTN","VPREFSG",12,0)
 S BATCH="VPRFX~"_VPRFHMP_"~OPD"       ; extract node in ^XTMP
"RTN","VPREFSG",13,0)
 S OFFSET=TOTAL-(VPRFIDX-VPRFSEQ)
"RTN","VPREFSG",14,0)
 F  S OFFSET=$O(^XTMP(BATCH,TASK,DOMAIN,OFFSET)) Q:'OFFSET  D  Q:VPRFCNT'<VPRFLIM
"RTN","VPREFSG",15,0)
 . S VPRFCNT=VPRFCNT+1 ; increment the count of returned items
"RTN","VPREFSG",16,0)
 . S VPRFSEQ=VPRFSEQ+1 ; increment the sequence number in the stream
"RTN","VPREFSG",17,0)
 . M ^TMP("VPRF",$J,VPRFCNT)=^XTMP(BATCH,TASK,DOMAIN,OFFSET)
"RTN","VPREFSG",18,0)
 . I DOMAIN="patient" I $$PATIENT(VPRFCNT,DOMAIN,$G(TOTAL),OFFSET)=1 Q
"RTN","VPREFSG",19,0)
 . S ^TMP("VPRF",$J,VPRFCNT,.3)=$$WRAPPER(DOMAIN,$S('TOTAL:0,1:OFFSET),+TOTAL)
"RTN","VPREFSG",20,0)
 Q
"RTN","VPREFSG",21,0)
 ;
"RTN","VPREFSG",22,0)
SYNCSTRT(SEQNODE) ; Build syncStart object with demograhics
"RTN","VPREFSG",23,0)
 S VPRFCNT=VPRFCNT+1
"RTN","VPREFSG",24,0)
 S ^TMP("VPRF",$J,VPRFCNT,.3)=$$WRAPPER("syncStart",1,0)
"RTN","VPREFSG",25,0)
 Q
"RTN","VPREFSG",26,0)
SYNCDONE(SEQNODE) ; Build syncStatus object and stick in ^TMP
"RTN","VPREFSG",27,0)
 ;  expects: VPRFSYS,VPRFCNT
"RTN","VPREFSG",28,0)
 N VPRBATCH,DFN,VPRBATCH,STS,STSJSON,X,ERR
"RTN","VPREFSG",29,0)
 S VPRBATCH=$P(SEQNODE,U,3) ; VPRFX~hmpSrvId~dfn
"RTN","VPREFSG",30,0)
 S STS("uid")="urn:va:syncStatus:"_VPRFSYS_":OPD"
"RTN","VPREFSG",31,0)
 S STS("initialized")="true"
"RTN","VPREFSG",32,0)
 S X="" F  S X=$O(^XTMP(VPRBATCH,0,"count",X)) Q:'$L(X)  D
"RTN","VPREFSG",33,0)
 . S STS("domainTotals",X)=^XTMP(VPRBATCH,0,"count",X)
"RTN","VPREFSG",34,0)
 D ENCODE^VPRJSON("STS","STSJSON","ERR")
"RTN","VPREFSG",35,0)
 I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","VPREFSG",36,0)
 S VPRFCNT=VPRFCNT+1
"RTN","VPREFSG",37,0)
 M ^TMP("VPRF",$J,VPRFCNT)=STSJSON
"RTN","VPREFSG",38,0)
 S ^TMP("VPRF",$J,VPRFCNT,.3)=$$WRAPPER("syncStatus","",-1)
"RTN","VPREFSG",39,0)
 Q
"RTN","VPREFSG",40,0)
 ;
"RTN","VPREFSG",41,0)
WRAPPER(DOMAIN,OFFSET,TOTAL) ; return JSON wrapper for each item
"RTN","VPREFSG",42,0)
 ; add object tag if extract total not zero or if total passed as -1
"RTN","VPREFSG",43,0)
 ; seq and total tags only added if non-zero
"RTN","VPREFSG",44,0)
 N X
"RTN","VPREFSG",45,0)
 S X="},{""collection"":"""_DOMAIN_""""
"RTN","VPREFSG",46,0)
 I $G(OFFSET)>0 S X=X_",""seq"":"_OFFSET
"RTN","VPREFSG",47,0)
 I $G(TOTAL)>0 S X=X_",""total"":"_TOTAL
"RTN","VPREFSG",48,0)
 I $G(TOTAL) S X=X_",""object"":"
"RTN","VPREFSG",49,0)
 Q X
"RTN","VPREFSG",50,0)
 ;
"RTN","VPREFSG",51,0)
PATIENT(VPRFCNT,DOMAIN,TOTAL,OFFSET) ;
"RTN","VPREFSG",52,0)
 N DFN,PIDS,TEMP,ERROR,PTJSON
"RTN","VPREFSG",53,0)
 M PTJSON=^TMP("VPRF",$J,VPRFCNT)
"RTN","VPREFSG",54,0)
 K PTJSON(.3)
"RTN","VPREFSG",55,0)
 D DECODE^VPRJSON("PTJSON","TEMP","ERROR")
"RTN","VPREFSG",56,0)
 ;D DECODE^VPRJSON($NA(^TMP("VPRF",$J,VPRFCNT,1)),"TEMP","ERROR")
"RTN","VPREFSG",57,0)
 I '$D(TEMP) Q 0
"RTN","VPREFSG",58,0)
 S DFN=TEMP("localId") I DFN'>0 Q 0
"RTN","VPREFSG",59,0)
 S PIDS=$$PIDS^VPRDJFS(DFN)
"RTN","VPREFSG",60,0)
 S ^TMP("VPRF",$J,VPRFCNT,.3)=$$WRAPPER^VPRDJFSG(DOMAIN,PIDS,$S('TOTAL:0,1:OFFSET),+TOTAL)
"RTN","VPREFSG",61,0)
 Q 1
"RTN","VPREFSG",62,0)
 ;
"RTN","VPREFSP")
0^90^B44858817
"RTN","VPREFSP",1,0)
VPREFSP ;SLC/KCM -- PUT/POST for Extract and Freshness Stream
"RTN","VPREFSP",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPREFSP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPREFSP",4,0)
 ;
"RTN","VPREFSP",5,0)
 ;
"RTN","VPREFSP",6,0)
 ; --- create a new patient subscription
"RTN","VPREFSP",7,0)
 ;
"RTN","VPREFSP",8,0)
PUTSUB(ARGS,BODY) ; return location after creating a new subscription
"RTN","VPREFSP",9,0)
 ; PUT to: /vpr/subscription
"RTN","VPREFSP",10,0)
 ;   JSON: {server:hmpXYZ,localId:229,icn:102324324,domains:[lab,med,...]}
"RTN","VPREFSP",11,0)
 ;VPRFRSP: location:/vpr/subscription/{hmpSrvId}/patient/{dfn}
"RTN","VPREFSP",12,0)
 ;
"RTN","VPREFSP",13,0)
 N CNT,DOMAIN,ICN,OBJ,ERR,HMPSRV,VPRFDFN,VPRFDOM,VPRBATCH,VPRFERR,NEWSUB
"RTN","VPREFSP",14,0)
 D DECODE^VPRJSON("BODY","OBJ","ERR")
"RTN","VPREFSP",15,0)
 I $D(ERR) D SETERR^VPRDJFS("Unable to decode JSON") Q ""
"RTN","VPREFSP",16,0)
 S HMPSRV=$TR($G(OBJ("server")),"~","=")
"RTN","VPREFSP",17,0)
 I '$L(HMPSRV) D SETERR^VPRDJFS("Missing HMP Server ID") Q ""
"RTN","VPREFSP",18,0)
 M VPRFDOM=OBJ("domains") I $D(VPRFDOM)<10 D DOMAINS(.VPRFDOM)
"RTN","VPREFSP",19,0)
 S VPRBATCH="VPRFX~"_HMPSRV_"~OPD"
"RTN","VPREFSP",20,0)
 ;;AGP check for domains already in process, remove domains that already in process.
"RTN","VPREFSP",21,0)
 I $D(^XTMP(VPRBATCH,0,"status")) D
"RTN","VPREFSP",22,0)
 .S CNT=0 F  S CNT=$O(VPRFDOM(CNT)) Q:CNT'>0  D
"RTN","VPREFSP",23,0)
 ..S DOMAIN=$G(VPRFDOM(CNT)) I DOMAIN="" Q
"RTN","VPREFSP",24,0)
 ..I $G(^XTMP(VPRBATCH,0,"status",DOMAIN))=0 K VPRFDOM(CNT)
"RTN","VPREFSP",25,0)
 ;
"RTN","VPREFSP",26,0)
 I '$$TM^%ZTLOAD D SETERR^VPRDJFS("Taskman not running") Q ""
"RTN","VPREFSP",27,0)
 I '$D(^XTMP("VPRFP",0)) D NEWXTMP^VPRDJFS("VPRFP",9999,"VPR Subscriptions")
"RTN","VPREFSP",28,0)
 ;
"RTN","VPREFSP",29,0)
 ; ^XTMP("VPRFP",VPRFDFN,HMPSRV)=0 -- unsubscribed
"RTN","VPREFSP",30,0)
 ; ^XTMP("VPRFP",VPRFDFN,HMPSRV)=1 -- subscribed
"RTN","VPREFSP",31,0)
 ; ^XTMP("VPRFP",VPRFDFN,HMPSRV)=2 -- initialized (extracts complete)
"RTN","VPREFSP",32,0)
 ; locks ensure only one process queues the extracts
"RTN","VPREFSP",33,0)
 S NEWSUB=0
"RTN","VPREFSP",34,0)
 ;
"RTN","VPREFSP",35,0)
 L +^XTMP("VPRFP","OPD",HMPSRV):5 E  D SETERR^VPRDJFS("Unable to lock operational data for "_DOMAIN) Q
"RTN","VPREFSP",36,0)
 ;I $G(^XTMP("VPRFP",DOMAIN,HMPSRV))'=1 S ^XTMP("VPRFP","OPD",HMPSRV)=1,NEWSUB=1
"RTN","VPREFSP",37,0)
 S ^XTMP("VPRFP","OPD",HMPSRV)=1,NEWSUB=1
"RTN","VPREFSP",38,0)
 L -^XTMP("VPRFP","OPD",HMPSRV)
"RTN","VPREFSP",39,0)
 I NEWSUB D QUINIT(VPRBATCH,.VPRFDOM) Q:$G(VPRFERR) ""
"RTN","VPREFSP",40,0)
 Q "/vpr/subscription/"_HMPSRV_"/operationalData"
"RTN","VPREFSP",41,0)
 ;
"RTN","VPREFSP",42,0)
QUINIT(VPRBATCH,VPRFDOM) ; Queue the initial extracts for a patient
"RTN","VPREFSP",43,0)
 ; VPRBATCH="VPRFP~hmpsrvid~OPD"  example: VPRFX~hmpXYZ~229
"RTN","VPREFSP",44,0)
 ; VPRFDOM(n)="domainName"
"RTN","VPREFSP",45,0)
 ; 
"RTN","VPREFSP",46,0)
 ; ^XTMP("VPRFX~hmpsrvid~OPD",0)=expires^created^VPR Operational Data Extract
"RTN","VPREFSP",47,0)
 ;                           ,0,"status",domain)=extract status
"RTN","VPREFSP",48,0)
 ;                           ,0,"task",taskIen)=""
"RTN","VPREFSP",49,0)
 ;                           ,taskIen,domain,... (extract data)
"RTN","VPREFSP",50,0)
 ;
"RTN","VPREFSP",51,0)
 D NEWXTMP^VPRDJFS(VPRBATCH,1,"VPR Operational Data Extract")
"RTN","VPREFSP",52,0)
 S ^XTMP(VPRBATCH,0,"time")=$H
"RTN","VPREFSP",53,0)
 N I S I=0 F  S I=$O(VPRFDOM(I)) Q:'I  D SETDOM("status",VPRFDOM(I),0)
"RTN","VPREFSP",54,0)
 D SETMARK("Start",VPRBATCH) ; sends full demographics
"RTN","VPREFSP",55,0)
 ;
"RTN","VPREFSP",56,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","VPREFSP",57,0)
 S ZTRTN="DQINIT^VPREFSP",ZTIO="",ZTDTH=$H
"RTN","VPREFSP",58,0)
 S ZTSAVE("VPRBATCH")="",ZTSAVE("VPRFDOM(")=""
"RTN","VPREFSP",59,0)
 S ZTDESC="Build VPR operational data domains"
"RTN","VPREFSP",60,0)
 D ^%ZTLOAD
"RTN","VPREFSP",61,0)
 ;D DQINIT
"RTN","VPREFSP",62,0)
 ;
"RTN","VPREFSP",63,0)
 I $G(ZTSK) D
"RTN","VPREFSP",64,0)
 .W !,"task: "_ZTSK
"RTN","VPREFSP",65,0)
 .S ^XTMP(VPRBATCH,0,"task",ZTSK)="" I 1
"RTN","VPREFSP",66,0)
 E  D SETERR^VPRDJFS("Task not created")
"RTN","VPREFSP",67,0)
 Q
"RTN","VPREFSP",68,0)
SETDOM(ATTRIB,DOMAIN,VALUE) ; Set value for a domain
"RTN","VPREFSP",69,0)
 ; expects: VPRBATCH
"RTN","VPREFSP",70,0)
 ; ATTRIB: "status" or "count" attribute
"RTN","VPREFSP",71,0)
 ; DOMAIN: name of domain
"RTN","VPREFSP",72,0)
 ; if status, VALUE: 0=waiting, 1=ready
"RTN","VPREFSP",73,0)
 ; if count,  VALUE: count of items
"RTN","VPREFSP",74,0)
 S ^XTMP(VPRBATCH,0,ATTRIB,DOMAIN)=VALUE
"RTN","VPREFSP",75,0)
 Q
"RTN","VPREFSP",76,0)
DQINIT ; Dequeue initial extracts
"RTN","VPREFSP",77,0)
 ; expects:  VPRBATCH, VPRFDFN, VPRFDOM, ZTSK
"RTN","VPREFSP",78,0)
 I '$D(^XTMP(VPRBATCH,0,"task",ZTSK)) Q  ; extract was superceded
"RTN","VPREFSP",79,0)
 N VPRFDOMI,VPRFSYS,VPRFZTSK
"RTN","VPREFSP",80,0)
 S VPRFSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPREFSP",81,0)
 S VPRFZTSK=ZTSK ; just in case the unexpected happens to ZTSK
"RTN","VPREFSP",82,0)
 S VPRFDOMI="" F  S VPRFDOMI=$O(VPRFDOM(VPRFDOMI)) Q:'VPRFDOMI  D
"RTN","VPREFSP",83,0)
 . N FILTER,RSLT
"RTN","VPREFSP",84,0)
 . S FILTER("domain")=VPRFDOM(VPRFDOMI)
"RTN","VPREFSP",85,0)
 . D GET^VPREF(.RSLT,.FILTER)
"RTN","VPREFSP",86,0)
 . D MOD4STRM(VPRFDOM(VPRFDOMI))
"RTN","VPREFSP",87,0)
 . ; if superceded, stop processing domains
"RTN","VPREFSP",88,0)
 . I '$D(^XTMP(VPRBATCH,0,"task",VPRFZTSK)) S VPRFDOMI=999 Q
"RTN","VPREFSP",89,0)
 . D SETDOM("status",VPRFDOM(VPRFDOMI),1) ; ready
"RTN","VPREFSP",90,0)
 ; if superceded, remove extracts produced by this task
"RTN","VPREFSP",91,0)
 I '$D(^XTMP(VPRBATCH,0,"task",VPRFZTSK)) K ^XTMP(VPRBATCH,VPRFZTSK) Q
"RTN","VPREFSP",92,0)
 ; don't assume initialized, since we may split domains to other tasks
"RTN","VPREFSP",93,0)
 I $$INITDONE(VPRBATCH) D             ; if all domains extracted
"RTN","VPREFSP",94,0)
 . D SETMARK("Done",VPRBATCH) ; - add updated syncStatus
"RTN","VPREFSP",95,0)
 . D MVFRUPD(VPRBATCH)        ; - move freshness updates over
"RTN","VPREFSP",96,0)
 Q
"RTN","VPREFSP",97,0)
SETMARK(TYPE,VPRBATCH) ; Post markers for begin and end of initial synch
"RTN","VPREFSP",98,0)
 N HPMSRV,NODES,X
"RTN","VPREFSP",99,0)
 S HMPSRV=$P(VPRBATCH,"~",2)
"RTN","VPREFSP",100,0)
 D POST^VPRDJFS("OPD","sync"_TYPE,VPRBATCH,"",HMPSRV,.NODES)
"RTN","VPREFSP",101,0)
 Q:TYPE="Start"
"RTN","VPREFSP",102,0)
 S X="" F  S X=$O(NODES(X)) Q:X=""  D  ; iterate hmp servers
"RTN","VPREFSP",103,0)
 . S ^XTMP("VPRFP","tidy",X,$P(NODES(X),U),$P(NODES(X),U,2))=VPRBATCH
"RTN","VPREFSP",104,0)
 Q
"RTN","VPREFSP",105,0)
MVFRUPD(VPRBATCH) ; Move freshness updates over active stream
"RTN","VPREFSP",106,0)
 N I,X,FROM,HMPSRV,TYPE,ID,ACT
"RTN","VPREFSP",107,0)
 S HMPSRV=$P(VPRBATCH,"~",2)
"RTN","VPREFSP",108,0)
 S ^XTMP("VPRFP","OPD",HMPSRV)=2       ; now initialized
"RTN","VPREFSP",109,0)
 S FROM="VPRFH~"_HMPSRV_"~OPD"
"RTN","VPREFSP",110,0)
 S I=0 F  S I=$O(^XTMP(FROM,I)) Q:'I  D  ; move over held updates
"RTN","VPREFSP",111,0)
 . S X=^XTMP(FROM,I)
"RTN","VPREFSP",112,0)
 . S TYPE=$P(X,U,2),ID=$P(X,U,3),ACT=$P(X,U,4)
"RTN","VPREFSP",113,0)
 . D POST^VPRDJFS("OPD",TYPE,ID,ACT,HMPSRV)
"RTN","VPREFSP",114,0)
 K ^XTMP(FROM)
"RTN","VPREFSP",115,0)
 Q
"RTN","VPREFSP",116,0)
MOD4STRM(DOMAIN) ; modify extract to be ready for stream
"RTN","VPREFSP",117,0)
 ; expects: VPRBATCH, VPRFSYS, VPRFZTSK
"RTN","VPREFSP",118,0)
 ; results are in ^XTMP("VPRFX~hmpsrv~dfn",DFN,DOMAIN,...)
"RTN","VPREFSP",119,0)
 ; syncError: {uid,collection,error}  uid=urn:va:syncError:sysId:dfn:extract
"RTN","VPREFSP",120,0)
 N DFN,HMPSRV,COUNT,LNODE
"RTN","VPREFSP",121,0)
 S HMPSRV=$P(VPRBATCH,"~",2)
"RTN","VPREFSP",122,0)
 ; no items -- COUNT is in 1 node, otherwise COUNT is in the .5 node
"RTN","VPREFSP",123,0)
 S COUNT=0
"RTN","VPREFSP",124,0)
 I $D(^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,.5)) S COUNT=+$P(^(.5),"""totalItems"":",2)
"RTN","VPREFSP",125,0)
 ; remove headers (.5,.6) and closing braces (at COUNT+1)
"RTN","VPREFSP",126,0)
 K ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,.5)
"RTN","VPREFSP",127,0)
 K ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,.6)
"RTN","VPREFSP",128,0)
 K ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,COUNT+1)
"RTN","VPREFSP",129,0)
 S LNODE=$O(^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,""),-1)
"RTN","VPREFSP",130,0)
 I LNODE>0,$G(^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,LNODE))="]}}" K ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,LNODE)
"RTN","VPREFSP",131,0)
 ; if no items -- return empty object to be wrapped
"RTN","VPREFSP",132,0)
 I COUNT=0 S ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,1,1)=""
"RTN","VPREFSP",133,0)
 ; if error, add syncError object (from COUNT+2)
"RTN","VPREFSP",134,0)
 I $D(^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,COUNT+2)) D
"RTN","VPREFSP",135,0)
 . N JSON
"RTN","VPREFSP",136,0)
 . D BLDSERR(COUNT+2,DOMAIN,.JSON) Q:'$D(JSON)
"RTN","VPREFSP",137,0)
 . S COUNT=COUNT+1
"RTN","VPREFSP",138,0)
 . M ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,COUNT)=JSON
"RTN","VPREFSP",139,0)
 ; set .7 node to total count (including error)
"RTN","VPREFSP",140,0)
 ;S ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,.7)=COUNT
"RTN","VPREFSP",141,0)
 D SETDOM("count",DOMAIN,COUNT)
"RTN","VPREFSP",142,0)
 ; if count 0 -- still return wrapper object so we know the domain had nothing
"RTN","VPREFSP",143,0)
 D POST^VPRDJFS("OPD","syncDomain",DOMAIN_":"_VPRFZTSK_":"_($S(COUNT=0:1,1:COUNT))_":"_COUNT,"",HMPSRV)
"RTN","VPREFSP",144,0)
 Q
"RTN","VPREFSP",145,0)
BLDSERR(NODE,DOMAIN,ERRJSON) ; Create syncError object in ERRJSON
"RTN","VPREFSP",146,0)
 ; expects: VPRBATCH, VPRFSYS, VPRFZTSK
"RTN","VPREFSP",147,0)
 N ERRJSON,ERROBJ,ERR,ERRMSG,SYNCERR
"RTN","VPREFSP",148,0)
 S ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,NODE,.3)="{"  ; replace , with { for decoding JSON
"RTN","VPREFSP",149,0)
 M ERRJSON=^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,NODE)
"RTN","VPREFSP",150,0)
 D DECODE^VPRJSON("ERRJSON","ERROBJ","ERR") I $D(ERR) S $EC=",UJSON decode error,"
"RTN","VPREFSP",151,0)
 K ^XTMP(VPRBATCH,VPRFZTSK,DOMAIN,NODE)
"RTN","VPREFSP",152,0)
 S ERRMSG=ERROBJ("error","message")
"RTN","VPREFSP",153,0)
 Q:'$L(ERRMSG)
"RTN","VPREFSP",154,0)
 S SYNCERR("uid")="urn:va:syncError:"_VPRFSYS_":"_DOMAIN
"RTN","VPREFSP",155,0)
 S SYNCERR("collection")=DOMAIN
"RTN","VPREFSP",156,0)
 S SYNCERR("error")=ERRMSG
"RTN","VPREFSP",157,0)
 D ENCODE^VPRJSON("SYNCERR","ERRJSON","ERR") I $D(ERR) S $EC=",UJSON encode error,"
"RTN","VPREFSP",158,0)
 Q
"RTN","VPREFSP",159,0)
INITDONE(VPRBATCH) ; Return 1 if all domains are done
"RTN","VPREFSP",160,0)
 N X,DONE
"RTN","VPREFSP",161,0)
 S X="",DONE=1
"RTN","VPREFSP",162,0)
 F  S X=$O(^XTMP(VPRBATCH,0,"status",X)) Q:'$L(X)  I '^(X) S DONE=0
"RTN","VPREFSP",163,0)
 Q DONE
"RTN","VPREFSP",164,0)
 ;
"RTN","VPREFSP",165,0)
DOMAINS(LIST) ; load default domains (put in parameter?)
"RTN","VPREFSP",166,0)
 ;;asu-class
"RTN","VPREFSP",167,0)
 ;;asu-rule
"RTN","VPREFSP",168,0)
 ;;category
"RTN","VPREFSP",169,0)
 ;;charttab
"RTN","VPREFSP",170,0)
 ;;displaygroup
"RTN","VPREFSP",171,0)
 ;;doc-def
"RTN","VPREFSP",172,0)
 ;;labgroup
"RTN","VPREFSP",173,0)
 ;;labpanel
"RTN","VPREFSP",174,0)
 ;;location
"RTN","VPREFSP",175,0)
 ;;orderable
"RTN","VPREFSP",176,0)
 ;;page
"RTN","VPREFSP",177,0)
 ;;patient
"RTN","VPREFSP",178,0)
 ;;personphoto
"RTN","VPREFSP",179,0)
 ;;pointofcare
"RTN","VPREFSP",180,0)
 ;;quick
"RTN","VPREFSP",181,0)
 ;;roster
"RTN","VPREFSP",182,0)
 ;;route
"RTN","VPREFSP",183,0)
 ;;schedule
"RTN","VPREFSP",184,0)
 ;;team
"RTN","VPREFSP",185,0)
 ;;teamposition
"RTN","VPREFSP",186,0)
 ;;user
"RTN","VPREFSP",187,0)
 ;;usertabprefs
"RTN","VPREFSP",188,0)
 ;;viewdefdef
"RTN","VPREFSP",189,0)
 ;;viewdefdefcoldefconfigtemplate
"RTN","VPREFSP",190,0)
 ;;zzzzz
"RTN","VPREFSP",191,0)
 ;;clioterminology
"RTN","VPREFSP",192,0)
 ;;doc-action
"RTN","VPREFSP",193,0)
 ;;doc-status
"RTN","VPREFSP",194,0)
 N I,X
"RTN","VPREFSP",195,0)
 F I=1:1 S X=$P($T(DOMAINS+I),";;",2,99) Q:X="zzzzz"  S LIST(I)=X
"RTN","VPREFSP",196,0)
 Q
"RTN","VPREFSP",197,0)
 ;
"RTN","VPREFST")
0^91^B5375002
"RTN","VPREFST",1,0)
VPREFST ;SLC/KCM -- Tests for extract and freshness stream
"RTN","VPREFST",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPREFST",3,0)
 ;
"RTN","VPREFST",4,0)
TEST ; Test synchronization process
"RTN","VPREFST",5,0)
 N LASTUPD,TOTPTS,DONE,START,GTOTAL
"RTN","VPREFST",6,0)
 S LASTUPD=0,TOTPTS=0,DONE=0,GTOTAL=0
"RTN","VPREFST",7,0)
 S START=$P($H,",",2)
"RTN","VPREFST",8,0)
 ;D KILL^VPRDJFS
"RTN","VPREFST",9,0)
 D STRTSYNC
"RTN","VPREFST",10,0)
 F  H 2 D LOADUPD Q:DONE=1
"RTN","VPREFST",11,0)
 ;D LOADUPD ; one last time to clear the last patient
"RTN","VPREFST",12,0)
 W !,"Elapsed Seconds: ",$P($H,",",2)-START
"RTN","VPREFST",13,0)
 Q
"RTN","VPREFST",14,0)
STRTSYNC ; Add patients for synchronization
"RTN","VPREFST",15,0)
 ; expects TOTPTS
"RTN","VPREFST",16,0)
 N ARGS,RSP
"RTN","VPREFST",17,0)
 S ARGS("command")="startOperationalDataExtract"
"RTN","VPREFST",18,0)
 S ARGS("server")="hmpTest"
"RTN","VPREFST",19,0)
 D API^VPRDJFS(.RSP,.ARGS)
"RTN","VPREFST",20,0)
 ;ZW ^TMP("VPRF",$J)
"RTN","VPREFST",21,0)
 Q
"RTN","VPREFST",22,0)
LOADUPD ; Load updates
"RTN","VPREFST",23,0)
 ; expects LASTUPD
"RTN","VPREFST",24,0)
 N RSP,ARGS,ERR,CNT,LNODE
"RTN","VPREFST",25,0)
 ;S ARGS("command")="getOperationalDataUpdates"
"RTN","VPREFST",26,0)
 S ARGS("command")="getPtUpdates"
"RTN","VPREFST",27,0)
 S ARGS("server")="hmpTest"
"RTN","VPREFST",28,0)
 S ARGS("lastUpdate")=LASTUPD
"RTN","VPREFST",29,0)
 S ARGS("max")=1000
"RTN","VPREFST",30,0)
 D API^VPRDJFS(.RSP,.ARGS)
"RTN","VPREFST",31,0)
 D SCANHDRS
"RTN","VPREFST",32,0)
 S LASTUPD=$$GETLUPD
"RTN","VPREFST",33,0)
 S CNT=$$CNTOBJS,GTOTAL=GTOTAL+CNT
"RTN","VPREFST",34,0)
 W !,"lastUpdate: ",LASTUPD,"  items: ",CNT_"/"_GTOTAL,?50
"RTN","VPREFST",35,0)
 Q
"RTN","VPREFST",36,0)
SCANHDRS ; Scan headers for syncDone objects
"RTN","VPREFST",37,0)
 ; expects DONEPTS
"RTN","VPREFST",38,0)
 N I
"RTN","VPREFST",39,0)
 W !
"RTN","VPREFST",40,0)
 ;ZW ^TMP("VPRF",$J)
"RTN","VPREFST",41,0)
 S I=0 F  S I=$O(^TMP("VPRF",$J,I)) Q:'I  D
"RTN","VPREFST",42,0)
 . I $G(^TMP("VPRF",$J,I,.3))["syncStatus" S DONE=1
"RTN","VPREFST",43,0)
 Q
"RTN","VPREFST",44,0)
SHOWHDRS ; Show object header info
"RTN","VPREFST",45,0)
 N I
"RTN","VPREFST",46,0)
 S I=0 F  S I=$O(^TMP("VPRF",$J,I)) Q:'I  D
"RTN","VPREFST",47,0)
 . W !,"Hdr: ",$G(^TMP("VPRF",$J,I,.3))
"RTN","VPREFST",48,0)
 Q
"RTN","VPREFST",49,0)
CNTOBJS() ; Return count of objects returned
"RTN","VPREFST",50,0)
 N I,C
"RTN","VPREFST",51,0)
 S C=0
"RTN","VPREFST",52,0)
 S I=.9 ; skip .5 header node
"RTN","VPREFST",53,0)
 W !
"RTN","VPREFST",54,0)
 ;ZW ^TMP("VPRF",$J)
"RTN","VPREFST",55,0)
 F  S I=$O(^TMP("VPRF",$J,I)) Q:'I  I $L($G(^TMP("VPRF",$J,I,1))) S C=C+1 W !,^TMP("VPRF",$J,I,1)
"RTN","VPREFST",56,0)
 Q C
"RTN","VPREFST",57,0)
 ;
"RTN","VPREFST",58,0)
GETLUPD() ; Return last update value
"RTN","VPREFST",59,0)
 N X
"RTN","VPREFST",60,0)
 W !
"RTN","VPREFST",61,0)
 ;ZW ^TMP("VPRF",$J)
"RTN","VPREFST",62,0)
 S X=^TMP("VPRF",$J,.5),X=$P(X,"""lastUpdate"":""",2),X=$P(X,""",")
"RTN","VPREFST",63,0)
 Q X
"RTN","VPREFST",64,0)
 ;
"RTN","VPREFST",65,0)
TOTALS ;
"RTN","VPREFST",66,0)
 N P,T
"RTN","VPREFST",67,0)
 S T=0
"RTN","VPREFST",68,0)
 S P=0 F  S P=$O(^XTMP("VPRFP",P)) Q:'P  S T=T+^XTMP("VPRFP",P,"hmpTest","total")
"RTN","VPREFST",69,0)
 W !,"TOTAL: ",T
"RTN","VPREFST",70,0)
 Q
"RTN","VPREFST",71,0)
GETFEW ;
"RTN","VPREFST",72,0)
 S ARGS("command")="getPtUpdates"
"RTN","VPREFST",73,0)
 S ARGS("server")="hmpTest"
"RTN","VPREFST",74,0)
 S ARGS("lastUpdate")="3140115-251"
"RTN","VPREFST",75,0)
 S ARGS("max")=10
"RTN","VPREFST",76,0)
 D API^VPRDJFS(.RSP,.ARGS)
"RTN","VPREFST",77,0)
 Q
"RTN","VPREFX")
0^55^B8552882
"RTN","VPREFX",1,0)
VPREFX ;SLC/MKB -- Reference data update ; 7/19/12 2:26pm
"RTN","VPREFX",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPREFX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPREFX",4,0)
 ;
"RTN","VPREFX",5,0)
 ; External References          DBIA#
"RTN","VPREFX",6,0)
 ; -------------------          -----
"RTN","VPREFX",7,0)
 ; ^DPT                         10035
"RTN","VPREFX",8,0)
 ; MPIF001                       2701
"RTN","VPREFX",9,0)
 ; XLFSTR                       10104
"RTN","VPREFX",10,0)
 ;
"RTN","VPREFX",11,0)
EN(LAST,MAX) ; -- get data from ^XTMP("VPREF-<date>",n)
"RTN","VPREFX",12,0)
 ;[MAX not used yet]
"RTN","VPREFX",13,0)
 N X,Y,VPRTOTL,DOMCNT,TYPE,NAME,RTN,VPRID
"RTN","VPREFX",14,0)
 S LAST=$G(LAST) D GETLIST(LAST)
"RTN","VPREFX",15,0)
 G ENQ:$G(^TMP("VPRX",$J,0))<1 ;no data
"RTN","VPREFX",16,0)
 ;
"RTN","VPREFX",17,0)
 S (VPRTOTL,DOMCNT)=0
"RTN","VPREFX",18,0)
 S TYPE="" F  S TYPE=$O(^TMP("VPRX",$J,TYPE)) Q:TYPE=""  D
"RTN","VPREFX",19,0)
 . S NAME=$$LOW^XLFSTR(TYPE)
"RTN","VPREFX",20,0)
 . S RTN=$$TAG^VPREF(NAME)_"^VPREF" Q:'$L($T(@RTN))
"RTN","VPREFX",21,0)
 . S DOMCNT=DOMCNT+1
"RTN","VPREFX",22,0)
 . ;
"RTN","VPREFX",23,0)
 . N VPR,VPRI
"RTN","VPREFX",24,0)
 . S VPR=$NA(^TMP("VPR",$J,DOMCNT)),VPRI=0,VPRID=""
"RTN","VPREFX",25,0)
 . F  S VPRID=$O(^TMP("VPRX",$J,TYPE,VPRID)) Q:VPRID=""  D
"RTN","VPREFX",26,0)
 .. D @RTN S VPRTOTL=VPRTOTL+1
"RTN","VPREFX",27,0)
 . ;
"RTN","VPREFX",28,0)
 . I 'VPRI S DOMCNT=DOMCNT-1 Q   ;no data, or error
"RTN","VPREFX",29,0)
 . S:DOMCNT>1 @VPR@(.3)=","
"RTN","VPREFX",30,0)
 . S @VPR@(.5)="{""domainName"":"""_NAME_""",""total"":"_VPRI_",""items"":["
"RTN","VPREFX",31,0)
 . S VPRI=VPRI+1,@VPR@(VPRI)="]}"
"RTN","VPREFX",32,0)
 ;
"RTN","VPREFX",33,0)
ENQ ;
"RTN","VPREFX",34,0)
 S Y=$G(^TMP("VPRX",$J,0)) K ^TMP("VPRX",$J)
"RTN","VPREFX",35,0)
 I '$G(DOMCNT) S @VPR@(.5)="{""apiVersion"":""1.01"",""data"":{""lastUpdate"":"""_LAST_""",""totalItems"":0,""items"":[]}}" Q
"RTN","VPREFX",36,0)
 ;
"RTN","VPREFX",37,0)
 S @VPR@(.5)="{""apiVersion"":""1.01"",""data"":{""lastUpdate"":"""_Y_""",""totalItems"":"_DOMCNT_",""items"":["
"RTN","VPREFX",38,0)
 S VPRI=DOMCNT I $D(^TMP($J,"VPR ERROR")) D
"RTN","VPREFX",39,0)
 . N ERROR,CNT
"RTN","VPREFX",40,0)
 . D BUILDERR^VPREF(.ERROR)
"RTN","VPREFX",41,0)
 . S VPRI=VPRI+1,@VPR@(VPRI)=",",CNT=0
"RTN","VPREFX",42,0)
 . F  S CNT=$O(ERROR(CNT)) Q:CNT'>0  S VPRI=VPRI+1,@VPR@(VPRI)=ERROR(CNT)
"RTN","VPREFX",43,0)
 . K ^TMP($J,"VPR ERROR")
"RTN","VPREFX",44,0)
 S VPRI=VPRI+1,@VPR@(VPRI)="]}}"
"RTN","VPREFX",45,0)
 Q
"RTN","VPREFX",46,0)
 ;
"RTN","VPREFX",47,0)
GETLIST(LAST) ; -- build list of updates for client
"RTN","VPREFX",48,0)
 ; Returns ^TMP("VPRX",$J,0) = last DATE:SEQ included
"RTN","VPREFX",49,0)
 ;         ^TMP("VPRX",$J,TYPE,ID)=ACT
"RTN","VPREFX",50,0)
 N DATE,SEQ,BEG,END,IDX,X0,DFN,TYPE,ID,ACT
"RTN","VPREFX",51,0)
 K ^TMP("VPRX",$J)
"RTN","VPREFX",52,0)
 S DATE=+LAST,SEQ=+$P(LAST,":",2)
"RTN","VPREFX",53,0)
 ; generate list ID, and end point
"RTN","VPREFX",54,0)
 S BEG=$NA(^XTMP("VPREF-"_DATE,SEQ))         ;init loop where left off
"RTN","VPREFX",55,0)
 ; END=$Q(^XTMP("VPREF-"_(DT+1),9999999),-1) ;last node
"RTN","VPREFX",56,0)
 S END=+$O(^XTMP("VPREF-"_DT,"A"),-1)        ;last node
"RTN","VPREFX",57,0)
 S ^TMP("VPRX",$J,0)=DT_":"_END              ;date:seq
"RTN","VPREFX",58,0)
 ;
"RTN","VPREFX",59,0)
 S IDX=BEG F  S IDX=$Q(@IDX) Q:$$DONE  D
"RTN","VPREFX",60,0)
 . S X0=@IDX,TYPE=$P(X0,U),ID=$P(X0,U,2),ACT=$P(X0,U,3)
"RTN","VPREFX",61,0)
 . I TYPE=""!(ID="") Q  ;error
"RTN","VPREFX",62,0)
 . S ^TMP("VPRX",$J,TYPE,ID)=ACT
"RTN","VPREFX",63,0)
 Q
"RTN","VPREFX",64,0)
 ;
"RTN","VPREFX",65,0)
DONE() ; -- Return 1 or 0, if loop has finished
"RTN","VPREFX",66,0)
 I IDX'?1"^XTMP(""VPREF-"7N.E  Q 1  ;end of ^XTMP
"RTN","VPREFX",67,0)
 N D,N S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","VPREFX",68,0)
 ; check VPR-DATE subscript
"RTN","VPREFX",69,0)
 I D<DT Q 0                         ;prior day: keep going
"RTN","VPREFX",70,0)
 I D>DT Q 1                         ;next day:  stop loop
"RTN","VPREFX",71,0)
 ; D=DT: check sequence# subscript
"RTN","VPREFX",72,0)
 I N>END Q 1
"RTN","VPREFX",73,0)
 Q 0
"RTN","VPREHL7")
0^97^B3241775
"RTN","VPREHL7",1,0)
VPREHL7 ;ALB/MJK - VPR HL7 ADT Message Processor ;03/25/2014 16:50:09
"RTN","VPREHL7",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPREHL7",3,0)
 ;;
"RTN","VPREHL7",4,0)
 ;
"RTN","VPREHL7",5,0)
ADT ; -- main entry point for the following VPR ADT client/router protocols:
"RTN","VPREHL7",6,0)
 ;          - VPR ADT-A04 CLIENT protocol
"RTN","VPREHL7",7,0)
 ;             o  subscribes to VAFC ADT-A04 SERVER 
"RTN","VPREHL7",8,0)
 ;          - VPR ADT-A08 CLIENT protocol
"RTN","VPREHL7",9,0)
 ;             o  subscribes to VAFC ADT-A08 SERVER 
"RTN","VPREHL7",10,0)
 ;
"RTN","VPREHL7",11,0)
 ; Note: These variables are provided by the VistA HL7 system when a
"RTN","VPREHL7",12,0)
 ;       subscriber protocol's ROUTING LOGIC is called:
"RTN","VPREHL7",13,0)
 ;            - HLNEXT
"RTN","VPREHL7",14,0)
 ;            - HLQUIT
"RTN","VPREHL7",15,0)
 ;            - HLNODE
"RTN","VPREHL7",16,0)
 ;            - HL("FS")
"RTN","VPREHL7",17,0)
 ;            - HL("ECH")
"RTN","VPREHL7",18,0)
 ;
"RTN","VPREHL7",19,0)
 ; -- scans/filters ADT/A04 & A08 events for PID segment and DFN; sets ^XTMP("VPRFS~...
"RTN","VPREHL7",20,0)
 ;
"RTN","VPREHL7",21,0)
 NEW DONE,VPRSEG,VPREVT
"RTN","VPREHL7",22,0)
 SET DONE=0
"RTN","VPREHL7",23,0)
 FOR  XECUTE HLNEXT QUIT:HLQUIT'>0  DO  QUIT:DONE
"RTN","VPREHL7",24,0)
 . SET VPRSEG=$EXTRACT(HLNODE,1,3)
"RTN","VPREHL7",25,0)
 . ;
"RTN","VPREHL7",26,0)
 . IF VPRSEG="EVN" DO  QUIT
"RTN","VPREHL7",27,0)
 . . SET VPREVT=$PIECE(HLNODE,HLFS,2)
"RTN","VPREHL7",28,0)
 . . IF VPREVT="A04" QUIT
"RTN","VPREHL7",29,0)
 . . ; -- 97 reason = sensitive patient change occurred
"RTN","VPREHL7",30,0)
 . . IF VPREVT="A08",$PIECE(HLNODE,HLFS,5)=97 QUIT
"RTN","VPREHL7",31,0)
 . . ; -- not an event VPR is interested in so done with message
"RTN","VPREHL7",32,0)
 . . SET DONE=1
"RTN","VPREHL7",33,0)
 . ; -- PID segment always comes after EVN segment
"RTN","VPREHL7",34,0)
 . IF VPRSEG'="PID" QUIT
"RTN","VPREHL7",35,0)
 . SET DONE=1
"RTN","VPREHL7",36,0)
 . ; -- VPREVT should always be defined at this point
"RTN","VPREHL7",37,0)
 . IF $G(VPREVT)="" QUIT
"RTN","VPREHL7",38,0)
 . NEW DFN
"RTN","VPREHL7",39,0)
 . SET DFN=+$PIECE($PIECE(HLNODE,HL("FS"),4),$EXTRACT(HL("ECH")))
"RTN","VPREHL7",40,0)
 . IF 'DFN QUIT
"RTN","VPREHL7",41,0)
 . DO POSTX^VPREVNT("pt-select",DFN_"&"_VPREVT)  ;Ref File event
"RTN","VPREHL7",42,0)
 . IF $DATA(^VPR(560,"AITEM",DFN)) DO POST^VPREVNT(DFN,"patient",DFN)
"RTN","VPREHL7",43,0)
 QUIT
"RTN","VPREHL7",44,0)
 ;
"RTN","VPRELAB")
0^84^B5640555
"RTN","VPRELAB",1,0)
VPRELAB ; SLC/JMC - Lab extract utilities ; 2/20/14 4:23pm
"RTN","VPRELAB",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 1913;Build 283
"RTN","VPRELAB",3,0)
SHWORPNL ; Ordering panels (ends in "panel")
"RTN","VPRELAB",4,0)
 N X,COUNT,LABDAT
"RTN","VPRELAB",5,0)
 S X=$NA(^LAB(60))
"RTN","VPRELAB",6,0)
 F  S X=$Q(@X) Q:($QS(X,1)'=60)!($QS(X,2)'=+$QS(X,2))  D
"RTN","VPRELAB",7,0)
 . I $QS(X,3)=0  D
"RTN","VPRELAB",8,0)
 . . I $D(LABDAT),COUNT>0 S VPRCNT=VPRCNT+1 D ADD^VPREF("LABDAT") K LABDAT
"RTN","VPRELAB",9,0)
 . . S COUNT=0,LABDAT("name")=$P(@X,"^",1),LABDAT("uid")=$$SETUID^VPRUTILS("labpanel","",$QS(X,2))
"RTN","VPRELAB",10,0)
 . I $QS(X,3)=2,$QS(X,4)>0  D
"RTN","VPRELAB",11,0)
 . . S LABDAT("labs",$QS(X,4),"id")=@X,LABDAT("labs",$QS(X,4),"name")=$P(^LAB(60,+@X,0),"^",1),COUNT=COUNT+1
"RTN","VPRELAB",12,0)
 I $D(LABDAT),COUNT>0 S VPRCNT=VPRCNT+1 D ADD^VPREF("LABDAT") K LABDAT
"RTN","VPRELAB",13,0)
 S VPRFINI=1
"RTN","VPRELAB",14,0)
 Q
"RTN","VPRELAB",15,0)
SHWCUMR2 ; All Cumulative Reports and the labs they point to (for UI pick on labs view)
"RTN","VPRELAB",16,0)
 N X,LASTSUB,LASTLAB,LABDAT
"RTN","VPRELAB",17,0)
 S LASTSUB=0,LASTLAB=0,X=$NA(^LAB(64.5,1,1))
"RTN","VPRELAB",18,0)
 F  S X=$Q(@X) Q:($QS(X,4)="B")!($QS(X,3)'=1)!($QS(X,2)'=1)!($QS(X,1)'=64.5)  D
"RTN","VPRELAB",19,0)
 . I $QS(X,5)=0  D
"RTN","VPRELAB",20,0)
 . . I $D(LABDAT) S VPRCNT=VPRCNT+1 D ADD^VPREF("LABDAT") K LABDAT
"RTN","VPRELAB",21,0)
 . . S LASTSUB=0,LASTLAB=0,LABDAT("name")=$P(@X,"^",1)
"RTN","VPRELAB",22,0)
 . I $QS(X,7)=0 S LASTSUB=LASTSUB+1,LASTLAB=0,LABDAT("uid")=$$SETUID^VPRUTILS("labgroup",,$QS(X,4)),LABDAT("groups",LASTSUB,"name")=$P(@X,"^",1)
"RTN","VPRELAB",23,0)
 . I $QS(X,9)=0  D
"RTN","VPRELAB",24,0)
 . . S LASTLAB=LASTLAB+1
"RTN","VPRELAB",25,0)
 . . S LABDAT("groups",LASTSUB,"labs",LASTLAB,"name")=$P(^LAB(60,$P(@X,"^",1),0),"^",1)
"RTN","VPRELAB",26,0)
 . . S LABDAT("groups",LASTSUB,"labs",LASTLAB,"id")=$P(@X,"^",1)
"RTN","VPRELAB",27,0)
 I $D(LABDAT) S VPRCNT=VPRCNT+1 D ADD^VPREF("LABDAT") K LABDAT
"RTN","VPRELAB",28,0)
 S VPRFINI=1
"RTN","VPRELAB",29,0)
 Q
"RTN","VPRELAB",30,0)
LABPNL ; Lab ordering panels
"RTN","VPRELAB",31,0)
 ; {name:panelName,uid:panelUid,labs:[{id:labIEN,name:labName},...]}
"RTN","VPRELAB",32,0)
 N IEN
"RTN","VPRELAB",33,0)
 F  S IEN=$O(^LAB(60,IEN)) Q:'IEN  D
"RTN","VPRELAB",34,0)
 . N X0,LAB
"RTN","VPRELAB",35,0)
 . S X0=$G(^LAB(60,IEN,0))
"RTN","VPRELAB",36,0)
 . Q:"IB"'[$P(X0,U,3)       ; not for ordering
"RTN","VPRELAB",37,0)
 . Q:'$O(^LAB(60,IEN,2,0))  ; not panel
"RTN","VPRELAB",38,0)
 . S LAB("name")=$P(X0,U)
"RTN","VPRELAB",39,0)
 . S LAB("uid")=$$SETUID^VPRUTILS("labpanel","",IEN)
"RTN","VPRELAB",40,0)
 . ; recursively expand to individual tests
"RTN","VPRELAB",41,0)
 . D ADD^VPREF("LAB")
"RTN","VPRELAB",42,0)
 I 'IEN S VPRFINI=1
"RTN","VPRELAB",43,0)
 Q
"RTN","VPRELAB",44,0)
LABGRP ; Lab groups on cumulative report
"RTN","VPRELAB",45,0)
 ; {name:groupName,uid:groupUid,labs:[{name:labName,id:labIEN},...]}
"RTN","VPRELAB",46,0)
 F  S IEN=$O(^LAB(60,IEN)) Q:'IEN  D
"RTN","VPRELAB",47,0)
 . Q
"RTN","VPRELAB",48,0)
 Q
"RTN","VPRENSZ")
0^56^B68594142
"RTN","VPRENSZ",1,0)
VPRENSZ ;SLC/KCM - Measure data sizes
"RTN","VPRENSZ",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRENSZ",3,0)
 ;
"RTN","VPRENSZ",4,0)
EN ; Find Max, Mean, Median for each TAG
"RTN","VPRENSZ",5,0)
 K ^XTMP("VPRENSZ-DOMAINS")
"RTN","VPRENSZ",6,0)
 D ALG,PRB,DOC,ENC,ACC,LAB,MIC,RAD,VIT,RXI,RXO,NVA,ORD,OBS
"RTN","VPRENSZ",7,0)
 Q
"RTN","VPRENSZ",8,0)
ALG ;@type ALLERGY @name Allergies
"RTN","VPRENSZ",9,0)
 D REPORT(120.8,"ALG")
"RTN","VPRENSZ",10,0)
 Q
"RTN","VPRENSZ",11,0)
PRB ;@type PROBLEM @name Problems
"RTN","VPRENSZ",12,0)
 D REPORT(9000011,"PRB")
"RTN","VPRENSZ",13,0)
 Q
"RTN","VPRENSZ",14,0)
DOC ;@type DOCUMENT @name Documents
"RTN","VPRENSZ",15,0)
 D REPORT(8925,"DOC")
"RTN","VPRENSZ",16,0)
 Q
"RTN","VPRENSZ",17,0)
ENC ;@type VISIT @name Encounters
"RTN","VPRENSZ",18,0)
 D REPORT(9000010,"ENC")
"RTN","VPRENSZ",19,0)
 Q
"RTN","VPRENSZ",20,0)
ACC ;@type ACCESSION @name Accessions
"RTN","VPRENSZ",21,0)
 D REPORT("63ACC","ACC")
"RTN","VPRENSZ",22,0)
 Q
"RTN","VPRENSZ",23,0)
LAB ;@type LAB @name Lab Results
"RTN","VPRENSZ",24,0)
 D REPORT(63,"LAB")
"RTN","VPRENSZ",25,0)
 Q
"RTN","VPRENSZ",26,0)
MIC ;@name Micro/AP Collections
"RTN","VPRENSZ",27,0)
 D REPORT("63MI","MIC")
"RTN","VPRENSZ",28,0)
 Q
"RTN","VPRENSZ",29,0)
RAD ;@type RADIOLOGY @name Radiology Procedures
"RTN","VPRENSZ",30,0)
 D REPORT(70,"RAD")
"RTN","VPRENSZ",31,0)
 Q
"RTN","VPRENSZ",32,0)
VIT ;@type VITAL @name Vital Measurements
"RTN","VPRENSZ",33,0)
 D REPORT(120.5,"VIT")
"RTN","VPRENSZ",34,0)
 Q
"RTN","VPRENSZ",35,0)
RXI ;@type MED @name Inpatient Medications
"RTN","VPRENSZ",36,0)
 D REPORT(55,"RXI")
"RTN","VPRENSZ",37,0)
 Q
"RTN","VPRENSZ",38,0)
RXO ;@type RX @name Outpatient Medications
"RTN","VPRENSZ",39,0)
 D REPORT(52,"RXO")
"RTN","VPRENSZ",40,0)
 Q
"RTN","VPRENSZ",41,0)
NVA ;@type MED @name Non-VA Medications
"RTN","VPRENSZ",42,0)
 D REPORT("55NVA","NVA")
"RTN","VPRENSZ",43,0)
 Q
"RTN","VPRENSZ",44,0)
ORD ;@name Orders
"RTN","VPRENSZ",45,0)
 D REPORT(100,"ORD")
"RTN","VPRENSZ",46,0)
 Q
"RTN","VPRENSZ",47,0)
OBS ;@name Observations
"RTN","VPRENSZ",48,0)
 D REPORT(704.117,"OBS")
"RTN","VPRENSZ",49,0)
 Q
"RTN","VPRENSZ",50,0)
REPORT(FILE,TAG) ; loop thru reminder index, calulate stats & show report
"RTN","VPRENSZ",51,0)
 D ILOOP(FILE,TAG),CALC(TAG),SAVE(TAG),SHOW(TAG)
"RTN","VPRENSZ",52,0)
 K ^TMP($J)
"RTN","VPRENSZ",53,0)
 Q
"RTN","VPRENSZ",54,0)
ILOOP(FN,TAG) ;
"RTN","VPRENSZ",55,0)
 K ^TMP($J)
"RTN","VPRENSZ",56,0)
 N PT,PTDFN,CNT,TOTPT,HIGHCNT,TOTREC
"RTN","VPRENSZ",57,0)
 S TOTPT=0,TOTREC=0,HIGHCNT=0
"RTN","VPRENSZ",58,0)
 S PT=0 F  S PT=$$NEXTPT(FN,PT) Q:'PT  D
"RTN","VPRENSZ",59,0)
 . S TOTPT=TOTPT+1 W:TOTPT#100=0 "."
"RTN","VPRENSZ",60,0)
 . I "^55^55NVA^52^100^"[("^"_FN_"^") S CNT=$$LP1(PT,FN)
"RTN","VPRENSZ",61,0)
 . I "^63^70^120.5^"[("^"_FN_"^") S CNT=$$LP2(PT,FN)
"RTN","VPRENSZ",62,0)
 . I "63MI"=FN S CNT=$$LPMI(PT)
"RTN","VPRENSZ",63,0)
 . I "63ACC"=FN S CNT=$$LPACC(PT)
"RTN","VPRENSZ",64,0)
 . I 8925=FN S CNT=$$LPDOC(PT)
"RTN","VPRENSZ",65,0)
 . I 120.8=FN S CNT=$$LPALG(PT)
"RTN","VPRENSZ",66,0)
 . I 9000011=FN S CNT=$$LPROB(PT)
"RTN","VPRENSZ",67,0)
 . I 9000010=FN S CNT=$$LPVST(PT)
"RTN","VPRENSZ",68,0)
 . I FN=704.117 S CNT=$$MDC^VPRENSZ(PT)
"RTN","VPRENSZ",69,0)
 . Q:'CNT
"RTN","VPRENSZ",70,0)
 . I (FN="63ACC"),($P(^LR(PT,0),"^",2)'=2) Q  ;non-patient collection
"RTN","VPRENSZ",71,0)
 . S PTDFN=$S(FN="63ACC":$P(^LR(PT,0),"^",3),1:PT)
"RTN","VPRENSZ",72,0)
 . I CNT>HIGHCNT S HIGHCNT=CNT
"RTN","VPRENSZ",73,0)
 . S ^TMP($J,TAG,"FREQ",CNT)=+$G(^TMP($J,TAG,"FREQ",CNT))+1
"RTN","VPRENSZ",74,0)
 . S ^TMP($J,TAG,"COUNT",CNT,PTDFN)="",TOTREC=TOTREC+CNT
"RTN","VPRENSZ",75,0)
 S ^TMP($J,TAG,"STATS","HighestCount")=HIGHCNT
"RTN","VPRENSZ",76,0)
 S ^TMP($J,TAG,"STATS","TotalRecords")=TOTREC
"RTN","VPRENSZ",77,0)
 S ^TMP($J,TAG,"STATS","TotalPatients")=TOTPT
"RTN","VPRENSZ",78,0)
 Q
"RTN","VPRENSZ",79,0)
NEXTPT(FN,PT) ; Returns the next patient based on PT passed in
"RTN","VPRENSZ",80,0)
 I FN="63MI" Q $O(^PXRMINDX(63,"PDI",PT))
"RTN","VPRENSZ",81,0)
 I FN="63ACC" Q $O(^LR(PT))
"RTN","VPRENSZ",82,0)
 I FN=8925 Q $O(^TIU(8925,"C",PT))
"RTN","VPRENSZ",83,0)
 I FN=120.8 Q $O(^GMR(120.8,"B",PT))
"RTN","VPRENSZ",84,0)
 I FN=9000011 Q $O(^AUPNPROB("AC",PT))
"RTN","VPRENSZ",85,0)
 I FN=9000010 Q $O(^AUPNVSIT("C",PT))
"RTN","VPRENSZ",86,0)
 I FN=704.117 Q $O(^MDC(704.117,"PT",PT))
"RTN","VPRENSZ",87,0)
 Q $O(^PXRMINDX(FN,"PI",PT))
"RTN","VPRENSZ",88,0)
 ;
"RTN","VPRENSZ",89,0)
LP1(PT,FN) ; return count for indexes with start/stop dates
"RTN","VPRENSZ",90,0)
 N CNT S CNT=0
"RTN","VPRENSZ",91,0)
 N ITM,STRT,STOP,DAS
"RTN","VPRENSZ",92,0)
 S ITM="" F  S ITM=$O(^PXRMINDX(FN,"PI",PT,ITM)) Q:ITM=""  D
"RTN","VPRENSZ",93,0)
 . S STRT="" F  S STRT=$O(^PXRMINDX(FN,"PI",PT,ITM,STRT)) Q:STRT=""  D
"RTN","VPRENSZ",94,0)
 . . S STOP="" F  S STOP=$O(^PXRMINDX(FN,"PI",PT,ITM,STRT,STOP)) Q:STOP=""  D
"RTN","VPRENSZ",95,0)
 . . . S DAS="" F  S DAS=$O(^PXRMINDX(FN,"PI",PT,ITM,STRT,STOP,DAS)) Q:DAS=""  S CNT=CNT+1
"RTN","VPRENSZ",96,0)
 Q CNT
"RTN","VPRENSZ",97,0)
 ;
"RTN","VPRENSZ",98,0)
LP2(PT,FN) ; return count for indexes with date only
"RTN","VPRENSZ",99,0)
 N CNT S CNT=0
"RTN","VPRENSZ",100,0)
 N ITM,DATE,DAS
"RTN","VPRENSZ",101,0)
 S ITM="" F  S ITM=$O(^PXRMINDX(FN,"PI",PT,ITM)) Q:ITM=""  D
"RTN","VPRENSZ",102,0)
 . S DATE="" F  S DATE=$O(^PXRMINDX(FN,"PI",PT,ITM,DATE)) Q:DATE=""  D
"RTN","VPRENSZ",103,0)
 . . S DAS="" F  S DAS=$O(^PXRMINDX(FN,"PI",PT,ITM,DATE,DAS)) Q:DAS=""  S CNT=CNT+1
"RTN","VPRENSZ",104,0)
 Q CNT
"RTN","VPRENSZ",105,0)
 ;
"RTN","VPRENSZ",106,0)
LPMI(PT) ; return count for micro/anatomic path collections
"RTN","VPRENSZ",107,0)
 N CNT S CNT=0
"RTN","VPRENSZ",108,0)
 N DATE
"RTN","VPRENSZ",109,0)
 S DATE="" F  S DATE=$O(^PXRMINDX(63,"PDI",PT,DATE)) Q:DATE=""  S CNT=CNT+1
"RTN","VPRENSZ",110,0)
 Q CNT
"RTN","VPRENSZ",111,0)
 ;
"RTN","VPRENSZ",112,0)
LPDOC(PT) ; return count for TIU documents
"RTN","VPRENSZ",113,0)
 N CNT S CNT=0
"RTN","VPRENSZ",114,0)
 N DA
"RTN","VPRENSZ",115,0)
 S DA=0 F  S DA=$O(^TIU(8925,"C",PT,DA)) Q:'DA  S CNT=CNT+1
"RTN","VPRENSZ",116,0)
 Q CNT
"RTN","VPRENSZ",117,0)
 ;
"RTN","VPRENSZ",118,0)
 ;N CNT S CNT=0
"RTN","VPRENSZ",119,0)
 ;N CLS,TM,DA
"RTN","VPRENSZ",120,0)
 ;S CLS=0 F  S CLS=$O(^TIU(8925,"ACLPT",CLS)) Q:'CLS  D
"RTN","VPRENSZ",121,0)
 ;. S TM=0 F  S TM=$O(^TIU(8925,"ACLPT",CLS,PT,TM)) Q:'TM  D
"RTN","VPRENSZ",122,0)
 ;. . S DA=0 F  S DA=$O(^TIU(8925,"ACLPT",CLS,PT,TM,DA)) Q:'DA  S CNT=CNT+1
"RTN","VPRENSZ",123,0)
 ;Q CNT
"RTN","VPRENSZ",124,0)
 ;
"RTN","VPRENSZ",125,0)
 ;N CNT S CNT=0
"RTN","VPRENSZ",126,0)
 ;N DOC,TM
"RTN","VPRENSZ",127,0)
 ;S DOC=0 F  S DOC=$O(^TIU(8925,"AA",PT,DOC)) Q:'DOC  D
"RTN","VPRENSZ",128,0)
 ;. S TM=0 F  S TM=$O(^TIU(8925,"AA",PT,DOC,TM)) Q:'TM  D
"RTN","VPRENSZ",129,0)
 ;. . S DA=0 F  S DA=$O(^TIU(8925,"AA",PT,DOC,TM,DA)) Q:'DA  S CNT=CNT+1
"RTN","VPRENSZ",130,0)
 ;Q CNT
"RTN","VPRENSZ",131,0)
 ;
"RTN","VPRENSZ",132,0)
LPALG(PT) ; return count for allergies
"RTN","VPRENSZ",133,0)
 N CNT S CNT=0
"RTN","VPRENSZ",134,0)
 N DA S DA=0
"RTN","VPRENSZ",135,0)
 F  S DA=$O(^GMR(120.8,"B",PT,DA)) Q:'DA  S CNT=CNT+1
"RTN","VPRENSZ",136,0)
 Q CNT
"RTN","VPRENSZ",137,0)
 ;
"RTN","VPRENSZ",138,0)
LPROB(PT) ; return count for problems
"RTN","VPRENSZ",139,0)
 N CNT S CNT=0
"RTN","VPRENSZ",140,0)
 N DA S DA=0
"RTN","VPRENSZ",141,0)
 F  S DA=$O(^AUPNPROB("AC",PT,DA)) Q:'DA  S CNT=CNT+1
"RTN","VPRENSZ",142,0)
 Q CNT
"RTN","VPRENSZ",143,0)
 ;
"RTN","VPRENSZ",144,0)
LPVST(PT) ; return count for visits
"RTN","VPRENSZ",145,0)
 N CNT S CNT=0
"RTN","VPRENSZ",146,0)
 N DA S DA=0
"RTN","VPRENSZ",147,0)
 F  S DA=$O(^AUPNVSIT("C",PT,DA)) Q:'DA  D
"RTN","VPRENSZ",148,0)
 . I "AHSR"[$P(^AUPNVSIT(DA,0),"^",7) S CNT=CNT+1
"RTN","VPRENSZ",149,0)
 . ; (only include ambulatory, hospitalization, surgery, and nursing home)
"RTN","VPRENSZ",150,0)
 Q CNT
"RTN","VPRENSZ",151,0)
 ;
"RTN","VPRENSZ",152,0)
LPACC(PT) ; return count of accessions
"RTN","VPRENSZ",153,0)
 N CNT S CNT=0
"RTN","VPRENSZ",154,0)
 N ACC S ACC=0
"RTN","VPRENSZ",155,0)
 F  S ACC=$O(^LR(PT,"CH",ACC)) Q:'ACC  S CNT=CNT+1
"RTN","VPRENSZ",156,0)
 Q CNT
"RTN","VPRENSZ",157,0)
 ; 
"RTN","VPRENSZ",158,0)
CALC(TAG) ; calculate statistics for a TAG
"RTN","VPRENSZ",159,0)
 ; find the highest item coun
"RTN","VPRENSZ",160,0)
 N MAX S MAX=^TMP($J,TAG,"STATS","HighestCount")
"RTN","VPRENSZ",161,0)
 D MAXPTS(TAG,MAX)
"RTN","VPRENSZ",162,0)
 ;
"RTN","VPRENSZ",163,0)
 ; find the average item count
"RTN","VPRENSZ",164,0)
 N PTS,MEAN
"RTN","VPRENSZ",165,0)
 S PTS=^TMP($J,TAG,"STATS","TotalPatients"),MEAN=0
"RTN","VPRENSZ",166,0)
 I PTS S MEAN=^TMP($J,TAG,"STATS","TotalRecords")\PTS
"RTN","VPRENSZ",167,0)
 D ADDPTS(TAG,"MEAN",MEAN)
"RTN","VPRENSZ",168,0)
 ;
"RTN","VPRENSZ",169,0)
 ; find the median item count
"RTN","VPRENSZ",170,0)
 N POS,CNT,PT,I
"RTN","VPRENSZ",171,0)
 S:PTS#2 PTS=PTS+1 S POS=PTS\2
"RTN","VPRENSZ",172,0)
 S I=0
"RTN","VPRENSZ",173,0)
 S CNT=0 F  S CNT=$O(^TMP($J,TAG,"COUNT",CNT)) Q:'CNT  D  Q:I'<POS
"RTN","VPRENSZ",174,0)
 . S PT=0 F  S PT=$O(^TMP($J,TAG,"COUNT",CNT,PT)) Q:'PT  S I=I+1 Q:I'<POS
"RTN","VPRENSZ",175,0)
 D ADDPTS(TAG,"MEDIAN",CNT)
"RTN","VPRENSZ",176,0)
 ;
"RTN","VPRENSZ",177,0)
 N HIGH,MODE S HIGH=0,MODE=0,CNT=0
"RTN","VPRENSZ",178,0)
 F  S CNT=+$O(^TMP($J,TAG,"COUNT",CNT)) Q:'CNT  D
"RTN","VPRENSZ",179,0)
 . I ^TMP($J,TAG,"FREQ",CNT)>HIGH S HIGH=^(CNT),MODE=CNT
"RTN","VPRENSZ",180,0)
 D ADDPTS(TAG,"MODE",MODE)
"RTN","VPRENSZ",181,0)
 ;
"RTN","VPRENSZ",182,0)
 D MINPTS(TAG)
"RTN","VPRENSZ",183,0)
 ;
"RTN","VPRENSZ",184,0)
 K ^TMP($J,TAG,"COUNT") ; release space
"RTN","VPRENSZ",185,0)
 ;S CNT=0 F  S CNT=$O(^TMP($J,TAG,"FREQ",CNT)) Q:'CNT  W !,CNT_"="_^(CNT)
"RTN","VPRENSZ",186,0)
 ;
"RTN","VPRENSZ",187,0)
 Q
"RTN","VPRENSZ",188,0)
ADDPTS(TAG,STAT,CNT) ; add patients that represent this measurement
"RTN","VPRENSZ",189,0)
 S ^TMP($J,TAG,"STATS",STAT)=CNT
"RTN","VPRENSZ",190,0)
 Q:CNT=""
"RTN","VPRENSZ",191,0)
 N PT,TOTPT,MAXPT
"RTN","VPRENSZ",192,0)
 S TOTPT=0,MAXPT=5
"RTN","VPRENSZ",193,0)
 S PT="" ; since we are reverse ordering...
"RTN","VPRENSZ",194,0)
 F  S PT=$O(^TMP($J,TAG,"COUNT",CNT,PT),-1) Q:'PT  D  Q:TOTPT'<MAXPT
"RTN","VPRENSZ",195,0)
 . S TOTPT=TOTPT+1
"RTN","VPRENSZ",196,0)
 . S ^TMP($J,TAG,"STATS",STAT,TOTPT)=$P(^DPT(PT,0),"^")_"^"_PT
"RTN","VPRENSZ",197,0)
 Q
"RTN","VPRENSZ",198,0)
MINPTS(TAG) ; store the top 10 patients with the highest counts
"RTN","VPRENSZ",199,0)
 N PT,TOTPT,MAXPT
"RTN","VPRENSZ",200,0)
 S CNT=0,TOTPT=0,MAXPT=10
"RTN","VPRENSZ",201,0)
 F  S CNT=$O(^TMP($J,TAG,"COUNT",CNT)) Q:'CNT  D  Q:TOTPT'<MAXPT
"RTN","VPRENSZ",202,0)
 .I $G(^TMP($J,TAG,"STATS","MIN"))="" S ^TMP($J,TAG,"STATS","MIN")=CNT
"RTN","VPRENSZ",203,0)
 . S PT=0 F  S PT=$O(^TMP($J,TAG,"COUNT",CNT,PT)) Q:'PT  D  Q:TOTPT'<MAXPT
"RTN","VPRENSZ",204,0)
 . . S TOTPT=TOTPT+1
"RTN","VPRENSZ",205,0)
 . . S ^TMP($J,TAG,"STATS","MIN",TOTPT)=$P(^DPT(PT,0),"^")_"^"_PT_"^"_CNT
"RTN","VPRENSZ",206,0)
 I $G(^TMP($J,TAG,"STATS","MIN"))="" S ^TMP($J,TAG,"STATS","MIN")=0
"RTN","VPRENSZ",207,0)
 Q
"RTN","VPRENSZ",208,0)
MAXPTS(TAG,CNT) ; store the top 10 patients with the highest counts
"RTN","VPRENSZ",209,0)
 S ^TMP($J,TAG,"STATS","MAX")=CNT
"RTN","VPRENSZ",210,0)
 N PT,TOTPT,MAXPT
"RTN","VPRENSZ",211,0)
 S CNT=CNT+1,TOTPT=0,MAXPT=10
"RTN","VPRENSZ",212,0)
 F  S CNT=$O(^TMP($J,TAG,"COUNT",CNT),-1) Q:'CNT  D  Q:TOTPT'<MAXPT
"RTN","VPRENSZ",213,0)
 . S PT=0 F  S PT=$O(^TMP($J,TAG,"COUNT",CNT,PT)) Q:'PT  D  Q:TOTPT'<MAXPT
"RTN","VPRENSZ",214,0)
 . . S TOTPT=TOTPT+1
"RTN","VPRENSZ",215,0)
 . . S ^TMP($J,TAG,"STATS","MAX",TOTPT)=$P(^DPT(PT,0),"^")_"^"_PT_"^"_CNT
"RTN","VPRENSZ",216,0)
 Q
"RTN","VPRENSZ",217,0)
SAVE(TAG) ; save the TAG measurements in ^XTMP
"RTN","VPRENSZ",218,0)
 S ^XTMP("VPRENSZ-DOMAINS",0)=$$FMADD^XLFDT(DT,30)_U_DT
"RTN","VPRENSZ",219,0)
 K ^XTMP("VPRENSZ-DOMAINS",TAG)
"RTN","VPRENSZ",220,0)
 M ^XTMP("VPRENSZ-DOMAINS",TAG,"FREQ")=^TMP($J,TAG,"FREQ")
"RTN","VPRENSZ",221,0)
 M ^XTMP("VPRENSZ-DOMAINS",TAG,"STATS")=^TMP($J,TAG,"STATS")
"RTN","VPRENSZ",222,0)
 Q
"RTN","VPRENSZ",223,0)
SHOW(TAG) ; show information about sizes
"RTN","VPRENSZ",224,0)
 N STATS M STATS=^TMP($J,TAG,"STATS")
"RTN","VPRENSZ",225,0)
 N DOMAIN S DOMAIN=$$DOMNAME(TAG)
"RTN","VPRENSZ",226,0)
 W !!,DOMAIN,", Patients Searched: ",STATS("TotalPatients")
"RTN","VPRENSZ",227,0)
 W "    Total Records: ",STATS("TotalRecords"),"  "
"RTN","VPRENSZ",228,0)
 N I F I=$X:1:76 W "-"
"RTN","VPRENSZ",229,0)
 W !!,DOMAIN," Maximum (top ten):  ",STATS("MAX") D LSTPT(TAG,"MAX")
"RTN","VPRENSZ",230,0)
 W !!,DOMAIN," Mean (average):  ",STATS("MEAN") D LSTPT(TAG,"MEAN")
"RTN","VPRENSZ",231,0)
 W !!,DOMAIN," Median (middle):  ",STATS("MEDIAN") D LSTPT(TAG,"MEDIAN")
"RTN","VPRENSZ",232,0)
 W !!,DOMAIN," Mode (most common):  ",STATS("MODE") D LSTPT(TAG,"MODE")
"RTN","VPRENSZ",233,0)
 W !!,DOMAIN," Smallest (top ten):  ",STATS("MIN") D LSTPT(TAG,"MIN")
"RTN","VPRENSZ",234,0)
 Q
"RTN","VPRENSZ",235,0)
LSTPT(TAG,STAT) ; list sample patients matching criteria
"RTN","VPRENSZ",236,0)
 N I,X,CNT S CNT=0
"RTN","VPRENSZ",237,0)
 S I=0 F  S I=$O(^TMP($J,TAG,"STATS",STAT,I)) Q:'I  D
"RTN","VPRENSZ",238,0)
 . S X=^TMP($J,TAG,"STATS",STAT,I),CNT=CNT+1
"RTN","VPRENSZ",239,0)
 . W !,?2,$P(X,"^"),?44,$P(X,"^",2)
"RTN","VPRENSZ",240,0)
 . I $P(X,"^",3) W ?62,$P(X,"^",3)," records"
"RTN","VPRENSZ",241,0)
 Q
"RTN","VPRENSZ",242,0)
DOMNAME(TAG) ; return full TAG name given tag
"RTN","VPRENSZ",243,0)
 N X,NAME
"RTN","VPRENSZ",244,0)
 S X=$T(@(TAG_"^VPRENSZ")),NAME=$E(X,$F(X,"@name "),$L(X))
"RTN","VPRENSZ",245,0)
 Q NAME
"RTN","VPRENSZ",246,0)
 ;
"RTN","VPRENSZ",247,0)
VTYPES ; dump visit types
"RTN","VPRENSZ",248,0)
 S DFN=0 F  S DFN=$O(^AUPNVSIT("C",DFN)) Q:'DFN  D
"RTN","VPRENSZ",249,0)
 . S DA=0 F  S DA=$O(^AUPNVSIT("C",DFN,DA)) Q:'DA  D
"RTN","VPRENSZ",250,0)
 .. W !,DFN,?10,$P(^AUPNVSIT(DA,0),"^",7)
"RTN","VPRENSZ",251,0)
 Q
"RTN","VPRENSZ",252,0)
TCOMP ; test compilation
"RTN","VPRENSZ",253,0)
 W !,"This compiles on VDEV"
"RTN","VPRENSZ",254,0)
 Q
"RTN","VPRENSZ",255,0)
MDC(PT) ; Observations in clio for a pt.
"RTN","VPRENSZ",256,0)
 ; Run the PT XREF on the OBS file (704.117)
"RTN","VPRENSZ",257,0)
 N CNT,OBSDT,OBSIFN S OBSDT="",OBSIFN="",CNT=0
"RTN","VPRENSZ",258,0)
 F  S OBSDT=$O(^MDC(704.117,"PT",PT,OBSDT)) Q:OBSDT=""  D
"RTN","VPRENSZ",259,0)
 .F  S OBSIFN=$O(^MDC(704.117,"PT",PT,OBSDT,OBSIFN)) Q:OBSIFN=""  D
"RTN","VPRENSZ",260,0)
 ..S CNT=CNT+1
"RTN","VPRENSZ",261,0)
 Q CNT
"RTN","VPRENSZ1")
0^57^B10686788
"RTN","VPRENSZ1",1,0)
VPRENSZ1 ;SLC/KCM - Measure data sizes
"RTN","VPRENSZ1",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRENSZ1",3,0)
 ;
"RTN","VPRENSZ1",4,0)
DOMAINS(LST) ; RPC - list of domains for which sizing information is available
"RTN","VPRENSZ1",5,0)
 N I,X,TAG,NAME
"RTN","VPRENSZ1",6,0)
 S LST=1,LST(LST)="<domains>"
"RTN","VPRENSZ1",7,0)
 F I=2:1 S X=$T(@("+"_I_"^VPRENSZ")) Q:'$L(X)  I (X?1.7U1" ;".E),(X["@name ") D
"RTN","VPRENSZ1",8,0)
 . S TAG=$P(X," ") S NAME=$E(X,$F(X,"@name "),$L(X))
"RTN","VPRENSZ1",9,0)
 . S LST=LST+1,LST(LST)="<domain tag='"_TAG_"'>"_NAME_"</domain>"
"RTN","VPRENSZ1",10,0)
 S LST=LST+1,LST(LST)="</domains>"
"RTN","VPRENSZ1",11,0)
 Q
"RTN","VPRENSZ1",12,0)
STATS(LST,TAG) ; RPC - list stats, patients, & raw data for a domain
"RTN","VPRENSZ1",13,0)
 N X,STATS,FREQ,DOMAIN
"RTN","VPRENSZ1",14,0)
 S X=$T(@(TAG_"^VPRENSZ"))
"RTN","VPRENSZ1",15,0)
 S DOMAIN=$E(X,$F(X,"@name "),$L(X))
"RTN","VPRENSZ1",16,0)
 S TYPE=$P(X,"@type ",2),TYPE=$P(TYPE," ")
"RTN","VPRENSZ1",17,0)
 S LST=0
"RTN","VPRENSZ1",18,0)
 I '$D(^XTMP("VPRENSZ-DOMAINS",TAG)) D ERRMSG(DOMAIN_"("_TAG_") size measurements unavailable.") Q
"RTN","VPRENSZ1",19,0)
 ;
"RTN","VPRENSZ1",20,0)
 M STATS=^XTMP("VPRENSZ-DOMAINS",TAG,"STATS")
"RTN","VPRENSZ1",21,0)
 ; M FREQ=^XTMP("VPRENSZ-DOMAINS",TAG,"FREQ") - DON'T NEED THIS... 
"RTN","VPRENSZ1",22,0)
 ;
"RTN","VPRENSZ1",23,0)
 S X="<stats domain='"_DOMAIN_"' tag='"_TAG_"' type='"_TYPE_"' "
"RTN","VPRENSZ1",24,0)
 S X=X_"patients='"_STATS("TotalPatients")_"' "
"RTN","VPRENSZ1",25,0)
 S X=X_"records='"_STATS("TotalRecords")_"' >"
"RTN","VPRENSZ1",26,0)
 S LST=LST+1,LST(LST)=X
"RTN","VPRENSZ1",27,0)
 ;
"RTN","VPRENSZ1",28,0)
 S LST=LST+1,LST(LST)="<mean value='"_STATS("MEAN")_"' >"
"RTN","VPRENSZ1",29,0)
 D PTS2XML("MEAN")
"RTN","VPRENSZ1",30,0)
 S LST=LST+1,LST(LST)="</mean>"
"RTN","VPRENSZ1",31,0)
 ;
"RTN","VPRENSZ1",32,0)
 S LST=LST+1,LST(LST)="<median value='"_STATS("MEDIAN")_"' >"
"RTN","VPRENSZ1",33,0)
 D PTS2XML("MEDIAN")
"RTN","VPRENSZ1",34,0)
 S LST=LST+1,LST(LST)="</median>"
"RTN","VPRENSZ1",35,0)
 ;
"RTN","VPRENSZ1",36,0)
 S LST=LST+1,LST(LST)="<mode value='"_STATS("MODE")_"' >"
"RTN","VPRENSZ1",37,0)
 D PTS2XML("MODE")
"RTN","VPRENSZ1",38,0)
 S LST=LST+1,LST(LST)="</mode>"
"RTN","VPRENSZ1",39,0)
 ;
"RTN","VPRENSZ1",40,0)
 S LST=LST+1,LST(LST)="<max value='"_STATS("MAX")_"' >"
"RTN","VPRENSZ1",41,0)
 D PTS2XML("MAX")
"RTN","VPRENSZ1",42,0)
 S LST=LST+1,LST(LST)="</max>"
"RTN","VPRENSZ1",43,0)
 ;
"RTN","VPRENSZ1",44,0)
 D FREQ
"RTN","VPRENSZ1",45,0)
 S LST=LST+1,LST(LST)="</stats>"
"RTN","VPRENSZ1",46,0)
 Q
"RTN","VPRENSZ1",47,0)
PTS2XML(STAT) ; add patients to the return XML
"RTN","VPRENSZ1",48,0)
 ; expects: LST, STATS
"RTN","VPRENSZ1",49,0)
 ; <patient dfn=4323423 count=342234 icn=3424324243>doe,john</patient>
"RTN","VPRENSZ1",50,0)
 N I,X,NM,DFN,CNT,ICN
"RTN","VPRENSZ1",51,0)
 S I=0 F  S I=$O(STATS(STAT,I)) Q:'I  D
"RTN","VPRENSZ1",52,0)
 . S X=STATS(STAT,I)
"RTN","VPRENSZ1",53,0)
 . S NM=$P(X,U),DFN=$P(X,U,2),CNT=$P(X,U,3)
"RTN","VPRENSZ1",54,0)
 . S ICN=$$GETICN^MPIF001(DFN) S:+ICN<0 ICN=""
"RTN","VPRENSZ1",55,0)
 . S LST=LST+1
"RTN","VPRENSZ1",56,0)
 . S LST(LST)="<patient dfn='"_DFN_"' count='"_CNT_"' icn='"_ICN_"' >"_NM_"</patient>"
"RTN","VPRENSZ1",57,0)
 Q
"RTN","VPRENSZ1",58,0)
FREQ ; add RecordCount=PatientCount strings
"RTN","VPRENSZ1",59,0)
 N X,I
"RTN","VPRENSZ1",60,0)
 S LST=LST+1,LST(LST)="<recordCount>"
"RTN","VPRENSZ1",61,0)
 S X="",I=0 F  S I=$O(^XTMP("VPRENSZ-DOMAINS",TAG,"FREQ",I)) Q:'I  D
"RTN","VPRENSZ1",62,0)
 . S X=X_I_"," I $L(X)>72 S LST=LST+1,LST(LST)=X,X=""
"RTN","VPRENSZ1",63,0)
 I $L(X) S LST=LST+1,LST(LST)=X
"RTN","VPRENSZ1",64,0)
 D NOCOMMA
"RTN","VPRENSZ1",65,0)
 S LST=LST+1,LST(LST)="</recordCount>"
"RTN","VPRENSZ1",66,0)
 ; 
"RTN","VPRENSZ1",67,0)
 S LST=LST+1,LST(LST)="<patientCount>"
"RTN","VPRENSZ1",68,0)
 S X="",I=0 F  S I=$O(^XTMP("VPRENSZ-DOMAINS",TAG,"FREQ",I)) Q:'I  D
"RTN","VPRENSZ1",69,0)
 . S X=X_^XTMP("VPRENSZ-DOMAINS",TAG,"FREQ",I)_","
"RTN","VPRENSZ1",70,0)
 . I $L(X)>72 S LST=LST+1,LST(LST)=X,X=""
"RTN","VPRENSZ1",71,0)
 I $L(X) S LST=LST+1,LST(LST)=X
"RTN","VPRENSZ1",72,0)
 D NOCOMMA
"RTN","VPRENSZ1",73,0)
 S LST=LST+1,LST(LST)="</patientCount>"
"RTN","VPRENSZ1",74,0)
 Q
"RTN","VPRENSZ1",75,0)
NOCOMMA ;
"RTN","VPRENSZ1",76,0)
 I $E(LST(LST),$L(LST(LST)))="," S LST(LST)=$E(LST(LST),1,$L(LST(LST))-1)
"RTN","VPRENSZ1",77,0)
 Q
"RTN","VPRENSZ1",78,0)
ERRMSG(X) ; build error message
"RTN","VPRENSZ1",79,0)
 S LST=LST+1,LST(LST)="<error msg='"_X_"' />"
"RTN","VPRENSZ1",80,0)
 Q
"RTN","VPRENSZ1",81,0)
CF ; Count frequencies
"RTN","VPRENSZ1",82,0)
 S DOM="" F  S DOM=$O(^XTMP("VPRENSZ-DOMAINS",DOM)) Q:DOM=""  D
"RTN","VPRENSZ1",83,0)
 . S (I,T)=0 F  S I=$O(^XTMP("VPRENSZ-DOMAINS",DOM,"FREQ",I)) Q:'I  S T=T+1
"RTN","VPRENSZ1",84,0)
 . W !,DOM,"=",T
"RTN","VPRENSZ1",85,0)
 Q
"RTN","VPREVNT")
0^2^B104223314
"RTN","VPREVNT",1,0)
VPREVNT ;SLC/MKB -- VistA event listeners
"RTN","VPREVNT",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPREVNT",3,0)
 ;
"RTN","VPREVNT",4,0)
 ; External References          DBIA#
"RTN","VPREVNT",5,0)
 ; -------------------          -----
"RTN","VPREVNT",6,0)
 ; DG FIELD MONITOR             +3344
"RTN","VPREVNT",7,0)
 ; DGPM MOVEMENT EVENTS         +1181
"RTN","VPREVNT",8,0)
 ; FH EVSEND OR                 +
"RTN","VPREVNT",9,0)
 ; GMRA ENTERED IN ERROR        +1467
"RTN","VPREVNT",10,0)
 ; GMRA SIGN-OFF ON DATA        +1469
"RTN","VPREVNT",11,0)
 ; GMRC EVSEND OR               +3140
"RTN","VPREVNT",12,0)
 ; LR70 CH EVSEND OR            +3565 *
"RTN","VPREVNT",13,0)
 ; MDC OBSERVATION UPDATE       +
"RTN","VPREVNT",14,0)
 ; OR EVSEND *                  +3135
"RTN","VPREVNT",15,0)
 ; PS EVSEND OR                 +2415
"RTN","VPREVNT",16,0)
 ; PXK VISIT DATA EVENT         +1298
"RTN","VPREVNT",17,0)
 ; RA EVSEND OR                 +
"RTN","VPREVNT",18,0)
 ; SDAM APPOINTMENT EVENTS      +1320
"RTN","VPREVNT",19,0)
 ; ^AUPNVSIT                     2028
"RTN","VPREVNT",20,0)
 ; ^DPT                         10035
"RTN","VPREVNT",21,0)
 ; ^OR(100                       5771
"RTN","VPREVNT",22,0)
 ; DIQ                           2056
"RTN","VPREVNT",23,0)
 ; GMVUTL                        5046
"RTN","VPREVNT",24,0)
 ; TIUSRVLO                      2834
"RTN","VPREVNT",25,0)
 ; VADPT                        10061
"RTN","VPREVNT",26,0)
 ; VASITE                       10112
"RTN","VPREVNT",27,0)
 ; XLFDT                        10103
"RTN","VPREVNT",28,0)
 ; XTHC10                        5515
"RTN","VPREVNT",29,0)
 ;
"RTN","VPREVNT",30,0)
DG ; -- DG FIELD MONITOR protocol listener
"RTN","VPREVNT",31,0)
 Q:$G(DGFILE)'=2         ;Patient file only
"RTN","VPREVNT",32,0)
 N DFN S DFN=+$G(DGDA)
"RTN","VPREVNT",33,0)
 ; operational pt-select
"RTN","VPREVNT",34,0)
 I "^.01^.02^.03^.09^.101^.351^.361^"[(U_+$G(DGFIELD)_U) D POSTX("pt-select",DFN_"&"_$G(DGFIELD))
"RTN","VPREVNT",35,0)
 ; subscribed patient
"RTN","VPREVNT",36,0)
 I $D(^VPR(560,"AITEM",DFN)),$$FLD(+$G(DGFIELD)) D POST(DFN,"patient",DFN)
"RTN","VPREVNT",37,0)
 Q
"RTN","VPREVNT",38,0)
 ;
"RTN","VPREVNT",39,0)
FLD(X) ; --Return 1 or 0, if X is a field tracked by VPR
"RTN","VPREVNT",40,0)
 S X=U_+$G(X)_U
"RTN","VPREVNT",41,0)
 I "^.01^.02^.03^.05^.08^.09^.351^.361^.364^"[X Q 1         ;demographic
"RTN","VPREVNT",42,0)
 I "^.111^.1112^.112^.113^.114^.115^.131^.132^.134^"[X Q 1  ;addr/phone
"RTN","VPREVNT",43,0)
 I "^.211^.212^.213^.214^.216^.217^.218^.219^"[X Q 1        ;NOK
"RTN","VPREVNT",44,0)
 I "^.301^.302^1901^.32102^.32103^.32201^.5295^"[X Q 1      ;serv conn
"RTN","VPREVNT",45,0)
 Q 0
"RTN","VPREVNT",46,0)
 ;
"RTN","VPREVNT",47,0)
DGPM ; -- DGPM MOVEMENT EVENTS protocol listener
"RTN","VPREVNT",48,0)
 ;    [expects DFN,DGPM* variables]
"RTN","VPREVNT",49,0)
 N ADM,ACT S ADM=DGPMDA
"RTN","VPREVNT",50,0)
 I DGPMT'=1 S ADM=$S(DGPMA:$P(DGPMA,U,14),1:$P(DGPMP,U,14)) Q:ADM<1
"RTN","VPREVNT",51,0)
 S ACT=$S(DGPMA:"",1:"@")
"RTN","VPREVNT",52,0)
 I $D(^VPR(560,"AITEM",DFN)) D POST(DFN,"visit","H"_ADM,ACT)
"RTN","VPREVNT",53,0)
 ; update roster(s) if current movement
"RTN","VPREVNT",54,0)
 N ADMX,MVTX,PREV,NEW,OLD,WARD
"RTN","VPREVNT",55,0)
 S ADMX=$Q(^DGPM("ATID1",DFN)) Q:$QS(ADMX,4)'=ADM
"RTN","VPREVNT",56,0)
 S MVTX=$Q(^DGPM("APMV",DFN,ADM)) Q:$QS(MVTX,5)'=DGPMDA
"RTN","VPREVNT",57,0)
 S PREV=$G(DGPMP) I 'PREV,DGPMT'=1 D  ;previous or edited mvt
"RTN","VPREVNT",58,0)
 . S MVTX=$Q(@MVTX) Q:DFN'=$QS(MVTX,2)  Q:ADM'=$QS(MVTX,3)
"RTN","VPREVNT",59,0)
 . S PREV=$G(^DGPM(+$QS(MVTX,5),0))
"RTN","VPREVNT",60,0)
 S NEW=$P(DGPMA,U,6),OLD=$P(PREV,U,6)
"RTN","VPREVNT",61,0)
 I NEW'=OLD F WARD=NEW,OLD I WARD D
"RTN","VPREVNT",62,0)
 . S I=0 F  S I=$O(^VPROSTER("AD",WARD_";DIC(42,",I)) Q:I<1  D POSTX("roster",I)
"RTN","VPREVNT",63,0)
 Q
"RTN","VPREVNT",64,0)
 ;-find visit# for corresponding admission [not used]
"RTN","VPREVNT",65,0)
 N ADM,PTF,IDT,ID,ACT
"RTN","VPREVNT",66,0)
 I DGPMA S ADM=+DGPMA,PTF=+$P(DGPMA,U,16)
"RTN","VPREVNT",67,0)
 E  S ADM=+DGPMP,PTF=+$P(DGPMP,U,16)
"RTN","VPREVNT",68,0)
 I DGPMT'=1 D  Q:ADM<1
"RTN","VPREVNT",69,0)
 . N VAIP S VAIP("E")=DGPMDA
"RTN","VPREVNT",70,0)
 . D IN5^VADPT S ADM=+VAIP(13,1),PTF=+VAIP(12)
"RTN","VPREVNT",71,0)
 S IDT=9999999-$P(ADM,".") S:ADM["." IDT=IDT_"."_$P(ADM,".",2)
"RTN","VPREVNT",72,0)
 S ID=+$O(^AUPNVSIT("AAH",DFN,IDT,0)) Q:'ID
"RTN","VPREVNT",73,0)
 S ACT=$S(DGPMA:"",1:"@")
"RTN","VPREVNT",74,0)
 D POST(DFN,"visit",ID,ACT)
"RTN","VPREVNT",75,0)
 ; POST(DFN,"ptf",PTF,ACT):DGPMT=3
"RTN","VPREVNT",76,0)
 Q
"RTN","VPREVNT",77,0)
 ;
"RTN","VPREVNT",78,0)
NEWINPT() ; -- is DFN newly admitted?
"RTN","VPREVNT",79,0)
 N Y S Y=0
"RTN","VPREVNT",80,0)
 I DGPMT=1,DGPMA,'DGPMP,+$G(^DPT(DFN,.105))=DGPMDA S Y=1 ;new admission
"RTN","VPREVNT",81,0)
 Q Y
"RTN","VPREVNT",82,0)
 ;
"RTN","VPREVNT",83,0)
SDAM ; -- SDAM APPOINTMENT EVENTS protocol listener
"RTN","VPREVNT",84,0)
 I $G(SDATA) D  Q  ;appointments
"RTN","VPREVNT",85,0)
 . N DFN,DATE,HLOC,STS,REASON,PROV
"RTN","VPREVNT",86,0)
 . S DFN=+$P(SDATA,U,2) Q:DFN<1
"RTN","VPREVNT",87,0)
 . Q:'$D(^VPR(560,"AITEM",DFN))
"RTN","VPREVNT",88,0)
 . S DATE=+$P(SDATA,U,3),HLOC=+$P(SDATA,U,4),(PROV,REASON)=""
"RTN","VPREVNT",89,0)
 . ;I SDAMEVT=1 K DIR S DIR(0)="F^3:20",DIR("A")="Enter Reason for Appointment: ",DIR("?")="Answer must be 2-20 characters" D ^DIR S REASON=Y
"RTN","VPREVNT",90,0)
 . ;I SDAMEVT=1 K DIC S DIC="^VA(200,",DIC("A")="Select Patient's Provider: ",DIC(0)="AEQ",D="AK.PROVIDER" D IX^DIC S PROV=$P(Y,"^",1,2)
"RTN","VPREVNT",91,0)
 . D POST(DFN,"appointment","A;"_DATE_";"_HLOC_";"_REASON_";"_$TR($P(PROV,U,1,2),"^",";"))
"RTN","VPREVNT",92,0)
 Q
"RTN","VPREVNT",93,0)
 ;
"RTN","VPREVNT",94,0)
PCE ; -- PXK VISIT DATA EVENT protocol listener
"RTN","VPREVNT",95,0)
 N IEN,PX0A,PX0B,DFN,DA,ACT
"RTN","VPREVNT",96,0)
 S IEN=+$O(^TMP("PXKCO",$J,0)) Q:IEN<1
"RTN","VPREVNT",97,0)
 S PX0A=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,0,"AFTER")),PX0B=$G(^("BEFORE"))
"RTN","VPREVNT",98,0)
 S DFN=$S($L(PX0A):+$P(PX0A,U,5),1:+$P(PX0B,U,5))
"RTN","VPREVNT",99,0)
 Q:DFN<1  Q:'$D(^VPR(560,"AITEM",DFN))
"RTN","VPREVNT",100,0)
 ; Visit file
"RTN","VPREVNT",101,0)
 S ACT=$S(PX0A="":"@",1:"")
"RTN","VPREVNT",102,0)
 D POST(DFN,"visit",IEN,ACT)
"RTN","VPREVNT",103,0)
 ; check V-files
"RTN","VPREVNT",104,0)
 F SUB="HF","IMM","XAM","CPT","PED","POV","SK" D
"RTN","VPREVNT",105,0)
 . S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,SUB,DA)) Q:DA<1  D
"RTN","VPREVNT",106,0)
 .. S ACT=$S($G(^TMP("PXKCO",$J,IEN,SUB,DA,0,"AFTER"))="":"@",1:"")
"RTN","VPREVNT",107,0)
 .. D POST(DFN,$$NAME(SUB),DA,ACT)
"RTN","VPREVNT",108,0)
 Q
"RTN","VPREVNT",109,0)
 ;
"RTN","VPREVNT",110,0)
NAME(X) ; -- return object name for V-files
"RTN","VPREVNT",111,0)
 N Y S Y=""
"RTN","VPREVNT",112,0)
 I X="HF"  S Y="factor"
"RTN","VPREVNT",113,0)
 I X="IMM" S Y="immunization"
"RTN","VPREVNT",114,0)
 I X="XAM" S Y="exam"
"RTN","VPREVNT",115,0)
 I X="CPT" S Y="cpt"
"RTN","VPREVNT",116,0)
 I X="PED" S Y="education"
"RTN","VPREVNT",117,0)
 I X="POV" S Y="pov"
"RTN","VPREVNT",118,0)
 I X="SK"  S Y="skin"
"RTN","VPREVNT",119,0)
 Q Y
"RTN","VPREVNT",120,0)
 ;
"RTN","VPREVNT",121,0)
ZPCE ; -- old PXK VISIT DATA EVENT protocol listener [not in use]
"RTN","VPREVNT",122,0)
 N IEN,PX0,PX150,DFN,DA
"RTN","VPREVNT",123,0)
 S IEN=+$O(^TMP("PXKCO",$J,0)) Q:IEN<1
"RTN","VPREVNT",124,0)
 S PX0=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,0,"AFTER")) Q:$P(PX0,U,7)="E"
"RTN","VPREVNT",125,0)
 I PX0="" D POST(DFN,"visit",IEN,"@") Q  ;deleted
"RTN","VPREVNT",126,0)
 S PX150=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,150,"AFTER")) Q:$P(PX150,U,3)'="P"
"RTN","VPREVNT",127,0)
 S DFN=+$P(PX0,U,5) Q:DFN<1  Q:'$D(^VPR(560,"AITEM",DFN))
"RTN","VPREVNT",128,0)
 D POST(DFN,"visit",IEN)
"RTN","VPREVNT",129,0)
 S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,"IMM",DA)) Q:DA<1  D POST(DFN,"immunization",DA)
"RTN","VPREVNT",130,0)
 S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,"HF",DA)) Q:DA<1  D POST(DFN,"factor",DA)
"RTN","VPREVNT",131,0)
 Q
"RTN","VPREVNT",132,0)
 ;
"RTN","VPREVNT",133,0)
XQOR(MSG) ; -- messaging listener (update meds, labs, xrays, consults)
"RTN","VPREVNT",134,0)
 N VPRMSG,VPRPKG,MSH,ORC,DFN
"RTN","VPREVNT",135,0)
 S VPRMSG=$S($L($G(MSG)):MSG,1:"MSG") Q:'$O(@VPRMSG@(0))
"RTN","VPREVNT",136,0)
 S MSH=0 F  S MSH=$O(@VPRMSG@(MSH)) Q:MSH'>0  Q:$E(@VPRMSG@(MSH),1,3)="MSH"
"RTN","VPREVNT",137,0)
 Q:'MSH  Q:'$L($G(@VPRMSG@(MSH)))
"RTN","VPREVNT",138,0)
 S VPRPKG=$$TYPE($P(@VPRMSG@(MSH),"|",3))  Q:'$L(VPRPKG)
"RTN","VPREVNT",139,0)
 S DFN=$$PID Q:DFN<1  Q:'$D(^VPR(560,"AITEM",DFN))
"RTN","VPREVNT",140,0)
 S ORC=MSH F  S ORC=$O(@VPRMSG@(+ORC)) Q:ORC'>0  I $E(@VPRMSG@(ORC),1,3)="ORC" D
"RTN","VPREVNT",141,0)
 . N ORDCNTRL,PKGIFN,ORIFN
"RTN","VPREVNT",142,0)
 . S ORC=ORC_U_@VPRMSG@(ORC),ORDCNTRL=$TR($P(ORC,"|",2),"@","P")
"RTN","VPREVNT",143,0)
 . ; QUIT if action failed, conversion, purge, or backdoor verify/new
"RTN","VPREVNT",144,0)
 . I ORDCNTRL["U"!("DE^ZC^ZP^ZR^ZV^SN"[ORDCNTRL) Q
"RTN","VPREVNT",145,0)
 . S ORIFN=+$P($P(ORC,"|",3),U),PKGIFN=$P($P(ORC,"|",4),U)
"RTN","VPREVNT",146,0)
 . ; if order has a parent, use parent# and update entire order
"RTN","VPREVNT",147,0)
 . S ORIFN=$S($P($G(^OR(100,ORIFN,3)),U,9):$P(^(3),U,9),1:ORIFN)
"RTN","VPREVNT",148,0)
 . I $$RESULT D  ;update ancillary domains
"RTN","VPREVNT",149,0)
 .. D POST(DFN,VPRPKG,PKGIFN)
"RTN","VPREVNT",150,0)
 .. D:VPRPKG="image" POST(DFN,"document",PKGIFN)
"RTN","VPREVNT",151,0)
 .. I VPRPKG="lab",PKGIFN'["CH",'$$LRTIU(DFN,PKGIFN) D POST(DFN,"document",$P(PKGIFN,";",4,5))
"RTN","VPREVNT",152,0)
 . I ORIFN,ORDCNTRL'="ZD" D  ;update order(s)
"RTN","VPREVNT",153,0)
 .. D POST(DFN,"order",ORIFN)
"RTN","VPREVNT",154,0)
 .. N ORIG S ORIG=+$P($G(^OR(100,ORIFN,3)),U,5)
"RTN","VPREVNT",155,0)
 .. I ORIG D POST(DFN,"order",ORIG) ;need fwd ptrs, sig flds
"RTN","VPREVNT",156,0)
 Q
"RTN","VPREVNT",157,0)
 ;
"RTN","VPREVNT",158,0)
RESULT() ; -- Return 1 or 0, if message broadcasts a result
"RTN","VPREVNT",159,0)
 ;           [may modify PKGIFN for use in POST]
"RTN","VPREVNT",160,0)
 N Y S Y=0
"RTN","VPREVNT",161,0)
 I VPRPKG="consult" S Y=1,PKGIFN=+PKGIFN G RQ
"RTN","VPREVNT",162,0)
 I VPRPKG="med"     S Y=1,PKGIFN=ORIFN G RQ
"RTN","VPREVNT",163,0)
 I VPRPKG="lab"     S:ORDCNTRL="RE"&($L(PKGIFN,";")>3) Y=1 G RQ
"RTN","VPREVNT",164,0)
 I VPRPKG="image"   S:PKGIFN["~" Y=1,PKGIFN=$TR($P(PKGIFN,"~",2,3),"~","-") G RQ
"RTN","VPREVNT",165,0)
RQ Q Y
"RTN","VPREVNT",166,0)
 ;
"RTN","VPREVNT",167,0)
LRTIU(DFN,ORPK) ; -- Return 1 or 0, if LR report is in TIU
"RTN","VPREVNT",168,0)
 I $G(DFN)<1!'$L($G(ORPK)) Q 0
"RTN","VPREVNT",169,0)
 I ORPK["CH"!(ORPK["MI") Q 0
"RTN","VPREVNT",170,0)
 N SUB,IDT,LRDFN
"RTN","VPREVNT",171,0)
 S SUB=$P(ORPK,";",4),IDT=+$P(ORPK,";",5),LRDFN=+$G(^DPT(+DFN,"LR"))
"RTN","VPREVNT",172,0)
 I $O(^LR(LRDFN,SUB,IDT,.05,0)) Q 1
"RTN","VPREVNT",173,0)
 Q 0
"RTN","VPREVNT",174,0)
 ;
"RTN","VPREVNT",175,0)
NA(MSG) ; -- messaging listener (new backdoor orders)
"RTN","VPREVNT",176,0)
 N VPRMSG,VPRPKG,MSH,ORC,DFN
"RTN","VPREVNT",177,0)
 S VPRMSG=$S($L($G(MSG)):MSG,1:"MSG") Q:'$O(@VPRMSG@(0))
"RTN","VPREVNT",178,0)
 S MSH=0 F  S MSH=$O(@VPRMSG@(MSH)) Q:MSH'>0  Q:$E(@VPRMSG@(MSH),1,3)="MSH"
"RTN","VPREVNT",179,0)
 Q:'MSH  Q:'$L($G(@VPRMSG@(MSH)))
"RTN","VPREVNT",180,0)
 S VPRPKG=$$TYPE($P(@VPRMSG@(MSH),"|",3))  Q:'$L(VPRPKG)
"RTN","VPREVNT",181,0)
 S DFN=$$PID Q:DFN<1  Q:'$D(^VPR(560,"AITEM",DFN))
"RTN","VPREVNT",182,0)
 S ORC=MSH F  S ORC=$O(@VPRMSG@(+ORC)) Q:ORC'>0  I $E(@VPRMSG@(ORC),1,3)="ORC" D
"RTN","VPREVNT",183,0)
 . N ORDCNTRL,ORIFN
"RTN","VPREVNT",184,0)
 . S ORC=ORC_U_@VPRMSG@(ORC),ORDCNTRL=$TR($P(ORC,"|",2),"@","P")
"RTN","VPREVNT",185,0)
 . Q:ORDCNTRL'="NA"
"RTN","VPREVNT",186,0)
 . S ORIFN=+$P($P(ORC,"|",3),U) D POST(DFN,"order",ORIFN)
"RTN","VPREVNT",187,0)
 . I VPRPKG="med" D POST(DFN,VPRPKG,ORIFN)
"RTN","VPREVNT",188,0)
 Q
"RTN","VPREVNT",189,0)
 ;
"RTN","VPREVNT",190,0)
TYPE(NAME) ; -- Returns type name for XML
"RTN","VPREVNT",191,0)
 I NAME="LABORATORY"  Q "lab"
"RTN","VPREVNT",192,0)
 I NAME="PHARMACY"    Q "med"
"RTN","VPREVNT",193,0)
 I NAME="CONSULTS"    Q "consult"
"RTN","VPREVNT",194,0)
 I NAME="PROCEDURES"  Q "consult"
"RTN","VPREVNT",195,0)
 I NAME="RADIOLOGY"   Q "image"
"RTN","VPREVNT",196,0)
 I NAME="IMAGING"     Q "image"
"RTN","VPREVNT",197,0)
 I NAME="ORDER ENTRY" Q "order"
"RTN","VPREVNT",198,0)
 I NAME="DIETETICS"   Q "diet"
"RTN","VPREVNT",199,0)
 Q ""
"RTN","VPREVNT",200,0)
 ;
"RTN","VPREVNT",201,0)
PID() ; -- Returns patient from PID segment in current msg
"RTN","VPREVNT",202,0)
 N I,SEG,Y S I=MSH
"RTN","VPREVNT",203,0)
 F  S I=$O(@VPRMSG@(I)) Q:I'>0  S SEG=$E(@VPRMSG@(I),1,3) Q:SEG="ORC"  I SEG="PID" D  Q
"RTN","VPREVNT",204,0)
 . S Y=+$P(@VPRMSG@(I),"|",4)
"RTN","VPREVNT",205,0)
 .;I '$D(^DPT(Y,0)) S:$L($P(@VPRMSG@(I),"|",5)) Y=+$P(@VPRMSG@(I),"|",5) ;alt ID for Lab
"RTN","VPREVNT",206,0)
 Q Y
"RTN","VPREVNT",207,0)
 ;
"RTN","VPREVNT",208,0)
PV1() ; -- Returns patient class from PV1 segment in current msg
"RTN","VPREVNT",209,0)
 N I,SEG,Y S I=MSH,Y=""
"RTN","VPREVNT",210,0)
 F  S I=$O(@VPRMSG@(I)) Q:I'>0  S SEG=$E(@VPRMSG@(I),1,3) Q:SEG="ORC"  I SEG="PV1" D  Q
"RTN","VPREVNT",211,0)
 . S Y=$P(@VPRMSG@(I),"|",3)
"RTN","VPREVNT",212,0)
 I Y="",$G(ORIFN) S Y=$$GET1^DIQ(100,+ORIFN_",",10,"I")
"RTN","VPREVNT",213,0)
 Q Y
"RTN","VPREVNT",214,0)
 ;
"RTN","VPREVNT",215,0)
GMRA(ACT) ; -- GMRA SIGN-OFF ON DATA protocol listener
"RTN","VPREVNT",216,0)
 ;   also GMRA ENTERED IN ERROR [ACT=@]
"RTN","VPREVNT",217,0)
 N DFN,IEN
"RTN","VPREVNT",218,0)
 S DFN=+$G(GMRAPA(0)),IEN=+$G(GMRAPA)
"RTN","VPREVNT",219,0)
 D POST(DFN,"allergy",IEN,$G(ACT))
"RTN","VPREVNT",220,0)
 Q
"RTN","VPREVNT",221,0)
 ;
"RTN","VPREVNT",222,0)
GMPL(DFN,IEN) ; -- GMPL EVENT protocol listener
"RTN","VPREVNT",223,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","VPREVNT",224,0)
 ;N ACT S ACT=$S($P($G(^AUPNPROB(IEN,1)),U,2)="H":"@",1:"")
"RTN","VPREVNT",225,0)
 D POST(DFN,"problem",IEN) ;,ACT)
"RTN","VPREVNT",226,0)
 Q
"RTN","VPREVNT",227,0)
 ;
"RTN","VPREVNT",228,0)
GMRV(DFN,IEN,ERR) ; -- Vital Measurement file #120.5 AVPR index
"RTN","VPREVNT",229,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","VPREVNT",230,0)
 ;. N VPRY
"RTN","VPREVNT",231,0)
 ;. D GETREC^GMVUTL(.VPRY,IEN,1) ;use Date Taken instead,
"RTN","VPREVNT",232,0)
 ;. I $G(VPRY(0)) S IEN=+VPRY(0) ; to get all related results
"RTN","VPREVNT",233,0)
 N ACT S ACT=$S($G(ERR):"@",1:"")
"RTN","VPREVNT",234,0)
 D POST(DFN,"vital",IEN,ACT)
"RTN","VPREVNT",235,0)
 Q
"RTN","VPREVNT",236,0)
 ;
"RTN","VPREVNT",237,0)
MDC(OBS) ; -- CLiO OBS file #704.117
"RTN","VPREVNT",238,0)
 N DFN,ID,ACT
"RTN","VPREVNT",239,0)
 S DFN=+$G(OBS("PATIENT_ID","I")) Q:DFN<1
"RTN","VPREVNT",240,0)
 S ID=$G(OBS("OBS_ID","I")) Q:'$L(ID)
"RTN","VPREVNT",241,0)
 S ACT=$S('$G(OBS("STATUS","I")):"@",1:"")
"RTN","VPREVNT",242,0)
 D POST(DFN,"obs",ID,ACT)
"RTN","VPREVNT",243,0)
 I $G(OBS("DOMAIN","VITALS")) D POST(DFN,"vital",ID,ACT)
"RTN","VPREVNT",244,0)
 Q
"RTN","VPREVNT",245,0)
 ;
"RTN","VPREVNT",246,0)
CP(DFN,ID,ACT) ; -- CP Transaction file #702 AVPR index
"RTN","VPREVNT",247,0)
 S DFN=+$G(DFN),ID=$G(ID)
"RTN","VPREVNT",248,0)
 D POST(DFN,"procedure",ID,$G(ACT))
"RTN","VPREVNT",249,0)
 Q
"RTN","VPREVNT",250,0)
 ;
"RTN","VPREVNT",251,0)
SR(DFN,IEN,ACT) ; -- Surgery [SROERR] update
"RTN","VPREVNT",252,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","VPREVNT",253,0)
 D POST(DFN,"surgery",IEN,$G(ACT))
"RTN","VPREVNT",254,0)
 Q
"RTN","VPREVNT",255,0)
 ;
"RTN","VPREVNT",256,0)
TIU(DFN,IEN) ; -- TIU Document file #8925 AVPR index
"RTN","VPREVNT",257,0)
 N ACT
"RTN","VPREVNT",258,0)
 S DFN=+$G(DFN),IEN=+$G(IEN),ACT=""
"RTN","VPREVNT",259,0)
 ; $$ISADDNDM^TIULC1(IEN) S IEN=+$$GET1^DIQ(8925,IEN_",",.06,"I")
"RTN","VPREVNT",260,0)
 N VPRX S VPRX=$$RESOLVE^TIUSRVLO(IEN)
"RTN","VPREVNT",261,0)
 I $P(VPRX,U,13),$P($P(VPRX,U)," ")="Addendum" S IEN=$P(VPRX,U,13)
"RTN","VPREVNT",262,0)
 I $P(VPRX,U,6)="retracted" S ACT="@"
"RTN","VPREVNT",263,0)
 D POST(DFN,"document",IEN,ACT)
"RTN","VPREVNT",264,0)
 Q
"RTN","VPREVNT",265,0)
 ;
"RTN","VPREVNT",266,0)
PSB ; -- VPR PSB EVENTS protocol listener (BCMA)
"RTN","VPREVNT",267,0)
 N IEN,DFN,ORPK,TYPE,ORIFN
"RTN","VPREVNT",268,0)
 S IEN=$S($P($G(PSBIEN),",",2)'="":+$P(PSBIEN,",",2),$G(PSBIEN)="+1":+$G(PSBIEN(1)),1:+$G(PSBIEN))
"RTN","VPREVNT",269,0)
 S DFN=+$G(^PSB(53.79,IEN,0)),ORPK=$P($G(^(.1)),U)
"RTN","VPREVNT",270,0)
 Q:DFN<1  Q:ORPK<1  S TYPE=$S(ORPK["V":"IV",ORPK["U":5,1:"") Q:TYPE=""
"RTN","VPREVNT",271,0)
 S ORIFN=+$P($G(^PS(55,DFN,TYPE,+ORPK,0)),U,21)
"RTN","VPREVNT",272,0)
 D:ORIFN POST(DFN,"med",ORIFN)
"RTN","VPREVNT",273,0)
 Q
"RTN","VPREVNT",274,0)
 ;
"RTN","VPREVNT",275,0)
XU(IEN,ACT) ; -- XU USER ADD/CHANGE/TERMINATE option listener
"RTN","VPREVNT",276,0)
 S IEN=+$G(IEN) Q:IEN<1
"RTN","VPREVNT",277,0)
 D POSTX("user",IEN,$G(ACT))
"RTN","VPREVNT",278,0)
 Q
"RTN","VPREVNT",279,0)
 ;
"RTN","VPREVNT",280,0)
POST(DFN,TYPE,ID,ACT) ; -- track updated patient data
"RTN","VPREVNT",281,0)
 S DFN=+$G(DFN),TYPE=$G(TYPE),ID=$G(ID)
"RTN","VPREVNT",282,0)
 Q:DFN<1  Q:TYPE=""  Q:ID=""   ;incomplete request
"RTN","VPREVNT",283,0)
 Q:$G(^XTMP("VPR-off",TYPE))   ;domain turned 'off'
"RTN","VPREVNT",284,0)
 Q:'$D(^VPR(560,"AITEM",DFN))  ;patient not subscribed to
"RTN","VPREVNT",285,0)
 N VPRDT S VPRDT="VPR-"_DT
"RTN","VPREVNT",286,0)
 ;S ^XTMP(VPRDT,$$NEXT)=DFN_U_TYPE_U_ID_U_$G(ACT)
"RTN","VPREVNT",287,0)
 N NODES
"RTN","VPREVNT",288,0)
 D POST^VPRDJFS(DFN,TYPE,ID,$G(ACT),"",.NODES)
"RTN","VPREVNT",289,0)
 Q
"RTN","VPREVNT",290,0)
 ;
"RTN","VPREVNT",291,0)
POSTX(TYPE,ID,ACT) ; -- track updated reference items
"RTN","VPREVNT",292,0)
 S TYPE=$G(TYPE),ID=$G(ID)
"RTN","VPREVNT",293,0)
 Q:TYPE=""  Q:ID=""            ;incomplete request
"RTN","VPREVNT",294,0)
 Q:$G(^XTMP("VPR-off",TYPE))   ;domain turned 'off'
"RTN","VPREVNT",295,0)
 N VPRDT S VPRDT="VPR-"_DT ;"VPREF-"_DT
"RTN","VPREVNT",296,0)
 ;S ^XTMP(VPRDT,$$NEXT)=U_TYPE_U_ID_U_$G(ACT)
"RTN","VPREVNT",297,0)
 N NODES
"RTN","VPREVNT",298,0)
 D POST^VPRDJFS("OPD",TYPE,ID,$G(ACT),"",.NODES)
"RTN","VPREVNT",299,0)
 Q
"RTN","VPREVNT",300,0)
 ;
"RTN","VPREVNT",301,0)
NEXT() ; -- Return next sequential number in ^XTMP(VPRDT,n)
"RTN","VPREVNT",302,0)
 L +^XTMP(VPRDT):5 ;I'$T ??
"RTN","VPREVNT",303,0)
 N Y S Y=+$O(^XTMP(VPRDT,"A"),-1)+1
"RTN","VPREVNT",304,0)
 I '$D(^XTMP(VPRDT,0)) S ^(0)=$$FMADD^XLFDT(DT,3)_U_DT_"^VPR Updates"
"RTN","VPREVNT",305,0)
 L -^XTMP(VPRDT)
"RTN","VPREVNT",306,0)
 Q Y
"RTN","VPREVNT",307,0)
 ;
"RTN","VPREVNT",308,0)
HTTP(URL,DFN,TYPE,ID) ; -- send message that TYPE/ID has been updated [not in use]
"RTN","VPREVNT",309,0)
 N DIV,X,VPRX
"RTN","VPREVNT",310,0)
 S DFN=+$G(DFN) Q:DFN<1  ;patient req'd
"RTN","VPREVNT",311,0)
 S DIV=$P($$SITE^VASITE,U,3) ;station number
"RTN","VPREVNT",312,0)
 S URL=$G(URL)_"?division="_DIV_"&dfn="_+$G(DFN)
"RTN","VPREVNT",313,0)
 I $L($G(TYPE)) S URL=URL_"&type="_TYPE
"RTN","VPREVNT",314,0)
 I $L($G(ID))   S URL=URL_"&id="_ID
"RTN","VPREVNT",315,0)
 S ^XTMP("VPR",DFN,"HTTP")=$H
"RTN","VPREVNT",316,0)
 S X=$$GETURL^XTHC10(URL,,"VPRX")
"RTN","VPREVNT",317,0)
 ; I X>200 = ERROR
"RTN","VPREVNT",318,0)
 Q
"RTN","VPRFPTC")
0^12^B14576966
"RTN","VPRFPTC",1,0)
VPRFPTC ;SLC/MKB,AGP - Patient look-up Utilities at Facility ; 6/06/12
"RTN","VPRFPTC",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRFPTC",3,0)
 ;
"RTN","VPRFPTC",4,0)
CHKS(VPRZ,DFN) ; perform patient select checks
"RTN","VPRFPTC",5,0)
 ;
"RTN","VPRFPTC",6,0)
 N ACCESS,CHKS,CNT,ERR,I,IEN,STR,X,VPRY
"RTN","VPRFPTC",7,0)
 ; check for sensitive record
"RTN","VPRFPTC",8,0)
 S STR="patientChecks"
"RTN","VPRFPTC",9,0)
 S ACCESS=0
"RTN","VPRFPTC",10,0)
 D PTSEC^DGSEC4(.VPRY,DFN)  ;IA #3027
"RTN","VPRFPTC",11,0)
 S ACCESS=1
"RTN","VPRFPTC",12,0)
 I VPRY(1)>0 D
"RTN","VPRFPTC",13,0)
 .S CHKS("sensitive","dfn")=DFN
"RTN","VPRFPTC",14,0)
 .S ACCESS=(VPRY(1)<3)
"RTN","VPRFPTC",15,0)
 .S CHKS("sensitive","mayAccess")=$S(ACCESS=1:"true",1:"false")
"RTN","VPRFPTC",16,0)
 .S CHKS("sensitive","logAccess")=$S(VPRY(1)>1:"true",1:"false")
"RTN","VPRFPTC",17,0)
 .S CNT=2,X=""
"RTN","VPRFPTC",18,0)
 .F  S CNT=$O(VPRY(CNT)) Q:CNT'>0  S X=X_$C(13)_$C(10)_$G(VPRY(CNT))
"RTN","VPRFPTC",19,0)
 .S CHKS("sensitive","text")=X
"RTN","VPRFPTC",20,0)
 ;
"RTN","VPRFPTC",21,0)
 ; check for deceased patient
"RTN","VPRFPTC",22,0)
 I +$G(^DPT(DFN,.35)) D
"RTN","VPRFPTC",23,0)
 . S CHKS("deceased","text")="This patient died on "_$$FMTE^XLFDT(^DPT(DFN,.35),"D")_"."_$C(13)_$C(10)_" Do you wish to continue?"
"RTN","VPRFPTC",24,0)
 ;
"RTN","VPRFPTC",25,0)
 ; check for similar patients
"RTN","VPRFPTC",26,0)
 K VPRY
"RTN","VPRFPTC",27,0)
 N MSG,SIM,SIMPAT,TEXT S MSG=0,SIM=0
"RTN","VPRFPTC",28,0)
 D GUIBS5A^DPTLK6(.VPRY,DFN)  ;IA #3593
"RTN","VPRFPTC",29,0)
 I VPRY(1)>0 D
"RTN","VPRFPTC",30,0)
 .S TEXT=""
"RTN","VPRFPTC",31,0)
 .S I=1 F  S I=$O(VPRY(I)) Q:'I  S X=VPRY(I) D
"RTN","VPRFPTC",32,0)
 .. S SIM=SIM+1
"RTN","VPRFPTC",33,0)
 .. I $E(X)=0 S TEXT=$S($L(TEXT):TEXT_$C(13)_$C(10)_$P(X,U,2),1:$P(X,U,2))
"RTN","VPRFPTC",34,0)
 .. I $E(X)=1 D
"RTN","VPRFPTC",35,0)
 ... ;S CHKS("similar",SIM,"dfn")=$P(X,U,2)
"RTN","VPRFPTC",36,0)
 ... ;S CHKS("similar",SIM,"name")=$P(X,U,3)
"RTN","VPRFPTC",37,0)
 ... ;S CHKS("similar",SIM,"dob")=$$FMTE^XLFDT($P(X,U,4),"D")
"RTN","VPRFPTC",38,0)
 ... ;S CHKS("similar",SIM,"ssn")=$P(X,U,5)
"RTN","VPRFPTC",39,0)
 ... S SIMPAT="Patient Name: "_$P(X,U,3)_" Date of Birth: "_$$FMTE^XLFDT($P(X,U,4),"D")_" SSN: "_$P(X,U,5)
"RTN","VPRFPTC",40,0)
 ... S TEXT=TEXT_$C(13)_$C(10)_SIMPAT
"RTN","VPRFPTC",41,0)
 .S CHKS("similar","text")=TEXT
"RTN","VPRFPTC",42,0)
 ;
"RTN","VPRFPTC",43,0)
 ; possibly check means test: GUIMTD^DPTLK6
"RTN","VPRFPTC",44,0)
 ; possibly check legacy data: I $L($T(HXDATA^A7RDPAGU)...
"RTN","VPRFPTC",45,0)
 ;
"RTN","VPRFPTC",46,0)
 I ACCESS D PRF(DFN,.CHKS)
"RTN","VPRFPTC",47,0)
 S ERR(0)=""
"RTN","VPRFPTC",48,0)
 ;S VPR=$$ENCODE^VPRJSON("CHKS","ERR")
"RTN","VPRFPTC",49,0)
 D ENCODE^VPRJSON("CHKS","VPRZ","ERR")
"RTN","VPRFPTC",50,0)
 Q
"RTN","VPRFPTC",51,0)
 ;
"RTN","VPRFPTC",52,0)
PRF(DFN,CHKS) ; get Patient Record Flags
"RTN","VPRFPTC",53,0)
 N VPRY,EDI,PRF,N,X
"RTN","VPRFPTC",54,0)
 Q:$$GETACT^DGPFAPI(DFN,"VPRY")'>0
"RTN","VPRFPTC",55,0)
 S EDI=0 F  S EDI=$O(VPRY(EDI)) Q:EDI<1  K PRF D
"RTN","VPRFPTC",56,0)
 . S CHKS("patientRecordFlags",EDI,"assignmentStatus")="Active"
"RTN","VPRFPTC",57,0)
 . S CHKS("patientRecordFlags",EDI,"assignTS")=$$JSONDT^VPRUTILS($P($G(VPRY(EDI,"ASSIGNDT")),U))
"RTN","VPRFPTC",58,0)
 . S CHKS("patientRecordFlags",EDI,"approved")=$P($G(VPRY(EDI,"APPRVBY")),U,2)
"RTN","VPRFPTC",59,0)
 . S CHKS("patientRecordFlags",EDI,"nextReviewDT")=$$JSONDT^VPRUTILS($P($G(VPRY(EDI,"REVIEWDT")),U))
"RTN","VPRFPTC",60,0)
 . S CHKS("patientRecordFlags",EDI,"name")=$P($G(VPRY(EDI,"FLAG")),U,2)
"RTN","VPRFPTC",61,0)
 . S CHKS("patientRecordFlags",EDI,"type")=$P($G(VPRY(EDI,"FLAGTYPE")),U,2)
"RTN","VPRFPTC",62,0)
 . S CHKS("patientRecordFlags",EDI,"category")=$P($G(VPRY(EDI,"CATEGORY")),U,2)
"RTN","VPRFPTC",63,0)
 . S CHKS("patientRecordFlags",EDI,"ownerSite")=$P($G(VPRY(EDI,"OWNER")),U,2)
"RTN","VPRFPTC",64,0)
 . S CHKS("patientRecordFlags",EDI,"originatingSite")=$P($G(VPRY(EDI,"ORIGSITE")),U,2)
"RTN","VPRFPTC",65,0)
 . S N=1,X=$G(VPRY(EDI,"NARR",1,0))
"RTN","VPRFPTC",66,0)
 . F  S N=$O(VPRY(EDI,"NARR",N)) Q:N<1  S X=X_$C(13)_$C(10)_$G(VPRY(EDI,"NARR",N,0))
"RTN","VPRFPTC",67,0)
 . S CHKS("patientRecordFlags",EDI,"text")=X
"RTN","VPRFPTC",68,0)
 Q
"RTN","VPRFPTC",69,0)
 ;
"RTN","VPRFPTC",70,0)
LOG(VPRZ,DFN) ; Make entry in security log for sensitive patient access
"RTN","VPRFPTC",71,0)
 N ERR,RESULTS,VPRY,X
"RTN","VPRFPTC",72,0)
 D NOTICE^DGSEC4(.VPRY,DFN) ;IA #3027
"RTN","VPRFPTC",73,0)
 S X=$S(VPRY:"ok",1:"fail")
"RTN","VPRFPTC",74,0)
 S RESULTS("result")=X
"RTN","VPRFPTC",75,0)
 ;S VPR=$$ENCODE^VPRJSON("RESULTS","ERR")
"RTN","VPRFPTC",76,0)
 D ENCODE^VPRJSON("RESULTS","VPRZ","ERR")
"RTN","VPRFPTC",77,0)
 Q
"RTN","VPRFPTC",78,0)
 ;
"RTN","VPRFPTC",79,0)
ENROS(VPRZ,DFNARRAY) ;PROCESS PATIENTS FROM A ROSTER
"RTN","VPRFPTC",80,0)
 N DFN S DFN=0
"RTN","VPRFPTC",81,0)
 F  S DFN=$O(DFNARRAY(DFN)) Q:DFN'>0  D CHKS(.VPRZ,DFN)
"RTN","VPRFPTC",82,0)
 Q
"RTN","VPRFPTC",83,0)
 ;
"RTN","VPRFPTC",84,0)
TEST ; 
"RTN","VPRFPTC",85,0)
 S EDPSITE=$$IEN^XUAF4(442),NAME="doe,john"
"RTN","VPRFPTC",86,0)
 D CHKS(1,"",NAME)
"RTN","VPRFPTC",87,0)
 ;N PID S EDPSITE=$$IEN^XUAF4(442)
"RTN","VPRFPTC",88,0)
 ;R "DFN:",PID Q:PID=""  W !
"RTN","VPRFPTC",89,0)
 ;D CHK(1,PID,$P(^DPT(PID,0),U))
"RTN","VPRFPTC",90,0)
 N I S I=0 F  S I=$O(EDPXML(I)) Q:'I  W !,EDPXML(I)
"RTN","VPRFPTC",91,0)
 K EDPXML
"RTN","VPRFPTC",92,0)
 Q
"RTN","VPRFPTC",93,0)
TEST1 ;
"RTN","VPRFPTC",94,0)
 S EDPSITE=$$IEN^XUAF4(442),NAME="doe,john"
"RTN","VPRFPTC",95,0)
 D CHKS(1,"",NAME)
"RTN","VPRFPTC",96,0)
 ;
"RTN","VPRFPTC",97,0)
 ;DO LATER?  -- linked progress notes
"RTN","VPRFPTC",98,0)
 ;D GETTITLE^TIUPRF2(.EDPT,DFN,EDI),GETNOTES^TIUPRF2(.EDPN,DFN,EDPT,1)
"RTN","VPRFPTC",99,0)
 ;I $O(EDPN(0)) D
"RTN","VPRFPTC",100,0)
 ;. D XML^EDPX("<notes>")
"RTN","VPRFPTC",101,0)
 ;. S N=0 F  S N=$O(EDPN(N)) Q:N<1  K PN S X=EDPN(N) D
"RTN","VPRFPTC",102,0)
 ;.. S PN("id")=+X,PN("action")=$P(X,U,2),PN("author")=$P(X,U,4)
"RTN","VPRFPTC",103,0)
 ;.. S PN("noteTS")=9999999-N
"RTN","VPRFPTC",104,0)
 ;.. D TGET^TIUSRVR1(.EDPX,+X)
"RTN","VPRFPTC",105,0)
 ;.. S X=$$XMLA^EDPX("note",.PN),X=$TR(X,"/") D XML^EDPX(X)
"RTN","VPRFPTC",106,0)
 ;.. S I=1,X=$G(@EDPX@(1))
"RTN","VPRFPTC",107,0)
 ;.. F  S I=$O(@EDPX@(I)) Q:I<1  S X=X_$C(13,10)_$G(@EDPX@(I))
"RTN","VPRFPTC",108,0)
 ;.. S X="<text>"_$$ESC^EDPX(X)_"</text>" D XML^EDPX(X)
"RTN","VPRFPTC",109,0)
 ;.. D XML^EDPX("</note>")
"RTN","VPRFPTC",110,0)
 ;. D XML^EDPX("</notes>")
"RTN","VPRHTTP")
0^5^B14174140
"RTN","VPRHTTP",1,0)
VPRHTTP ;SLC/MKB -- HTTP interface
"RTN","VPRHTTP",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRHTTP",3,0)
 ;
"RTN","VPRHTTP",4,0)
 ; External References          DBIA#
"RTN","VPRHTTP",5,0)
 ; -------------------          -----
"RTN","VPRHTTP",6,0)
 ; %ZTLOAD                      10063
"RTN","VPRHTTP",7,0)
 ; DIR                          10026
"RTN","VPRHTTP",8,0)
 ; VASITE                       10112
"RTN","VPRHTTP",9,0)
 ; XLFCRC                        3156
"RTN","VPRHTTP",10,0)
 ; XLFUTL                        2622
"RTN","VPRHTTP",11,0)
 ; XPAR                          2263
"RTN","VPRHTTP",12,0)
 ; XTHC10                        5515
"RTN","VPRHTTP",13,0)
 ; XUPARAM                       2541
"RTN","VPRHTTP",14,0)
 ;
"RTN","VPRHTTP",15,0)
EN ; -- manage the background job
"RTN","VPRHTTP",16,0)
 N ZTSK,STS
"RTN","VPRHTTP",17,0)
 S ZTSK=+$G(^XTMP("VPR","ZTSK")),STS=$$STS
"RTN","VPRHTTP",18,0)
 W !,?24,"--- VPR Patient Data Monitor ---"
"RTN","VPRHTTP",19,0)
 W !!,"Task"_$S(ZTSK:" #"_ZTSK,1:"")_" is "_$P(STS,U,2)_".",!
"RTN","VPRHTTP",20,0)
 ;
"RTN","VPRHTTP",21,0)
 I ZTSK,+STS=1!(+STS=2) D:$$STOP  Q
"RTN","VPRHTTP",22,0)
 . N X S X=$$ASKSTOP^%ZTLOAD(ZTSK)
"RTN","VPRHTTP",23,0)
 . W !,$P(X,U,2),!
"RTN","VPRHTTP",24,0)
 ;
"RTN","VPRHTTP",25,0)
 I $$START D
"RTN","VPRHTTP",26,0)
 . W !!,"Starting VPR Patient Data Monitor ... " D QUE
"RTN","VPRHTTP",27,0)
 . I $G(ZTSK) W "task #"_ZTSK_" started.",!
"RTN","VPRHTTP",28,0)
 . E  W !,"ERROR: task NOT created.  Try again later.",!
"RTN","VPRHTTP",29,0)
 . S ^XTMP("VPR","ZTSK")=$G(ZTSK)
"RTN","VPRHTTP",30,0)
 Q
"RTN","VPRHTTP",31,0)
 ;
"RTN","VPRHTTP",32,0)
STS() ; -- get the status of ZTSK
"RTN","VPRHTTP",33,0)
 D STAT^%ZTLOAD
"RTN","VPRHTTP",34,0)
 N Y S Y=+$G(ZTSK(1))_U_$G(ZTSK(2))
"RTN","VPRHTTP",35,0)
 Q Y
"RTN","VPRHTTP",36,0)
 ;
"RTN","VPRHTTP",37,0)
STOP() ; -- stop the task?
"RTN","VPRHTTP",38,0)
 N X,Y,DIR
"RTN","VPRHTTP",39,0)
 S DIR("A")="Do you want to stop the data monitor? ",DIR(0)="YA",DIR("B")="NO"
"RTN","VPRHTTP",40,0)
 S DIR("?",1)="Enter YES to stop or cancel the data monitor; please restart ASAP!"
"RTN","VPRHTTP",41,0)
 S DIR("?",3)="This job must be running in the background for AViVA to be notified"
"RTN","VPRHTTP",42,0)
 S DIR("?")="when new patient data is available.",DIR("?",2)="  "
"RTN","VPRHTTP",43,0)
 D ^DIR S:Y<1 Y=0
"RTN","VPRHTTP",44,0)
 Q Y
"RTN","VPRHTTP",45,0)
 ;
"RTN","VPRHTTP",46,0)
START() ; -- [re]start the task?
"RTN","VPRHTTP",47,0)
 N X,Y,DIR
"RTN","VPRHTTP",48,0)
 S DIR(0)="YA",DIR("B")="YES"
"RTN","VPRHTTP",49,0)
 S DIR("A")="Do you want to "_$S(STS:"re",1:"")_"start the data monitor? "
"RTN","VPRHTTP",50,0)
 S DIR("?",1)="Enter YES to "_$S(STS:"re",1:"")_"start the VPR Patient Data Monitor."
"RTN","VPRHTTP",51,0)
 S DIR("?",3)="This job must be running in the background for AViVA to be notified"
"RTN","VPRHTTP",52,0)
 S DIR("?")="when new patient data is available.",DIR("?",2)="  "
"RTN","VPRHTTP",53,0)
 D ^DIR S:Y<1 Y=0
"RTN","VPRHTTP",54,0)
 Q Y
"RTN","VPRHTTP",55,0)
 ;
"RTN","VPRHTTP",56,0)
QUE ; -- create the background task: returns ZTSK
"RTN","VPRHTTP",57,0)
 N IO,IOP,ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTKIL,ZTSYNC,ZTSAVE,%ZIS
"RTN","VPRHTTP",58,0)
 S %ZIS="0H",IOP="NULL" D ^%ZIS I POP W !,"Null Device Not Found" Q
"RTN","VPRHTTP",59,0)
 S ZTDESC="VPR new data monitor for AViVA",ZTDTH=$H,ZTIO=""
"RTN","VPRHTTP",60,0)
 S ZTRTN="POKE^VPRHTTP" K ZTSK
"RTN","VPRHTTP",61,0)
 D ^%ZTLOAD
"RTN","VPRHTTP",62,0)
 Q
"RTN","VPRHTTP",63,0)
 ;
"RTN","VPRHTTP",64,0)
POKE ; -- background job to poke the client when new data is available
"RTN","VPRHTTP",65,0)
 ; ^XTMP("VPR",DFN,TYPE,ID) = new data since last update
"RTN","VPRHTTP",66,0)
 N DIV,ID,DFN,DATA,IOP,X,DA,TOKEN,NEW K ZTSTOP
"RTN","VPRHTTP",67,0)
 S IOP="NULL" D ^%ZIS
"RTN","VPRHTTP",68,0)
 S ID=(+$H)+$P($H,",",2)
"RTN","VPRHTTP",69,0)
 S DFN=0 F  S DFN=$O(^XTMP("VPR",DFN)) Q:DFN<1  I $D(^(DFN))>9 D
"RTN","VPRHTTP",70,0)
 . L +^XTMP("VPR",DFN):5 Q:'$T  ;try again next cycle
"RTN","VPRHTTP",71,0)
 . K DATA M DATA=^XTMP("VPR",DFN)
"RTN","VPRHTTP",72,0)
 . S X=$G(^XTMP("VPR",DFN)) K ^(DFN) S ^(DFN)=X ;clear list, keep subscription
"RTN","VPRHTTP",73,0)
 . L -^XTMP("VPR",DFN)
"RTN","VPRHTTP",74,0)
 . ; add to list for URL
"RTN","VPRHTTP",75,0)
 . S DA=0 F  S DA=$O(^VPR(560,"ADFN",DFN,DA)) Q:DA<1  D
"RTN","VPRHTTP",76,0)
 .. S TOKEN=DA_"~"_ID,NEW(TOKEN)=""
"RTN","VPRHTTP",77,0)
 .. M ^XTMP("VPRX",TOKEN,DFN)=DATA
"RTN","VPRHTTP",78,0)
 D SEND(.NEW)
"RTN","VPRHTTP",79,0)
 I $$S^%ZTLOAD S ZTSTOP=1,ZTREQ="@" Q
"RTN","VPRHTTP",80,0)
 D HANG S ZTREQ="" ;re-queue
"RTN","VPRHTTP",81,0)
 Q
"RTN","VPRHTTP",82,0)
 ;
"RTN","VPRHTTP",83,0)
SEND(LIST) ; send each list ID to its URL
"RTN","VPRHTTP",84,0)
 N SYS,ID,DA,URL,X
"RTN","VPRHTTP",85,0)
 S SYS=$$SYS
"RTN","VPRHTTP",86,0)
 ; DIV=$P($$SITE^VASITE,U,3) ;station#
"RTN","VPRHTTP",87,0)
 S ID="" F  S ID=$O(LIST(ID)) Q:ID=""  D
"RTN","VPRHTTP",88,0)
 . S DA=+ID,URL=$G(^VPR(560,DA,.1)) Q:URL=""
"RTN","VPRHTTP",89,0)
 . S URL=URL_"?vistaId="_SYS_"&id="_ID
"RTN","VPRHTTP",90,0)
 . S X=$$GETURL^XTHC10(URL,,"VPRX") ;I X>200 = ERROR
"RTN","VPRHTTP",91,0)
 Q
"RTN","VPRHTTP",92,0)
 ;
"RTN","VPRHTTP",93,0)
SYS() ; -- return hashed system name
"RTN","VPRHTTP",94,0)
 Q $$BASE^XLFUTL($$CRC16^XLFCRC($$KSP^XUPARAM("WHERE")),10,16)
"RTN","VPRHTTP",95,0)
 ;
"RTN","VPRHTTP",96,0)
HANG ; -- wait #seconds
"RTN","VPRHTTP",97,0)
 N X S X=$$GET^XPAR("ALL","VPR TASK WAIT TIME") S:'X X=99
"RTN","VPRHTTP",98,0)
 H X
"RTN","VPRHTTP",99,0)
 Q
"RTN","VPRHTTP",100,0)
 ;
"RTN","VPRHTTP",101,0)
KILL ; -- kill/reset ^VPR(560) for testing
"RTN","VPRHTTP",102,0)
 K ^VPR(560)
"RTN","VPRHTTP",103,0)
 S ^VPR(560,0)="VPR SUBSCRIPTION^560^^"
"RTN","VPRHTTP",104,0)
 Q
"RTN","VPRIDX")
0^1^B14476451
"RTN","VPRIDX",1,0)
VPRIDX ;SLC/MKB -- Create VPR triggers
"RTN","VPRIDX",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRIDX",3,0)
 Q
"RTN","VPRIDX",4,0)
 ;
"RTN","VPRIDX",5,0)
EN ; -- create index triggers
"RTN","VPRIDX",6,0)
 ; GMPL              ;Problems -- GMPL*2*36 provides protocol event
"RTN","VPRIDX",7,0)
 D GMRV              ;Vitals
"RTN","VPRIDX",8,0)
 ; MDC               ;CLiO     -- MD*1*38 provides protocol event
"RTN","VPRIDX",9,0)
 ; TIU               ;TIU      -- TIU*1*106 provides index event
"RTN","VPRIDX",10,0)
 ;
"RTN","VPRIDX",11,0)
 D EN^XPAR("PKG.VIRTUAL PATIENT RECORD","VPR TASK WAIT TIME",1,99)
"RTN","VPRIDX",12,0)
 S ^XTMP("VPR",0)="3991231^3110101^VPR Patient Data Monitor"
"RTN","VPRIDX",13,0)
 Q
"RTN","VPRIDX",14,0)
 ;
"RTN","VPRIDX",15,0)
GMPL ; -- create AVPR index on Problem file #9000011
"RTN","VPRIDX",16,0)
 Q:$O(^DD("IX","BB",9000011,"AVPR",0))  ;exists
"RTN","VPRIDX",17,0)
 N VPRX,VPRY
"RTN","VPRIDX",18,0)
 S VPRX("FILE")=9000011,VPRX("NAME")="AVPR"
"RTN","VPRIDX",19,0)
 S VPRX("TYPE")="MU",VPRX("USE")="A"
"RTN","VPRIDX",20,0)
 S VPRX("EXECUTION")="R",VPRX("ACTIVITY")=""
"RTN","VPRIDX",21,0)
 S VPRX("SHORT DESCR")="Event for VPR"
"RTN","VPRIDX",22,0)
 S VPRX("DESCR",1)="This index invokes a VPR event point when problems are modified."
"RTN","VPRIDX",23,0)
 S VPRX("DESCR",2)="No actual cross-reference nodes are set or killed."
"RTN","VPRIDX",24,0)
 S VPRX("SET")="Q:$D(DIU(0))!($G(XDRDVALF)=1)  D GMPL^VPREVNT(X,DA)"
"RTN","VPRIDX",25,0)
 S VPRX("KILL")="Q",VPRX("WHOLE KILL")="Q"
"RTN","VPRIDX",26,0)
 S VPRX("VAL",1)=.02            ;Patient
"RTN","VPRIDX",27,0)
 S VPRX("VAL",2)=.03            ;Date Last Modified
"RTN","VPRIDX",28,0)
 D CREIXN^DDMOD(.VPRX,"",.VPRY) ;VPRY=ien^name of index
"RTN","VPRIDX",29,0)
 Q
"RTN","VPRIDX",30,0)
 ;
"RTN","VPRIDX",31,0)
GMRV ; -- create AVPR index on GMRV Measurement file #120.5
"RTN","VPRIDX",32,0)
 Q:$O(^DD("IX","BB",120.5,"AVPR",0))  ;update
"RTN","VPRIDX",33,0)
 N VPRX,VPRY
"RTN","VPRIDX",34,0)
 S VPRX("FILE")=120.5,VPRX("NAME")="AVPR"
"RTN","VPRIDX",35,0)
 S VPRX("TYPE")="MU",VPRX("USE")="A"
"RTN","VPRIDX",36,0)
 S VPRX("EXECUTION")="R",VPRX("ACTIVITY")=""
"RTN","VPRIDX",37,0)
 S VPRX("SHORT DESCR")="Event for VPR"
"RTN","VPRIDX",38,0)
 S VPRX("DESCR",1)="This index invokes a VPR event point when vitals are modified."
"RTN","VPRIDX",39,0)
 S VPRX("DESCR",2)="No actual cross-reference nodes are set or killed."
"RTN","VPRIDX",40,0)
 S VPRX("SET")="Q:$D(DIU(0))!($G(XDRDVALF)=1)  D GMRV^VPREVNT(X,DA,$G(X(3)))"
"RTN","VPRIDX",41,0)
 S VPRX("KILL")="Q",VPRX("WHOLE KILL")="Q"
"RTN","VPRIDX",42,0)
 S VPRX("VAL",1)=.02            ;Patient
"RTN","VPRIDX",43,0)
 S VPRX("VAL",2)=1.2            ;Rate
"RTN","VPRIDX",44,0)
 S VPRX("VAL",3)=2              ;Entered in Error
"RTN","VPRIDX",45,0)
 D CREIXN^DDMOD(.VPRX,"",.VPRY) ;VPRY=ien^name of index
"RTN","VPRIDX",46,0)
 Q
"RTN","VPRIDX",47,0)
 ;
"RTN","VPRIDX",48,0)
MDC ; -- create ASTATUS index on OBS file #704.117
"RTN","VPRIDX",49,0)
 Q:$O(^DD("IX","BB",704.117,"ASTATUS",0))  ;exists
"RTN","VPRIDX",50,0)
 N VPRX,VPRY
"RTN","VPRIDX",51,0)
 S VPRX("FILE")=704.117,VPRX("NAME")="ASTATUS"
"RTN","VPRIDX",52,0)
 S VPRX("TYPE")="MU",VPRX("USE")="A"
"RTN","VPRIDX",53,0)
 S VPRX("EXECUTION")="F",VPRX("ACTIVITY")=""
"RTN","VPRIDX",54,0)
 S VPRX("SHORT DESCR")="Used to trigger MD OBSERVATION UPDATE protocol"
"RTN","VPRIDX",55,0)
 S VPRX("DESCR",1)="This index invokes the MD OBSERVATION UPDATE protocol when the"
"RTN","VPRIDX",56,0)
 S VPRX("DESCR",2)="status of OBS data is changed to or from verified."
"RTN","VPRIDX",57,0)
 S VPRX("DESCR",3)="No actual cross-reference nodes are set or killed."
"RTN","VPRIDX",58,0)
 S VPRX("SET")="D:((X1=""1"")!(X2=""1"")) PROT^MDCPROTD Q"
"RTN","VPRIDX",59,0)
 S VPRX("KILL")="Q",VPRX("WHOLE KILL")="Q"
"RTN","VPRIDX",60,0)
 S VPRX("VAL",1)=.09            ;Status
"RTN","VPRIDX",61,0)
 D CREIXN^DDMOD(.VPRX,"",.VPRY) ;VPRY=ien^name of index
"RTN","VPRIDX",62,0)
 Q
"RTN","VPRIDX",63,0)
 ;
"RTN","VPRIDX",64,0)
TIU ; -- create AVPR index on TIU Document file #8925
"RTN","VPRIDX",65,0)
 Q:$O(^DD("IX","BB",8925,"AVPR",0))  ;exists
"RTN","VPRIDX",66,0)
 N VPRX,VPRY
"RTN","VPRIDX",67,0)
 S VPRX("FILE")=8925,VPRX("NAME")="AVPR"
"RTN","VPRIDX",68,0)
 S VPRX("TYPE")="MU",VPRX("USE")="A"
"RTN","VPRIDX",69,0)
 S VPRX("EXECUTION")="R",VPRX("ACTIVITY")=""
"RTN","VPRIDX",70,0)
 S VPRX("SHORT DESCR")="Event for VPR"
"RTN","VPRIDX",71,0)
 S VPRX("DESCR",1)="This index invokes a VPR event point when documents are modified."
"RTN","VPRIDX",72,0)
 S VPRX("DESCR",2)="No actual cross-reference nodes are set or killed."
"RTN","VPRIDX",73,0)
 S VPRX("SET")="Q:$D(DIU(0))!($G(XDRDVALF)=1)  D:X(2)>5 TIU^VPREVNT(X,DA)"
"RTN","VPRIDX",74,0)
 S VPRX("KILL")="Q",VPRX("WHOLE KILL")="Q"
"RTN","VPRIDX",75,0)
 S VPRX("VAL",1)=.02            ;Patient
"RTN","VPRIDX",76,0)
 S VPRX("VAL",2)=.05            ;Status
"RTN","VPRIDX",77,0)
 D CREIXN^DDMOD(.VPRX,"",.VPRY) ;VPRY=ien^name of index
"RTN","VPRIDX",78,0)
 Q
"RTN","VPRJSON")
0^94^B11235996
"RTN","VPRJSON",1,0)
VPRJSON ;SLC/KCM -- Decode/Encode JSON
"RTN","VPRJSON",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRJSON",3,0)
 ;
"RTN","VPRJSON",4,0)
 ; Note:  Since the routines use closed array references, VVROOT and VVERR
"RTN","VPRJSON",5,0)
 ;        are used to reduce risk of naming conflicts on the closed array.
"RTN","VPRJSON",6,0)
 ;
"RTN","VPRJSON",7,0)
DECODE(VVJSON,VVROOT,VVERR)  ; Set JSON object into closed array ref VVROOT
"RTN","VPRJSON",8,0)
 ; Examples: D DECODE^VPRJSON("MYJSON","LOCALVAR","LOCALERR")
"RTN","VPRJSON",9,0)
 ;           D DECODE^VPRJSON("^MYJSON(1)","^GLO(99)","^TMP($J)")
"RTN","VPRJSON",10,0)
 ;
"RTN","VPRJSON",11,0)
 ; VVJSON: string/array containing serialized JSON object
"RTN","VPRJSON",12,0)
 ; VVROOT: closed array reference for M representation of object
"RTN","VPRJSON",13,0)
 ;  VVERR: contains error messages, defaults to ^TMP("VPRJERR",$J)
"RTN","VPRJSON",14,0)
 ;
"RTN","VPRJSON",15,0)
 ;   VVIDX: points to next character in JSON string to process
"RTN","VPRJSON",16,0)
 ; VVSTACK: manages stack of subscripts
"RTN","VPRJSON",17,0)
 ;  VVPROP: true if next string is property name, otherwise treat as value
"RTN","VPRJSON",18,0)
 ;
"RTN","VPRJSON",19,0)
 G DIRECT^VPRJSOND
"RTN","VPRJSON",20,0)
 ;
"RTN","VPRJSON",21,0)
ENCODE(VVROOT,VVJSON,VVERR) ; VVROOT (M structure) --> VVJSON (array of strings)
"RTN","VPRJSON",22,0)
 ; Examples:  D ENCODE^VPRJSON("^GLO(99,2)","^TMP($J)")
"RTN","VPRJSON",23,0)
 ;            D ENCODE^VPRJSON("LOCALVAR","MYJSON","LOCALERR")
"RTN","VPRJSON",24,0)
 ;
"RTN","VPRJSON",25,0)
 ; VVROOT: closed array reference for M representation of object
"RTN","VPRJSON",26,0)
 ; VVJSON: destination variable for the string array formatted as JSON
"RTN","VPRJSON",27,0)
 ;  VVERR: contains error messages, defaults to ^TMP("VPRJERR",$J)
"RTN","VPRJSON",28,0)
 ;
"RTN","VPRJSON",29,0)
 G DIRECT^VPRJSONE
"RTN","VPRJSON",30,0)
 ;
"RTN","VPRJSON",31,0)
 ;
"RTN","VPRJSON",32,0)
ESC(X) ; Escape string for JSON
"RTN","VPRJSON",33,0)
 Q $$ESC^VPRJSONE(X)
"RTN","VPRJSON",34,0)
 ;
"RTN","VPRJSON",35,0)
UES(X) ; Unescape JSON string
"RTN","VPRJSON",36,0)
 Q $$UES^VPRJSOND(X)
"RTN","VPRJSON",37,0)
 ;
"RTN","VPRJSON",38,0)
ERRX(ID,VAL) ; Set the appropriate error message
"RTN","VPRJSON",39,0)
 ; switch (ID) -- XERRX ends statement
"RTN","VPRJSON",40,0)
 N ERRMSG
"RTN","VPRJSON",41,0)
 ;
"RTN","VPRJSON",42,0)
 ; Decode Error Messages
"RTN","VPRJSON",43,0)
 ;
"RTN","VPRJSON",44,0)
 I ID="STL{" S ERRMSG="Stack too large for new object." G XERRX
"RTN","VPRJSON",45,0)
 I ID="SUF}" S ERRMSG="Stack Underflow - extra } found" G XERRX
"RTN","VPRJSON",46,0)
 I ID="STL[" S ERRMSG="Stack too large for new array." G XERRX
"RTN","VPRJSON",47,0)
 I ID="SUF]" S ERRMSG="Stack Underflow - extra ] found." G XERRX
"RTN","VPRJSON",48,0)
 I ID="OBM" S ERRMSG="Array mismatch - expected ] got }." G XERRX
"RTN","VPRJSON",49,0)
 I ID="ARM" S ERRMSG="Object mismatch - expected } got ]." G XERRX
"RTN","VPRJSON",50,0)
 I ID="MPN" S ERRMSG="Missing property name." G XERRX
"RTN","VPRJSON",51,0)
 I ID="EXT" S ERRMSG="Expected true, got "_VAL G XERRX
"RTN","VPRJSON",52,0)
 I ID="EXF" S ERRMSG="Expected false, got "_VAL G XERRX
"RTN","VPRJSON",53,0)
 I ID="EXN" S ERRMSG="Expected null, got "_VAL G XERRX
"RTN","VPRJSON",54,0)
 I ID="TKN" S ERRMSG="Unable to identify type of token, value was "_VAL G XERRX
"RTN","VPRJSON",55,0)
 I ID="SCT" S ERRMSG="Stack mismatch - exit stack level was  "_VAL G XERRX
"RTN","VPRJSON",56,0)
 I ID="EIQ" S ERRMSG="Close quote not found before end of input." G XERRX
"RTN","VPRJSON",57,0)
 I ID="EIU" S ERRMSG="Unexpected end of input while unescaping." G XERRX
"RTN","VPRJSON",58,0)
 I ID="RSB" S ERRMSG="Reverse search for \ past beginning of input." G XERRX
"RTN","VPRJSON",59,0)
 I ID="ORN" S ERRMSG="Overrun while scanning name." G XERRX
"RTN","VPRJSON",60,0)
 I ID="OR#" S ERRMSG="Overrun while scanning number." G XERRX
"RTN","VPRJSON",61,0)
 I ID="ORB" S ERRMSG="Overrun while scanning boolean." G XERRX
"RTN","VPRJSON",62,0)
 I ID="ESC" S ERRMSG="Escaped character not recognized"_VAL G XERRX
"RTN","VPRJSON",63,0)
 ;
"RTN","VPRJSON",64,0)
 ; Encode Error Messages
"RTN","VPRJSON",65,0)
 ;
"RTN","VPRJSON",66,0)
 I ID="SOB" S ERRMSG="Unable to serialize node as object, value was "_VAL G XERRX
"RTN","VPRJSON",67,0)
 I ID="SAR" S ERRMSG="Unable to serialize node as array, value was "_VAL G XERRX
"RTN","VPRJSON",68,0)
 S ERRMSG="Unspecified error "_ID_" "_$G(VAL)
"RTN","VPRJSON",69,0)
XERRX ; end switch
"RTN","VPRJSON",70,0)
 S @VVERR@(0)=$G(@VVERR@(0))+1
"RTN","VPRJSON",71,0)
 S @VVERR@(@VVERR@(0))=ERRMSG
"RTN","VPRJSON",72,0)
 S VVERRORS=VVERRORS+1
"RTN","VPRJSON",73,0)
 Q
"RTN","VPRJSOND")
0^95^B70232279
"RTN","VPRJSOND",1,0)
VPRJSOND ;SLC/KCM -- Decode JSON
"RTN","VPRJSOND",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRJSOND",3,0)
 ;
"RTN","VPRJSOND",4,0)
DECODE(VVJSON,VVROOT,VVERR) ; Set JSON object into closed array ref VVROOT
"RTN","VPRJSOND",5,0)
 ;
"RTN","VPRJSOND",6,0)
DIRECT ; TAG for use by DECODE^VPRJSON
"RTN","VPRJSOND",7,0)
 ;
"RTN","VPRJSOND",8,0)
 ; Examples: D DECODE^VPRJSON("MYJSON","LOCALVAR","LOCALERR")
"RTN","VPRJSOND",9,0)
 ;           D DECODE^VPRJSON("^MYJSON(1)","^GLO(99)","^TMP($J)")
"RTN","VPRJSOND",10,0)
 ;
"RTN","VPRJSOND",11,0)
 ; VVJSON: string/array containing serialized JSON object
"RTN","VPRJSOND",12,0)
 ; VVROOT: closed array reference for M representation of object
"RTN","VPRJSOND",13,0)
 ;  VVERR: contains error messages, defaults to ^TMP("VPRJERR",$J)
"RTN","VPRJSOND",14,0)
 ;
"RTN","VPRJSOND",15,0)
 ;   VVIDX: points to next character in JSON string to process
"RTN","VPRJSOND",16,0)
 ; VVSTACK: manages stack of subscripts
"RTN","VPRJSOND",17,0)
 ;  VVPROP: true if next string is property name, otherwise treat as value
"RTN","VPRJSOND",18,0)
 ;
"RTN","VPRJSOND",19,0)
 N VVMAX S VVMAX=4000 ; limit document lines to 4000 characters
"RTN","VPRJSOND",20,0)
 S VVERR=$G(VVERR,"^TMP(""VPRJERR"",$J)")
"RTN","VPRJSOND",21,0)
 ; If a simple string is passed in, move it to an temp array (VVINPUT)
"RTN","VPRJSOND",22,0)
 ; so that the processing is consistently on an array.
"RTN","VPRJSOND",23,0)
 I $D(@VVJSON)=1 N VVINPUT S VVINPUT(1)=@VVJSON,VVJSON="VVINPUT"
"RTN","VPRJSOND",24,0)
 S VVROOT=$NA(@VVROOT@("Z")),VVROOT=$E(VVROOT,1,$L(VVROOT)-4) ; make open array ref
"RTN","VPRJSOND",25,0)
 N VVLINE,VVIDX,VVSTACK,VVPROP,VVTYPE,VVERRORS
"RTN","VPRJSOND",26,0)
 S VVLINE=$O(@VVJSON@("")),VVIDX=1,VVSTACK=0,VVPROP=0,VVERRORS=0
"RTN","VPRJSOND",27,0)
 F  S VVTYPE=$$NXTKN() Q:VVTYPE=""  D  I VVERRORS Q
"RTN","VPRJSOND",28,0)
 . I VVTYPE="{" S VVSTACK=VVSTACK+1,VVSTACK(VVSTACK)="",VVPROP=1 D:VVSTACK>64 ERRX("STL{") Q
"RTN","VPRJSOND",29,0)
 . I VVTYPE="}" D  QUIT
"RTN","VPRJSOND",30,0)
 . . I +VVSTACK(VVSTACK)=VVSTACK(VVSTACK),VVSTACK(VVSTACK) D ERRX("OBM") ; Numeric and true only
"RTN","VPRJSOND",31,0)
 . . S VVSTACK=VVSTACK-1 D:VVSTACK<0 ERRX("SUF}")
"RTN","VPRJSOND",32,0)
 . I VVTYPE="[" S VVSTACK=VVSTACK+1,VVSTACK(VVSTACK)=1 D:VVSTACK>64 ERRX("STL[") Q
"RTN","VPRJSOND",33,0)
 . I VVTYPE="]" D:'VVSTACK(VVSTACK) ERRX("ARM") S VVSTACK=VVSTACK-1 D:VVSTACK<0 ERRX("SUF]") Q
"RTN","VPRJSOND",34,0)
 . I VVTYPE="," D  Q
"RTN","VPRJSOND",35,0)
 . . I +VVSTACK(VVSTACK)=VVSTACK(VVSTACK),VVSTACK(VVSTACK) S VVSTACK(VVSTACK)=VVSTACK(VVSTACK)+1  ; VEN/SMH - next in array 
"RTN","VPRJSOND",36,0)
 . . E  S VVPROP=1                                   ; or next property name
"RTN","VPRJSOND",37,0)
 . I VVTYPE=":" S VVPROP=0 D:'$L($G(VVSTACK(VVSTACK))) ERRX("MPN") Q
"RTN","VPRJSOND",38,0)
 . I VVTYPE="""" D  Q
"RTN","VPRJSOND",39,0)
 . . I VVPROP S VVSTACK(VVSTACK)=$$NAMPARS() I 1
"RTN","VPRJSOND",40,0)
 . . E  D ADDSTR
"RTN","VPRJSOND",41,0)
 . S VVTYPE=$TR(VVTYPE,"TFN","tfn")
"RTN","VPRJSOND",42,0)
 . I VVTYPE="t" D SETBOOL("t") Q
"RTN","VPRJSOND",43,0)
 . I VVTYPE="f" D SETBOOL("f") Q
"RTN","VPRJSOND",44,0)
 . I VVTYPE="n" D SETBOOL("n") Q
"RTN","VPRJSOND",45,0)
 . I "0123456789+-.eE"[VVTYPE D SETNUM(VVTYPE) Q  ;S @$$CURNODE()=$$NUMPARS(VVTYPE) Q
"RTN","VPRJSOND",46,0)
 . D ERRX("TKN",VVTYPE)
"RTN","VPRJSOND",47,0)
 I VVSTACK'=0 D ERRX("SCT",VVSTACK)
"RTN","VPRJSOND",48,0)
 Q
"RTN","VPRJSOND",49,0)
NXTKN() ; Move the pointers to the beginning of the next token
"RTN","VPRJSOND",50,0)
 N VVDONE,VVEOF,VVTOKEN
"RTN","VPRJSOND",51,0)
 S VVDONE=0,VVEOF=0 F  D  Q:VVDONE!VVEOF  ; eat spaces & new lines until next visible char
"RTN","VPRJSOND",52,0)
 . I VVIDX>$L(@VVJSON@(VVLINE)) S VVLINE=$O(@VVJSON@(VVLINE)),VVIDX=1 I 'VVLINE S VVEOF=1 Q
"RTN","VPRJSOND",53,0)
 . I $A(@VVJSON@(VVLINE),VVIDX)>32 S VVDONE=1 Q
"RTN","VPRJSOND",54,0)
 . S VVIDX=VVIDX+1
"RTN","VPRJSOND",55,0)
 Q:VVEOF ""  ; we're at the end of input
"RTN","VPRJSOND",56,0)
 S VVTOKEN=$E(@VVJSON@(VVLINE),VVIDX),VVIDX=VVIDX+1
"RTN","VPRJSOND",57,0)
 Q VVTOKEN
"RTN","VPRJSOND",58,0)
 ;
"RTN","VPRJSOND",59,0)
ADDSTR ; Add string value to current node, escaping text along the way
"RTN","VPRJSOND",60,0)
 ; Expects VVLINE,VVIDX to reference that starting point of the index
"RTN","VPRJSOND",61,0)
 ; TODO: add a mechanism to specify names that should not be escaped
"RTN","VPRJSOND",62,0)
 ;       just store as ":")= and ":",n)=
"RTN","VPRJSOND",63,0)
 ;
"RTN","VPRJSOND",64,0)
 ; Happy path -- we find the end quote in the same line
"RTN","VPRJSOND",65,0)
 N VVEND,VVX
"RTN","VPRJSOND",66,0)
 S VVEND=$F(@VVJSON@(VVLINE),"""",VVIDX)
"RTN","VPRJSOND",67,0)
 I VVEND,($E(@VVJSON@(VVLINE),VVEND-2)'="\") D SETSTR  QUIT  ;normal
"RTN","VPRJSOND",68,0)
 I VVEND,$$ISCLOSEQ(VVLINE) D SETSTR QUIT  ;close quote preceded by escaped \
"RTN","VPRJSOND",69,0)
 ;
"RTN","VPRJSOND",70,0)
 ; Less happy path -- first quote wasn't close quote
"RTN","VPRJSOND",71,0)
 N VVDONE,VVTLINE
"RTN","VPRJSOND",72,0)
 S VVDONE=0,VVTLINE=VVLINE ; VVTLINE for temporary increment of VVLINE
"RTN","VPRJSOND",73,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","VPRJSOND",74,0)
 . ;if no quote on current line advance line, scan again
"RTN","VPRJSOND",75,0)
 . I 'VVEND S VVTLINE=VVTLINE+1,VVEND=1 I '$D(@VVJSON@(VVTLINE)) D ERRX("EIQ") Q
"RTN","VPRJSOND",76,0)
 . S VVEND=$F(@VVJSON@(VVTLINE),"""",VVEND)
"RTN","VPRJSOND",77,0)
 . Q:'VVEND  ; continue on to next line if no quote found on this one
"RTN","VPRJSOND",78,0)
 . I (VVEND>2),($E(@VVJSON@(VVTLINE),VVEND-2)'="\") S VVDONE=1 Q  ; found quote position
"RTN","VPRJSOND",79,0)
 . S VVDONE=$$ISCLOSEQ(VVTLINE) ; see if this is an escaped quote or closing quote
"RTN","VPRJSOND",80,0)
 Q:VVERRORS
"RTN","VPRJSOND",81,0)
 ; unescape from VVIDX to VVEND, using \-extension nodes as necessary
"RTN","VPRJSOND",82,0)
 D UESEXT
"RTN","VPRJSOND",83,0)
 ; now we need to move VVLINE and VVIDX to next parsing point
"RTN","VPRJSOND",84,0)
 S VVLINE=VVTLINE,VVIDX=VVEND
"RTN","VPRJSOND",85,0)
 Q
"RTN","VPRJSOND",86,0)
SETSTR ; Set simple string value from within same line
"RTN","VPRJSOND",87,0)
 ; expects VVJSON, VVLINE, VVINX, VVEND
"RTN","VPRJSOND",88,0)
 N VVX
"RTN","VPRJSOND",89,0)
 S VVX=$E(@VVJSON@(VVLINE),VVIDX,VVEND-2),VVIDX=VVEND
"RTN","VPRJSOND",90,0)
 S @$$CURNODE()=$$UES(VVX)
"RTN","VPRJSOND",91,0)
 ; "\s" node indicates value is really a string in case value 
"RTN","VPRJSOND",92,0)
 ;      collates as numeric or equals boolean keywords
"RTN","VPRJSOND",93,0)
 I VVX']]$C(1) S @$$CURNODE()@("\s")=""
"RTN","VPRJSOND",94,0)
 I VVX="true"!(VVX="false")!(VVX="null") S @$$CURNODE()@("\s")=""
"RTN","VPRJSOND",95,0)
 I VVIDX>$L(@VVJSON@(VVLINE)) S VVLINE=VVLINE+1,VVIDX=1
"RTN","VPRJSOND",96,0)
 Q
"RTN","VPRJSOND",97,0)
UESEXT ; unescape from VVLINE,VVIDX to VVTLINE,VVEND & extend (\) if necessary
"RTN","VPRJSOND",98,0)
 ; expects VVLINE,VVIDX,VVTLINE,VVEND
"RTN","VPRJSOND",99,0)
 N VVI,VVY,VVSTART,VVSTOP,VVDONE,VVBUF,VVNODE,VVMORE,VVTO
"RTN","VPRJSOND",100,0)
 S VVNODE=$$CURNODE(),VVBUF="",VVMORE=0,VVSTOP=VVEND-2
"RTN","VPRJSOND",101,0)
 S VVI=VVIDX,VVY=VVLINE,VVDONE=0
"RTN","VPRJSOND",102,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","VPRJSOND",103,0)
 . S VVSTART=VVI,VVI=$F(@VVJSON@(VVY),"\",VVI)
"RTN","VPRJSOND",104,0)
 . ; if we are on the last line, don't extract past VVSTOP
"RTN","VPRJSOND",105,0)
 . I (VVY=VVTLINE) S VVTO=$S('VVI:VVSTOP,VVI>VVSTOP:VVSTOP,1:VVI-2) I 1
"RTN","VPRJSOND",106,0)
 . E  S VVTO=$S('VVI:99999,1:VVI-2)
"RTN","VPRJSOND",107,0)
 . D ADDBUF($E(@VVJSON@(VVY),VVSTART,VVTO))
"RTN","VPRJSOND",108,0)
 . I (VVY'<VVTLINE),(('VVI)!(VVI>VVSTOP)) S VVDONE=1 QUIT  ; now past close quote
"RTN","VPRJSOND",109,0)
 . I 'VVI S VVY=VVY+1,VVI=1 QUIT  ; nothing escaped, go to next line
"RTN","VPRJSOND",110,0)
 . I VVI>$L(@VVJSON@(VVY)) S VVY=VVY+1,VVI=1 I '$D(@VVJSON@(VVY)) D ERRX("EIU")
"RTN","VPRJSOND",111,0)
 . N VVTGT S VVTGT=$E(@VVJSON@(VVY),VVI)
"RTN","VPRJSOND",112,0)
 . I VVTGT="u" D  I 1
"RTN","VPRJSOND",113,0)
 . . N VVTGTC S VVTGTC=$E(@VVJSON@(VVY),VVI+1,VVI+4),VVI=VVI+4
"RTN","VPRJSOND",114,0)
 . . I $L(VVTGTC)<4 S VVY=VVY+1,VVI=4-$L(VVTGTC),VVTGTC=VVTGTC_$E(@VVJSON@(VVY),1,VVI)
"RTN","VPRJSOND",115,0)
 . . D ADDBUF($C($$DEC^XLFUTL(VVTGTC,16)))
"RTN","VPRJSOND",116,0)
 . E  D ADDBUF($$REALCHAR(VVTGT))
"RTN","VPRJSOND",117,0)
 . S VVI=VVI+1
"RTN","VPRJSOND",118,0)
 . I (VVY'<VVTLINE),(VVI>VVSTOP) S VVDONE=1 ; VVI incremented past stop
"RTN","VPRJSOND",119,0)
 Q:VVERRORS
"RTN","VPRJSOND",120,0)
 D SAVEBUF
"RTN","VPRJSOND",121,0)
 Q
"RTN","VPRJSOND",122,0)
ADDBUF(VVX) ; add buffer of characters to destination
"RTN","VPRJSOND",123,0)
 ; expects VVBUF,VVMAX,VVNODE,VVMORE to be defined
"RTN","VPRJSOND",124,0)
 ; used directly by ADDSTR
"RTN","VPRJSOND",125,0)
 I $L(VVX)+$L(VVBUF)>VVMAX D SAVEBUF
"RTN","VPRJSOND",126,0)
 S VVBUF=VVBUF_VVX
"RTN","VPRJSOND",127,0)
 Q
"RTN","VPRJSOND",128,0)
SAVEBUF ; write out buffer to destination
"RTN","VPRJSOND",129,0)
 ; expects VVBUF,VVMAX,VVNODE,VVMORE to be defined
"RTN","VPRJSOND",130,0)
 ; used directly by ADDSTR,ADDBUF
"RTN","VPRJSOND",131,0)
 I VVMORE S @VVNODE@("\",VVMORE)=VVBUF
"RTN","VPRJSOND",132,0)
 I 'VVMORE S @VVNODE=VVBUF I $L(VVBUF)<19,+$E(VVBUF,1,18) S @VVNODE@("\s")=""
"RTN","VPRJSOND",133,0)
 S VVMORE=VVMORE+1,VVBUF=""
"RTN","VPRJSOND",134,0)
 Q
"RTN","VPRJSOND",135,0)
ISCLOSEQ(VVBLINE) ; return true if this is a closing, rather than escaped, quote
"RTN","VPRJSOND",136,0)
 ; expects
"RTN","VPRJSOND",137,0)
 ;   VVJSON: lines of the JSON encoded string
"RTN","VPRJSOND",138,0)
 ;    VVIDX: points to 1st character of the segment
"RTN","VPRJSOND",139,0)
 ;   VVLINE: points to the line in which the segment starts
"RTN","VPRJSOND",140,0)
 ;    VVEND: points to 1st character after the " (may be past the end of the line)
"RTN","VPRJSOND",141,0)
 ; used directly by ADDSTR
"RTN","VPRJSOND",142,0)
 N VVBS,VVBIDX,VVBDONE
"RTN","VPRJSOND",143,0)
 S VVBS=0,VVBIDX=VVEND-2,VVBDONE=0 ; VVBIDX starts at 1st character before quote
"RTN","VPRJSOND",144,0)
 ; count the backslashes preceding the quote (odd number means the quote was escaped)
"RTN","VPRJSOND",145,0)
 F  D  Q:VVBDONE!VVERRORS
"RTN","VPRJSOND",146,0)
 . I VVBIDX<1 D  Q  ; when VVBIDX<1 go back a line
"RTN","VPRJSOND",147,0)
 . . S VVBLINE=VVBLINE-1 I VVBLINE<VVLINE D ERRX("RSB") Q
"RTN","VPRJSOND",148,0)
 . . S VVBIDX=$L(@VVJSON@(VVBLINE))
"RTN","VPRJSOND",149,0)
 . I $E(@VVJSON@(VVBLINE),VVBIDX)'="\" S VVBDONE=1 Q
"RTN","VPRJSOND",150,0)
 . S VVBS=VVBS+1,VVBIDX=VVBIDX-1
"RTN","VPRJSOND",151,0)
 Q VVBS#2=0  ; VVBS is even if this is a close quote
"RTN","VPRJSOND",152,0)
 ;
"RTN","VPRJSOND",153,0)
NAMPARS() ; Return parsed name, advancing index past the close quote
"RTN","VPRJSOND",154,0)
 ; -- This assumes no embedded quotes are in the name itself --
"RTN","VPRJSOND",155,0)
 N VVEND,VVDONE,VVNAME
"RTN","VPRJSOND",156,0)
 S VVDONE=0,VVNAME=""
"RTN","VPRJSOND",157,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","VPRJSOND",158,0)
 . S VVEND=$F(@VVJSON@(VVLINE),"""",VVIDX)
"RTN","VPRJSOND",159,0)
 . I VVEND S VVNAME=VVNAME_$E(@VVJSON@(VVLINE),VVIDX,VVEND-2),VVIDX=VVEND,VVDONE=1
"RTN","VPRJSOND",160,0)
 . I 'VVEND S VVNAME=VVNAME_$E(@VVJSON@(VVLINE),VVIDX,$L(@VVJSON@(VVLINE)))
"RTN","VPRJSOND",161,0)
 . I 'VVEND!(VVEND>$L(@VVJSON@(VVLINE))) S VVLINE=VVLINE+1,VVIDX=1 I '$D(@VVJSON@(VVLINE)) D ERRX("ORN")
"RTN","VPRJSOND",162,0)
 ; prepend quote if label collates as numeric -- assumes no quotes in label
"RTN","VPRJSOND",163,0)
 I VVNAME']]$C(1) S VVNAME=""""""_VVNAME
"RTN","VPRJSOND",164,0)
 Q VVNAME
"RTN","VPRJSOND",165,0)
 ;
"RTN","VPRJSOND",166,0)
SETNUM(VVDIGIT) ; Set numeric along with any necessary modifier
"RTN","VPRJSOND",167,0)
 N VVX
"RTN","VPRJSOND",168,0)
 S VVX=$$NUMPARS(VVDIGIT)
"RTN","VPRJSOND",169,0)
 S @$$CURNODE()=+VVX
"RTN","VPRJSOND",170,0)
 ; if numeric is exponent, "0.nnn" or "-0.nnn" store original string
"RTN","VPRJSOND",171,0)
 I +VVX'=VVX S @$$CURNODE()@("\n")=VVX
"RTN","VPRJSOND",172,0)
 Q
"RTN","VPRJSOND",173,0)
NUMPARS(VVDIGIT) ; Return parsed number, advancing index past end of number
"RTN","VPRJSOND",174,0)
 ; VVIDX intially references the second digit
"RTN","VPRJSOND",175,0)
 N VVDONE,VVNUM
"RTN","VPRJSOND",176,0)
 S VVDONE=0,VVNUM=VVDIGIT
"RTN","VPRJSOND",177,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","VPRJSOND",178,0)
 . I '("0123456789+-.eE"[$E(@VVJSON@(VVLINE),VVIDX)) S VVDONE=1 Q
"RTN","VPRJSOND",179,0)
 . S VVNUM=VVNUM_$E(@VVJSON@(VVLINE),VVIDX)
"RTN","VPRJSOND",180,0)
 . S VVIDX=VVIDX+1 I VVIDX>$L(@VVJSON@(VVLINE)) S VVLINE=VVLINE+1,VVIDX=1 I '$D(@VVJSON@(VVLINE)) D ERRX("OR#")
"RTN","VPRJSOND",181,0)
 Q VVNUM
"RTN","VPRJSOND",182,0)
 ;
"RTN","VPRJSOND",183,0)
SETBOOL(VVLTR) ; Parse and set boolean value, advancing index past end of value
"RTN","VPRJSOND",184,0)
 N VVDONE,VVBOOL,VVX
"RTN","VPRJSOND",185,0)
 S VVDONE=0,VVBOOL=VVLTR
"RTN","VPRJSOND",186,0)
 F  D  Q:VVDONE  Q:VVERRORS
"RTN","VPRJSOND",187,0)
 . S VVX=$TR($E(@VVJSON@(VVLINE),VVIDX),"TRUEFALSN","truefalsn")
"RTN","VPRJSOND",188,0)
 . I '("truefalsn"[VVX) S VVDONE=1 Q
"RTN","VPRJSOND",189,0)
 . S VVBOOL=VVBOOL_VVX
"RTN","VPRJSOND",190,0)
 . S VVIDX=VVIDX+1 I VVIDX>$L(@VVJSON@(VVLINE)) S VVLINE=VVLINE+1,VVIDX=1 I '$D(@VVJSON@(VVLINE)) D ERRX("ORB")
"RTN","VPRJSOND",191,0)
 I VVLTR="t",(VVBOOL'="true") D ERRX("EXT",VVTYPE)
"RTN","VPRJSOND",192,0)
 I VVLTR="f",(VVBOOL'="false") D ERRX("EXF",VVTYPE)
"RTN","VPRJSOND",193,0)
 I VVLTR="n",(VVBOOL'="null") D ERRX("EXN",VVTYPE)
"RTN","VPRJSOND",194,0)
 S @$$CURNODE()=VVBOOL
"RTN","VPRJSOND",195,0)
 Q
"RTN","VPRJSOND",196,0)
 ;
"RTN","VPRJSOND",197,0)
OSETBOOL(VVX) ; set a value and increment VVIDX
"RTN","VPRJSOND",198,0)
 S @$$CURNODE()=VVX
"RTN","VPRJSOND",199,0)
 S VVIDX=VVIDX+$L(VVX)-1
"RTN","VPRJSOND",200,0)
 N VVDIFF S VVDIFF=VVIDX-$L(@VVJSON@(VVLINE))  ; in case VVIDX moves to next line
"RTN","VPRJSOND",201,0)
 I VVDIFF>0 S VVLINE=VVLINE+1,VVIDX=VVDIFF I '$D(@VVJSON@(VVLINE)) D ERRX("ORB")
"RTN","VPRJSOND",202,0)
 Q
"RTN","VPRJSOND",203,0)
CURNODE() ; Return a global/local variable name based on VVSTACK
"RTN","VPRJSOND",204,0)
 ; Expects VVSTACK to be defined already
"RTN","VPRJSOND",205,0)
 N VVI,VVSUBS
"RTN","VPRJSOND",206,0)
 S VVSUBS=""
"RTN","VPRJSOND",207,0)
 F VVI=1:1:VVSTACK S:VVI>1 VVSUBS=VVSUBS_"," D
"RTN","VPRJSOND",208,0)
 . I VVSTACK(VVI)=+VVSTACK(VVI) S VVSUBS=VVSUBS_VVSTACK(VVI) ; VEN/SMH Fix psudo array bug.
"RTN","VPRJSOND",209,0)
 . E  S VVSUBS=VVSUBS_""""_VVSTACK(VVI)_""""
"RTN","VPRJSOND",210,0)
 Q VVROOT_VVSUBS_")"
"RTN","VPRJSOND",211,0)
 ;
"RTN","VPRJSOND",212,0)
UES(X) ; Unescape JSON string
"RTN","VPRJSOND",213,0)
 ; copy segments from START to POS-2 (right before \)
"RTN","VPRJSOND",214,0)
 ; translate target character (which is at $F position)
"RTN","VPRJSOND",215,0)
 N POS,Y,START
"RTN","VPRJSOND",216,0)
 S POS=0,Y=""
"RTN","VPRJSOND",217,0)
 F  S START=POS+1 D  Q:START>$L(X)
"RTN","VPRJSOND",218,0)
 . S POS=$F(X,"\",START) ; find next position
"RTN","VPRJSOND",219,0)
 . I 'POS S Y=Y_$E(X,START,$L(X)),POS=$L(X) Q
"RTN","VPRJSOND",220,0)
 . ; otherwise handle escaped char
"RTN","VPRJSOND",221,0)
 . N TGT
"RTN","VPRJSOND",222,0)
 . S TGT=$E(X,POS),Y=Y_$E(X,START,POS-2)
"RTN","VPRJSOND",223,0)
 . I TGT="u" S Y=Y_$C($$DEC^XLFUTL($E(X,POS+1,POS+4),16)),POS=POS+4 Q
"RTN","VPRJSOND",224,0)
 . S Y=Y_$$REALCHAR(TGT)
"RTN","VPRJSOND",225,0)
 Q Y
"RTN","VPRJSOND",226,0)
 ;
"RTN","VPRJSOND",227,0)
REALCHAR(C) ; Return actual character from escaped
"RTN","VPRJSOND",228,0)
 I C="""" Q """"
"RTN","VPRJSOND",229,0)
 I C="/" Q "/"
"RTN","VPRJSOND",230,0)
 I C="\" Q "\"
"RTN","VPRJSOND",231,0)
 I C="b" Q $C(8)
"RTN","VPRJSOND",232,0)
 I C="f" Q $C(12)
"RTN","VPRJSOND",233,0)
 I C="n" Q $C(10)
"RTN","VPRJSOND",234,0)
 I C="r" Q $C(13)
"RTN","VPRJSOND",235,0)
 I C="t" Q $C(9)
"RTN","VPRJSOND",236,0)
 I C="u" ;case covered above in $$DEC^XLFUTL calls
"RTN","VPRJSOND",237,0)
 ;otherwise
"RTN","VPRJSOND",238,0)
 I $L($G(VVERR)) D ERRX("ESC",C)
"RTN","VPRJSOND",239,0)
 Q C
"RTN","VPRJSOND",240,0)
 ;
"RTN","VPRJSOND",241,0)
ERRX(ID,VAL) ; Set the appropriate error message
"RTN","VPRJSOND",242,0)
 D ERRX^VPRJSON(ID,$G(VAL))
"RTN","VPRJSOND",243,0)
 Q
"RTN","VPRJSONE")
0^96^B24349845
"RTN","VPRJSONE",1,0)
VPRJSONE ;SLC/KCM -- Encode JSON
"RTN","VPRJSONE",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRJSONE",3,0)
 ;
"RTN","VPRJSONE",4,0)
ENCODE(VVROOT,VVJSON,VVERR) ; VVROOT (M structure) --> VVJSON (array of strings)
"RTN","VPRJSONE",5,0)
 ;
"RTN","VPRJSONE",6,0)
DIRECT ; TAG for use by ENCODE^VPRJSON
"RTN","VPRJSONE",7,0)
 ;
"RTN","VPRJSONE",8,0)
 ; Examples:  D ENCODE^VPRJSON("^GLO(99,2)","^TMP($J)")
"RTN","VPRJSONE",9,0)
 ;            D ENCODE^VPRJSON("LOCALVAR","MYJSON","LOCALERR")
"RTN","VPRJSONE",10,0)
 ;
"RTN","VPRJSONE",11,0)
 ; VVROOT: closed array reference for M representation of object
"RTN","VPRJSONE",12,0)
 ; VVJSON: destination variable for the string array formatted as JSON
"RTN","VPRJSONE",13,0)
 ;  VVERR: contains error messages, defaults to ^TMP("VPRJERR",$J)
"RTN","VPRJSONE",14,0)
 ;
"RTN","VPRJSONE",15,0)
 S VVERR=$G(VVERR,"^TMP(""VPRJERR"",$J)")
"RTN","VPRJSONE",16,0)
 I '$L($G(VVROOT)) ; set error info
"RTN","VPRJSONE",17,0)
 I '$L($G(VVJSON)) ; set error info
"RTN","VPRJSONE",18,0)
 N VVLINE,VVMAX,VVERRORS
"RTN","VPRJSONE",19,0)
 S VVLINE=1,VVMAX=4000,VVERRORS=0  ; 96 more bytes of wiggle room
"RTN","VPRJSONE",20,0)
 S @VVJSON@(VVLINE)=""
"RTN","VPRJSONE",21,0)
 D SEROBJ(VVROOT)
"RTN","VPRJSONE",22,0)
 Q
"RTN","VPRJSONE",23,0)
 ;
"RTN","VPRJSONE",24,0)
SEROBJ(VVROOT) ; Serialize into a JSON object
"RTN","VPRJSONE",25,0)
 N VVFIRST,VVSUB,VVNXT
"RTN","VPRJSONE",26,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"{"
"RTN","VPRJSONE",27,0)
 S VVFIRST=1
"RTN","VPRJSONE",28,0)
 S VVSUB="" F  S VVSUB=$O(@VVROOT@(VVSUB)) Q:VVSUB=""  D
"RTN","VPRJSONE",29,0)
 . S:'VVFIRST @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"," S VVFIRST=0
"RTN","VPRJSONE",30,0)
 . ; get the name part
"RTN","VPRJSONE",31,0)
 . D SERNAME(VVSUB)
"RTN","VPRJSONE",32,0)
 . ; if this is a value, serialize it
"RTN","VPRJSONE",33,0)
 . I $$ISVALUE(VVROOT,VVSUB) D SERVAL(VVROOT,VVSUB) Q
"RTN","VPRJSONE",34,0)
 . ; otherwise navigate to the next child object or array
"RTN","VPRJSONE",35,0)
 . I $D(@VVROOT@(VVSUB))=10 S VVNXT=$O(@VVROOT@(VVSUB,"")) D  Q
"RTN","VPRJSONE",36,0)
 . . I +VVNXT D SERARY($NA(@VVROOT@(VVSUB))) I 1
"RTN","VPRJSONE",37,0)
 . . E  D SEROBJ($NA(@VVROOT@(VVSUB)))
"RTN","VPRJSONE",38,0)
 . D ERRX("SOB",VVSUB)  ; should quit loop before here
"RTN","VPRJSONE",39,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"}"
"RTN","VPRJSONE",40,0)
 Q
"RTN","VPRJSONE",41,0)
SERARY(VVROOT) ; Serialize into a JSON array
"RTN","VPRJSONE",42,0)
 N VVFIRST,VVI,VVNXT
"RTN","VPRJSONE",43,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"["
"RTN","VPRJSONE",44,0)
 S VVFIRST=1
"RTN","VPRJSONE",45,0)
 S VVI=0 F  S VVI=$O(@VVROOT@(VVI)) Q:'VVI  D
"RTN","VPRJSONE",46,0)
 . S:'VVFIRST @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"," S VVFIRST=0
"RTN","VPRJSONE",47,0)
 . I $$ISVALUE(VVROOT,VVI) D SERVAL(VVROOT,VVI) Q  ; write value
"RTN","VPRJSONE",48,0)
 . I $D(@VVROOT@(VVI))=10 S VVNXT=$O(@VVROOT@(VVI,"")) D  Q
"RTN","VPRJSONE",49,0)
 . . I +VVNXT D SERARY($NA(@VVROOT@(VVI))) I 1
"RTN","VPRJSONE",50,0)
 . . E  D SEROBJ($NA(@VVROOT@(VVI)))
"RTN","VPRJSONE",51,0)
 . D ERRX("SAR",VVI)  ; should quit loop before here
"RTN","VPRJSONE",52,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_"]"
"RTN","VPRJSONE",53,0)
 Q
"RTN","VPRJSONE",54,0)
SERNAME(VVSUB) ; Serialize the object name into JSON string
"RTN","VPRJSONE",55,0)
 I $E(VVSUB)="""" S VVSUB=$E(VVSUB,2,$L(VVSUB)) ; quote indicates numeric label
"RTN","VPRJSONE",56,0)
 I ($L(VVSUB)+$L(@VVJSON@(VVLINE)))>VVMAX S VVLINE=VVLINE+1,@VVJSON@(VVLINE)=""
"RTN","VPRJSONE",57,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_""""_VVSUB_""""_":"
"RTN","VPRJSONE",58,0)
 Q
"RTN","VPRJSONE",59,0)
SERVAL(VVROOT,VVSUB) ; Serialize X into appropriate JSON representation
"RTN","VPRJSONE",60,0)
 N VVX,VVI,VVDONE
"RTN","VPRJSONE",61,0)
 ; if the node is already in JSON format, just add it
"RTN","VPRJSONE",62,0)
 I $D(@VVROOT@(VVSUB,":")) D  QUIT  ; <-- jump out here if preformatted
"RTN","VPRJSONE",63,0)
 . S VVX=$G(@VVROOT@(VVSUB,":")) D:$L(VVX) CONCAT
"RTN","VPRJSONE",64,0)
 . S VVI=0 F  S VVI=$O(@VVROOT@(VVSUB,":",VVI)) Q:'VVI  S VVX=@VVROOT@(VVSUB,":",VVI) D CONCAT
"RTN","VPRJSONE",65,0)
 ;
"RTN","VPRJSONE",66,0)
 S VVX=$G(@VVROOT@(VVSUB)),VVDONE=0
"RTN","VPRJSONE",67,0)
 ; handle the numeric, boolean, and null types
"RTN","VPRJSONE",68,0)
 I $D(@VVROOT@(VVSUB,"\n")) S:$L(@VVROOT@(VVSUB,"\n")) VVX=@VVROOT@(VVSUB,"\n") D CONCAT QUIT  ; when +X'=X
"RTN","VPRJSONE",69,0)
 I '$D(@VVROOT@(VVSUB,"\s")),$L(VVX) D  QUIT:VVDONE
"RTN","VPRJSONE",70,0)
 . I VVX']]$C(1) S VVX=$$JNUM(VVX) D CONCAT S VVDONE=1 QUIT
"RTN","VPRJSONE",71,0)
 . I VVX="true"!(VVX="false")!(VVX="null") D CONCAT S VVDONE=1 QUIT
"RTN","VPRJSONE",72,0)
 ; otherwise treat it as a string type
"RTN","VPRJSONE",73,0)
 S VVX=""""_$$ESC(VVX) ; open quote
"RTN","VPRJSONE",74,0)
 D CONCAT
"RTN","VPRJSONE",75,0)
 I $D(@VVROOT@(VVSUB,"\")) D  ; handle continuation nodes
"RTN","VPRJSONE",76,0)
 . S VVI=0 F  S VVI=$O(@VVROOT@(VVSUB,"\",VVI)) Q:'VVI   D
"RTN","VPRJSONE",77,0)
 . . S VVX=$$ESC(@VVROOT@(VVSUB,"\",VVI))
"RTN","VPRJSONE",78,0)
 . . D CONCAT
"RTN","VPRJSONE",79,0)
 S VVX="""" D CONCAT    ; close quote
"RTN","VPRJSONE",80,0)
 Q
"RTN","VPRJSONE",81,0)
CONCAT ; come here to concatenate to JSON string
"RTN","VPRJSONE",82,0)
 I ($L(VVX)+$L(@VVJSON@(VVLINE)))>VVMAX S VVLINE=VVLINE+1,@VVJSON@(VVLINE)=""
"RTN","VPRJSONE",83,0)
 S @VVJSON@(VVLINE)=@VVJSON@(VVLINE)_VVX
"RTN","VPRJSONE",84,0)
 Q
"RTN","VPRJSONE",85,0)
ISVALUE(VVROOT,VVSUB) ; Return true if this is a value node
"RTN","VPRJSONE",86,0)
 I $D(@VVROOT@(VVSUB))#2 Q 1
"RTN","VPRJSONE",87,0)
 N VVX S VVX=$O(@VVROOT@(VVSUB,""))
"RTN","VPRJSONE",88,0)
 Q:VVX="\" 1  ; word processing continuation node
"RTN","VPRJSONE",89,0)
 Q:VVX=":" 1  ; pre-formatted JSON node
"RTN","VPRJSONE",90,0)
 Q 0
"RTN","VPRJSONE",91,0)
 ;
"RTN","VPRJSONE",92,0)
NUMERIC(X) ; Return true if the numeric
"RTN","VPRJSONE",93,0)
 I $L(X)>18 Q 0        ; string (too long for numeric)
"RTN","VPRJSONE",94,0)
 I X=0 Q 1             ; numeric (value is zero)
"RTN","VPRJSONE",95,0)
 I +X=0 Q 0            ; string
"RTN","VPRJSONE",96,0)
 I $E(X,1)="." Q 0     ; not a JSON number (although numeric in M)
"RTN","VPRJSONE",97,0)
 I $E(X,1,2)="-." Q 0  ; not a JSON number
"RTN","VPRJSONE",98,0)
 I +X=X Q 1            ; numeric
"RTN","VPRJSONE",99,0)
 I X?1"0."1.n Q 1      ; positive fraction
"RTN","VPRJSONE",100,0)
 I X?1"-0."1.N Q 1     ; negative fraction
"RTN","VPRJSONE",101,0)
 S X=$TR(X,"e","E")
"RTN","VPRJSONE",102,0)
 I X?.1"-"1.N.1".".N1"E".1"+"1.N Q 1  ; {-}99{.99}E{+}99
"RTN","VPRJSONE",103,0)
 I X?.1"-"1.N.1".".N1"E-"1.N Q 1      ; {-}99{.99}E-99
"RTN","VPRJSONE",104,0)
 Q 0
"RTN","VPRJSONE",105,0)
 ;
"RTN","VPRJSONE",106,0)
ESC(X) ; Escape string for JSON
"RTN","VPRJSONE",107,0)
 N Y,I,PAIR,FROM,TO
"RTN","VPRJSONE",108,0)
 S Y=X
"RTN","VPRJSONE",109,0)
 F PAIR="\\","""""","//",$C(8,98),$C(12,102),$C(10,110),$C(13,114),$C(9,116) D
"RTN","VPRJSONE",110,0)
 . S FROM=$E(PAIR),TO=$E(PAIR,2)
"RTN","VPRJSONE",111,0)
 . S X=Y,Y=$P(X,FROM) F I=2:1:$L(X,FROM) S Y=Y_"\"_TO_$P(X,FROM,I)
"RTN","VPRJSONE",112,0)
 I Y?.E1.C.E S X=Y,Y="" F I=1:1:$L(X) S FROM=$A(X,I) D
"RTN","VPRJSONE",113,0)
 . ; skip NUL character, otherwise encode ctrl-char
"RTN","VPRJSONE",114,0)
 . I FROM<32 Q:FROM=0  S Y=Y_$$UCODE(FROM) Q
"RTN","VPRJSONE",115,0)
 . I FROM>126,(FROM<160) S Y=Y_$$UCODE(FROM) Q
"RTN","VPRJSONE",116,0)
 . S Y=Y_$E(X,I)
"RTN","VPRJSONE",117,0)
 Q Y
"RTN","VPRJSONE",118,0)
 ;
"RTN","VPRJSONE",119,0)
JNUM(N) ; Return JSON representation of a number
"RTN","VPRJSONE",120,0)
 I N'<1 Q N
"RTN","VPRJSONE",121,0)
 I N'>-1 Q N
"RTN","VPRJSONE",122,0)
 I N>0 Q "0"_N
"RTN","VPRJSONE",123,0)
 I N<0 Q "-0"_$P(N,"-",2,9)
"RTN","VPRJSONE",124,0)
 Q N
"RTN","VPRJSONE",125,0)
 ;
"RTN","VPRJSONE",126,0)
UCODE(C) ; Return \u00nn representation of decimal character value
"RTN","VPRJSONE",127,0)
 N H S H="0000"_$$CNV^XLFUTL(C,16)
"RTN","VPRJSONE",128,0)
 Q "\u"_$E(H,$L(H)-3,$L(H))
"RTN","VPRJSONE",129,0)
 ;
"RTN","VPRJSONE",130,0)
ERRX(ID,VAL) ; Set the appropriate error message
"RTN","VPRJSONE",131,0)
 D ERRX^VPRJSON(ID,$G(VAL))
"RTN","VPRJSONE",132,0)
 Q
"RTN","VPRMDUTL")
0^58^B50949812
"RTN","VPRMDUTL",1,0)
VPRMDUTL ;HINES OIFO/BLJ - FileMan JSON utilities for HMP;02 April 2013
"RTN","VPRMDUTL",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRMDUTL",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VPRMDUTL",4,0)
 ;
"RTN","VPRMDUTL",5,0)
EN Q  ; Only call via linetag.
"RTN","VPRMDUTL",6,0)
TERM ; Retrieves list of terms
"RTN","VPRMDUTL",7,0)
  ; NOTE: we're not gonna support paged retrieves with this unless we have to.  Do not count on
"RTN","VPRMDUTL",8,0)
  ; them being there.
"RTN","VPRMDUTL",9,0)
  ;
"RTN","VPRMDUTL",10,0)
  ; Gets terminology.
"RTN","VPRMDUTL",11,0)
  N TERMIENS,TERMCNT,X
"RTN","VPRMDUTL",12,0)
  D LIST^DIC("704.101",,,,,,,,"I $P(^(0),U,5)=1")
"RTN","VPRMDUTL",13,0)
  M TERMIENS=^TMP("DILIST",$J,2)
"RTN","VPRMDUTL",14,0)
  S TERMCNT=$P($G(^TMP("DILIST",$J,0)),U,1)
"RTN","VPRMDUTL",15,0)
  K ^TMP("DILIST",$J)
"RTN","VPRMDUTL",16,0)
  ;
"RTN","VPRMDUTL",17,0)
  F X=0:0 S X=$O(TERMIENS(X)) Q:'X  D
"RTN","VPRMDUTL",18,0)
  . N RESULT
"RTN","VPRMDUTL",19,0)
  . ; term
"RTN","VPRMDUTL",20,0)
  . D ONETERM($G(TERMIENS(X)),"RESULT")
"RTN","VPRMDUTL",21,0)
  . ;
"RTN","VPRMDUTL",22,0)
  . D ADD^VPREF("RESULT")
"RTN","VPRMDUTL",23,0)
  . S VPRCNT=X,VPRLAST=X
"RTN","VPRMDUTL",24,0)
  I 'X S VPRFINI=1
"RTN","VPRMDUTL",25,0)
  Q
"RTN","VPRMDUTL",26,0)
ONETERM(ID,TARGET) ; loads one term
"RTN","VPRMDUTL",27,0)
  Q:+ID<1  ; Gotta be a valid integer/id
"RTN","VPRMDUTL",28,0)
  N $ES,$ET,ERRMSG
"RTN","VPRMDUTL",29,0)
  S ERRMSG=$$ERRMSG^VPREF("CLiO Term",ID)
"RTN","VPRMDUTL",30,0)
  S $ET="D ERRHDLR^VPRDERRH"
"RTN","VPRMDUTL",31,0)
  N TERM,TRM,TERMTYPE
"RTN","VPRMDUTL",32,0)
  ;
"RTN","VPRMDUTL",33,0)
  D GETS^DIQ("704.101",ID_",","*","IE","TERM")
"RTN","VPRMDUTL",34,0)
  N TRM S TRM=$NA(TERM(704.101,""_ID_","))
"RTN","VPRMDUTL",35,0)
  S @TARGET@("id")=$G(@TRM@(.01,"E"))
"RTN","VPRMDUTL",36,0)
  S @TARGET@("uid")="urn:va:clioterminology:"_$G(@TARGET@("id"))
"RTN","VPRMDUTL",37,0)
  S @TARGET@("term")=$$SANITIZE($G(@TRM@(.02,"E")))
"RTN","VPRMDUTL",38,0)
  S @TARGET@("abbreviation")=$$SANITIZE($G(@TRM@(.03,"E")))
"RTN","VPRMDUTL",39,0)
  S @TARGET@("displayName")=$$SANITIZE($G(@TRM@(.04,"E")))
"RTN","VPRMDUTL",40,0)
  ; Get Term Type
"RTN","VPRMDUTL",41,0)
  S TERMTYPE=$$SANITIZE($G(@TRM@(.05,"I")))
"RTN","VPRMDUTL",42,0)
  D TERMTYPE(TERMTYPE,.TARGET)
"RTN","VPRMDUTL",43,0)
  ;
"RTN","VPRMDUTL",44,0)
  S @TARGET@("dataType")=$$SANITIZE($G(@TRM@(.06,"I")))
"RTN","VPRMDUTL",45,0)
  S @TARGET@("valueType")=$$SANITIZE($G(@TRM@(.07,"I")))
"RTN","VPRMDUTL",46,0)
  S @TARGET@("active")=$$SANITIZE($G(@TRM@(.09,"E")))
"RTN","VPRMDUTL",47,0)
  S @TARGET@("description")=$$SANITIZE($G(@TRM@(.1,"E")))
"RTN","VPRMDUTL",48,0)
  S @TARGET@("helpText")=$$SANITIZE($G(@TRM@(.2,"E")))
"RTN","VPRMDUTL",49,0)
  S @TARGET@("booleanValueTrue")=$$SANITIZE($G(@TRM@(.31,"E")))
"RTN","VPRMDUTL",50,0)
  S @TARGET@("booleanValueFalse")=$$SANITIZE($G(@TRM@(.32,"E")))
"RTN","VPRMDUTL",51,0)
  S @TARGET@("multiSelectPicklist")=$$SANITIZE($G(@TRM@(.33,"E")))
"RTN","VPRMDUTL",52,0)
  S @TARGET@("VUID")="urn:va:vuid:"_$$SANITIZE($G(@TRM@(99.99,"E")))
"RTN","VPRMDUTL",53,0)
  ; term -> child terms
"RTN","VPRMDUTL",54,0)
  ;
"RTN","VPRMDUTL",55,0)
  ; Note, for right now this is a little odd: the initial load is done off of DFN.  This load
"RTN","VPRMDUTL",56,0)
  ; is done off of UID.  We'll probably change that to UID or IFN for both at some point.
"RTN","VPRMDUTL",57,0)
  ;
"RTN","VPRMDUTL",58,0)
  D TERMCHLD($G(@TRM@(.01,"E")),.TARGET)
"RTN","VPRMDUTL",59,0)
  ;
"RTN","VPRMDUTL",60,0)
  ; term -> unit pair
"RTN","VPRMDUTL",61,0)
  D TERMUNIT($G(@TRM@(.01,"E")),.TARGET)
"RTN","VPRMDUTL",62,0)
  ;
"RTN","VPRMDUTL",63,0)
  ; term -> qualifier pair
"RTN","VPRMDUTL",64,0)
  ;
"RTN","VPRMDUTL",65,0)
  D TERMQUAL($G(@TRM@(.01,"E")),.TARGET,ID)
"RTN","VPRMDUTL",66,0)
  ;
"RTN","VPRMDUTL",67,0)
  ; term -> unit conversion - for right now, we're not going to pull term -> unit conversions.  We will need to do so at some point
"RTN","VPRMDUTL",68,0)
  ; though.
"RTN","VPRMDUTL",69,0)
  K TERMTYPE,TRM
"RTN","VPRMDUTL",70,0)
  Q
"RTN","VPRMDUTL",71,0)
  ;
"RTN","VPRMDUTL",72,0)
TERMTYPE(ID,TARGET) ;Loads term types.
"RTN","VPRMDUTL",73,0)
  ;
"RTN","VPRMDUTL",74,0)
  ; TARGET passed by reference.  
"RTN","VPRMDUTL",75,0)
  ;
"RTN","VPRMDUTL",76,0)
  ; Sanity checks first
"RTN","VPRMDUTL",77,0)
  ; 
"RTN","VPRMDUTL",78,0)
  Q:+ID<1  ; Gotta be a number, we're doing a direct IFN lookup.
"RTN","VPRMDUTL",79,0)
  N TERMTYPE
"RTN","VPRMDUTL",80,0)
  D GETS^DIQ("704.102",ID_",","*","E","TERMTYPE")
"RTN","VPRMDUTL",81,0)
  N VPRNAME S VPRNAME=$T(TTFLDS+1)
"RTN","VPRMDUTL",82,0)
  ;
"RTN","VPRMDUTL",83,0)
  N VPREPLAC S VPREPLAC("""")="\"""
"RTN","VPRMDUTL",84,0)
  S @TARGET@("termType",$P(VPRNAME,";",3))=ID
"RTN","VPRMDUTL",85,0)
  S @TARGET@("termType",$P(VPRNAME,";",4))=$$SANITIZE($$REPLACE^XLFSTR(TERMTYPE("704.102",ID_",",.01,"E"),.VPREPLAC))
"RTN","VPRMDUTL",86,0)
  S @TARGET@("termType",$P(VPRNAME,";",5))=$$SANITIZE($$REPLACE^XLFSTR(TERMTYPE("704.102",ID_",",.02,"E"),.VPREPLAC))
"RTN","VPRMDUTL",87,0)
  S @TARGET@("termType",$P(VPRNAME,";",6))=$$SANITIZE($$REPLACE^XLFSTR(TERMTYPE("704.102",ID_",",.03,"E"),.VPREPLAC))
"RTN","VPRMDUTL",88,0)
  K TERMTYPE
"RTN","VPRMDUTL",89,0)
  Q
"RTN","VPRMDUTL",90,0)
TERMCHLD(ID,TARGET) ;Loads child terms for a term
"RTN","VPRMDUTL",91,0)
  ;
"RTN","VPRMDUTL",92,0)
  ;
"RTN","VPRMDUTL",93,0)
  N MSGROOT S MSGROOT="TERMCHLD("""_ID_""")"
"RTN","VPRMDUTL",94,0)
  D FIND^DIC("704.106",,".02E;.03I;.04I;.05E;.06E;.07E;.08E;.09E","M",ID,,,,,MSGROOT)
"RTN","VPRMDUTL",95,0)
  ; Check to see if we actually have any children.
"RTN","VPRMDUTL",96,0)
  I +$P(TERMCHLD(ID,"DILIST",0),U,1)<1 K @MSGROOT Q
"RTN","VPRMDUTL",97,0)
  N X F X=0:0 S X=($O(TERMCHLD(ID,"DILIST","ID",X))) Q:'X  D
"RTN","VPRMDUTL",98,0)
  . ; .01 is the Term ID
"RTN","VPRMDUTL",99,0)
  . S @TARGET@("termChild",X,"childOrder")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.02)))
"RTN","VPRMDUTL",100,0)
  . ; .03 is the Child ID
"RTN","VPRMDUTL",101,0)
  . N CHILD S CHILD=$NA(@TARGET@("termChild",X,"childTerm"))
"RTN","VPRMDUTL",102,0)
  . D ONETERM($G(TERMCHLD(ID,"DILIST","ID",X,.03)),.CHILD)
"RTN","VPRMDUTL",103,0)
  . S @TARGET@("termChild",X,"valueType")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.05)))
"RTN","VPRMDUTL",104,0)
  . S @TARGET@("termChild",X,"valueDelimiter")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.06)))
"RTN","VPRMDUTL",105,0)
  . S @TARGET@("termChild",X,"valueStart")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.07)))
"RTN","VPRMDUTL",106,0)
  . S @TARGET@("termChild",X,"valueStop")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.08)))
"RTN","VPRMDUTL",107,0)
  . S @TARGET@("termChild",X,"description")=$$SANITIZE($G(TERMCHLD(ID,"DILIST","ID",X,.09)))
"RTN","VPRMDUTL",108,0)
  K @MSGROOT
"RTN","VPRMDUTL",109,0)
  Q
"RTN","VPRMDUTL",110,0)
TERMUNIT(ID,TARGET) ;Loads Units for a term.
"RTN","VPRMDUTL",111,0)
 ;
"RTN","VPRMDUTL",112,0)
 N MSGROOT S MSGROOT="TERMUNIT("""_ID_""")"
"RTN","VPRMDUTL",113,0)
 D FIND^DIC("704.105",,".02I;.03E;.04E;.05E;.06E;.07E","M",ID,,,,,MSGROOT)
"RTN","VPRMDUTL",114,0)
 ; Check to see if we actually have any children.
"RTN","VPRMDUTL",115,0)
 I +$P(TERMUNIT(ID,"DILIST",0),U,1)<1 K @MSGROOT Q
"RTN","VPRMDUTL",116,0)
 N X F X=0:0 S X=($O(TERMUNIT(ID,"DILIST","ID",X))) Q:'X  D
"RTN","VPRMDUTL",117,0)
 . ; .01 is the Term ID
"RTN","VPRMDUTL",118,0)
 . ; .02 is the Unit ID
"RTN","VPRMDUTL",119,0)
 . N UNIT S UNIT=$NA(@TARGET@("units",X,"unitTerm"))
"RTN","VPRMDUTL",120,0)
 . D ONETERM($G(TERMUNIT(ID,"DILIST","ID",X,.02)),.UNIT)
"RTN","VPRMDUTL",121,0)
 . S @TARGET@("units",X,"minValue")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.03)))
"RTN","VPRMDUTL",122,0)
 . S @TARGET@("units",X,"maxValue")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.04)))
"RTN","VPRMDUTL",123,0)
 . S @TARGET@("units",X,"decPrecision")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.05)))
"RTN","VPRMDUTL",124,0)
 . S @TARGET@("units",X,"refLow")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.06)))
"RTN","VPRMDUTL",125,0)
 . S @TARGET@("units",X,"refHigh")=$$SANITIZE($G(TERMUNIT(ID,"DILIST","ID",X,.07)))
"RTN","VPRMDUTL",126,0)
 K @MSGROOT
"RTN","VPRMDUTL",127,0)
 Q
"RTN","VPRMDUTL",128,0)
TERMQUAL(ID,TARGET,IFN) ;Loads Qualifiers for a term
"RTN","VPRMDUTL",129,0)
 ;
"RTN","VPRMDUTL",130,0)
 N MSGROOT S MSGROOT="TERMQUAL("""_ID_""")"
"RTN","VPRMDUTL",131,0)
 D FIND^DIC("704.103",,".02E;.03I;.04E","M",ID,,,,,MSGROOT)
"RTN","VPRMDUTL",132,0)
 ; Check to see if we actually have any qualifiers.
"RTN","VPRMDUTL",133,0)
 I +$P(TERMQUAL(ID,"DILIST",0),U,1)<1 K @MSGROOT Q
"RTN","VPRMDUTL",134,0)
 N X F X=0:0 S X=($O(TERMQUAL(ID,"DILIST","ID",X))) Q:'X  D
"RTN","VPRMDUTL",135,0)
 . ; .01 is the Term ID
"RTN","VPRMDUTL",136,0)
 . ; .03 is the Qualifier ID
"RTN","VPRMDUTL",137,0)
 . N QUAL S QUAL=$NA(@TARGET@("qualifiers",X,"qualTerm"))
"RTN","VPRMDUTL",138,0)
 . ; blj 28 Feb 2014: bandaid to prevent recursive calls if someone has messed up the structure of the TERM_QUALIFIER file.
"RTN","VPRMDUTL",139,0)
 . I IFN'=$G(TERMQUAL(ID,"DILIST","ID",X,.03)) D ONETERM($G(TERMQUAL(ID,"DILIST","ID",X,.03)),.QUAL)
"RTN","VPRMDUTL",140,0)
 . S @TARGET@("qualifiers",X,"qualOrder")=$$SANITIZE($G(TERMQUAL(ID,"DILIST","ID",X,.02)))
"RTN","VPRMDUTL",141,0)
 . S @TARGET@("qualifiers",X,"ranking")=$$SANITIZE($G(TERMQUAL(ID,"DILIST","ID",X,.04)))
"RTN","VPRMDUTL",142,0)
 K @MSGROOT
"RTN","VPRMDUTL",143,0)
 Q
"RTN","VPRMDUTL",144,0)
SANITIZE(VALUE) ; Makes sure values are formatted correctly.
"RTN","VPRMDUTL",145,0)
 I +VALUE'=VALUE Q VALUE
"RTN","VPRMDUTL",146,0)
 I VALUE?1".".N S VALUE="0"_VALUE
"RTN","VPRMDUTL",147,0)
 I VALUE?1"-.".N S VALUE="-0"_$E(VALUE,2,$LENGTH(VALUE))
"RTN","VPRMDUTL",148,0)
 Q VALUE
"RTN","VPRMDUTL",149,0)
 ;
"RTN","VPRMDUTL",150,0)
GENGUID() ;
"RTN","VPRMDUTL",151,0)
 N X,AB
"RTN","VPRMDUTL",152,0)
 S X="",AB=$R(4),AB=$S(AB=0:"8",AB=1:"9",AB=2:"A",1:"B")
"RTN","VPRMDUTL",153,0)
 F  S X=X_$$BASE^XLFUTL($R(16),10,16) Q:$L(X)>31
"RTN","VPRMDUTL",154,0)
 S X="{"_$E(X,1,8)_"-"_$E(X,9,12)_"-"_"4"_$E(X,14,16)_"-"_AB_$E(X,18,20)_"-"_$E(X,21,32)_"}"
"RTN","VPRMDUTL",155,0)
 Q X
"RTN","VPRMDUTL",156,0)
TRMFLDS ;Fields for terminology
"RTN","VPRMDUTL",157,0)
  ;;.01;id
"RTN","VPRMDUTL",158,0)
  ;;.02;term
"RTN","VPRMDUTL",159,0)
  ;;.03;abbreviation
"RTN","VPRMDUTL",160,0)
  ;;.04;displayName
"RTN","VPRMDUTL",161,0)
  ;;.05;termType
"RTN","VPRMDUTL",162,0)
  ;;.06;dataType
"RTN","VPRMDUTL",163,0)
  ;;.07;valueType
"RTN","VPRMDUTL",164,0)
  ;;.09;active
"RTN","VPRMDUTL",165,0)
  ;;.1;description
"RTN","VPRMDUTL",166,0)
  ;;.2;helpText;
"RTN","VPRMDUTL",167,0)
  ;;.31;booleanValueTrue
"RTN","VPRMDUTL",168,0)
  ;;.32;booleanValueFalse;
"RTN","VPRMDUTL",169,0)
  ;;.33;multiSelectPicklist
"RTN","VPRMDUTL",170,0)
  ;;99.99;VUID
"RTN","VPRMDUTL",171,0)
  ;;***
"RTN","VPRMDUTL",172,0)
TTFLDS ;Fields for Term Typea
"RTN","VPRMDUTL",173,0)
  ;;id;type;xmlTag;VUID
"RTN","VPRP3I")
0^^B63583407
"RTN","VPRP3I",1,0)
VPRP3I ;SLC/AGP -- VPR patch 3 post install
"RTN","VPRP3I",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRP3I",3,0)
 ;
"RTN","VPRP3I",4,0)
ENV ; -- environment check to prevent production installation
"RTN","VPRP3I",5,0)
 I $$PROD^XUPROD D
"RTN","VPRP3I",6,0)
 .W !,"You are attempting to install this software into your production account.",!,"At this time, this software is not ready for a production install."
"RTN","VPRP3I",7,0)
 .W !!,"Please verify the account you're attempting to install into and",!,"if you believe you're correct, contact Ron Massey or Tana Defa.",!!,"INSTALLATION ABORTED!"
"RTN","VPRP3I",8,0)
 .S XPDABORT=1
"RTN","VPRP3I",9,0)
 Q
"RTN","VPRP3I",10,0)
 ;
"RTN","VPRP3I",11,0)
PRE ; -- clean out VPR SUBSCRIPTION and ^XTMP("VPR") entries for testing
"RTN","VPRP3I",12,0)
 N VPRDT S VPRDT="VPR-1111111"
"RTN","VPRP3I",13,0)
 F  S VPRDT=$O(^XTMP(VPRDT)) Q:VPRDT'?1"VPR-"7N  K ^XTMP(VPRDT)
"RTN","VPRP3I",14,0)
 S VPRDT="VPREF-1111111"
"RTN","VPRP3I",15,0)
 F  S VPRDT=$O(^XTMP(VPRDT)) Q:VPRDT'?1"VPREF-"7N  K ^XTMP(VPRDT)
"RTN","VPRP3I",16,0)
 K ^XTMP("VPR"),^TMP("VPRX")
"RTN","VPRP3I",17,0)
 I $$VERCMP($$VERSRV(),"0.7-S54")>0 D  ; if current < S54
"RTN","VPRP3I",18,0)
 . K ^VPR(560)
"RTN","VPRP3I",19,0)
 . S ^VPR(560,0)="VPR SUBSCRIPTION^560^^"
"RTN","VPRP3I",20,0)
 ;D CLEARPAR
"RTN","VPRP3I",21,0)
 I $D(^DD(560.04)) D  ;remove old Subscription sub-files
"RTN","VPRP3I",22,0)
 . N DIU S DIU(0)="S"
"RTN","VPRP3I",23,0)
 . S DIU=560.04 D EN^DIU2
"RTN","VPRP3I",24,0)
 . S DIU=560.03 D EN^DIU2
"RTN","VPRP3I",25,0)
 I $D(^DD(560.01,.03)) D  ; remote old PID field
"RTN","VPRP3I",26,0)
 . S DIK="^DD(560.01,",DA=.03,DA(1)=560.01
"RTN","VPRP3I",27,0)
 . D ^DIK
"RTN","VPRP3I",28,0)
 ;D TASKCONV
"RTN","VPRP3I",29,0)
 D ADDRSRC ; add resource for throttling extract tasks
"RTN","VPRP3I",30,0)
 Q
"RTN","VPRP3I",31,0)
 ;
"RTN","VPRP3I",32,0)
CLEARPAR ;
"RTN","VPRP3I",33,0)
 N ENT,ERROR,INST,LIST,PAR,TYPE,X,UID
"RTN","VPRP3I",34,0)
 ;S PAR="" F  S PAR=$O(^XTV(8989.51,"B","VPR PARAMETERS","")) I PAR>0 Q
"RTN","VPRP3I",35,0)
 S PAR=$O(^XTV(8989.51,"B","VPR PARAMETERS","")) Q:PAR'>0
"RTN","VPRP3I",36,0)
 S X="" F  S X=$O(^XTV(8989.5,"AC",PAR,X)) Q:X=""  D
"RTN","VPRP3I",37,0)
 .S TYPE=$S(X["VA":"USR",X["DIC":"SYS",1:"") I TYPE="" Q
"RTN","VPRP3I",38,0)
 .S ENT=TYPE_".`"_+X
"RTN","VPRP3I",39,0)
 .S UID="" F  S UID=$O(^XTV(8989.5,"AC",PAR,X,UID)) Q:UID=""  D
"RTN","VPRP3I",40,0)
 ..D DEL^XPAR(ENT,"VPR PARAMETERS",UID,.ERROR)
"RTN","VPRP3I",41,0)
 Q
"RTN","VPRP3I",42,0)
 ;
"RTN","VPRP3I",43,0)
 ; VERSRV and VERCMP are also in VPRUTILS, but not until after the install
"RTN","VPRP3I",44,0)
 ; of this patch (VPR*1*3), so they are reproduced here.
"RTN","VPRP3I",45,0)
 ;
"RTN","VPRP3I",46,0)
VERSRV()   ; Return server version of option name
"RTN","VPRP3I",47,0)
 N VPRLST,VAL
"RTN","VPRP3I",48,0)
 D FIND^DIC(19,"",1,"X","VPR UI CONTEXT",1,,,,"VPRLST")
"RTN","VPRP3I",49,0)
 S VAL=$G(VPRLST("DILIST","ID",1,1))
"RTN","VPRP3I",50,0)
 Q $$UP^XLFSTR($P(VAL,"version ",2))
"RTN","VPRP3I",51,0)
 ;
"RTN","VPRP3I",52,0)
VERCMP(CUR,VAL) ; Returns 1 if CUR<VAL, -1 if CUR>VAL, 0 if equal
"RTN","VPRP3I",53,0)
 N CURMAJOR,CURMINOR,CURSNAP,VALMAJOR,VALMINOR,VALSNAP
"RTN","VPRP3I",54,0)
 S CURMAJOR=$P(CUR,"-"),CURMINOR=$P(CUR,"-",2),CURSNAP=$E($P(CUR,"-",3),1,4)="SNAP"
"RTN","VPRP3I",55,0)
 S VALMAJOR=$P(VAL,"-"),VALMINOR=$P(VAL,"-",2),VALSNAP=$E($P(VAL,"-",3),1,4)="SNAP"
"RTN","VPRP3I",56,0)
 I $E(VALMINOR)="P" S VALMINOR=$E(VALMINOR,2,99)     ; "P"ilot versions (old)
"RTN","VPRP3I",57,0)
 I $E(CURMINOR)="P" S CURMINOR=$E(VALMINOR,2,99)
"RTN","VPRP3I",58,0)
 I $E(VALMINOR)="S" S VALMINOR=$E(VALMINOR,2,99)*10  ; "S"print versions
"RTN","VPRP3I",59,0)
 I $E(CURMINOR)="S" S CURMINOR=$E(CURMINOR,2,99)*10
"RTN","VPRP3I",60,0)
 Q:VALMAJOR>CURMAJOR 1   Q:VALMAJOR<CURMAJOR -1  ; compare major versions
"RTN","VPRP3I",61,0)
 Q:VALMINOR>CURMINOR 1   Q:VALMINOR<CURMINOR -1  ; compare minor versions
"RTN","VPRP3I",62,0)
 Q:(CURSNAP&'VALSNAP) 1  Q:(VALSNAP&'CURSNAP) -1 ; "SNAPSHOT" < released
"RTN","VPRP3I",63,0)
 Q 0
"RTN","VPRP3I",64,0)
 ;
"RTN","VPRP3I",65,0)
 ;
"RTN","VPRP3I",66,0)
POST ; -- set up new Tx data
"RTN","VPRP3I",67,0)
 ;D CREATEUS
"RTN","VPRP3I",68,0)
 N VPRLVER
"RTN","VPRP3I",69,0)
 S VPRLVER=$$VERSRV()
"RTN","VPRP3I",70,0)
 D VERSION
"RTN","VPRP3I",71,0)
 D EN^VPRIDX
"RTN","VPRP3I",72,0)
 D DG
"RTN","VPRP3I",73,0)
 D OI
"RTN","VPRP3I",74,0)
 D OBJCNT
"RTN","VPRP3I",75,0)
 I $$VERCMP(VPRLVER,"0.7-S58")>0 D PARPID ; if current < S58
"RTN","VPRP3I",76,0)
 Q
"RTN","VPRP3I",77,0)
 ;
"RTN","VPRP3I",78,0)
VERSION ; -- update V# parameter
"RTN","VPRP3I",79,0)
 D PUT^XPAR("PKG","VPR VERSION",1,"1.03")
"RTN","VPRP3I",80,0)
 D PUT^XPAR("SYS","VPR SYSTEM NAME",1,$$SYS^VPRUTILS)
"RTN","VPRP3I",81,0)
 Q
"RTN","VPRP3I",82,0)
 ;
"RTN","VPRP3I",83,0)
DG ; -- add Treatments display group to Nursing parent
"RTN","VPRP3I",84,0)
 Q:'$O(^ORD(100.98,"B","NTX",0))
"RTN","VPRP3I",85,0)
 N DA,DIC,DLAYGO,Y
"RTN","VPRP3I",86,0)
 S DA(1)=$O(^ORD(100.98,"B","NURS",0)) I 'DA(1) K DA Q
"RTN","VPRP3I",87,0)
 S:'$D(^ORD(100.98,DA(1),1,0)) ^(0)="^100.981P^^"
"RTN","VPRP3I",88,0)
 S DIC="^ORD(100.98,"_DA(1)_",1,",DIC(0)="NLX",DLAYGO=100.98
"RTN","VPRP3I",89,0)
 S X="NTX" D ^DIC
"RTN","VPRP3I",90,0)
 Q
"RTN","VPRP3I",91,0)
 ;
"RTN","VPRP3I",92,0)
OI ; -- assign Nursing orderable items to Treatments
"RTN","VPRP3I",93,0)
 N ORDG,ORX,ORI
"RTN","VPRP3I",94,0)
 F ORDG="ACT","NURS" D
"RTN","VPRP3I",95,0)
 . S ORX="" F  S ORX=$O(^ORD(101.43,"S."_ORDG,ORX)) Q:ORX=""  D  ;OI name
"RTN","VPRP3I",96,0)
 .. S ORI=0 F  S ORI=$O(^ORD(101.43,"S."_ORDG,ORX,ORI)) Q:ORI<1  D SET^ORDD43("NTX",ORI)
"RTN","VPRP3I",97,0)
 Q
"RTN","VPRP3I",98,0)
 ;
"RTN","VPRP3I",99,0)
OBJCNT ; -- create count index for VPR OBJECT file
"RTN","VPRP3I",100,0)
 Q:$D(^VPR(560.11,"ACNT"))
"RTN","VPRP3I",101,0)
 N DIK,DA
"RTN","VPRP3I",102,0)
 S DIK="^VPR(560.11,"
"RTN","VPRP3I",103,0)
 S DIK(1)=".03^ACNT"
"RTN","VPRP3I",104,0)
 D ENALL^DIK
"RTN","VPRP3I",105,0)
 Q
"RTN","VPRP3I",106,0)
CREATEUS ;
"RTN","VPRP3I",107,0)
 N DIV,FDA,IC,IEN,IENS,NAME,SER,VPRERR
"RTN","VPRP3I",108,0)
 ;do not create the user if the patch is already installed or if the user is already created
"RTN","VPRP3I",109,0)
 I $$PATCH^XPDUTL("VPR*1.0*3") Q
"RTN","VPRP3I",110,0)
 D EN^DDIOL("Creating VPR Sync User")
"RTN","VPRP3I",111,0)
 ;
"RTN","VPRP3I",112,0)
 S NAME="VPR,USER SYNC"
"RTN","VPRP3I",113,0)
 S IEN=$$CREATE^XUSAP(NAME,"","VPR SYNCHRONIZATION CONTEXT")
"RTN","VPRP3I",114,0)
 I IEN=0 D EN^DDIOL("User already exists") Q
"RTN","VPRP3I",115,0)
 I IEN<0 D EN^DDIOL("Cannot create user") Q
"RTN","VPRP3I",116,0)
 S IENS="?"_IEN_","
"RTN","VPRP3I",117,0)
 S DIV=$$ASK(4) I DIV'>0 D EN^DDIOL("A division needs to be selected.") Q
"RTN","VPRP3I",118,0)
 S SER=$$ASK(49) I SER'>0 D EN^DDIOL("A service needs to be selected.") Q
"RTN","VPRP3I",119,0)
 S FDA(200,IENS,.01)=NAME
"RTN","VPRP3I",120,0)
 S FDA(200,IENS,7.2)=1
"RTN","VPRP3I",121,0)
 S FDA(200,IENS,29)=$P(SER,U)
"RTN","VPRP3I",122,0)
 S FDA(200,IENS,200.04)=1
"RTN","VPRP3I",123,0)
 S FDA(200,IENS,200.1)=99999
"RTN","VPRP3I",124,0)
 ;S FDA(200.03,"?+2,"_IENS,.01)="VPR SYNCHRONIZATION CONTEXT"
"RTN","VPRP3I",125,0)
 ;S FDA(200.03,"?+3,"_IENS,.01)="VPR UI CONTEXT"
"RTN","VPRP3I",126,0)
 S FDA(200.02,"?+4,"_IENS,.01)=$P(DIV,U)
"RTN","VPRP3I",127,0)
 S FDA(200.02,"?+4,"_IENS,1)=1
"RTN","VPRP3I",128,0)
 D UPDATE^DIE("","FDA","","VPRERR")
"RTN","VPRP3I",129,0)
 I $D(VPRERR) D  Q
"RTN","VPRP3I",130,0)
 .D EN^DDIOL("Update failed, UPDATE^DIE returned the following error message.")
"RTN","VPRP3I",131,0)
 .S IC="VPRERR"
"RTN","VPRP3I",132,0)
 .F  S IC=$Q(@IC) Q:IC=""  W !,IC,"=",@IC
"RTN","VPRP3I",133,0)
 .D EN^DDIOL("Examine the above error message for the reason.")
"RTN","VPRP3I",134,0)
 .H 2
"RTN","VPRP3I",135,0)
 D EN^DDIOL("Add ACCESS/VERIFY codes to the "_NAME)
"RTN","VPRP3I",136,0)
 Q
"RTN","VPRP3I",137,0)
 ;
"RTN","VPRP3I",138,0)
ASK(FILENUM) ;
"RTN","VPRP3I",139,0)
 N DIC,Y
"RTN","VPRP3I",140,0)
 S DIC=FILENUM,DIC(0)="AEQMZ",DIC("A")="Select "_$S(FILENUM=4:"division: ",1:"service/section: ")
"RTN","VPRP3I",141,0)
 I FILENUM=4 S DIC("S")="S DINUM=X K:$S($D(^XUSEC(""XUMGR"",DUZ)):0,'$$TF^XUAF4(X):1,1:0) X,DINUM"
"RTN","VPRP3I",142,0)
 D ^DIC
"RTN","VPRP3I",143,0)
 Q Y
"RTN","VPRP3I",144,0)
 ;
"RTN","VPRP3I",145,0)
TASKCONV ;
"RTN","VPRP3I",146,0)
 N COLL,I,IEN,NODE,PAT,TEMP,UID,UPDATE,VPRY
"RTN","VPRP3I",147,0)
 K ^TMP($J,"VPRY"),^TMP($J,"VPRTEMP")
"RTN","VPRP3I",148,0)
 S VPRY=$NA(^TMP($J,"VPRY")),TEMP=$NA(^TMP($J,"VPRTEMP"))
"RTN","VPRP3I",149,0)
 S PAT=0 F  S PAT=$O(^VPR(560.1,"C",PAT)) Q:PAT'>0  D
"RTN","VPRP3I",150,0)
 .S IEN=0 F  S IEN=$O(^VPR(560.1,"C",PAT,"task",IEN)) Q:IEN'>0  D
"RTN","VPRP3I",151,0)
 ..S NODE=$G(^VPR(560.1,IEN,0))
"RTN","VPRP3I",152,0)
 ..S UID=$P(NODE,U) I UID="" Q
"RTN","VPRP3I",153,0)
 ..S UPDATE=0
"RTN","VPRP3I",154,0)
 ..S I=0 F  S I=$O(^VPR(560.1,IEN,1,I)) Q:I<1  S X=$G(^(I,0)),VPRY(I)=X
"RTN","VPRP3I",155,0)
 ..D DECODE^VPRJSON("VPRY","TEMP","ERROR")
"RTN","VPRP3I",156,0)
 ..I $D(ERROR) D EN^DDIOL("Error in decoding JSON Object") Q
"RTN","VPRP3I",157,0)
 ..K VPRY,^TMP($J,"VPRY")
"RTN","VPRP3I",158,0)
 ..I $G(@TEMP@("assignToCode"))'="" S @TEMP@("createdByCode")=@TEMP@("assignToCode"),UPDATE=1 K @TEMP@("assignToCode")
"RTN","VPRP3I",159,0)
 ..I $G(@TEMP@("assignToName"))'="" S @TEMP@("createdByName")=@TEMP@("assignToName"),UPDATE=1 K @TEMP@("assignToName")
"RTN","VPRP3I",160,0)
 ..I $G(@TEMP@("ownerName"))'="" S UPDATE=1 K @TEMP@("ownerName")
"RTN","VPRP3I",161,0)
 ..I $G(@TEMP@("ownerCode"))'="" S UPDATE=1 K @TEMP@("ownerCode")
"RTN","VPRP3I",162,0)
 ..I UPDATE=0 Q
"RTN","VPRP3I",163,0)
 ..;
"RTN","VPRP3I",164,0)
 ..S VPRY=$NA(^TMP($J,"VPRY"))
"RTN","VPRP3I",165,0)
 ..D ENCODE^VPRJSON("TEMP","VPRY","ERROR")
"RTN","VPRP3I",166,0)
 ..I $D(ERROR) D EN^DDIOL("Error in encoding JSON Object") Q
"RTN","VPRP3I",167,0)
 ..D EN^DDIOL("Updating task uid: "_UID)
"RTN","VPRP3I",168,0)
 ..D PUT^VPRDJ1(.VPR,PAT,"task",.VPRY)
"RTN","VPRP3I",169,0)
 K ^TMP($J,"VPRY"),^TMP($J,"VPRTEMP")
"RTN","VPRP3I",170,0)
 Q
"RTN","VPRP3I",171,0)
ADDRSRC ; Add resource device
"RTN","VPRP3I",172,0)
 N RNAME,RDESC,RSLOT,RTYPE,RIEN
"RTN","VPRP3I",173,0)
 S RNAME="VPR EXTRACT RESOURCE"
"RTN","VPRP3I",174,0)
 S RDESC="Controls the number of VPR extract jobs that run simultaneously."
"RTN","VPRP3I",175,0)
 S RSLOT=10
"RTN","VPRP3I",176,0)
 S RTYPE="P-OTHER"
"RTN","VPRP3I",177,0)
 S RIEN=$$RES^XUDHSET(RNAME,RNAME,RSLOT,RDESC,RTYPE)
"RTN","VPRP3I",178,0)
 Q
"RTN","VPRP3I",179,0)
PARPID ; Loop thru VPR PARAMETERS and switch ICN to qualified DFN
"RTN","VPRP3I",180,0)
 N PAR,ENT,UID,VPRWP,VPRERR,I,VPRSYS
"RTN","VPRP3I",181,0)
 S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRP3I",182,0)
 S PAR=$O(^XTV(8989.51,"B","VPR PARAMETERS","")) Q:PAR'>0
"RTN","VPRP3I",183,0)
 S ENT="" F  S ENT=$O(^XTV(8989.5,"AC",PAR,ENT)) Q:ENT=""  D
"RTN","VPRP3I",184,0)
 . S UID="" F  S UID=$O(^XTV(8989.5,"AC",PAR,ENT,UID)) Q:UID=""  D  ;INST=UID
"RTN","VPRP3I",185,0)
 . . I $P(UID,":",6,7)'="VPR USER PREF:0" Q
"RTN","VPRP3I",186,0)
 . . N VPRWP,VPRERR,JSON,OBJ,ERR,DFN,RSLT
"RTN","VPRP3I",187,0)
 . . D GETWP^XPAR(.VPRWP,ENT,PAR,UID,.VPRERR)
"RTN","VPRP3I",188,0)
 . . I +VPRERR D WRERR(UID,$P(VPRERR,U,2,99)) Q
"RTN","VPRP3I",189,0)
 . . I $D(VPRWP)<10 Q                         ; no JSON found
"RTN","VPRP3I",190,0)
 . . S I=0 F  S I=$O(VPRWP(I)) Q:'I  S JSON(I)=VPRWP(I,0)
"RTN","VPRP3I",191,0)
 . . D DECODE^VPRJSON("JSON","OBJ","ERR")
"RTN","VPRP3I",192,0)
 . . I $D(ERR) D WRERR(UID,"Error decoding JSON") Q
"RTN","VPRP3I",193,0)
 . . I '$L($G(OBJ("cpe.context.patient"))) Q  ; nothing there
"RTN","VPRP3I",194,0)
 . . I OBJ("cpe.context.patient")[";" Q       ; already DFN
"RTN","VPRP3I",195,0)
 . . S DFN=$$GETDFN^MPIF001(OBJ("cpe.context.patient"))
"RTN","VPRP3I",196,0)
 . . I DFN<1 D WRERR(UID,"Error converting ICN: "_$P(DFN,U,2)) Q
"RTN","VPRP3I",197,0)
 . . S OBJ("cpe.context.patient")=VPRSYS_";"_DFN
"RTN","VPRP3I",198,0)
 . . K JSON
"RTN","VPRP3I",199,0)
 . . D ENCODE^VPRJSON("OBJ","JSON","ERR")
"RTN","VPRP3I",200,0)
 . . I $D(ERR) D WRERR(UID,"Error encoding JSON") Q
"RTN","VPRP3I",201,0)
 . . D PUTBYUID^VPRPARAM(.RSLT,UID,.JSON)
"RTN","VPRP3I",202,0)
 Q
"RTN","VPRP3I",203,0)
WRERR(UID,MSG) ; Write out error (from post-init in KIDS build)
"RTN","VPRP3I",204,0)
 D MES^XPDUTL("Error: "_MSG_" for UID "_UID)
"RTN","VPRP3I",205,0)
 Q
"RTN","VPRPANEL")
0^11^B9307129
"RTN","VPRPANEL",1,0)
VPRPANEL ;SLC/GRR -- Reminder List processing
"RTN","VPRPANEL",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRPANEL",3,0)
 ;
"RTN","VPRPANEL",4,0)
 ; External References          DBIA#
"RTN","VPRPANEL",5,0)
 ; -------------------          -----
"RTN","VPRPANEL",6,0)
 ;
"RTN","VPRPANEL",7,0)
 ; ------------ Get Panel(s) from VistA ------------
"RTN","VPRPANEL",8,0)
 ;
"RTN","VPRPANEL",9,0)
EN(VPR) ; -- find Panels to update
"RTN","VPRPANEL",10,0)
 K ^TMP($J,"VPRPANEL")
"RTN","VPRPANEL",11,0)
 N VPRPAN,VPRPAT,VPRI
"RTN","VPRPANEL",12,0)
 S VPR=$NA(^TMP($J,"VPR")),VPRC=0,VPRT=0
"RTN","VPRPANEL",13,0)
 F  S VPRC=$O(^VPROSTER(VPRC)) Q:VPRC'>0  D
"RTN","VPRPANEL",14,0)
 . S VPRT=VPRT+1
"RTN","VPRPANEL",15,0)
 . S VPRPAN(VPRC)=^VPROSTER(VPRC,0) D
"RTN","VPRPANEL",16,0)
 . N LIEN,PLNAME S LIEN=+$P(VPRPAN(VPRC),"^",2),PLNAME=$P(VPRPAN(VPRC),U,1)
"RTN","VPRPANEL",17,0)
 . ;agp need to determine what secure and over should be set to
"RTN","VPRPANEL",18,0)
 . S SECURE=0,OVER=1
"RTN","VPRPANEL",19,0)
 . D RUNLIST(.VPRPAN,LIEN,PLNAME,SECURE,OVER)
"RTN","VPRPANEL",20,0)
CREATE ; -- create panel(s) in XML
"RTN","VPRPANEL",21,0)
 N VPRVER S VPRVER="<results version='"_$P($T(VPRPANEL+1),";",3)_"'>"
"RTN","VPRPANEL",22,0)
 N VPRTTXT S VPRTTXT="<panels total='"_VPRT_"'>"
"RTN","VPRPANEL",23,0)
 D ADD(VPRVER),ADD(VPRTTXT)
"RTN","VPRPANEL",24,0)
 D PANEL
"RTN","VPRPANEL",25,0)
 S TEXT="</results>" D ADD(TEXT)
"RTN","VPRPANEL",26,0)
 Q
"RTN","VPRPANEL",27,0)
 ;
"RTN","VPRPANEL",28,0)
PANEL ;-- create panel XML
"RTN","VPRPANEL",29,0)
 S VPRC=0 F  S VPRC=$O(VPRPAN(VPRC)) Q:VPRC'>0  D
"RTN","VPRPANEL",30,0)
 .D ADD("<panel>")
"RTN","VPRPANEL",31,0)
 .N TEXT S TEXT="<panel name='"_$P(VPRPAN(VPRC),"^",2)_"' />" D ADD(TEXT)
"RTN","VPRPANEL",32,0)
 .S TEXT="<panelString code='"_$P(VPRPAN(VPRC),"^")_"' />" D ADD(TEXT)
"RTN","VPRPANEL",33,0)
 .D PATS
"RTN","VPRPANEL",34,0)
 .S TEXT="</panel>" D ADD(TEXT)
"RTN","VPRPANEL",35,0)
 S TEXT="</panels>" D ADD(TEXT)
"RTN","VPRPANEL",36,0)
 Q
"RTN","VPRPANEL",37,0)
 ;
"RTN","VPRPANEL",38,0)
CREATEPL(PLNAME,SECURE,OVER) ;
"RTN","VPRPANEL",39,0)
 N FDA,IENS,NAME,NUM,RESULT,UNIQUE
"RTN","VPRPANEL",40,0)
 S (NUM,RESULT,UNIQUE)=0
"RTN","VPRPANEL",41,0)
 ;if overwrite check to see if the list exist
"RTN","VPRPANEL",42,0)
 I OVER=1 S RESULT=$O(^PXRMXP(810.5,"B",PLNAME,""))
"RTN","VPRPANEL",43,0)
 I RESULT>0 Q RESULT
"RTN","VPRPANEL",44,0)
 S NAME=PLNAME
"RTN","VPRPANEL",45,0)
 ;if not overwrite find unique name
"RTN","VPRPANEL",46,0)
 I OVER=0 D
"RTN","VPRPANEL",47,0)
 .I $D(^PXRMXP(810.5,"B",NAME))=0 Q
"RTN","VPRPANEL",48,0)
 .F  Q:UNIQUE=1  D
"RTN","VPRPANEL",49,0)
 ..S NUM=NUM+1
"RTN","VPRPANEL",50,0)
 ..S NAME=PLNAME_" ("_NUM_")"
"RTN","VPRPANEL",51,0)
 ..I $D(^PXRMXP(810.5,"B",NAME))=0 S UNIQUE=1
"RTN","VPRPANEL",52,0)
 ;create stub in 810.5
"RTN","VPRPANEL",53,0)
 S IENS="+1,"
"RTN","VPRPANEL",54,0)
 S FDA(810.5,IENS,.01)=NAME
"RTN","VPRPANEL",55,0)
 S FDA(810.5,IENS,100)="L"
"RTN","VPRPANEL",56,0)
 S FDA(810.5,IENS,.07)=DUZ
"RTN","VPRPANEL",57,0)
 S FDA(810.5,IENS,.08)=$S(SECURE=0:"PUB",1:"PVT")
"RTN","VPRPANEL",58,0)
 D UPDATE^DIE("","FDA","","MSG")
"RTN","VPRPANEL",59,0)
 ;if error display message and quit
"RTN","VPRPANEL",60,0)
 I $D(MSG) D AWRITE^PXRMUTIL("MSG") Q 0
"RTN","VPRPANEL",61,0)
 S RESULT=$O(^PXRMXP(810.5,"B",NAME,""))
"RTN","VPRPANEL",62,0)
 Q RESULT
"RTN","VPRPANEL",63,0)
 ;
"RTN","VPRPANEL",64,0)
RUNLIST(VPRPAN,LIEN,PLNAME,SECURE,OVER) ;
"RTN","VPRPANEL",65,0)
 N PLIEN
"RTN","VPRPANEL",66,0)
 S PLIEN=$$CREATEPL(PLNAME,SECURE,OVER)
"RTN","VPRPANEL",67,0)
 S PATCREAT=$S(SECURE=1:"Y",1:0),PLISTPUG=1
"RTN","VPRPANEL",68,0)
 I PLIEN=0 Q
"RTN","VPRPANEL",69,0)
 D RUN^PXRMLCR(LIEN,PLIEN,"PXRMRULE",DT,DT,0,0)
"RTN","VPRPANEL",70,0)
 N VPRPAT S VPRPAT=0
"RTN","VPRPANEL",71,0)
 F  S VPRPAT=$O(^PXRMXP(810.5,PLIEN,30,VPRPAT)) Q:VPRPAT'>0  S VPRPAN(VPRC,VPRPAT)=$P($G(^PXRMXP(810.5,PLIEN,30,VPRPAT,0)),"^",1)
"RTN","VPRPANEL",72,0)
 Q
"RTN","VPRPANEL",73,0)
 ;
"RTN","VPRPANEL",74,0)
PATS ; -- create patient XML
"RTN","VPRPANEL",75,0)
 S TEXT="<patients>" D ADD(TEXT)
"RTN","VPRPANEL",76,0)
 S VPRPAT=0 F  S VPRPAT=$O(VPRPAN(VPRC,VPRPAT)) D  Q:VPRPAT'>0
"RTN","VPRPANEL",77,0)
 .I VPRPAT'>0 S TEXT="</patients>" D ADD(TEXT) Q
"RTN","VPRPANEL",78,0)
 .S TEXT="<patient code='"_VPRPAN(VPRC,VPRPAT)_"' />" D ADD(TEXT)
"RTN","VPRPANEL",79,0)
 ;
"RTN","VPRPANEL",80,0)
 ;
"RTN","VPRPANEL",81,0)
ADD(X) ; -- Add a line @VPR@(n)=X
"RTN","VPRPANEL",82,0)
 S VPRI=$G(VPRI)+1
"RTN","VPRPANEL",83,0)
 S @VPR@(VPRI)=X
"RTN","VPRPANEL",84,0)
 Q
"RTN","VPRPANEL",85,0)
 ;
"RTN","VPRPANEL",86,0)
NITELY ; -- Nightly run to update all Panels
"RTN","VPRPANEL",87,0)
 ; 
"RTN","VPRPARAM")
0^59^B15436113
"RTN","VPRPARAM",1,0)
VPRPARAM ; SLC/AGP - Parameter routine. ; 8/16/12 7:09pm
"RTN","VPRPARAM",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRPARAM",3,0)
 Q
"RTN","VPRPARAM",4,0)
 ;
"RTN","VPRPARAM",5,0)
 ;
"RTN","VPRPARAM",6,0)
BLDENT(UID,ENTITY) ;
"RTN","VPRPARAM",7,0)
 ;urn:va:param:F484:1120:VPR USER PREF
"RTN","VPRPARAM",8,0)
 ;urn:va:param:F484:1120:VPR ROSTER PREF:13
"RTN","VPRPARAM",9,0)
 ;urn:va:param:F484:SYS:VPR USER PREF
"RTN","VPRPARAM",10,0)
 S ENTITY("uid")=UID
"RTN","VPRPARAM",11,0)
 I +$P(UID,":",5)>0 D  Q
"RTN","VPRPARAM",12,0)
 .S ENTITY("entity")="USR"
"RTN","VPRPARAM",13,0)
 .S ENTITY("entityId")=$P(UID,":",5)
"RTN","VPRPARAM",14,0)
 S ENTITY("entity")="SYS"
"RTN","VPRPARAM",15,0)
 Q
"RTN","VPRPARAM",16,0)
 ;
"RTN","VPRPARAM",17,0)
BUILDUID(VALUES,TYPE,ID) ;
"RTN","VPRPARAM",18,0)
 N DOMAIN
"RTN","VPRPARAM",19,0)
 S DOMAIN=$$BASE^XLFUTL($$CRC16^XLFCRC($$KSP^XUPARAM("WHERE")),10,16)
"RTN","VPRPARAM",20,0)
 S VALUES("uid")="urn:va:"_TYPE_":"_DOMAIN_":"_ID
"RTN","VPRPARAM",21,0)
 Q
"RTN","VPRPARAM",22,0)
 ;
"RTN","VPRPARAM",23,0)
DELPARAM(RESULT,UID) ;
"RTN","VPRPARAM",24,0)
 N ARRAY,ENT,ENTITY,ENTVALUE,ERR,STR,VPRERR
"RTN","VPRPARAM",25,0)
 D BLDENT(UID,.ARRAY)
"RTN","VPRPARAM",26,0)
 ;delete old parameter
"RTN","VPRPARAM",27,0)
 S ENTITY=ARRAY("entity")
"RTN","VPRPARAM",28,0)
 S ENTVALUE=ARRAY("entityId")
"RTN","VPRPARAM",29,0)
 S ENT=$S($G(ENTVALUE)>0:ENTITY_".`"_ENTVALUE,1:ENTITY)
"RTN","VPRPARAM",30,0)
 I $G(ARRAY("uid"))="" Q
"RTN","VPRPARAM",31,0)
 I $G(ENT)="" Q
"RTN","VPRPARAM",32,0)
 D DEL^XPAR(ENT,"VPR PARAMETERS",ARRAY("uid"),.VPRERR)
"RTN","VPRPARAM",33,0)
 Q
"RTN","VPRPARAM",34,0)
 ;
"RTN","VPRPARAM",35,0)
GETALPAR(JSONRES,ENTITY,ENTVALUE,RETVALUE) ;
"RTN","VPRPARAM",36,0)
 N CNT,DECODE,ENT,GETVAL,INST,PARAM,RESULT,VPRERR,VPRLIST
"RTN","VPRPARAM",37,0)
 S ENT=$S($G(ENTVALUE)'="":ENTITY_".`"_ENTVALUE,1:ENTITY)
"RTN","VPRPARAM",38,0)
 D GETLST^XPAR(.VPRLIST,ENT,"VPR PARAMETERS","I")
"RTN","VPRPARAM",39,0)
 I VPRLIST=0 Q
"RTN","VPRPARAM",40,0)
 S GETVAL=$S(RETVALUE="true":1,1:0)
"RTN","VPRPARAM",41,0)
 I GETVAL=0 D   Q
"RTN","VPRPARAM",42,0)
 .S CNT=0,INST="" F  S INST=$O(VPRLIST(INST)) Q:INST=""  S JSONRES(CNT)=INST,CNT=CNT+1
"RTN","VPRPARAM",43,0)
 S CNT=0,INST="" F  S INST=$O(VPRLIST(INST)) Q:INST=""  D
"RTN","VPRPARAM",44,0)
 .S CNT=CNT+1
"RTN","VPRPARAM",45,0)
 .S RESULT("params",CNT,"uid")=INST
"RTN","VPRPARAM",46,0)
 .D GETPARAM(.PARAM,"VPR PARAMETERS",ENTITY,ENTVALUE,INST)
"RTN","VPRPARAM",47,0)
 .I '$D(PARAM) Q
"RTN","VPRPARAM",48,0)
 .M RESULT("params",CNT,"value",":")=PARAM
"RTN","VPRPARAM",49,0)
 .K PARAM
"RTN","VPRPARAM",50,0)
 I '$D(RESULT) Q ""
"RTN","VPRPARAM",51,0)
 S RESULT("success")="true"
"RTN","VPRPARAM",52,0)
 D ENCODE^VPRJSON("RESULT","JSONRES","VPRERR")
"RTN","VPRPARAM",53,0)
 I $D(VPRERR) K JSONRES S TXT(1)="Problem encoding results to json format." D SETERROR(.RESULT,.VPRERR,.TXT,.JSONRES) Q
"RTN","VPRPARAM",54,0)
 Q
"RTN","VPRPARAM",55,0)
 ;
"RTN","VPRPARAM",56,0)
GETPARAM(RESULT,NAME,ENTITY,ENTVALUE,INST) ; Get value for a param
"RTN","VPRPARAM",57,0)
 N CNT,ENT,FORMAT,IEN,VPRPAR,VPRERR
"RTN","VPRPARAM",58,0)
 ;S IEN=$O(^XTV(8989.51,"B",NAME,"")) Q:IEN'>0
"RTN","VPRPARAM",59,0)
 S FORMAT="I"
"RTN","VPRPARAM",60,0)
 ;D BLDLST^XPAREDIT(.VPRPAR,IEN
"RTN","VPRPARAM",61,0)
 S ENT=$S($G(ENTVALUE)'="":ENTITY_".`"_ENTVALUE,1:ENTITY)
"RTN","VPRPARAM",62,0)
 D GETWP^XPAR(.VPRAR,ENT,NAME,INST,.VPRERR)
"RTN","VPRPARAM",63,0)
 S CNT=0 F  S CNT=$O(VPRAR(CNT)) Q:CNT'>0  D
"RTN","VPRPARAM",64,0)
 .S RESULT(CNT)=VPRAR(CNT,0)
"RTN","VPRPARAM",65,0)
 Q
"RTN","VPRPARAM",66,0)
 ;
"RTN","VPRPARAM",67,0)
GETBYUID(RESULT,UID) ;
"RTN","VPRPARAM",68,0)
 N ENTITY
"RTN","VPRPARAM",69,0)
 D BLDENT(UID,.ENTITY)
"RTN","VPRPARAM",70,0)
 D GETPARAM(.RESULT,"VPR PARAMETERS",$G(ENTITY("entity")),$G(ENTITY("entityId")),$G(ENTITY("uid")))
"RTN","VPRPARAM",71,0)
 ;I $D(RESULT)<10 S RESULT(0)="{}"
"RTN","VPRPARAM",72,0)
 Q
"RTN","VPRPARAM",73,0)
 ;
"RTN","VPRPARAM",74,0)
PARSEJSN(VALUE,ARRAY,ERR) ;
"RTN","VPRPARAM",75,0)
 N ERROR,JSON,TXT
"RTN","VPRPARAM",76,0)
 D DECODE^VPRJSON("VALUE","ARRAY","ERROR")
"RTN","VPRPARAM",77,0)
 I $D(ERR) K ARRAY S TXT(1)="Problem decoding json value." D SETERROR(.VALUE,.ERROR,.TXT,.ERR) Q 0
"RTN","VPRPARAM",78,0)
 Q 1
"RTN","VPRPARAM",79,0)
 ;
"RTN","VPRPARAM",80,0)
PUTPARAM(RESULT,VALUE,ENTARR) ;
"RTN","VPRPARAM",81,0)
 N CNT,ENT,ENTITY,ENTVALUE,ERR,STR,VPRERR,X
"RTN","VPRPARAM",82,0)
 I $D(ENTARR)<10 I $$PARSEJSN(.VALUE,.ENTARR,.ERR)=0 M RESULT=ERR Q
"RTN","VPRPARAM",83,0)
 ;delete old parameter
"RTN","VPRPARAM",84,0)
 S ENTITY=ENTARR("entity")
"RTN","VPRPARAM",85,0)
 S ENTVALUE=ENTARR("entityId")
"RTN","VPRPARAM",86,0)
 S ENT=$S($G(ENTVALUE)>0:ENTITY_".`"_ENTVALUE,1:ENTITY)
"RTN","VPRPARAM",87,0)
 D DEL^XPAR(ENT,"VPR PARAMETERS",ENTARR("uid"),.VPRERR)
"RTN","VPRPARAM",88,0)
 S CNT=$O(VALUE(""),-1) I CNT="" S STR(1,0)=VALUE
"RTN","VPRPARAM",89,0)
 I CNT>0 F X=0:1:CNT S STR(X+1,0)=VALUE(X)
"RTN","VPRPARAM",90,0)
 D PUT^XPAR(ENT,"VPR PARAMETERS",ENTARR("uid"),.STR,.VPRERR)
"RTN","VPRPARAM",91,0)
 S RESULT(0)="{""success"":""true""}"
"RTN","VPRPARAM",92,0)
 Q
"RTN","VPRPARAM",93,0)
 ;
"RTN","VPRPARAM",94,0)
PUTBYUID(RESULT,UID,VALUE) ;
"RTN","VPRPARAM",95,0)
 N ENTITY
"RTN","VPRPARAM",96,0)
 D BLDENT(UID,.ENTITY)
"RTN","VPRPARAM",97,0)
 D PUTPARAM(.RESULT,.VALUE,.ENTITY)
"RTN","VPRPARAM",98,0)
 Q
"RTN","VPRPARAM",99,0)
 ;
"RTN","VPRPARAM",100,0)
SETERROR(INPDATA,ERRORMSG,TXT,OUTPUT) ;
"RTN","VPRPARAM",101,0)
 N ERRARR
"RTN","VPRPARAM",102,0)
 D SETERROR^VPRUTILS(.ERRARR,.ERRORMSG,.TXT,.INPDATA)
"RTN","VPRPARAM",103,0)
 D ENCODE^VPRJSON("ERRARR","OUTPUT","ERROR")
"RTN","VPRPARAM",104,0)
 Q
"RTN","VPRPATS")
0^3^B44568818
"RTN","VPRPATS",1,0)
VPRPATS ;SLC/MKB -- Patient Management Utilities
"RTN","VPRPATS",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRPATS",3,0)
 ;
"RTN","VPRPATS",4,0)
 ; External References          DBIA#
"RTN","VPRPATS",5,0)
 ; -------------------          -----
"RTN","VPRPATS",6,0)
 ; ^DGS(41.1                     3796
"RTN","VPRPATS",7,0)
 ; ^DPT                         10035
"RTN","VPRPATS",8,0)
 ; ^OR(100.21
"RTN","VPRPATS",9,0)
 ; ^PXRMXP(810.5
"RTN","VPRPATS",10,0)
 ; ^SC                          10040
"RTN","VPRPATS",11,0)
 ; ^SCTM(404.51                 +2936? >>or use FIND^DIC?
"RTN","VPRPATS",12,0)
 ; DICN                         10009
"RTN","VPRPATS",13,0)
 ; MPIF001                       2701
"RTN","VPRPATS",14,0)
 ; SCAPMC                        1916
"RTN","VPRPATS",15,0)
 ; SDAMA301                      4433
"RTN","VPRPATS",16,0)
 ; XLFDT                        10103
"RTN","VPRPATS",17,0)
 ; XPAR                          2263
"RTN","VPRPATS",18,0)
 ; XUAF4                         2171
"RTN","VPRPATS",19,0)
 ;
"RTN","VPRPATS",20,0)
APPT ; -- Return patients w/appointments tomorrow
"RTN","VPRPATS",21,0)
 ; OPT = VPR APPOINTMENTS
"RTN","VPRPATS",22,0)
 N NOW,NOW1,VPRX,VPRL,VPRN,DFN,DA,TOKEN,NEW,X
"RTN","VPRPATS",23,0)
 S NOW=$$NOW^XLFDT,NOW1=$$FMADD^XLFDT(NOW,1)
"RTN","VPRPATS",24,0)
 S VPRX(1)=NOW_";"_NOW1 ;next 24hours
"RTN","VPRPATS",25,0)
 S VPRX("FLDS")=1,VPRX("SORT")="P",VPRX(3)="R;I;NT"
"RTN","VPRPATS",26,0)
 ; ck parameter for desired location(s): VPRX(2)="loc1;loc2;...;loc#"
"RTN","VPRPATS",27,0)
 D GETLST^XPAR(.VPRL,"ALL","VPR LOCATIONS") I +$G(VPRL) D
"RTN","VPRPATS",28,0)
 . S X=+$G(VPRL(1)),VPRX(2)=$S($D(^SC(X,0)):X,1:"")
"RTN","VPRPATS",29,0)
 . F I=2:1:+VPRL S X=+$G(VPRL(I)) S:$D(^SC(X,0)) VPRX(2)=VPRX(2)_";"_X
"RTN","VPRPATS",30,0)
 S VPRN=$$SDAPI^SDAMA301(.VPRX) Q:VPRN<1
"RTN","VPRPATS",31,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",DFN)) Q:DFN<1  D
"RTN","VPRPATS",32,0)
 . S DA=0 F  S DA=$O(^VPR(560,DA)) Q:DA<1  I $P($G(^(DA,0)),U,2) D
"RTN","VPRPATS",33,0)
 .. Q:$D(^VPR(560,"ADFN",DFN,DA))  ;already subscribed
"RTN","VPRPATS",34,0)
 .. S TOKEN=DA_"~"_NOW,NEW(TOKEN)=""
"RTN","VPRPATS",35,0)
 .. S ^XTMP("VPRX",TOKEN,DFN)=""
"RTN","VPRPATS",36,0)
 I $D(NEW) D SEND^VPRHTTP(.NEW) ;send poke to each URL with list TOKEN
"RTN","VPRPATS",37,0)
 Q
"RTN","VPRPATS",38,0)
 ;
"RTN","VPRPATS",39,0)
ADM(DFN) ; -- Return new inpatient [from DGPM^VPREVNT]
"RTN","VPRPATS",40,0)
 N NOW,DA,TOKEN,NEW
"RTN","VPRPATS",41,0)
 S NOW=$$NOW^XLFDT,DFN=+$G(DFN)
"RTN","VPRPATS",42,0)
 S DA=0 F  S DA=$O(^VPR(560,DA)) Q:DA<1  I $P($G(^(DA,0)),U,3) D
"RTN","VPRPATS",43,0)
 . Q:$D(^VPR(560,"ADFN",DFN,DA))  ;already subscribed
"RTN","VPRPATS",44,0)
 . S TOKEN=DA_"~"_NOW,NEW(TOKEN)=""
"RTN","VPRPATS",45,0)
 . S ^XTMP("VPRX",TOKEN,DFN)=""
"RTN","VPRPATS",46,0)
 I $D(NEW) D SEND^VPRHTTP(.NEW) ;send poke to each URL with list TOKEN
"RTN","VPRPATS",47,0)
 Q
"RTN","VPRPATS",48,0)
 ;
"RTN","VPRPATS",49,0)
GTALLLST(VPR,VPRTYPE) ;
"RTN","VPRPATS",50,0)
 S VPR=$NA(^TMP($J,"VPR")) K @VPR
"RTN","VPRPATS",51,0)
 N VPRI,VPRSITE,VPRUSER,VPRSTA
"RTN","VPRPATS",52,0)
 S VPRUSER=DUZ,VPRSITE=DUZ(2),VPRSTA=$$STA^XUAF4(DUZ(2)),VPRI=0
"RTN","VPRPATS",53,0)
 D ADD("<results>")
"RTN","VPRPATS",54,0)
 I $D(VPRTYPE("ALL"))>0 S (VPRTYPE("OR"),VPRTYPE("PXRM"),VPRTYPE("PCMM"))=""
"RTN","VPRPATS",55,0)
 D ADD("<lists>")
"RTN","VPRPATS",56,0)
 I $D(VPRTYPE("OR"))>0 D GETOERRL
"RTN","VPRPATS",57,0)
 I $D(VPRTYPE("PXRM"))>0 D GETPXRML
"RTN","VPRPATS",58,0)
 I $D(VPRTYPE("PCMM"))>0 D GETPCMML
"RTN","VPRPATS",59,0)
 D ADD("</lists>")
"RTN","VPRPATS",60,0)
 D ADD("</results>")
"RTN","VPRPATS",61,0)
 Q
"RTN","VPRPATS",62,0)
 ;
"RTN","VPRPATS",63,0)
GETLSTPT(VPR,VPRLIST) ;
"RTN","VPRPATS",64,0)
 S VPR=$NA(^TMP($J,"VPR")) K @VPR
"RTN","VPRPATS",65,0)
 N GBL,IEN,TAG,VPRI,VPRSITE,VPRUSER,VPRSTA
"RTN","VPRPATS",66,0)
 S VPRUSER=DUZ,VPRSITE=DUZ(2),VPRSTA=$$STA^XUAF4(DUZ(2)),VPRI=0
"RTN","VPRPATS",67,0)
 D ADD("<results>")
"RTN","VPRPATS",68,0)
 S GBL=VPRLIST("global"),IEN=VPRLIST("ien")
"RTN","VPRPATS",69,0)
 S TAG=$S(GBL="OR":"GETOERRP",GBL="PXRMXP":"GETPXRMP",GBL="PCMM":"GETPCMMP",1:"")
"RTN","VPRPATS",70,0)
 I TAG'="",IEN'="" D @(TAG_"(IEN)")
"RTN","VPRPATS",71,0)
 D ADD("</results>")
"RTN","VPRPATS",72,0)
 Q
"RTN","VPRPATS",73,0)
 Q
"RTN","VPRPATS",74,0)
 ;
"RTN","VPRPATS",75,0)
GETPCMML ;
"RTN","VPRPATS",76,0)
 N NAME,IEN
"RTN","VPRPATS",77,0)
 S NAME="" F  S NAME=$O(^SCTM(404.51,"B",NAME)) Q:NAME=""  D
"RTN","VPRPATS",78,0)
 .S IEN=$O(^SCTM(404.51,"B",NAME,"")) Q:IEN'>0
"RTN","VPRPATS",79,0)
 .D ADD("<list value='"_NAME_"' id='"_IEN_"' global='PCMM'/>")
"RTN","VPRPATS",80,0)
 Q
"RTN","VPRPATS",81,0)
 ;
"RTN","VPRPATS",82,0)
GETPCMMP(IEN) ;
"RTN","VPRPATS",83,0)
 N DFN,OK,VPRERR,VPRX
"RTN","VPRPATS",84,0)
 K ^TMP($J,"PCM")
"RTN","VPRPATS",85,0)
 S OK=$$PTTM^SCAPMC(IEN,"SCDT","^TMP($J,""PCM"")",.VPRERR)
"RTN","VPRPATS",86,0)
 I OK'>0 Q
"RTN","VPRPATS",87,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"PCM","SCPTA",DFN)) Q:DFN'>0  D
"RTN","VPRPATS",88,0)
 .S VPRX(DFN)=""
"RTN","VPRPATS",89,0)
 D XML(.VPRX)
"RTN","VPRPATS",90,0)
 Q
"RTN","VPRPATS",91,0)
 ;
"RTN","VPRPATS",92,0)
GETPXRML ;
"RTN","VPRPATS",93,0)
 N NAME,IEN
"RTN","VPRPATS",94,0)
 S NAME="" F  S NAME=$O(^PXRMXP(810.5,"B",NAME)) Q:NAME=""  D
"RTN","VPRPATS",95,0)
 .S IEN=$O(^PXRMXP(810.5,"B",NAME,"")) Q:IEN'>0
"RTN","VPRPATS",96,0)
 .D ADD("<list value='"_NAME_"' id='"_IEN_"' global='PXRMXP'/>")
"RTN","VPRPATS",97,0)
 Q
"RTN","VPRPATS",98,0)
 ;
"RTN","VPRPATS",99,0)
GETPXRMP(IEN) ;
"RTN","VPRPATS",100,0)
 N CNT,VPRX
"RTN","VPRPATS",101,0)
 S CNT=0 F  S CNT=$O(^PXRMXP(810.5,IEN,30,CNT)) Q:CNT'>0  D
"RTN","VPRPATS",102,0)
 .S VPRX(+$G(^PXRMXP(810.5,IEN,30,CNT,0)))=""
"RTN","VPRPATS",103,0)
 D XML(.VPRX)
"RTN","VPRPATS",104,0)
 Q
"RTN","VPRPATS",105,0)
 ;
"RTN","VPRPATS",106,0)
GETOERRL ;
"RTN","VPRPATS",107,0)
 N NAME,IEN
"RTN","VPRPATS",108,0)
 S NAME="" F  S NAME=$O(^OR(100.21,"B",NAME)) Q:NAME=""  D
"RTN","VPRPATS",109,0)
 .S IEN=$O(^OR(100.21,"B",NAME,"")) Q:IEN'>0
"RTN","VPRPATS",110,0)
 .D ADD("<list value='"_NAME_"' id='"_IEN_"' global='OR'/>")
"RTN","VPRPATS",111,0)
 Q
"RTN","VPRPATS",112,0)
 ;
"RTN","VPRPATS",113,0)
GETOERRP(IEN) ;
"RTN","VPRPATS",114,0)
 N CNT,VPRX
"RTN","VPRPATS",115,0)
 S CNT=0 F  S CNT=$O(^OR(100.21,IEN,10,CNT)) Q:CNT'>0  D
"RTN","VPRPATS",116,0)
 .S VPRX(+$G(^OR(100.21,IEN,10,CNT,0)))=""
"RTN","VPRPATS",117,0)
 D XML(.VPRX)
"RTN","VPRPATS",118,0)
 Q
"RTN","VPRPATS",119,0)
 ;
"RTN","VPRPATS",120,0)
IN(VPR) ; -- Return current inpatients
"RTN","VPRPATS",121,0)
 ; RPC = VPR INPATIENTS
"RTN","VPRPATS",122,0)
 N WARD,DFN,VPRX,VPRI
"RTN","VPRPATS",123,0)
 S WARD="" F  S WARD=$O(^DPT("CN",WARD)) Q:WARD=""  D
"RTN","VPRPATS",124,0)
 . S DFN=0 F  S DFN=$O(^DPT("CN",WARD,DFN)) Q:DFN<1  S VPRX(DFN)=""
"RTN","VPRPATS",125,0)
 S VPR=$NA(^TMP($J,"VPR")) K @VPR
"RTN","VPRPATS",126,0)
 D XML(.VPRX)
"RTN","VPRPATS",127,0)
 Q
"RTN","VPRPATS",128,0)
 ;
"RTN","VPRPATS",129,0)
OUT(VPR,BEG,END) ; -- Return patients w/appointments [tomorrow]
"RTN","VPRPATS",130,0)
 ; RPC = VPR APPOINTMENTS
"RTN","VPRPATS",131,0)
 N VPRX,VPRN,DFN,VPRDT,VPRI,VPRA
"RTN","VPRPATS",132,0)
 I '$G(BEG) D   ;default = tomorrow, if not passed in
"RTN","VPRPATS",133,0)
 . S BEG=$$FMADD^XLFDT(DT,1),END=BEG
"RTN","VPRPATS",134,0)
 ; find patients with appointments
"RTN","VPRPATS",135,0)
 S END=$G(END,BEG),VPRX(1)=BEG_";"_END
"RTN","VPRPATS",136,0)
 S VPRX("SORT")="P",VPRX("FLDS")=1,VPRX(3)="R;I;NT"
"RTN","VPRPATS",137,0)
 S VPRN=$$SDAPI^SDAMA301(.VPRX) Q:VPRN<1  K VPRX
"RTN","VPRPATS",138,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",DFN)) Q:DFN<1  S VPRX(DFN)=""
"RTN","VPRPATS",139,0)
 ; find patients scheduled for admission
"RTN","VPRPATS",140,0)
 S VPRDT=0 F  S VPRDT=$O(^DGS(41.1,"C",VPRDT)) Q:VPRDT<1!(VPRDT>END)  D
"RTN","VPRPATS",141,0)
 . S VPRI=0 F  S VPRI=$O(^DGS(41.1,"C",VPRDT,VPRI)) Q:VPRI<1  D
"RTN","VPRPATS",142,0)
 .. S VPRA=$G(^DGS(41.1,VPRI))
"RTN","VPRPATS",143,0)
 .. Q:$P(VPRA,U,13)  Q:$P(VPRA,U,17)  ;cancelled or admitted
"RTN","VPRPATS",144,0)
 .. S DFN=+VPRA S:DFN VPRX(DFN)=""
"RTN","VPRPATS",145,0)
 ; return list
"RTN","VPRPATS",146,0)
 S VPR=$NA(^TMP($J,"VPR")) K @VPR
"RTN","VPRPATS",147,0)
 D XML(.VPRX)
"RTN","VPRPATS",148,0)
 Q
"RTN","VPRPATS",149,0)
 ;
"RTN","VPRPATS",150,0)
XML(PATIENT) ; -- Return patient list as XML
"RTN","VPRPATS",151,0)
 N DFN,ICN,Y
"RTN","VPRPATS",152,0)
 D ADD("<patients>")
"RTN","VPRPATS",153,0)
 S DFN=0 F  S DFN=$O(PATIENT(DFN)) Q:DFN<1  D
"RTN","VPRPATS",154,0)
 . S ICN=$$GETICN^MPIF001(DFN)
"RTN","VPRPATS",155,0)
 . S Y="<patient id='"_DFN_$S(ICN:"' icn='"_ICN,1:"")_"' />" D ADD(Y)
"RTN","VPRPATS",156,0)
 D ADD("</patients>")
"RTN","VPRPATS",157,0)
 Q
"RTN","VPRPATS",158,0)
 ;
"RTN","VPRPATS",159,0)
SUBS(VPR,SYS,ON,LIST) ; -- Un/Subscribe to Patient Data Monitor
"RTN","VPRPATS",160,0)
 ; RPC = VPR SUBSCRIBE
"RTN","VPRPATS",161,0)
 N DA,I,ICN,DFN,HDR,VPRI
"RTN","VPRPATS",162,0)
 S SYS=$G(SYS),ON=+$G(ON) Q:'$L(SYS)
"RTN","VPRPATS",163,0)
 S DA=$$FIND(SYS) Q:DA<1
"RTN","VPRPATS",164,0)
 S VPR=$NA(^TMP("VPR",$J)) K @VPR
"RTN","VPRPATS",165,0)
 S:'$D(^XTMP("VPR")) ^XTMP("VPR",0)="3991231^"_DT_"^VPR Patient Data Monitor"
"RTN","VPRPATS",166,0)
 ;
"RTN","VPRPATS",167,0)
 ; loop through LIST(n) = 'dfn;icn'
"RTN","VPRPATS",168,0)
 D ADD("<patients>")
"RTN","VPRPATS",169,0)
 S I="" F  S I=$O(LIST(I)) Q:I=""  S DFN=LIST(I) D
"RTN","VPRPATS",170,0)
 . S ICN=+$P(DFN,";",2),DFN=+$G(DFN)
"RTN","VPRPATS",171,0)
 . I 'DFN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","VPRPATS",172,0)
 . I DFN<1!'$D(^DPT(DFN)) D RET(DFN,"error") Q
"RTN","VPRPATS",173,0)
 . I ON D  Q
"RTN","VPRPATS",174,0)
 .. S:'$D(^VPR(560,DA,1,DFN,0)) HDR=$G(^VPR(560,DA,1,0)),^(0)="^560.01P^"_DFN_U_($P(HDR,U,4)+1)
"RTN","VPRPATS",175,0)
 .. S ^VPR(560,DA,1,DFN,0)=DFN_U_ON,^VPR(560,"ADFN",DFN,DA)=""
"RTN","VPRPATS",176,0)
 .. D RET(DFN,"on")
"RTN","VPRPATS",177,0)
 . ; else, remove patient tracking info from ^XTMP
"RTN","VPRPATS",178,0)
 . S:$D(^VPR(560,DA,1,DFN,0)) $P(^(0),U,2)=0
"RTN","VPRPATS",179,0)
 . K ^VPR(560,"ADFN",DFN,DA)
"RTN","VPRPATS",180,0)
 . D RET(DFN,"off")
"RTN","VPRPATS",181,0)
 D ADD("</patients>")
"RTN","VPRPATS",182,0)
 Q
"RTN","VPRPATS",183,0)
 ;
"RTN","VPRPATS",184,0)
FIND(ID) ; -- Return ien of system ID in ^VPR
"RTN","VPRPATS",185,0)
 N DA,DO,DIC,X,Y
"RTN","VPRPATS",186,0)
 I $G(ID)="" Q 0                        ;error
"RTN","VPRPATS",187,0)
 S DA=+$O(^VPR(560,"B",ID,0)) I DA<1 D  ;add
"RTN","VPRPATS",188,0)
 . S DIC="^VPR(560,",DIC(0)="F",X=ID
"RTN","VPRPATS",189,0)
 . D FILE^DICN S DA=+Y
"RTN","VPRPATS",190,0)
 Q DA
"RTN","VPRPATS",191,0)
 ;
"RTN","VPRPATS",192,0)
ZFIND(URL) ; -- Return ien of URL in ^VPR
"RTN","VPRPATS",193,0)
 N NAME,DA S NAME=$G(URL)
"RTN","VPRPATS",194,0)
 S:NAME?1"http".E NAME=$P(NAME,"/",3) S:NAME[":" NAME=$P(NAME,":")
"RTN","VPRPATS",195,0)
 S DA=0 F  S DA=$O(^VPR(560,"B",NAME,DA)) Q:DA<1  I $G(^VPR(560,DA,.1))=URL Q
"RTN","VPRPATS",196,0)
 I DA<1 D  ;add
"RTN","VPRPATS",197,0)
 . N DO,DIC,X,Y
"RTN","VPRPATS",198,0)
 . S DIC="^VPR(560,",DIC(0)="F",X=NAME
"RTN","VPRPATS",199,0)
 . D FILE^DICN S DA=+Y
"RTN","VPRPATS",200,0)
 . S:DA>0 ^VPR(560,DA,.1)=URL
"RTN","VPRPATS",201,0)
 Q DA
"RTN","VPRPATS",202,0)
 ;
"RTN","VPRPATS",203,0)
RET(DFN,STS) ; -- add XML node for patient DFN update subscription
"RTN","VPRPATS",204,0)
 N Y S Y="<patient dfn='"_$G(DFN)
"RTN","VPRPATS",205,0)
 S Y=Y_"' subscribe='"_$G(STS)_"' />"
"RTN","VPRPATS",206,0)
 D ADD(Y)
"RTN","VPRPATS",207,0)
 Q
"RTN","VPRPATS",208,0)
 ;
"RTN","VPRPATS",209,0)
ADD(X) ; Add a line @VPR@(n)=X
"RTN","VPRPATS",210,0)
 S VPRI=$G(VPRI)+1
"RTN","VPRPATS",211,0)
 S @VPR@(VPRI)=X
"RTN","VPRPATS",212,0)
 Q
"RTN","VPRPRODC")
0^18^B2553308
"RTN","VPRPRODC",1,0)
VPRPRODC ;SLC/AGP - Environmental check for installations ;02/02/12
"RTN","VPRPRODC",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRPRODC",3,0)
 ;
"RTN","VPRPRODC",4,0)
 ;This routine will check to see if the user is in a production account
"RTN","VPRPRODC",5,0)
 ;if they are then the user will not be allowed to install this
"RTN","VPRPRODC",6,0)
 ;patch/build/bundle
"RTN","VPRPRODC",7,0)
 ;
"RTN","VPRPRODC",8,0)
ENV ;
"RTN","VPRPRODC",9,0)
 I $$PROD^XUPROD D
"RTN","VPRPRODC",10,0)
 .W !,"You are attempting to install this software into your production account.",!,"At this time, this software is not ready for a production install."
"RTN","VPRPRODC",11,0)
 .W !!,"Please verify the account you're attempting to install into and",!,"if you believe you're correct, contact Ron Massey or Tana Defa.",!!,"INSTALLATION ABORTED!"
"RTN","VPRPRODC",12,0)
 .S XPDABORT=1
"RTN","VPRPRODC",13,0)
 Q
"RTN","VPRPXRM")
0^60^B12244143
"RTN","VPRPXRM",1,0)
VPRPXRM ; SLC/AGP - Clinical Remidners routine. ; 8/16/12 7:09pm
"RTN","VPRPXRM",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRPXRM",3,0)
 Q
"RTN","VPRPXRM",4,0)
 ;
"RTN","VPRPXRM",5,0)
EVALLIST(RESULT,PT,USER,LOC) ;
"RTN","VPRPXRM",6,0)
 N CNT,NUM,RIEN,TMP,UID,VPRTMP,VPRSYS
"RTN","VPRPXRM",7,0)
 N DUEDATE,I,J,LASTDONE,NAME,NODE,STATUS,TXT
"RTN","VPRPXRM",8,0)
 ;S USER=$P(USERUID,":",5)
"RTN","VPRPXRM",9,0)
 D GETLIST^ORQQPX(.VPRTMP,LOC)
"RTN","VPRPXRM",10,0)
 S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRPXRM",11,0)
 S CNT=0,NUM=0 F  S CNT=$O(VPRTMP(CNT)) Q:CNT'>0  D
"RTN","VPRPXRM",12,0)
 .S RIEN=$G(VPRTMP(CNT)) I RIEN'>0 Q
"RTN","VPRPXRM",13,0)
 .S NAME="" S NAME=$P($G(^PXD(811.9,RIEN,0)),U,3)
"RTN","VPRPXRM",14,0)
 .I NAME="" S NAME=$P($G(^PXD(811.9,RIEN,0)),U)
"RTN","VPRPXRM",15,0)
 .S UID="urn:va:pxrm:"_VPRSYS_":"_RIEN
"RTN","VPRPXRM",16,0)
 .S NUM=NUM+1,TMP("reminders",NUM,"uid")=UID,TMP("reminders",NUM,"name")=NAME
"RTN","VPRPXRM",17,0)
 .K ^TMP("PXRHM",$J)
"RTN","VPRPXRM",18,0)
 .D MAIN^PXRM(PT,RIEN,5)     ; 5 returns all reminder info
"RTN","VPRPXRM",19,0)
 .S I=1,TXT=""
"RTN","VPRPXRM",20,0)
 .S NAME="",NAME=$O(^TMP("PXRHM",$J,RIEN,NAME)) Q:NAME=""  D
"RTN","VPRPXRM",21,0)
 ..S NODE=$G(^TMP("PXRHM",$J,RIEN,NAME))
"RTN","VPRPXRM",22,0)
 ..S STATUS=$P(NODE,U),DUEDATE=$$JSONDT^VPRUTILS($P(NODE,U,2)),LASTDONE=$$JSONDT^VPRUTILS($P(NODE,U,3))
"RTN","VPRPXRM",23,0)
 ..S J=0 F  S J=$O(^TMP("PXRHM",$J,RIEN,NAME,"TXT",J)) Q:J=""  D
"RTN","VPRPXRM",24,0)
 ...S TXT=$G(TXT)_^TMP("PXRHM",$J,RIEN,NAME,"TXT",J)_$C(13)_$C(10),I=I+1
"RTN","VPRPXRM",25,0)
 .K ^TMP("PXRHM",$J)
"RTN","VPRPXRM",26,0)
 .S TMP("reminders",NUM,"status")=STATUS
"RTN","VPRPXRM",27,0)
 .S TMP("reminders",NUM,"dueDate")=DUEDATE
"RTN","VPRPXRM",28,0)
 .S TMP("reminders",NUM,"lastDone")=LASTDONE
"RTN","VPRPXRM",29,0)
 .S TMP("reminders",NUM,"clinicalMaintenance")=TXT
"RTN","VPRPXRM",30,0)
 S TMP("success")="true"
"RTN","VPRPXRM",31,0)
 D ENCODE^VPRJSON("TMP","RESULT","ERROR")
"RTN","VPRPXRM",32,0)
 I $D(ERROR) D SETERROR(.TMP,.ERROR,.RESULT)
"RTN","VPRPXRM",33,0)
 Q
"RTN","VPRPXRM",34,0)
 ;
"RTN","VPRPXRM",35,0)
EVALREM(RESULT,PT,UID) ;return detail for a pt's clinical reminder
"RTN","VPRPXRM",36,0)
 K ^TMP("PXRHM",$J)
"RTN","VPRPXRM",37,0)
 N DUEDATE,I,J,LASTDONE,NAME,NODE,RIEN,STATUS,TMP,TXT
"RTN","VPRPXRM",38,0)
 S RIEN=$P(UID,":",5)
"RTN","VPRPXRM",39,0)
 D MAIN^PXRM(PT,RIEN,5)     ; 5 returns all reminder info
"RTN","VPRPXRM",40,0)
 S I=1,TXT=""
"RTN","VPRPXRM",41,0)
 S NAME="",NAME=$O(^TMP("PXRHM",$J,RIEN,NAME)) Q:NAME=""  D
"RTN","VPRPXRM",42,0)
 .S NODE=$G(^TMP("PXRHM",$J,RIEN,NAME))
"RTN","VPRPXRM",43,0)
 .S STATUS=$P(NODE,U),DUEDATE=$$JSONDT^VPRUTILS($P(NODE,U,2)),LASTDONE=$$JSONDT^VPRUTILS($P(NODE,U,3))
"RTN","VPRPXRM",44,0)
 .S J=0 F  S J=$O(^TMP("PXRHM",$J,RIEN,NAME,"TXT",J)) Q:J=""  D
"RTN","VPRPXRM",45,0)
 ..S TXT=$G(TXT)_^TMP("PXRHM",$J,RIEN,NAME,"TXT",J)_$C(13)_$C(10),I=I+1
"RTN","VPRPXRM",46,0)
 K ^TMP("PXRHM",$J)
"RTN","VPRPXRM",47,0)
 S TMP("uid")=UID
"RTN","VPRPXRM",48,0)
 S TMP("status")=STATUS
"RTN","VPRPXRM",49,0)
 S TMP("dueDate")=DUEDATE
"RTN","VPRPXRM",50,0)
 S TMP("lastDone")=LASTDONE
"RTN","VPRPXRM",51,0)
 S TMP("clinicalMaintenance")=TXT
"RTN","VPRPXRM",52,0)
 S TMP("success")="true"
"RTN","VPRPXRM",53,0)
 D ENCODE^VPRJSON("TMP","RESULT","ERROR")
"RTN","VPRPXRM",54,0)
 I $D(ERROR) D SETERROR(.TMP,.ERROR,.RESULT)
"RTN","VPRPXRM",55,0)
 Q
"RTN","VPRPXRM",56,0)
 ;
"RTN","VPRPXRM",57,0)
REMLIST(RESULT,USERUID,LOC) ;
"RTN","VPRPXRM",58,0)
 N CNT,NUM,RIEN,TMP,UID,USER,VPRTMP,VPRSYS
"RTN","VPRPXRM",59,0)
 S USER=$P(USERUID,":",5)
"RTN","VPRPXRM",60,0)
 D GETLIST^ORQQPX(.VPRTMP,LOC)
"RTN","VPRPXRM",61,0)
 S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRPXRM",62,0)
 S CNT=0,NUM=0 F  S CNT=$O(VPRTMP(CNT)) Q:CNT'>0  D
"RTN","VPRPXRM",63,0)
 .S RIEN=$G(VPRTMP(CNT)) I RIEN'>0 Q
"RTN","VPRPXRM",64,0)
 .S NAME="" S NAME=$P($G(^PXD(811.9,RIEN,0)),U,3)
"RTN","VPRPXRM",65,0)
 .I NAME="" S NAME=$P($G(^PXD(811.9,RIEN,0)),U)
"RTN","VPRPXRM",66,0)
 .S UID="urn:va:pxrm:"_VPRSYS_":"_RIEN
"RTN","VPRPXRM",67,0)
 .S NUM=NUM+1,TMP("reminders",NUM,"uid")=UID,TMP("reminders",NUM,"name")=NAME
"RTN","VPRPXRM",68,0)
 S TMP("success")="true"
"RTN","VPRPXRM",69,0)
 D ENCODE^VPRJSON("TMP","RESULT","ERROR")
"RTN","VPRPXRM",70,0)
 I $D(ERROR) D SETERROR(.TMP,.ERROR,.RESULT)
"RTN","VPRPXRM",71,0)
 Q
"RTN","VPRPXRM",72,0)
 ;
"RTN","VPRPXRM",73,0)
SETERROR(INPDATA,ERRORMSG,OUTPUT) ;
"RTN","VPRPXRM",74,0)
 N ERRARR,TXT
"RTN","VPRPXRM",75,0)
 S TXT(1)="Problem encoding json output"
"RTN","VPRPXRM",76,0)
 D SETERROR^VPRUTILS(.ERRARR,.ERRORMSG,.TXT,.INPDATA)
"RTN","VPRPXRM",77,0)
 D ENCODE^VPRJSON("ERRARR","OUTPUT","ERROR")
"RTN","VPRPXRM",78,0)
 Q
"RTN","VPRPXRM",79,0)
 ;
"RTN","VPRROS2")
0^13^B106516600
"RTN","VPRROS2",1,0)
VPRROS2 ;SLC/GRR -- Roster Management
"RTN","VPRROS2",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRROS2",3,0)
 ;; Compile Roster
"RTN","VPRROS2",4,0)
COMPILE(VPR,VPRIEN,VPROWNER) ;
"RTN","VPRROS2",5,0)
 ;; Input - VPRIEN is internal entry number of roster
"RTN","VPRROS2",6,0)
 ;;         VPROWNER - If this parameter exists, only rosters for this owner will be compiled and passed
"RTN","VPRROS2",7,0)
 ;; Output - AFTER array contains current patients
"RTN","VPRROS2",8,0)
 ;
"RTN","VPRROS2",9,0)
 K VPRLIST,VPRLIST2
"RTN","VPRROS2",10,0)
 N VPRLIST,VPRFILT,VPRTYPE,VPERR,VPRI,VPRRNAME,VPRY,VPROP,VPRTAG,VPRLAB,VPRNLIST,BEG,DOB,END,GENDER,ICN,NAME,VPRACT,VPRC
"RTN","VPRROS2",11,0)
 N VPRCIEN,VPRDNAME,VPRDOB,VPRIII,VPRINM,VPRLIEN,VPRNAME,VPROIEN,VPRONAME,VPROWNID,VPROWNNM,VPRPAT,VPRPIEN,VPRNME,VPRCNT
"RTN","VPRROS2",12,0)
 N VPRSRCDN,VPRCID,VPRTEXT,VPRTIEN,VPRTLST,VPRVER,VPRWIEN,VPRWNAME,VPRPNME,VPRRCNT,VPRSRCID,X,Y
"RTN","VPRROS2",13,0)
 K ^TMP($J,"VPROSTER")
"RTN","VPRROS2",14,0)
 S VPR=$NA(^TMP($J,"VPROSTER")),VPRNLIST=""
"RTN","VPRROS2",15,0)
 I $G(VPRIEN)="" S VPRIEN=0
"RTN","VPRROS2",16,0)
 S (VPRLIST,VPRFILT,VPRTYPE,VPROP,VPRLIST2,VPERR)="",VPRI=0
"RTN","VPRROS2",17,0)
 I $G(VPROWNER)'="" D MULTI Q VPR
"RTN","VPRROS2",18,0)
 I +$G(VPRIEN)'>0 S VPERR="0^Invalid Roster IEN" Q
"RTN","VPRROS2",19,0)
 S VPRRNAME=$P(^VPROSTER(VPRIEN,0),"^",1)
"RTN","VPRROS2",20,0)
 F  S VPRI=$O(^VPROSTER(VPRIEN,1,VPRI)) Q:VPRI'>0  D
"RTN","VPRROS2",21,0)
 . S VPRY=$G(^VPROSTER(VPRIEN,1,VPRI,0))
"RTN","VPRROS2",22,0)
 . S VPROP=$P(VPRY,"^",3)
"RTN","VPRROS2",23,0)
 . S VPRFILT=$P(VPRY,"^",4)
"RTN","VPRROS2",24,0)
 . S VPRTAG=$P($P(VPRY,"^",2),";",2)
"RTN","VPRROS2",25,0)
 . S VPRLAB=""
"RTN","VPRROS2",26,0)
 . I VPRTAG["SC(" S VPRLAB="CLIN"
"RTN","VPRROS2",27,0)
 . I VPRTAG["DIC(42" S VPRLAB="WARD"
"RTN","VPRROS2",28,0)
 . I VPRTAG["DPT" S VPRLAB="PAT"
"RTN","VPRROS2",29,0)
 . I VPRTAG["SCTM" S VPRLAB="PCMM"
"RTN","VPRROS2",30,0)
 . I VPRTAG["OR(100.21" S VPRLAB="CPRS"
"RTN","VPRROS2",31,0)
 . I VPRTAG["VPROSTER" S VPRLAB="ROST"
"RTN","VPRROS2",32,0)
 . I VPRTAG["DIC(45.7" S VPRLAB="SPEC"
"RTN","VPRROS2",33,0)
 . I VPRTAG["VA(200" S VPRLAB="PROV"
"RTN","VPRROS2",34,0)
 . I VPRTAG["PXRM(810.4" S VPRLAB="PXRM"
"RTN","VPRROS2",35,0)
 . I VPRLAB="" S VPERR="1^INVALID FILE TYPE" Q
"RTN","VPRROS2",36,0)
 . D @VPRLAB
"RTN","VPRROS2",37,0)
 . S VPRLAB=$S(VPROP=0:"UNION",VPROP=1:"INTER",1:"DIFF")
"RTN","VPRROS2",38,0)
 . S VPRNLIST=""
"RTN","VPRROS2",39,0)
 . D @VPRLAB
"RTN","VPRROS2",40,0)
 I $D(VPROUT) K VPROUT M VPRLIST2=VPRLIST Q
"RTN","VPRROS2",41,0)
 I $O(VPRLIST(0))'>0 S VPERR="1^EMPTY ROSTER",@VPR@(1)=VPERR Q
"RTN","VPRROS2",42,0)
 M AFTER=VPRLIST
"RTN","VPRROS2",43,0)
 D SEND
"RTN","VPRROS2",44,0)
 D ENROS^VPRFPTC(.ZZ,.VPRLIST) ;added 5/17/12 grr to check patient sensitivity
"RTN","VPRROS2",45,0)
 Q
"RTN","VPRROS2",46,0)
 ;
"RTN","VPRROS2",47,0)
CLIN ;Process patients for this clinic.  Select all if filter is null
"RTN","VPRROS2",48,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS2",49,0)
 I '$D(DT) S DT=$$DT^XLFDT()
"RTN","VPRROS2",50,0)
 S BEG=DT,END=$S(VPRFILT="T":DT+.24,1:9999999+.24),VPRIII=BEG
"RTN","VPRROS2",51,0)
 S VPRCIEN=+$P(VPRY,"^",2) F  S VPRIII=$O(^SC(VPRCIEN,"S",VPRIII)) Q:VPRIII'>0!(VPRIII>END)  D
"RTN","VPRROS2",52,0)
 . S VPRII=0 F  S VPRII=$O(^SC(VPRCIEN,"S",VPRIII,1,VPRII)) Q:VPRII'>0  S DFN=$P($G(^SC(VPRCIEN,"S",VPRIII,1,VPRII,0)),"^",1) I DFN>0 D
"RTN","VPRROS2",53,0)
 . .S VPRLIST2(DFN)=""
"RTN","VPRROS2",54,0)
 Q
"RTN","VPRROS2",55,0)
 ;
"RTN","VPRROS2",56,0)
WARD ;Process patients for this ward
"RTN","VPRROS2",57,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS2",58,0)
 S VPRWIEN=+$P(VPRY,"^",2),VPRWNAME=$P($G(^DIC(42,VPRWIEN,0)),"^",1)
"RTN","VPRROS2",59,0)
 S VPRIII=0 F  S VPRIII=$O(^DGPM("CN",VPRWNAME,VPRIII)) Q:VPRIII'>0  D
"RTN","VPRROS2",60,0)
 . S DFN=$P($G(^DGPM(VPRIII,0)),"^",3),VPRLIST2(DFN)=""
"RTN","VPRROS2",61,0)
 Q
"RTN","VPRROS2",62,0)
 ;
"RTN","VPRROS2",63,0)
PAT ;Process patient from Patient file Source
"RTN","VPRROS2",64,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS2",65,0)
 S DFN=+$P(VPRY,"^",2),VPRLIST2(DFN)=""
"RTN","VPRROS2",66,0)
 Q
"RTN","VPRROS2",67,0)
 ;
"RTN","VPRROS2",68,0)
PCMM ;Process patients from a PCMM team
"RTN","VPRROS2",69,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS2",70,0)
 S VPRTIEN=+$P(VPRY,"^",2),VPERR="",VPRTLST=""
"RTN","VPRROS2",71,0)
 D PTTM^SCAPMC(VPRTIEN,,"VPRTLST",VPERR)
"RTN","VPRROS2",72,0)
 S VPRIII="" F  S VPRIII=$O(VPRTLST(VPRIII)) Q:VPRIII'>0  S DFN=$P(VPRTLST(VPRIII),"^",1) S VPRLIST2(DFN)=""
"RTN","VPRROS2",73,0)
 Q
"RTN","VPRROS2",74,0)
 ;
"RTN","VPRROS2",75,0)
CPRS ;Process patients from CPRS Lists
"RTN","VPRROS2",76,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS2",77,0)
 S VPROIEN=+$P(VPRY,"^",2),VPERR=""
"RTN","VPRROS2",78,0)
 S VPRIII=0 F  S VPRIII=$O(^OR(100.21,VPROIEN,10,VPRIII)) Q:VPRIII'>0  S DFN=$P(^OR(100.21,VPROIEN,10,VPRIII,0),";",1) S VPRLIST2(DFN)=""
"RTN","VPRROS2",79,0)
 Q
"RTN","VPRROS2",80,0)
 ;
"RTN","VPRROS2",81,0)
ROST ;Process patients from selected roster
"RTN","VPRROS2",82,0)
 K VPRLIST2,VPRBLIST S (VPRLIST2,VPRBLIST)="" ; -- kcm added comma
"RTN","VPRROS2",83,0)
 N VPR,VPRIEN,VPERR
"RTN","VPRROS2",84,0)
 S VPRIEN=+$P(VPRY,"^",2),VPERR="",VPROUT=1,VPR="VPRBLIST"
"RTN","VPRROS2",85,0)
 D COMPILE^VPRROS2(.VPR,VPRIEN,"")
"RTN","VPRROS2",86,0)
 M VPRBLIST=VPRLIST2
"RTN","VPRROS2",87,0)
 K VPROUT
"RTN","VPRROS2",88,0)
 Q
"RTN","VPRROS2",89,0)
 ;
"RTN","VPRROS2",90,0)
SPEC ;Process patients with selected Treating Specialty
"RTN","VPRROS2",91,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS2",92,0)
 S VPROIEN=+$P(VPRY,"^",2),VPERR=""
"RTN","VPRROS2",93,0)
 N DFN S DFN=0 F  S DFN=$O(^DPT("ATR",VPROIEN,DFN)) Q:DFN'>0  S VPRLIST2(DFN)=""
"RTN","VPRROS2",94,0)
 Q
"RTN","VPRROS2",95,0)
 ;
"RTN","VPRROS2",96,0)
PROV ;Process patients for selected provider
"RTN","VPRROS2",97,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS2",98,0)
 S VPRPIEN=+$P(VPRY,"^",2),VPERR=""
"RTN","VPRROS2",99,0)
 N DFN S DFN=0 F  S DFN=$O(^DPT("APR",VPRPIEN,DFN)) Q:DFN'>0  S VPRLIST2(DFN)=""
"RTN","VPRROS2",100,0)
 Q
"RTN","VPRROS2",101,0)
 ;
"RTN","VPRROS2",102,0)
PXRM ;Process patients for selected panel
"RTN","VPRROS2",103,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS2",104,0)
 S VPRPIEN=+$P(VPRY,"^",2),VPERR=""
"RTN","VPRROS2",105,0)
 S VPRC=VPRPIEN,VPRLIEN=$P(^VPROSTER(VPRIEN,0),"^",1),VPRPNME=$P(^VPROSTER(VPRIEN,0),"^",6) I VPRPNME="" S VPRPNME=VPRRNAME,$P(^VPROSTER(VPRIEN,0),U,6)=VPRRNAME
"RTN","VPRROS2",106,0)
 S VPRPAT="" D RUNLIST^VPRROS5(.VPRPAT,VPRLIEN,VPRPNME,0,1)
"RTN","VPRROS2",107,0)
 S VPRII=0 F  S VPRII=$O(VPRPAT(VPRC,VPRII)) Q:VPRII'>0  S DFN=VPRPAT(VPRC,VPRII),VPRLIST2(DFN)=""
"RTN","VPRROS2",108,0)
 Q
"RTN","VPRROS2",109,0)
 ;
"RTN","VPRROS2",110,0)
UNION ;Add to existing list
"RTN","VPRROS2",111,0)
 S VPRII=0 F  S VPRII=$O(VPRLIST2(VPRII)) Q:VPRII'>0  S VPRLIST(VPRII)=""
"RTN","VPRROS2",112,0)
 Q
"RTN","VPRROS2",113,0)
 ;
"RTN","VPRROS2",114,0)
INTER ;Intersect with existing list
"RTN","VPRROS2",115,0)
 S VPRII=0 F  S VPRII=$O(VPRLIST(VPRII)) Q:VPRII'>0  D
"RTN","VPRROS2",116,0)
 . I '$D(VPRLIST2(VPRII)) K VPRLIST(VPRII)
"RTN","VPRROS2",117,0)
 Q
"RTN","VPRROS2",118,0)
 ;
"RTN","VPRROS2",119,0)
DIFF ;Remove patients from this source that we have so far
"RTN","VPRROS2",120,0)
 S VPRII=0 F  S VPRII=$O(VPRLIST2(VPRII)) Q:VPRII'>0  D
"RTN","VPRROS2",121,0)
 . K VPRLIST(VPRII)
"RTN","VPRROS2",122,0)
 Q
"RTN","VPRROS2",123,0)
 ;
"RTN","VPRROS2",124,0)
SEND ;send pending rosters.  Called through RPC
"RTN","VPRROS2",125,0)
 S VPRRCNT=0,VPRI=0,VPRII=0
"RTN","VPRROS2",126,0)
 S VPRVER="<results version='"_$P($T(VPRROS2+1),";",3)_"'>"
"RTN","VPRROS2",127,0)
 D ADD(VPRVER)
"RTN","VPRROS2",128,0)
 S VPRRNAME=$P(^VPROSTER(VPRIEN,0),"^",1),VPRDNAME=$P(^VPROSTER(VPRIEN,0),"^",2),VPRRNAME=$$ESC^VPRD(VPRRNAME),VPRDNAME=$$ESC^VPRD(VPRDNAME)
"RTN","VPRROS2",129,0)
 S VPRTEXT="<roster ien='"_VPRIEN_"'>" D ADD(VPRTEXT)
"RTN","VPRROS2",130,0)
 S VPRTEXT="<rosterName>"_VPRRNAME_"</rosterName>" D ADD(VPRTEXT)
"RTN","VPRROS2",131,0)
 S VPRTEXT="<displayName>"_VPRDNAME_"</displayName>" D ADD(VPRTEXT)
"RTN","VPRROS2",132,0)
 D ADD("<patients>")
"RTN","VPRROS2",133,0)
 K VPRII S VPRII=0 F  S VPRII=$O(VPRLIST(VPRII)) Q:VPRII'>0  D
"RTN","VPRROS2",134,0)
 . N VPRY
"RTN","VPRROS2",135,0)
 . S DFN=VPRII,VPRY=$G(^DPT(DFN,0))
"RTN","VPRROS2",136,0)
 . S ICN=$$GETICN^MPIF001(DFN)
"RTN","VPRROS2",137,0)
 . S NAME=$P(VPRY,"^",1),GENDER=$P(VPRY,"^",2),DOB=$P(VPRY,"^",3),SSN=$P(VPRY,"^",9),VPRDOB=$$FMTHL7^XLFDT(DOB)
"RTN","VPRROS2",138,0)
 . S Y="<patient name='"_NAME_"' gender='"_GENDER_"' dob='"_VPRDOB_"' ssn='"_SSN_"' id='"_DFN_$S(ICN:"' icn='"_ICN,1:"")_"' />" D ADD(Y)
"RTN","VPRROS2",139,0)
 D ADD("</patients>")
"RTN","VPRROS2",140,0)
 D ADD("</roster>")
"RTN","VPRROS2",141,0)
 S VPRTEXT="</results>" D ADD(VPRTEXT)
"RTN","VPRROS2",142,0)
 Q
"RTN","VPRROS2",143,0)
 ;
"RTN","VPRROS2",144,0)
ADD(X) ; -- Add a line @VPR@(n)=X
"RTN","VPRROS2",145,0)
 S VPRI=$G(VPRI)+1
"RTN","VPRROS2",146,0)
 S @VPR@(VPRI)=X
"RTN","VPRROS2",147,0)
 Q
"RTN","VPRROS2",148,0)
 ;
"RTN","VPRROS2",149,0)
GETROS(VPR,VPRFILT) ;; Get all Rosters
"RTN","VPRROS2",150,0)
 ;; Input - None
"RTN","VPRROS2",151,0)
 N VPRLIST,VPRTYPE,VPERR,VPRI,VPRRNAME,VPRY,VPROP,VPRTAG,VPRLAB,VPRNLIST,BEG,DOB,END,GENDER,ICN,NAME,VPRACT,VPRC
"RTN","VPRROS2",152,0)
 N VPRCIEN,VPRDNAME,VPRDOB,VPRIII,VPRINM,VPRLIEN,VPRNAME,VPROIEN,VPRONAME,VPROWNID,VPROWNNM,VPRPAT,VPRPIEN,VPRNME,VPRCNT
"RTN","VPRROS2",153,0)
 N VPRSRCDN,VPRCID,VPRTEXT,VPRTIEN,VPRTLST,VPRVER,VPRWIEN,VPRWNAME,VPRPNME,VPRRCNT,VPRSRCID,X,Y
"RTN","VPRROS2",154,0)
 K VPRLIST
"RTN","VPRROS2",155,0)
 S (VPRLIST,VPRNAME,VPRTYPE,VPROP,VPRLIST2)="",VPRI=0,VPRIEN=0
"RTN","VPRROS2",156,0)
 S VPRACT="I 1"
"RTN","VPRROS2",157,0)
 K ^TMP($J,"VPROSTER")
"RTN","VPRROS2",158,0)
 S VPR=$NA(^TMP($J,"VPROSTER"))
"RTN","VPRROS2",159,0)
 S VPRVER="<results version='"_$P($T(VPRROS2+1),";",3)_"'>"
"RTN","VPRROS2",160,0)
 D ADD(VPRVER)
"RTN","VPRROS2",161,0)
 S VPRNAME="",VPRFILT=$G(VPRFILT)
"RTN","VPRROS2",162,0)
 I VPRFILT'="" S X=VPRFILT X ^%ZOSF("UPPERCASE") S VPRFILT=X,VPRNAME="",VPRACT="I VPRNAME[VPRFILT"
"RTN","VPRROS2",163,0)
 F  S VPRNAME=$O(^VPROSTER("B",VPRNAME)) Q:VPRNAME=""  S X=VPRNAME X ^%ZOSF("UPPERCASE") X VPRACT D
"RTN","VPRROS2",164,0)
 . S VPRIEN=0 F  S VPRIEN=$O(^VPROSTER("B",VPRNAME,VPRIEN)) Q:VPRIEN'>0  I '$P(^VPROSTER(VPRIEN,0),"^",3)!($P($G(^VPROSTER(VPRIEN,3)),"^",1)']"") X VPRACT I  D 
"RTN","VPRROS2",165,0)
 . . S VPRONAME=$$ESC^VPRD(VPRNAME),VPRDNAME=$P(^VPROSTER(VPRIEN,0),"^",2),VPRDNAME=$$ESC^VPRD(VPRDNAME)
"RTN","VPRROS2",166,0)
 . . S VPROWNID=$P(^VPROSTER(VPRIEN,0),"^",4),VPROWNNM=$P($G(^VA(200,VPROWNID,0)),"^",1),VPROWNNM=$$ESC^VPRD(VPROWNNM)
"RTN","VPRROS2",167,0)
 . . S VPRTEXT="<roster ien='"_VPRIEN_"'  ownername='"_VPROWNNM_"'  ownerid='"_VPROWNID_"'>" D ADD(VPRTEXT)
"RTN","VPRROS2",168,0)
 . . S VPRTEXT="<rosterName>"_VPRONAME_"</rosterName>" D ADD(VPRTEXT)
"RTN","VPRROS2",169,0)
 . . S VPRTEXT="<displayName>"_VPRDNAME_"</displayName>" D ADD(VPRTEXT)
"RTN","VPRROS2",170,0)
 . . S VPRTEXT="<sources>" D ADD(VPRTEXT)
"RTN","VPRROS2",171,0)
 . . N VPRII,VPRAS S VPRII=0 F  S VPRII=$O(^VPROSTER(VPRIEN,1,"AS",VPRII)) Q:VPRII'>0  S VPRAS=$O(^VPROSTER(VPRIEN,1,"AS",VPRII,0)) D
"RTN","VPRROS2",172,0)
 . . . N VPRSEQ,VPRSRC,VPRTYP,VPROP,VPRY,VPRSRCNM
"RTN","VPRROS2",173,0)
 . . . S VPRY=$G(^VPROSTER(VPRIEN,1,VPRAS,0))
"RTN","VPRROS2",174,0)
 . . . S VPRSRC=$P($P(VPRY,"^",2),";",2)
"RTN","VPRROS2",175,0)
 . . . S VPRSEQ=VPRII
"RTN","VPRROS2",176,0)
 . . . I VPRSRC["SC(" S VPRSRCNM="Clinic"
"RTN","VPRROS2",177,0)
 . . . I VPRSRC["DIC(42," S VPRSRCNM="Ward"
"RTN","VPRROS2",178,0)
 . . . I VPRSRC["DPT(" S VPRSRCNM="Patient"
"RTN","VPRROS2",179,0)
 . . . I VPRSRC["SCTM" S VPRSRCNM="PCMM Team"
"RTN","VPRROS2",180,0)
 . . . I VPRSRC["OR(100.21" S VPRSRCNM="OE/RR"
"RTN","VPRROS2",181,0)
 . . . I VPRSRC["VPROSTER" S VPRSRCNM="VPR Roster"
"RTN","VPRROS2",182,0)
 . . . I VPRSRC["DIC(45.7" S VPRSRCNM="Specialty"
"RTN","VPRROS2",183,0)
 . . . I VPRSRC["VA(200," S VPRSRCNM="Provider"
"RTN","VPRROS2",184,0)
 . . . I VPRSRC["PXRM(810.4," S VPRSRCNM="PXRM"
"RTN","VPRROS2",185,0)
 . . . S VPRSRCID=+$P(VPRY,"^",2),VPRSRCDN="^"_VPRSRC_VPRSRCID_",0)",VPRINM=$P(@VPRSRCDN,"^",1),VPRINM=$$ESC^VPRD(VPRINM)
"RTN","VPRROS2",186,0)
 . . . S VPROP=$S($P(VPRY,"^",3)=0:"Union",$P(VPRY,"^",3)=1:"Intersection",$P(VPRY,"^",3)=2:"Difference",1:"Invalid")
"RTN","VPRROS2",187,0)
 . . . S VPRTEXT="<source sequence='"_VPRSEQ_"'  type='"_VPRSRCNM_"'  name='"_VPRINM_"'  id='"_VPRSRCID_"'  operation='"_VPROP_"' />" D ADD(VPRTEXT)
"RTN","VPRROS2",188,0)
 . . S VPRTEXT="</sources>" D ADD(VPRTEXT)
"RTN","VPRROS2",189,0)
 . . S VPRTEXT="</roster>" D ADD(VPRTEXT)
"RTN","VPRROS2",190,0)
 S VPRTEXT="</results>" D ADD(VPRTEXT)
"RTN","VPRROS2",191,0)
 Q
"RTN","VPRROS2",192,0)
 ;
"RTN","VPRROS2",193,0)
MULTI ;;Process multiple rosters
"RTN","VPRROS2",194,0)
 I $O(^VPROSTER("AC",VPROWNER,0))'>0 S VPERR="1^EMPTY ROSTER",@VPR@(1)=VPERR Q
"RTN","VPRROS2",195,0)
 S VPRRCNT=0,VPRI=0,VPRII=0,VPRIII=0
"RTN","VPRROS2",196,0)
 S VPRVER="<results version='"_$P($T(VPRROS2+1),";",3)_"'>"
"RTN","VPRROS2",197,0)
 D ADD(VPRVER)
"RTN","VPRROS2",198,0)
 F  S VPRIEN=$O(^VPROSTER("AC",VPROWNER,VPRIEN)) Q:VPRIEN'>0  D
"RTN","VPRROS2",199,0)
 .S VPRRNAME=$P(^VPROSTER(VPRIEN,0),"^",1),VPRDNAME=$P(^VPROSTER(VPRIEN,0),"^",2)
"RTN","VPRROS2",200,0)
 .S VPRTEXT="<roster ien='"_VPRIEN_"'>" D ADD(VPRTEXT)
"RTN","VPRROS2",201,0)
 .S VPRTEXT="<rosterName>"_VPRRNAME_"</rosterName>" D ADD(VPRTEXT)
"RTN","VPRROS2",202,0)
 .S VPRTEXT="<displayName>"_VPRDNAME_"</displayName>" D ADD(VPRTEXT)
"RTN","VPRROS2",203,0)
 . S VPRIII=0 F  S VPRIII=$O(^VPROSTER(VPRIEN,1,VPRIII)) Q:VPRIII'>0  D
"RTN","VPRROS2",204,0)
 .. S VPRY=$G(^VPROSTER(VPRIEN,1,VPRIII,0))
"RTN","VPRROS2",205,0)
 .. S VPROP=$P(VPRY,"^",3)
"RTN","VPRROS2",206,0)
 .. S VPRFILT=$P(VPRY,"^",4)
"RTN","VPRROS2",207,0)
 .. S VPRTAG=$P($P(VPRY,"^",2),";",2)
"RTN","VPRROS2",208,0)
 .. S VPRLAB=""
"RTN","VPRROS2",209,0)
 .. I VPRTAG["SC(" S VPRLAB="CLIN"
"RTN","VPRROS2",210,0)
 .. I VPRTAG["DIC(42" S VPRLAB="WARD"
"RTN","VPRROS2",211,0)
 .. I VPRTAG["DPT" S VPRLAB="PAT"
"RTN","VPRROS2",212,0)
 .. I VPRTAG["SCTM" S VPRLAB="PCMM"
"RTN","VPRROS2",213,0)
 .. I VPRTAG["OR(100.21" S VPRLAB="CPRS"
"RTN","VPRROS2",214,0)
 .. I VPRTAG["VPROSTER" S VPRLAB="ROST"
"RTN","VPRROS2",215,0)
 .. I VPRTAG["DIC(45.7" S VPRLAB="SPEC"
"RTN","VPRROS2",216,0)
 .. I VPRTAG["VA(200" S VPRLAB="PROV"
"RTN","VPRROS2",217,0)
 .. I VPRTAG["PXRM(810.4," S VPRLAB="PXRM"
"RTN","VPRROS2",218,0)
 .. I VPRLAB="" S VPERR="1^INVALID FILE TYPE" Q
"RTN","VPRROS2",219,0)
 .. D @VPRLAB
"RTN","VPRROS2",220,0)
 .. S VPRLAB=$S(VPROP=0:"UNION",VPROP=1:"INTER",1:"DIFF")
"RTN","VPRROS2",221,0)
 .. D @VPRLAB
"RTN","VPRROS2",222,0)
 . D FORMAT
"RTN","VPRROS2",223,0)
 . I $O(VPRLIST(0))'>0 S VPERR="1^EMPTY ROSTER",@VPR@(1)=VPERR Q
"RTN","VPRROS2",224,0)
 . D ENROS^VPRFPTC(.ZZ,VPRLIST) ;added 5/17/12 grr to check patient sensitivity
"RTN","VPRROS2",225,0)
 . I $D(VPROUT) K VPROUT M @VPR=VPRLIST Q
"RTN","VPRROS2",226,0)
 S VPRTEXT="</results>" D ADD(VPRTEXT)
"RTN","VPRROS2",227,0)
 Q
"RTN","VPRROS2",228,0)
 ;;
"RTN","VPRROS2",229,0)
FORMAT ;;
"RTN","VPRROS2",230,0)
 D ADD("<patients>")
"RTN","VPRROS2",231,0)
 K VPRII S VPRII=0 F  S VPRII=$O(VPRLIST(VPRII)) Q:VPRII'>0  D
"RTN","VPRROS2",232,0)
 . N VPRY
"RTN","VPRROS2",233,0)
 . S DFN=VPRII,VPRY=^DPT(DFN,0)
"RTN","VPRROS2",234,0)
 . S ICN=$$GETICN^MPIF001(DFN)
"RTN","VPRROS2",235,0)
 . S NAME=$P(VPRY,"^",1),GENDER=$P(VPRY,"^",2),DOB=$P(VPRY,"^",3),VPRDOB=$$FMTHL7^XLFDT(DOB),SSN=$P(VPRY,"^",9)
"RTN","VPRROS2",236,0)
 . S Y="<patient name='"_NAME_"' gender='"_GENDER_"' dob='"_VPRDOB_"' ssn='"_SSN_"' id='"_DFN_$S(ICN:"' icn='"_ICN,1:"")_"' />" D ADD(Y)
"RTN","VPRROS2",237,0)
 D ADD("</patients>")
"RTN","VPRROS2",238,0)
 D ADD("</roster>")
"RTN","VPRROS2",239,0)
 K Y
"RTN","VPRROS2",240,0)
 Q
"RTN","VPRROS2",241,0)
 ;;
"RTN","VPRROS3")
0^14^B86684006
"RTN","VPRROS3",1,0)
VPRROS3 ;SLC/GRR -- Roster Management ;4/24/2012
"RTN","VPRROS3",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;AUG 17, 2011;Build 283
"RTN","VPRROS3",3,0)
PREVIEW(VPR,VPRARRAY) ;; Previews what a roster would look like as defined
"RTN","VPRROS3",4,0)
 ;;  Called by the GUI Roster Builder
"RTN","VPRROS3",5,0)
 ;; Input - VPRARRAY - contains roster data entered thru GUI
"RTN","VPRROS3",6,0)
 K VPRLIST,VPRLIST2
"RTN","VPRROS3",7,0)
 N %,BEG,DA,DIDEL,DIE,DOB,SSN,DR,END,GENDER,ICN,NAME,VPRC,VPRCIEN,VPRDIS,VPRDNAME,VPRDOB,VPRDT,VPRIII,VPRLIEN,VPROIEN,VPROWNID
"RTN","VPRROS3",8,0)
 N VPROWNNM,VPRPAT,VPRPIEN,VPRPNME,VPRRCNT,VPRRID,VPRTEXT,VPRTIEN,VPRLST,VPRVAR,VPRVER,VPRWIEN,VPRWNAME,VPRZ,X,Y
"RTN","VPRROS3",9,0)
 N VPRFILT,VPRI,VPRNLIST,VPRSRCID,VPRTAG,VPRTLST,VPRY,VPRTYPE,ZZ
"RTN","VPRROS3",10,0)
 N VPRSYS S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRROS3",11,0)
 S (VPRLIST,VPRFILT,VPRTYPE,VPROP,VPRLIST2,VPERR)="",VPRI=0
"RTN","VPRROS3",12,0)
 S VPR=$NA(^TMP($J,"VPROSTER")) ; kcm -- moved this here so VPR gets defined
"RTN","VPRROS3",13,0)
 K ^TMP($J,"VPROSTER")
"RTN","VPRROS3",14,0)
 I $O(VPRARRAY(""))="" S @VPR@(1)="0^No roster data passed" Q
"RTN","VPRROS3",15,0)
 Q:'$$VALIDATE
"RTN","VPRROS3",16,0)
 D NOW^%DTC S VPRDT=%
"RTN","VPRROS3",17,0)
 S VPRZ="" S VPRZ=$O(VPRARRAY(VPRZ)) I VPRZ="" Q
"RTN","VPRROS3",18,0)
 S VPRNLIST=""
"RTN","VPRROS3",19,0)
 S VPRRNAME=$P(VPRARRAY(VPRZ),"^",1),VPRRNAME=$$ESC^VPRD(VPRRNAME)
"RTN","VPRROS3",20,0)
 S VPRDNAME=$P(VPRARRAY(VPRZ),"^",3),VPRDNAME=$$ESC^VPRD(VPRDNAME)
"RTN","VPRROS3",21,0)
 S VPRDIS=$P(VPRARRAY(VPRZ),"^",4)
"RTN","VPRROS3",22,0)
 S VPROWNID=$P(VPRARRAY(VPRZ),"^",5)
"RTN","VPRROS3",23,0)
 S VPROWNNM=$P($G(^VA(200,VPROWNID,0)),"^",1),VPROWNNM=$$ESC^VPRD(VPROWNNM)
"RTN","VPRROS3",24,0)
 F  S VPRZ=$O(VPRARRAY(VPRZ)) Q:VPRZ=""  D
"RTN","VPRROS3",25,0)
 . S VPRY=VPRARRAY(VPRZ)
"RTN","VPRROS3",26,0)
 . S VPROP=$P(VPRY,"^",2)
"RTN","VPRROS3",27,0)
 . S VPRTAG=$P(VPRY,"^",1)
"RTN","VPRROS3",28,0)
 . S VPRLAB=""
"RTN","VPRROS3",29,0)
 . I VPRTAG["Clinic" S VPRLAB="CLIN"
"RTN","VPRROS3",30,0)
 . I VPRTAG["Ward" S VPRLAB="WARD"
"RTN","VPRROS3",31,0)
 . I VPRTAG["Patient" S VPRLAB="PAT"
"RTN","VPRROS3",32,0)
 . I VPRTAG["PCMM Team" S VPRLAB="PCMM"
"RTN","VPRROS3",33,0)
 . I VPRTAG["OE/RR" S VPRLAB="CPRS"
"RTN","VPRROS3",34,0)
 . I VPRTAG["VPR Roster" S VPRLAB="ROST"
"RTN","VPRROS3",35,0)
 . I VPRTAG["Specialty" S VPRLAB="SPEC"
"RTN","VPRROS3",36,0)
 . I VPRTAG["Provider" S VPRLAB="PROV"
"RTN","VPRROS3",37,0)
 . I VPRTAG["PXRM" S VPRLAB="PXRM"
"RTN","VPRROS3",38,0)
 . I VPRLAB="" S @VPR@(1)="1^INVALID FILE TYPE" Q
"RTN","VPRROS3",39,0)
 . D @VPRLAB
"RTN","VPRROS3",40,0)
 . S VPRLAB=$S(VPROP="UNION":"UNION",VPROP="Intersection":"INTER",1:"DIFF")
"RTN","VPRROS3",41,0)
 . S VPRNLIST=""
"RTN","VPRROS3",42,0)
 . D @VPRLAB
"RTN","VPRROS3",43,0)
 I $D(VPROUT) K VPROUT M VPRLIST2=VPRLIST Q
"RTN","VPRROS3",44,0)
 I $O(VPRLIST(0))'>0 S @VPR@(1)="1^EMPTY ROSTER" Q
"RTN","VPRROS3",45,0)
 D SEND
"RTN","VPRROS3",46,0)
 D ENROS^VPRFPTC(.ZZ,VPRLIST) ;added 5/17/12 grr to check patient sensitivity
"RTN","VPRROS3",47,0)
 Q
"RTN","VPRROS3",48,0)
 ;
"RTN","VPRROS3",49,0)
CLIN ;Process patients for this clinic.  Select all if filter is null
"RTN","VPRROS3",50,0)
 K VPRLIST2,VPROUT S VPRLIST2=""
"RTN","VPRROS3",51,0)
 I '$D(DT) S DT=$$DT^XLFDT()
"RTN","VPRROS3",52,0)
 S BEG=DT,END=$S(VPRFILT="T":DT+.24,1:9999999+.24),VPRIII=BEG
"RTN","VPRROS3",53,0)
 S VPRCIEN=+$P(VPRY,"^",3) F  S VPRIII=$O(^SC(VPRCIEN,"S",VPRIII)) Q:VPRIII'>0!(VPRIII>END)  D
"RTN","VPRROS3",54,0)
 . S VPRII=0 F  S VPRII=$O(^SC(VPRCIEN,"S",VPRIII,1,VPRII)) Q:VPRII'>0  S DFN=$P($G(^SC(VPRCIEN,"S",VPRIII,1,VPRII,0)),"^",1) I DFN>0 D
"RTN","VPRROS3",55,0)
 . .S VPRLIST2(DFN)=""
"RTN","VPRROS3",56,0)
 Q
"RTN","VPRROS3",57,0)
 ;
"RTN","VPRROS3",58,0)
WARD ;Process patients for this ward
"RTN","VPRROS3",59,0)
 K VPRLIST2,VPROUT S VPRLIST2=""
"RTN","VPRROS3",60,0)
 S VPRWIEN=+$P(VPRY,"^",3),VPRWNAME=$P($G(^DIC(42,VPRWIEN,0)),"^",1)
"RTN","VPRROS3",61,0)
 S VPRIII=0 F  S VPRIII=$O(^DGPM("CN",VPRWNAME,VPRIII)) Q:VPRIII'>0  D
"RTN","VPRROS3",62,0)
 . S DFN=$P($G(^DGPM(VPRIII,0)),"^",3),VPRLIST2(DFN)=""
"RTN","VPRROS3",63,0)
 Q
"RTN","VPRROS3",64,0)
 ;
"RTN","VPRROS3",65,0)
PAT ;Process patient from Patient file Source
"RTN","VPRROS3",66,0)
 K VPRLIST2,VPROUT S VPRLIST2=""
"RTN","VPRROS3",67,0)
 S DFN=+$P(VPRY,"^",3),VPRLIST2(DFN)=""
"RTN","VPRROS3",68,0)
 Q
"RTN","VPRROS3",69,0)
 ;
"RTN","VPRROS3",70,0)
PCMM ;Process patients from a PCMM team
"RTN","VPRROS3",71,0)
 K VPRLIST2,VPROUT S VPRLIST2=""
"RTN","VPRROS3",72,0)
 S VPRTIEN=+$P(VPRY,"^",3),VPERR="",VPRTLST=""
"RTN","VPRROS3",73,0)
 D PTTM^SCAPMC(VPRTIEN,,"VPRTLST",VPERR)
"RTN","VPRROS3",74,0)
 S VPRIII="" F  S VPRIII=$O(VPRTLST(VPRIII)) Q:VPRIII'>0  S DFN=$P(VPRTLST(VPRIII),"^",1) S VPRLIST2(DFN)=""
"RTN","VPRROS3",75,0)
 Q
"RTN","VPRROS3",76,0)
 ;
"RTN","VPRROS3",77,0)
CPRS ;Process patients from CPRS Lists
"RTN","VPRROS3",78,0)
 K VPRLIST2,VPROUT S VPRLIST2=""
"RTN","VPRROS3",79,0)
 S VPROIEN=+$P(VPRY,"^",3),VPERR=""
"RTN","VPRROS3",80,0)
 S VPRIII=0 F  S VPRIII=$O(^OR(100.21,VPROIEN,10,VPRIII)) Q:VPRIII'>0  S DFN=$P(^OR(100.21,VPROIEN,10,VPRIII,0),";",1) S VPRLIST2(DFN)=""
"RTN","VPRROS3",81,0)
 Q
"RTN","VPRROS3",82,0)
 ;
"RTN","VPRROS3",83,0)
ROST ;Process patients from selected roster
"RTN","VPRROS3",84,0)
 N VPR,VPRIEN,VPERR
"RTN","VPRROS3",85,0)
 S VPRIEN=+$P(VPRY,"^",3),VPERR="",VPROUT=1
"RTN","VPRROS3",86,0)
 D COMPILE^VPRROS2(.VPR,VPRIEN,"")
"RTN","VPRROS3",87,0)
 M VPRLIST=VPRLIST2
"RTN","VPRROS3",88,0)
 K VPROUT
"RTN","VPRROS3",89,0)
 Q
"RTN","VPRROS3",90,0)
 ;
"RTN","VPRROS3",91,0)
SPEC ;Process patients with selected Treating Specialty
"RTN","VPRROS3",92,0)
 K VPRLIST2,VPROUT S VPRLIST2=""
"RTN","VPRROS3",93,0)
 S VPROIEN=+$P(VPRY,"^",3),VPERR=""
"RTN","VPRROS3",94,0)
 N DFN S DFN=0 F  S DFN=$O(^DPT("ATR",VPROIEN,DFN)) Q:DFN'>0  S VPRLIST2(DFN)=""
"RTN","VPRROS3",95,0)
 Q
"RTN","VPRROS3",96,0)
 ;
"RTN","VPRROS3",97,0)
PROV ;Process patients for selected provider
"RTN","VPRROS3",98,0)
 K VPRLIST2,VPROUT S VPRLIST2=""
"RTN","VPRROS3",99,0)
 S VPRPIEN=+$P(VPRY,"^",3),VPERR=""
"RTN","VPRROS3",100,0)
 N DFN S DFN=0 F  S DFN=$O(^DPT("APR",VPRPIEN,DFN)) Q:DFN'>0  S VPRLIST2(DFN)=""
"RTN","VPRROS3",101,0)
 Q
"RTN","VPRROS3",102,0)
 ;
"RTN","VPRROS3",103,0)
PXRM ;Process patients for selected panel
"RTN","VPRROS3",104,0)
 K VPRLIST2,VPROUT,VPRPAT,VPRRIEN S VPRLIST2=""
"RTN","VPRROS3",105,0)
 S VPRPIEN=+$P(VPRY,"^",3),VPERR="",VPRLIEN=$P($G(^PXRM(810.4,VPRPIEN,0)),"^",1) I VPRLIEN="" S @VPR@(1)="Invalid PXRM" Q
"RTN","VPRROS3",106,0)
 ;S VPRRIEN=$O(^VPROSTER("B",VPRRNAME,"")) I VPRRIEN'>0 S @VPR@(1)="Invalid PXRM" Q
"RTN","VPRROS3",107,0)
 ;S VPRPNME=$P(^VPROSTER(VPRRIEN,0),"^",6)
"RTN","VPRROS3",108,0)
 S VPRC=VPRPIEN
"RTN","VPRROS3",109,0)
 S VPRPAT="" D RUNLIST^VPRROS5(.VPRPAT,VPRPIEN,VPRRNAME,0,1)
"RTN","VPRROS3",110,0)
 S VPRII=0 F  S VPRII=$O(VPRPAT(VPRC,VPRII)) Q:VPRII'>0  S DFN=VPRPAT(VPRC,VPRII),VPRLIST2(DFN)=""
"RTN","VPRROS3",111,0)
 Q
"RTN","VPRROS3",112,0)
 ;
"RTN","VPRROS3",113,0)
UNION ;Add to existing list
"RTN","VPRROS3",114,0)
 S VPRII=0 F  S VPRII=$O(VPRLIST2(VPRII)) Q:VPRII'>0  S VPRLIST(VPRII)=""
"RTN","VPRROS3",115,0)
 Q
"RTN","VPRROS3",116,0)
 ;
"RTN","VPRROS3",117,0)
INTER ;Intersect with existing list
"RTN","VPRROS3",118,0)
 S VPRII=0 F  S VPRII=$O(VPRLIST(VPRII)) Q:VPRII'>0  D
"RTN","VPRROS3",119,0)
 . I '$D(VPRLIST2(VPRII)) K VPRLIST(VPRII)
"RTN","VPRROS3",120,0)
 Q
"RTN","VPRROS3",121,0)
 ;
"RTN","VPRROS3",122,0)
DIFF ;Remove patients from this source that we have so far or add new one
"RTN","VPRROS3",123,0)
 S VPRII=0 F  S VPRII=$O(VPRLIST2(VPRII)) Q:VPRII'>0  D
"RTN","VPRROS3",124,0)
 . I '$D(VPRLIST(VPRII)) S VPRLIST(VPRII)=""
"RTN","VPRROS3",125,0)
 . E  K VPRLIST(VPRII)
"RTN","VPRROS3",126,0)
 Q
"RTN","VPRROS3",127,0)
 ;
"RTN","VPRROS3",128,0)
SEND ;send pending rosters.  Called through RPC
"RTN","VPRROS3",129,0)
 S VPRRCNT=0,VPRI=0,VPRII=0
"RTN","VPRROS3",130,0)
 S VPRVER="<results version='"_$P($T(VPRROS3+1),";",3)_"'>"
"RTN","VPRROS3",131,0)
 D ADD(VPRVER)
"RTN","VPRROS3",132,0)
 ;S VPRRNAME=$P(^VPROSTER(VPRIEN,0),"^",1),VPRDNAME=$P(^VPROSTER(VPRIEN,0),"^",2)
"RTN","VPRROS3",133,0)
 S VPRTEXT="<roster ien='' ownername='"_VPROWNNM_"'  ownerid='"_VPROWNID_"'>" D ADD(VPRTEXT)
"RTN","VPRROS3",134,0)
 S VPRTEXT="<rosterName>"_VPRRNAME_"</rosterName>" D ADD(VPRTEXT)
"RTN","VPRROS3",135,0)
 S VPRTEXT="<displayName>"_VPRDNAME_"</displayName>" D ADD(VPRTEXT)
"RTN","VPRROS3",136,0)
 D ADD("<patients>")
"RTN","VPRROS3",137,0)
 K VPRII S VPRII=0 F  S VPRII=$O(VPRLIST(VPRII)) Q:VPRII'>0  D 
"RTN","VPRROS3",138,0)
 . S DFN=VPRII
"RTN","VPRROS3",139,0)
 . S ICN=$$GETICN^MPIF001(DFN)
"RTN","VPRROS3",140,0)
 . S NAME=$P(^DPT(DFN,0),"^",1),GENDER=$P(^DPT(DFN,0),"^",2),SSN=$P(^DPT(DFN,0),"^",9),DOB=$P(^DPT(DFN,0),"^",3),VPRDOB=$$FMTHL7^XLFDT(DOB)
"RTN","VPRROS3",141,0)
 . S Y="<patient name='"_NAME_"' gender='"_GENDER_"' dob='"_VPRDOB_"' ssn='"_SSN_"' id='"_DFN_$S(ICN:"' icn='"_ICN,1:"")_"' />" D ADD(Y)
"RTN","VPRROS3",142,0)
 D ADD("</patients>")
"RTN","VPRROS3",143,0)
 D ADD("</roster>")
"RTN","VPRROS3",144,0)
 S VPRTEXT="</results>" D ADD(VPRTEXT)
"RTN","VPRROS3",145,0)
 Q
"RTN","VPRROS3",146,0)
 ;
"RTN","VPRROS3",147,0)
 ;
"RTN","VPRROS3",148,0)
ADD(X) ; -- Add a line @VPR@(n)=X
"RTN","VPRROS3",149,0)
 S VPRI=$G(VPRI)+1
"RTN","VPRROS3",150,0)
 S @VPR@(VPRI)=X
"RTN","VPRROS3",151,0)
 Q
"RTN","VPRROS3",152,0)
 ;
"RTN","VPRROS3",153,0)
UPDATE(VPR,VPRARRAY) ;;Update Roster data with data from GUI
"RTN","VPRROS3",154,0)
 N VPRZ,VPRRNAME,VPRID,VPRDNAME,VPRDIS,VPRRID,FDA,VPROWNID,VPRSRCID,VPROP,VPRSRCNM,VPRLAB,VPRVAR,BEFORE,AFTER
"RTN","VPRROS3",155,0)
 N VPRSYS S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRROS3",156,0)
 S VPR=$NA(^TMP($J,"VPROSTER"))
"RTN","VPRROS3",157,0)
 Q:'$$VALIDATE
"RTN","VPRROS3",158,0)
 D NOW^%DTC S VPRDT=% ;added 5/11/12 grr for tracing
"RTN","VPRROS3",159,0)
 S VPRZ="" S VPRZ=$O(VPRARRAY(VPRZ)) Q:VPRZ=""
"RTN","VPRROS3",160,0)
 S VPRRNAME=$P(VPRARRAY(VPRZ),"^",1),VPRRID=$P(VPRARRAY(VPRZ),"^",2),VPRDNAME=$P(VPRARRAY(VPRZ),"^",3),VPRDIS=$P(VPRARRAY(VPRZ),"^",4),VPROWNID=$P(VPRARRAY(VPRZ),"^",5)
"RTN","VPRROS3",161,0)
 D:VPRRID>0 BEFORE
"RTN","VPRROS3",162,0)
 I VPRRID="" D ADDROS
"RTN","VPRROS3",163,0)
 I '$D(^VPROSTER(VPRRID,0)) S @VPR@(1)="RosterID passed was invalid" Q
"RTN","VPRROS3",164,0)
 S FDA(1,561.2,""_VPRRID_","_"",.01)=VPRRNAME
"RTN","VPRROS3",165,0)
 S FDA(1,561.2,""_VPRRID_","_"",.02)=VPRDNAME
"RTN","VPRROS3",166,0)
 S FDA(1,561.2,""_VPRRID_","_"",.03)=VPRDIS
"RTN","VPRROS3",167,0)
 S FDA(1,561.2,""_VPRRID_","_"",.04)=VPROWNID
"RTN","VPRROS3",168,0)
 S FDA(1,561.2,""_VPRRID_","_"",99)=VPRDT
"RTN","VPRROS3",169,0)
 D UPDATE^DIE("","FDA(1)")
"RTN","VPRROS3",170,0)
 K ^VPROSTER(VPRRID,1),FDA
"RTN","VPRROS3",171,0)
 F  S VPRZ=$O(VPRARRAY(VPRZ)) Q:VPRZ=""  D
"RTN","VPRROS3",172,0)
 . S VPRY=VPRARRAY(VPRZ)
"RTN","VPRROS3",173,0)
 . S VPRSRCID=$P(VPRY,"^",3)
"RTN","VPRROS3",174,0)
 . S VPROP=$P(VPRY,"^",2)
"RTN","VPRROS3",175,0)
 . S VPRSRCNM=$$UP^XLFSTR($P(VPRY,"^",1))
"RTN","VPRROS3",176,0)
 . S VPRLAB=""
"RTN","VPRROS3",177,0)
 . I VPRSRCNM["CLINIC" S VPRVAR="SC("
"RTN","VPRROS3",178,0)
 . I VPRSRCNM["WARD" S VPRVAR="DIC(42,"
"RTN","VPRROS3",179,0)
 . I VPRSRCNM["PATIENT" S VPRVAR="DPT("
"RTN","VPRROS3",180,0)
 . I VPRSRCNM["PCMM TEAM" S VPRVAR="SCTM(404.51,"
"RTN","VPRROS3",181,0)
 . I VPRSRCNM["OE/RR" S VPRVAR="OR(100.21,"
"RTN","VPRROS3",182,0)
 . I VPRSRCNM["VPR ROSTER" S VPRVAR="VPROSTER("
"RTN","VPRROS3",183,0)
 . I VPRSRCNM["SPECIALTY" S VPRVAR="DIC(45.7,"
"RTN","VPRROS3",184,0)
 . I VPRSRCNM["PROVIDER" S VPRVAR="VA(200,"
"RTN","VPRROS3",185,0)
 . I VPRSRCNM["PXRM" S VPRVAR="PXRM(810.4,"
"RTN","VPRROS3",186,0)
 . S FDA(1,561.21,"+1,"_VPRRID_",",.01)=VPRZ
"RTN","VPRROS3",187,0)
 . S FDA(1,561.21,"+1,"_VPRRID_",",.02)=VPRSRCID_";"_VPRVAR
"RTN","VPRROS3",188,0)
 . S FDA(1,561.21,"+1,"_VPRRID_",",.03)=$S(VPROP="UNION":0,VPROP="INTERSECTION":1,1:2)
"RTN","VPRROS3",189,0)
 . I VPRSRCNM="PXRM" S FDA(1,561.21,"+1,"_VPRRID_",",.06)="UPDATE TEST HMP ROSTER"
"RTN","VPRROS3",190,0)
 . D UPDATE^DIE("","FDA(1)")
"RTN","VPRROS3",191,0)
 ;D GET^VPRROS6(VPRRID)
"RTN","VPRROS3",192,0)
 S FILTER("domain")="roster",FILTER("id")=VPRRID
"RTN","VPRROS3",193,0)
 D GET^VPREF(.VPR,.FILTER)
"RTN","VPRROS3",194,0)
 S RESULT=$$COMPARE(.BEFORE,.AFTER)
"RTN","VPRROS3",195,0)
 I RESULT=1 D POSTX^VPREVNT("roster",VPRRID) ;if RESULT is 1 means roster has changed
"RTN","VPRROS3",196,0)
 Q
"RTN","VPRROS3",197,0)
 ;
"RTN","VPRROS3",198,0)
ADDROS ;
"RTN","VPRROS3",199,0)
 N DIC,DLAYGO,X,Y
"RTN","VPRROS3",200,0)
 S DIC="^VPROSTER(",DIC(0)="LQ",DLAYGO=561.2,X=VPRRNAME D ^DIC S VPRRID=+Y
"RTN","VPRROS3",201,0)
 Q
"RTN","VPRROS3",202,0)
 ;
"RTN","VPRROS3",203,0)
DELROS(VPR,VPRIEN) ;
"RTN","VPRROS3",204,0)
 S HDUZ(0)=DUZ(0),DUZ(0)="@",DIK="^VPROSTER(",DA=VPRIEN,DIDEL=1 D ^DIK S DUZ(0)=HDUZ(0),VPR="Roster Deleted!"
"RTN","VPRROS3",205,0)
 K HDUZ,DIK,DIDEL
"RTN","VPRROS3",206,0)
 Q
"RTN","VPRROS3",207,0)
 ;
"RTN","VPRROS3",208,0)
COMPARE(OLD,NEW) ;
"RTN","VPRROS3",209,0)
 N VPRII,DIFF
"RTN","VPRROS3",210,0)
 S VPRII=0 F  S VPRII=$O(OLD(VPRII)) Q:VPRII'>0  D
"RTN","VPRROS3",211,0)
 . I '$D(NEW(VPRII)) S NEW(VPRII)=""
"RTN","VPRROS3",212,0)
 . E  K NEW(VPRII)
"RTN","VPRROS3",213,0)
 S DIFF=$S($O(NEW(0))'>0:0,1:1)
"RTN","VPRROS3",214,0)
 Q DIFF
"RTN","VPRROS3",215,0)
 ;
"RTN","VPRROS3",216,0)
VALIDATE() ;Will verify VPRARRAY entries are all valid
"RTN","VPRROS3",217,0)
 N I,OUT,OK
"RTN","VPRROS3",218,0)
 S I="",OK=0,OUT=0
"RTN","VPRROS3",219,0)
 F  S I=$O(VPRARRAY(I)) Q:I=""  D  Q:OUT
"RTN","VPRROS3",220,0)
 . I $L(VPRARRAY(I),"^")'=5&($L(VPRARRAY(I),"^")'=3) S @VPR@(1)="Parameter format invalid: "_VPRARRAY(I) S OK=0,OUT=1 Q
"RTN","VPRROS3",221,0)
 . I $L(VPRARRAY(I),"^")=3 D  Q:OUT
"RTN","VPRROS3",222,0)
 . . I $P(VPRARRAY(I),"^",2)="UNION"!($P(VPRARRAY(I),"^",2)="INTERSECTION")!($P(VPRARRAY(I),"^",2)="DIFFERENCE") S OK=1,OUT=0
"RTN","VPRROS3",223,0)
 . . E  S OK=0,OUT=1,@VPR@(1)="Parameter format invalid: "_VPRARRAY(I) Q
"RTN","VPRROS3",224,0)
 . . I $P(VPRARRAY(I),"^",3)>0 S OK=1,OUT=0
"RTN","VPRROS3",225,0)
 . . E  S OK=0,OUT=1,@VPR@(1)="Parameter format invalid: "_VPRARRAY(I) Q
"RTN","VPRROS3",226,0)
 Q OK
"RTN","VPRROS3",227,0)
 ;
"RTN","VPRROS3",228,0)
BEFORE ;SAVE EXISTING ROSTER PATIENTS
"RTN","VPRROS3",229,0)
 Q:$O(^VPROSTER(VPRRID,4,0))'>0
"RTN","VPRROS3",230,0)
 S I=0 F  S I=$O(^VPROSTER(VPRRID,4,I)) Q:I'>0  S DFN=$P(^VPROSTER(VPRRID,4,I,0),"^"),BEFORE(DFN)=""
"RTN","VPRROS3",231,0)
 Q
"RTN","VPRROS3",232,0)
 ;
"RTN","VPRROS3",233,0)
TEST ;TEMPORARY
"RTN","VPRROS3",234,0)
 S VPRARRAY(0)="AAA TEST^^aaaa test^^1088"
"RTN","VPRROS3",235,0)
 S VPRARRAY(1)="Patient^UNION^100846"
"RTN","VPRROS3",236,0)
 S VPRARRAY(2)="Patient^UNION^100847"
"RTN","VPRROS3",237,0)
 D UPDATE(.VPR,.VPRARRAY)
"RTN","VPRROS3",238,0)
 Q
"RTN","VPRROS3",239,0)
TEST0 ;
"RTN","VPRROS3",240,0)
 S BEFORE(1)="",BEFORE(5)="",BEFORE(8)="",AFTER(1)="",AFTER(5)="",AFTER(8)=""
"RTN","VPRROS3",241,0)
 S RESULT=$$COMPARE(.BEFORE,.AFTER)
"RTN","VPRROS3",242,0)
 W "RESULT IS: ",RESULT
"RTN","VPRROS3",243,0)
 Q
"RTN","VPRROS3",244,0)
 ;
"RTN","VPRROS3",245,0)
TEST1 ;
"RTN","VPRROS3",246,0)
 S BEFORE(1)="",BEFORE(5)="",BEFORE(8)="",AFTER(5)="",AFTER(8)=""
"RTN","VPRROS3",247,0)
 S RESULT=$$COMPARE(.BEFORE,.AFTER)
"RTN","VPRROS3",248,0)
 W "RESULT IS: ",RESULT
"RTN","VPRROS3",249,0)
 Q
"RTN","VPRROS3",250,0)
 ;
"RTN","VPRROS4")
0^15^B91302550
"RTN","VPRROS4",1,0)
VPRROS4 ;SLC/GRR -- Roster Management
"RTN","VPRROS4",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;AUG 17, 2011;Build 283
"RTN","VPRROS4",3,0)
GETSRC(VPR,VPRSRC,VPRFILT) ;; Get Source data from requested source type
"RTN","VPRROS4",4,0)
 ;;  For example, If source type is "Clinic", pass all clinic names and id's to calling GUI
"RTN","VPRROS4",5,0)
 ;; Input - VPRARRAY - contains roster data entered thru GUI
"RTN","VPRROS4",6,0)
 ;K VPRLIST,VPRLIST2
"RTN","VPRROS4",7,0)
 I '$D(VPRFILT) S VPRFILT=""
"RTN","VPRROS4",8,0)
 N VPRLIST,VPRLIST2,VPRTYPE,VPERR,VPRI,VPRRNAME,VPRY,VPROP,VPRTAG,VPRLAB,VPRNLIST,VPRSTN,VPRTEXT,VPRVER,Y,ACT,CHK,CSNM
"RTN","VPRROS4",9,0)
 N CSNUM,CSP,IDNAME,IDVALUE,TYPENM,UPNAME,VDATE,VPRACT,VPRDATA,VPRDIVP,VPRNAME,VPRCNT,VPRRCNT,ACTIVE
"RTN","VPRROS4",10,0)
 N VPRSYS S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRROS4",11,0)
 S (VPRLIST,VPRTYPE,VPROP,VPRLIST2,VPERR)="",VPRI=0
"RTN","VPRROS4",12,0)
 K ^TMP($J,"VPROSTER")
"RTN","VPRROS4",13,0)
 S VPR=$NA(^TMP($J,"VPROSTER"))
"RTN","VPRROS4",14,0)
 S VPRACT="I 1"
"RTN","VPRROS4",15,0)
 I VPRFILT'="" S X=VPRFILT X ^%ZOSF("UPPERCASE") S VPRFILT=Y S VPRACT="I UPNAME[VPRFILT"
"RTN","VPRROS4",16,0)
 I VPRSRC["Clinic" S VPRLAB="CLIN"
"RTN","VPRROS4",17,0)
 I VPRSRC["Ward" S VPRLAB="WARD"
"RTN","VPRROS4",18,0)
 I VPRSRC["Patient" S VPRLAB="PAT"
"RTN","VPRROS4",19,0)
 I VPRSRC["PCMM Team" S VPRLAB="PCMM"
"RTN","VPRROS4",20,0)
 I VPRSRC["OE/RR" S VPRLAB="CPRS"
"RTN","VPRROS4",21,0)
 I VPRSRC["VPR Roster" S VPRLAB="ROST"
"RTN","VPRROS4",22,0)
 I VPRSRC["Specialty" S VPRLAB="SPEC"
"RTN","VPRROS4",23,0)
 I VPRSRC["Provider" S VPRLAB="PROV"
"RTN","VPRROS4",24,0)
 I VPRSRC["PXRM" S VPRLAB="PXRM"
"RTN","VPRROS4",25,0)
 I VPRLAB="" S VPERR="1^INVALID SOURCE TYPE" Q
"RTN","VPRROS4",26,0)
 D @VPRLAB
"RTN","VPRROS4",27,0)
 D SEND
"RTN","VPRROS4",28,0)
 Q VPR
"RTN","VPRROS4",29,0)
 ;
"RTN","VPRROS4",30,0)
CLIN ;Process patients for this clinic.  Select all if filter is null
"RTN","VPRROS4",31,0)
 K VPRARRAY S VPRARRAY=""
"RTN","VPRROS4",32,0)
 S VPRNAME="" F  S VPRNAME=$O(^SC("B",VPRNAME)) Q:VPRNAME=""  S X=VPRNAME X ^%ZOSF("UPPERCASE") S UPNAME=Y X VPRACT I  D
"RTN","VPRROS4",33,0)
 . S VPRI=$O(^SC("B",VPRNAME,0)) I ($P(^SC(VPRI,0),"^",3)="C")&($$ACTLOC^ORWU(VPRI)) D
"RTN","VPRROS4",34,0)
 . . I $D(^SC(VPRI,"I")) Q:$P(^("I"),"^",2)=""  ;added 4/24/2013
"RTN","VPRROS4",35,0)
 . . S (CSP,CSNM,CSNUM,SVC,SERVICE,VPRDIV,VPRDIVP)="" ;added 4/24/2013
"RTN","VPRROS4",36,0)
 . . S CSP=$P(^SC(VPRI,0),"^",7) I CSP]"" S CSNM=$P(^DIC(40.7,CSP,0),"^",1),CSNUM=$P(^DIC(40.7,CSP,0),"^",2) ;modified 4/24/2013
"RTN","VPRROS4",37,0)
 . . S VPRDIVP=$P(^SC(VPRI,0),"^",15) I VPRDIVP]"" S VPRDIV=$P($G(^DG(40.8,VPRDIVP,0)),"^",1) ;modified 4/24/2013
"RTN","VPRROS4",38,0)
 . . S SVC=$P(^SC(VPRI,0),"^",8),SERVICE=$S(SVC="M":"MEDICINE",SVC="S":"SURGERY",SVC="P":"PSYCHIATRY",SVC="R":"REHAB MEDICINE",SVC="N":"NEUROLOGY",1:"NONE")
"RTN","VPRROS4",39,0)
 . . S VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",40,0)
 . . S VPRARRAY(VPRNAME,1)="DIVISION"_"^"_VPRDIV
"RTN","VPRROS4",41,0)
 . . S VPRARRAY(VPRNAME,2)="CLINIC STOP NAME"_"^"_CSNM
"RTN","VPRROS4",42,0)
 . . S VPRARRAY(VPRNAME,3)="CLINIC STOP NUMBER"_"^"_CSNUM
"RTN","VPRROS4",43,0)
 . . S VPRARRAY(VPRNAME,4)="SERVICE"_"^"_SERVICE
"RTN","VPRROS4",44,0)
 Q
"RTN","VPRROS4",45,0)
 ;
"RTN","VPRROS4",46,0)
WARD ;Process patients for this ward
"RTN","VPRROS4",47,0)
 K VPRARRAY S VPRARRAY=""
"RTN","VPRROS4",48,0)
 S VPRNAME="" F  S VPRNAME=$O(^DIC(42,"B",VPRNAME)) Q:VPRNAME=""  S X=VPRNAME X ^%ZOSF("UPPERCASE") S UPNAME=Y X VPRACT I  D 
"RTN","VPRROS4",49,0)
 . S VPRI=$O(^DIC(42,"B",VPRNAME,0))
"RTN","VPRROS4",50,0)
 . S VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",51,0)
 . N DIVP,VPRDIV,SPECP,SPEC,SVC,SERVICE
"RTN","VPRROS4",52,0)
 . S (DIVP,VPRDIV,SPECP,SPEC,SVC,SERVICE)=""
"RTN","VPRROS4",53,0)
 . S DIVP=$P(^DIC(42,VPRI,0),"^",11) I DIVP]"" S VPRDIV=$P($G(^DG(40.8,DIVP,0)),"^",1)
"RTN","VPRROS4",54,0)
 . S SPECP=$P(^DIC(42,VPRI,0),"^",12) I SPECP]"" S SPEC=$P($G(^DIC(42.4,SPECP,0)),"^",1)
"RTN","VPRROS4",55,0)
 . S SVC=$P(^DIC(42,VPRI,0),"^",3)
"RTN","VPRROS4",56,0)
 . S SERVICE=$S(SVC="M":"MEDICINE",SVC="S":"SURGERY",SVC="P":"PSYCHIATRY",SVC="NH":"NHCU",SVC="NE":"NEUROLOGY",SVC="I":"INTERMEDIATE MEDICINE",1:"")
"RTN","VPRROS4",57,0)
 . S:'$L(SERVICE) SERVICE=$S(SVC="R":"REHAB MEDICINE",SVC="SCI":"SPINAL CORD INJURY",SVC="D":"DOMICILLIARY",SVC="B":"BLIND REHAB",1:"NONE")
"RTN","VPRROS4",58,0)
 . S VPRARRAY(VPRNAME,1)="DIVISION"_"^"_VPRDIV
"RTN","VPRROS4",59,0)
 . S VPRARRAY(VPRNAME,2)="SPECIALTY"_"^"_SPEC
"RTN","VPRROS4",60,0)
 . S VPRARRAY(VPRNAME,3)="SERVICE"_"^"_SERVICE
"RTN","VPRROS4",61,0)
 Q
"RTN","VPRROS4",62,0)
 ;
"RTN","VPRROS4",63,0)
PAT ;Process patient from Patient file Source
"RTN","VPRROS4",64,0)
 K VPRARRAY S VPRARRAY=""
"RTN","VPRROS4",65,0)
 N DFN,SEX,DOB,SSN,ICN,DOBOUT
"RTN","VPRROS4",66,0)
 I VPRFILT?1U4N D  Q
"RTN","VPRROS4",67,0)
 . I $D(^DPT("BS5",VPRFILT)) D
"RTN","VPRROS4",68,0)
 . . S VPRI=0 F  S VPRI=$O(^DPT("BS5",VPRFILT,VPRI)) Q:VPRI'>0  D
"RTN","VPRROS4",69,0)
 . . . S DFN=VPRI,ICN=$$GETICN^MPIF001(DFN)
"RTN","VPRROS4",70,0)
 . . . K WARN S WARN="" D SECCHK ;ZW WARN
"RTN","VPRROS4",71,0)
 . . . S VPRNAME=$P(^DPT(VPRI,0),"^",1),VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",72,0)
 . . . S SEX=$P(^DPT(VPRI,0),"^",2),DOB=$P(^DPT(VPRI,0),"^",3),SSN=$P(^DPT(VPRI,0),"^",9)
"RTN","VPRROS4",73,0)
 . . . S DOBOUT=$$FMTHL7^XLFDT(DOB)
"RTN","VPRROS4",74,0)
 . . . S VPRARRAY(VPRNAME,1)="ICN"_"^"_ICN
"RTN","VPRROS4",75,0)
 . . . S VPRARRAY(VPRNAME,2)="GENDER"_"^"_$S(SEX="M":"MALE",SEX="F":"FEMALE",1:"NONE")
"RTN","VPRROS4",76,0)
 . . . S VPRARRAY(VPRNAME,3)="DOB"_"^"_DOBOUT
"RTN","VPRROS4",77,0)
 . . . S VPRARRAY(VPRNAME,4)="SSN"_"^"_SSN
"RTN","VPRROS4",78,0)
 S VPRNAME=VPRFILT
"RTN","VPRROS4",79,0)
 I $D(^DPT("B",VPRNAME)) D  Q
"RTN","VPRROS4",80,0)
 . S VPRI=0 F  S VPRI=$O(^DPT("B",VPRNAME,VPRI)) Q:VPRI'>0  S VPRARRAY(VPRNAME)=VPRI D
"RTN","VPRROS4",81,0)
 . . S DFN=VPRI,ICN=$$GETICN^MPIF001(DFN)
"RTN","VPRROS4",82,0)
 . . K WARN S WARN="" D SECCHK ;ZW WARN
"RTN","VPRROS4",83,0)
 . . S SEX=$P(^DPT(VPRI,0),"^",2),DOB=$P(^DPT(VPRI,0),"^",3),SSN=$P(^DPT(VPRI,0),"^",9)
"RTN","VPRROS4",84,0)
 . . S DOBOUT=$$FMTHL7^XLFDT(DOB)
"RTN","VPRROS4",85,0)
 . . S VPRARRAY(VPRNAME,1)="ICN"_"^"_ICN
"RTN","VPRROS4",86,0)
 . . S VPRARRAY(VPRNAME,2)="GENDER"_"^"_$S(SEX="M":"MALE",SEX="F":"FEMALE",1:"NONE")
"RTN","VPRROS4",87,0)
 . . S VPRARRAY(VPRNAME,3)="DOB"_"^"_DOBOUT
"RTN","VPRROS4",88,0)
 . . S VPRARRAY(VPRNAME,4)="SSN"_"^"_SSN
"RTN","VPRROS4",89,0)
 E  F  S VPRNAME=$O(^DPT("B",VPRNAME)) Q:VPRNAME=""!(VPRNAME'[VPRFILT)  D
"RTN","VPRROS4",90,0)
 . S VPRI=0 F  S VPRI=$O(^DPT("B",VPRNAME,VPRI)) Q:VPRI'>0  S VPRARRAY(VPRNAME)=VPRI D
"RTN","VPRROS4",91,0)
 . . S DFN=VPRI,ICN=$$GETICN^MPIF001(DFN)
"RTN","VPRROS4",92,0)
 . . K WARN S WARN="" D SECCHK ;ZW WARN
"RTN","VPRROS4",93,0)
 . . S SEX=$P(^DPT(VPRI,0),"^",2),DOB=$P(^DPT(VPRI,0),"^",3),SSN=$P(^DPT(VPRI,0),"^",9)
"RTN","VPRROS4",94,0)
 . . S DOBOUT=$$FMTHL7^XLFDT(DOB)
"RTN","VPRROS4",95,0)
 . . S VPRARRAY(VPRNAME,1)="ICN"_"^"_ICN
"RTN","VPRROS4",96,0)
 . . S VPRARRAY(VPRNAME,2)="GENDER"_"^"_$S(SEX="M":"MALE",SEX="F":"FEMALE",1:"NONE")
"RTN","VPRROS4",97,0)
 . . S VPRARRAY(VPRNAME,3)="DOB"_"^"_DOBOUT
"RTN","VPRROS4",98,0)
 . . S VPRARRAY(VPRNAME,4)="SSN"_"^"_SSN
"RTN","VPRROS4",99,0)
 Q
"RTN","VPRROS4",100,0)
 ;
"RTN","VPRROS4",101,0)
PCMM ;Process patients from a PCMM team
"RTN","VPRROS4",102,0)
 K VPRARRAY S VPRARRAY=""
"RTN","VPRROS4",103,0)
 S VPRSTN=$P($G(^XMB(1,1,"XUS")),"^",17)
"RTN","VPRROS4",104,0)
 S VPRI=0 F  S VPRI=$O(^SCTM(404.51,"AINST",VPRSTN,VPRI)) Q:VPRI'>0  S VPRNAME=$P($G(^SCTM(404.51,VPRI,0)),"^",1) S X=VPRNAME X ^%ZOSF("UPPERCASE") S UPNAME=Y X VPRACT I  D
"RTN","VPRROS4",105,0)
 . S VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",106,0)
 . N TEAMP,TEAMPP,SVCP,SERVICE S (TEAMP,TEAMPP,SVCP,SERVICE)=""
"RTN","VPRROS4",107,0)
 . S TEAMPP=$P(^SCTM(404.51,VPRI,0),"^",3) I TEAMPP]"" S TEAMP=$P(^SD(403.47,TEAMPP,0),"^",1)
"RTN","VPRROS4",108,0)
 . S SVCP=$P(^SCTM(404.51,VPRI,0),"^",6) I SVCP]"" S SERVICE=$P(^DIC(49,SVCP,0),"^",1)
"RTN","VPRROS4",109,0)
 . S VPRARRAY(VPRNAME,1)="TEAM PURPOSE"_"^"_TEAMP
"RTN","VPRROS4",110,0)
 . S VPRARRAY(VPRNAME,2)="SERVICE"_"^"_SERVICE
"RTN","VPRROS4",111,0)
 Q
"RTN","VPRROS4",112,0)
 ;
"RTN","VPRROS4",113,0)
CPRS ;Process patients from CPRS Lists
"RTN","VPRROS4",114,0)
 K VPRARRAY S VPRARRAY=""
"RTN","VPRROS4",115,0)
 S VPRNAME="" F  S VPRNAME=$O(^OR(100.21,"B",VPRNAME)) Q:VPRNAME=""  S X=VPRNAME X ^%ZOSF("UPPERCASE") S UPNAME=Y X VPRACT I  D
"RTN","VPRROS4",116,0)
 . S VPRI=0 F  S VPRI=$O(^OR(100.21,"B",VPRNAME,VPRI)) Q:VPRI'>0  D
"RTN","VPRROS4",117,0)
 . . S VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",118,0)
 . . N TYPE,CREATP,CREATOR
"RTN","VPRROS4",119,0)
 . . S TYPE=$P(^OR(100.21,VPRI,0),"^",2)
"RTN","VPRROS4",120,0)
 . . S TYPENM=$S(TYPE="P":"PERSONAL PATIENT",TYPE="TA":"TEAM PATIENT AUTOLINKED",TYPE="TM":"TEAM PATIENT MANUAL",TYPE="MRAL":"MANUAL REMOVAL AUTOLINK ADDITION",1:"NONE")
"RTN","VPRROS4",121,0)
 . . S CREATP=$P(^OR(100.21,VPRI,0),"^",5),CREATOR=""
"RTN","VPRROS4",122,0)
 . . I CREATP]"" S CREATOR=$P($G(^VA(200,CREATP,0)),"^",1)
"RTN","VPRROS4",123,0)
 . . S VPRARRAY(VPRNAME,1)="TYPE"_"^"_TYPENM
"RTN","VPRROS4",124,0)
 . . S VPRARRAY(VPRNAME,2)="CREATOR"_"^"_CREATOR
"RTN","VPRROS4",125,0)
 Q
"RTN","VPRROS4",126,0)
 ;
"RTN","VPRROS4",127,0)
ROST ;Process patients from selected roster
"RTN","VPRROS4",128,0)
 K VPRARRAY S VPRARRAY=""
"RTN","VPRROS4",129,0)
 S VPRNAME="" F  S VPRNAME=$O(^VPROSTER("B",VPRNAME)) Q:VPRNAME=""  S X=VPRNAME X ^%ZOSF("UPPERCASE") S UPNAME=Y X VPRACT I  D
"RTN","VPRROS4",130,0)
 . S VPRI=$O(^VPROSTER("B",VPRNAME,0)) S VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",131,0)
 . N DISP,OWNERP,OWNER
"RTN","VPRROS4",132,0)
 . S DISP=$P(^VPROSTER(VPRI,0),"^",2)
"RTN","VPRROS4",133,0)
 . S OWNERP=$P(^VPROSTER(VPRI,0),"^",4),OWNER=""
"RTN","VPRROS4",134,0)
 . I OWNERP]"" S OWNER=$P($G(^VA(200,OWNERP,0)),"^",1)
"RTN","VPRROS4",135,0)
 . S VPRARRAY(VPRNAME,1)="DISPLAY NAME"_"^"_DISP
"RTN","VPRROS4",136,0)
 . S VPRARRAY(VPRNAME,2)="OWNER"_"^"_OWNER
"RTN","VPRROS4",137,0)
 Q
"RTN","VPRROS4",138,0)
 ;
"RTN","VPRROS4",139,0)
SPEC ;Process patients with selected Treating Specialty
"RTN","VPRROS4",140,0)
 K VPRARRAY S VPRARRAY=""
"RTN","VPRROS4",141,0)
 S VPRNAME="" F  S VPRNAME=$O(^DIC(45.7,"B",VPRNAME)) Q:VPRNAME=""  S X=VPRNAME X ^%ZOSF("UPPERCASE") S UPNAME=Y X VPRACT I  D
"RTN","VPRROS4",142,0)
 . S VPRI=$O(^DIC(45.7,"B",VPRNAME,0)),VDATE=$O(^DIC(45.7,VPRI,"E","ADATE","")),ACT=$O(^DIC(45.7,VPRI,"E","ADATE",VDATE,0)),ACTIVE=$P(^DIC(45.7,VPRI,"E",ACT,0),"^",2)
"RTN","VPRROS4",143,0)
 . I ACTIVE D
"RTN","VPRROS4",144,0)
 . . S VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",145,0)
 . . N SVC,SERVICE
"RTN","VPRROS4",146,0)
 . . S SVC=$P(^DIC(45.7,VPRI,0),"^",3)
"RTN","VPRROS4",147,0)
 . . S SERVICE=$S(SVC="M":"MEDICINE",SVC="S":"SURGERY",SVC="P":"PSYCHIATRY",SVC="NH":"NHCU",SVC="NE":"NEUROLOGY",SVC="I":"INTERMEDIATE MEDICINE",1:"")
"RTN","VPRROS4",148,0)
 . . S:'$L(SERVICE) SERVICE=$S(SVC="R":"REHAB MEDICINE",SVC="SCI":"SPINAL CORD INJURY",SVC="D":"DOMICILLIARY",SVC="B":"BLIND REHAB",SVC="RE":"RESPITE CARE",1:"NONE")
"RTN","VPRROS4",149,0)
 . . S VPRARRAY(VPRNAME,1)="SERVICE"_"^"_SERVICE
"RTN","VPRROS4",150,0)
 Q
"RTN","VPRROS4",151,0)
 ;
"RTN","VPRROS4",152,0)
PROV ;Process patients for selected provider
"RTN","VPRROS4",153,0)
 K VPRARRAY S VPRARRAY=""
"RTN","VPRROS4",154,0)
 N TITLEP,VTITLE,SEX
"RTN","VPRROS4",155,0)
 S VTITLE=""
"RTN","VPRROS4",156,0)
 I VPRFILT'="" D
"RTN","VPRROS4",157,0)
 . S VPRNAME=VPRFILT
"RTN","VPRROS4",158,0)
 . F  S VPRNAME=$O(^VA(200,"B",VPRNAME)) Q:VPRNAME=""!(VPRNAME'[VPRFILT)  D
"RTN","VPRROS4",159,0)
 . . S VPRI=0 F  S VPRI=$O(^VA(200,"B",VPRNAME,VPRI)) Q:VPRI'>0  D
"RTN","VPRROS4",160,0)
 . . . S TITLEP=$P(^VA(200,VPRI,0),"^",9) I TITLEP]"" S VTITLE=$P($G(^DIC(3.1,TITLEP,0)),"^",1)
"RTN","VPRROS4",161,0)
 . . . S SEX=$P(^VA(200,VPRI,1),"^",2)
"RTN","VPRROS4",162,0)
 . . . S VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",163,0)
 . . . S VPRARRAY(VPRNAME,1)="SEX"_"^"_SEX
"RTN","VPRROS4",164,0)
 . . . S VPRARRAY(VPRNAME,2)="TITLE"_"^"_VTITLE
"RTN","VPRROS4",165,0)
 I VPRFILT="" D
"RTN","VPRROS4",166,0)
 . S VPRNAME="" F  S VPRNAME=$O(^VA(200,"B",VPRNAME)) Q:VPRNAME=""  D
"RTN","VPRROS4",167,0)
 . . S VPRI=0 F  S VPRI=$O(^VA(200,"B",VPRNAME,VPRI)) Q:VPRI'>0  D
"RTN","VPRROS4",168,0)
 . . . S TITLEP=$P(^VA(200,VPRI,0),"^",9) I TITLEP]"" S VTITLE=$P($G(^DIC(3.1,TITLEP,0)),"^",1)
"RTN","VPRROS4",169,0)
 . . . S SEX=$P(^VA(200,VPRI,1),"^",2)
"RTN","VPRROS4",170,0)
 . . . S VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",171,0)
 . . . S VPRARRAY(VPRNAME,1)="SEX"_"^"_SEX
"RTN","VPRROS4",172,0)
 . . . S VPRARRAY(VPRNAME,2)="TITLE"_"^"_VTITLE
"RTN","VPRROS4",173,0)
 Q
"RTN","VPRROS4",174,0)
 ;
"RTN","VPRROS4",175,0)
PXRM ;Process patients for selected panel
"RTN","VPRROS4",176,0)
 K VPRARRAY S VPRARRAY=""
"RTN","VPRROS4",177,0)
 S VPRNAME="" F  S VPRNAME=$O(^PXRM(810.4,"B",VPRNAME)) Q:VPRNAME=""  S X=VPRNAME X ^%ZOSF("UPPERCASE") S UPNAME=Y X VPRACT I  D
"RTN","VPRROS4",178,0)
 . S VPRI=0 F  S VPRI=$O(^PXRM(810.4,"B",VPRNAME,VPRI)) Q:VPRI'>0  I $P($G(^PXRM(810.4,VPRI,0)),"^",3)=3 D
"RTN","VPRROS4",179,0)
 . . S VPRARRAY(VPRNAME)=VPRI
"RTN","VPRROS4",180,0)
 . . N LISTP,LISTN,CLASS,CLASSNM
"RTN","VPRROS4",181,0)
 . . S (LISTP,LISTN,CLASS,CLASSNM)="" ;added 3/15/11 grr
"RTN","VPRROS4",182,0)
 . . S LISTP=$P(^PXRM(810.4,VPRI,0),"^",7) I LISTP]"" S LISTN=$P(^PXRMD(811.5,LISTP,0),"^",1)
"RTN","VPRROS4",183,0)
 . . S CLASS=$P(^PXRM(810.4,VPRI,100),"^",1),CLASSNM=$S(CLASS="N":"National",CLASS="V":"VISN",CLASS="L":"Local",1:"NONE")
"RTN","VPRROS4",184,0)
 . . S VPRARRAY(VPRNAME,1)="TERM"_"^"_LISTN
"RTN","VPRROS4",185,0)
 . . S VPRARRAY(VPRNAME,2)="CLASS"_"^"_CLASSNM
"RTN","VPRROS4",186,0)
 Q
"RTN","VPRROS4",187,0)
 ;
"RTN","VPRROS4",188,0)
SEND ;send pending rosters.  Called through RPC
"RTN","VPRROS4",189,0)
 S VPRRCNT=0,VPRI=0
"RTN","VPRROS4",190,0)
 S VPRVER="<results version='"_$P($T(VPRROS4+1),";",3)_"'>"
"RTN","VPRROS4",191,0)
 D ADD(VPRVER)
"RTN","VPRROS4",192,0)
 S VPRTEXT="<source name='"_VPRSRC_"' >" D ADD(VPRTEXT)
"RTN","VPRROS4",193,0)
 D ADD("<entries>")
"RTN","VPRROS4",194,0)
 K VPRII S VPRII="" F  S VPRII=$O(VPRARRAY(VPRII)) Q:VPRII=""  D
"RTN","VPRROS4",195,0)
 . S VPRDATA=$$ESC^VPRD(VPRII)
"RTN","VPRROS4",196,0)
 . S VPRTEXT="<entry NAME='"_VPRDATA_"' id='"_VPRARRAY(VPRII)_"' />" D ADD(VPRTEXT)
"RTN","VPRROS4",197,0)
 . D ADD("<identifiers>")
"RTN","VPRROS4",198,0)
 . N I S I=0 F  S I=$O(VPRARRAY(VPRII,I)) Q:I'>0  D
"RTN","VPRROS4",199,0)
 . . S IDNAME=$P(VPRARRAY(VPRII,I),"^",1),IDVALUE=$P(VPRARRAY(VPRII,I),"^",2),IDVALUE=$$ESC^VPRD(IDVALUE)
"RTN","VPRROS4",200,0)
 . . S VPRTEXT="<ident name='"_IDNAME_"' value='"_IDVALUE_"' />" D ADD(VPRTEXT)
"RTN","VPRROS4",201,0)
 . D ADD("</identifiers>")
"RTN","VPRROS4",202,0)
 D ADD("</entries>")
"RTN","VPRROS4",203,0)
 D ADD("</source>")
"RTN","VPRROS4",204,0)
 S VPRTEXT="</results>" D ADD(VPRTEXT)
"RTN","VPRROS4",205,0)
 Q
"RTN","VPRROS4",206,0)
 ;
"RTN","VPRROS4",207,0)
ADD(X) ; -- Add a line @VPR@(n)=X
"RTN","VPRROS4",208,0)
 I X'["<" S X=$$ESC^VPRD(X)
"RTN","VPRROS4",209,0)
 S VPRI=$G(VPRI)+1
"RTN","VPRROS4",210,0)
 S @VPR@(VPRI)=X
"RTN","VPRROS4",211,0)
 Q
"RTN","VPRROS4",212,0)
 ;
"RTN","VPRROS4",213,0)
SECCHK ; check for sensitive record
"RTN","VPRROS4",214,0)
 N VPRY,I,X
"RTN","VPRROS4",215,0)
 K WARN
"RTN","VPRROS4",216,0)
 D PTSEC^DGSEC4(.VPRY,DFN,1)  ;IA #3027
"RTN","VPRROS4",217,0)
 S CHK("dfn")=DFN
"RTN","VPRROS4",218,0)
 S CHK("sensitive")=(VPRY(1)>0)
"RTN","VPRROS4",219,0)
 S CHK("mayAccess")=(VPRY(1)<3)
"RTN","VPRROS4",220,0)
 S CHK("logAccess")=(VPRY(1)>1)
"RTN","VPRROS4",221,0)
 M WARN=VPRY K WARN(1)
"RTN","VPRROS4",222,0)
 ;
"RTN","VPRROS5")
0^16^B9679013
"RTN","VPRROS5",1,0)
VPRROS5 ;SLC/GRR -- Clinical Reminders List Processing
"RTN","VPRROS5",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRROS5",3,0)
 ;
"RTN","VPRROS5",4,0)
 ; External References          DBIA#
"RTN","VPRROS5",5,0)
 ; -------------------          -----
"RTN","VPRROS5",6,0)
 ;
"RTN","VPRROS5",7,0)
 ; ------------ Get Panel(s) from VistA ------------
"RTN","VPRROS5",8,0)
 ;
"RTN","VPRROS5",9,0)
EN(VPR) ; -- find Panels to update
"RTN","VPRROS5",10,0)
 K ^TMP($J,"VPRPANEL")
"RTN","VPRROS5",11,0)
 N VPRPAN,VPRPAT,VPRI,MSG,PATCREAT,PLISTPUG,VPRC,VPRT
"RTN","VPRROS5",12,0)
 N VPRSYS S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRROS5",13,0)
 S VPR=$NA(^TMP($J,"VPR")),VPRC=0,VPRT=0
"RTN","VPRROS5",14,0)
 F  S VPRC=$O(^VPRPANEL(VPRC)) Q:VPRC'>0  D
"RTN","VPRROS5",15,0)
 . S VPRT=VPRT+1
"RTN","VPRROS5",16,0)
 . S VPRPAN(VPRC)=^VPRPANEL(VPRC,0) D
"RTN","VPRROS5",17,0)
 . N LIEN,PLNAME S LIEN=$P(VPRPAN(VPRC),"^"),PLNAME=$P(VPRPAN(VPRC),U,3)
"RTN","VPRROS5",18,0)
 . ;agp need to determine what secure and over should be set to
"RTN","VPRROS5",19,0)
 . S SECURE=0,OVER=1
"RTN","VPRROS5",20,0)
 . D RUNLIST(.VPRPAN,LIEN,PLNAME,SECURE,OVER)
"RTN","VPRROS5",21,0)
CREATE ; -- create panel(s) in XML
"RTN","VPRROS5",22,0)
 N VPRVER S VPRVER="<results version='"_$P($T(VPRPANEL+1),";",3)_"'>"
"RTN","VPRROS5",23,0)
 N VPRTTXT S VPRTTXT="<panels total='"_VPRT_"'>"
"RTN","VPRROS5",24,0)
 D ADD(VPRVER),ADD(VPRTTXT)
"RTN","VPRROS5",25,0)
 D PANEL
"RTN","VPRROS5",26,0)
 S TEXT="</results>" D ADD(TEXT)
"RTN","VPRROS5",27,0)
 Q
"RTN","VPRROS5",28,0)
 ;
"RTN","VPRROS5",29,0)
PANEL ;-- create panel XML
"RTN","VPRROS5",30,0)
 S VPRC=0 F  S VPRC=$O(VPRPAN(VPRC)) Q:VPRC'>0  D
"RTN","VPRROS5",31,0)
 .D ADD("<panel>")
"RTN","VPRROS5",32,0)
 .N TEXT S TEXT="<panel name='"_$P(VPRPAN(VPRC),"^",2)_"' />" D ADD(TEXT)
"RTN","VPRROS5",33,0)
 .S TEXT="<panelString code='"_$P(VPRPAN(VPRC),"^")_"' />" D ADD(TEXT)
"RTN","VPRROS5",34,0)
 .D PATS
"RTN","VPRROS5",35,0)
 .S TEXT="</panel>" D ADD(TEXT)
"RTN","VPRROS5",36,0)
 S TEXT="</panels>" D ADD(TEXT)
"RTN","VPRROS5",37,0)
 Q
"RTN","VPRROS5",38,0)
 ;
"RTN","VPRROS5",39,0)
CREATEPL(PLNAME,SECURE,OVER) ;
"RTN","VPRROS5",40,0)
 N FDA,IENS,NAME,NUM,RESULT,UNIQUE
"RTN","VPRROS5",41,0)
 S (NUM,RESULT,UNIQUE)=0
"RTN","VPRROS5",42,0)
 ;if overwrite check to see if the list exist
"RTN","VPRROS5",43,0)
 I OVER=1 S RESULT=$O(^PXRMXP(810.5,"B",PLNAME,""))
"RTN","VPRROS5",44,0)
 I RESULT>0 Q RESULT
"RTN","VPRROS5",45,0)
 S NAME=PLNAME
"RTN","VPRROS5",46,0)
 ;if not overwrite find unique name
"RTN","VPRROS5",47,0)
 I OVER=0 D
"RTN","VPRROS5",48,0)
 .I $D(^PXRMXP(810.5,"B",NAME))=0 Q
"RTN","VPRROS5",49,0)
 .F  Q:UNIQUE=1  D
"RTN","VPRROS5",50,0)
 ..S NUM=NUM+1
"RTN","VPRROS5",51,0)
 ..S NAME=PLNAME_" ("_NUM_")"
"RTN","VPRROS5",52,0)
 ..I $D(^PXRMXP(810.5,"B",NAME))=0 S UNIQUE=1
"RTN","VPRROS5",53,0)
 ;create stub in 810.5
"RTN","VPRROS5",54,0)
 S IENS="+1,"
"RTN","VPRROS5",55,0)
 S FDA(810.5,IENS,.01)=NAME
"RTN","VPRROS5",56,0)
 S FDA(810.5,IENS,100)="L"
"RTN","VPRROS5",57,0)
 S FDA(810.5,IENS,.07)=DUZ
"RTN","VPRROS5",58,0)
 S FDA(810.5,IENS,.08)=$S(SECURE=0:"PUB",1:"PVT")
"RTN","VPRROS5",59,0)
 D UPDATE^DIE("","FDA","","MSG")
"RTN","VPRROS5",60,0)
 ;if error display message and quit
"RTN","VPRROS5",61,0)
 I $D(MSG) D AWRITE^PXRMUTIL("MSG") Q 0
"RTN","VPRROS5",62,0)
 S RESULT=$O(^PXRMXP(810.5,"B",NAME,""))
"RTN","VPRROS5",63,0)
 Q RESULT
"RTN","VPRROS5",64,0)
 ;
"RTN","VPRROS5",65,0)
RUNLIST(VPRPAN,LIEN,PLNAME,SECURE,OVER) ;
"RTN","VPRROS5",66,0)
 N PLIEN
"RTN","VPRROS5",67,0)
 S PLIEN=$$CREATEPL(PLNAME,SECURE,OVER)
"RTN","VPRROS5",68,0)
 S PATCREAT=$S(SECURE=1:"Y",1:0),PLISTPUG=1
"RTN","VPRROS5",69,0)
 I PLIEN=0 Q
"RTN","VPRROS5",70,0)
 D RUN^PXRMLCR(LIEN,PLIEN,"PXRMRULE",DT,DT,0,0)
"RTN","VPRROS5",71,0)
 N VPRPAT S VPRPAT=0
"RTN","VPRROS5",72,0)
 F  S VPRPAT=$O(^PXRMXP(810.5,PLIEN,30,VPRPAT)) Q:VPRPAT'>0  S VPRPAN(VPRC,VPRPAT)=$P($G(^PXRMXP(810.5,PLIEN,30,VPRPAT,0)),"^",1)
"RTN","VPRROS5",73,0)
 Q
"RTN","VPRROS5",74,0)
 ;
"RTN","VPRROS5",75,0)
PATS ; -- create patient XML
"RTN","VPRROS5",76,0)
 S TEXT="<patients>" D ADD(TEXT)
"RTN","VPRROS5",77,0)
 S VPRPAT=0 F  S VPRPAT=$O(VPRPAN(VPRC,VPRPAT)) D  Q:VPRPAT'>0
"RTN","VPRROS5",78,0)
 .I VPRPAT'>0 S TEXT="</patients>" D ADD(TEXT) Q
"RTN","VPRROS5",79,0)
 .S TEXT="<patient code='"_VPRPAN(VPRC,VPRPAT)_"' />" D ADD(TEXT)
"RTN","VPRROS5",80,0)
 ;
"RTN","VPRROS5",81,0)
 ;
"RTN","VPRROS5",82,0)
ADD(X) ; -- Add a line @VPR@(n)=X
"RTN","VPRROS5",83,0)
 S VPRI=$G(VPRI)+1
"RTN","VPRROS5",84,0)
 S @VPR@(VPRI)=X
"RTN","VPRROS5",85,0)
 Q
"RTN","VPRROS5",86,0)
 ;
"RTN","VPRROS5",87,0)
NITELY ; -- Nightly run to update all Panels
"RTN","VPRROS5",88,0)
 ;
"RTN","VPRROS6")
0^61^B26492527
"RTN","VPRROS6",1,0)
VPRROS6 ;SLC/GRR -- Generate Roster Patients
"RTN","VPRROS6",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRROS6",3,0)
 ;; Compile Roster
"RTN","VPRROS6",4,0)
GET(VPRIEN) ;
"RTN","VPRROS6",5,0)
 ;; Input - VPRIEN is internal entry number of roster
"RTN","VPRROS6",6,0)
 ;;         VPROWNER - If this parameter exists, only rosters for this owner will be compiled and passed
"RTN","VPRROS6",7,0)
 ;; Output - AFTER array contains current patients
"RTN","VPRROS6",8,0)
 ;
"RTN","VPRROS6",9,0)
 K VPRLIST,VPRLIST2
"RTN","VPRROS6",10,0)
 N VPRI,VPRFILT,VPRTYPE,VPERR,VPRRNAME,VPRNY,VPROP,VPRTAG,VPRLAB,VPRNLIST,BEG,DOB,END,GENDER,ICN,NAME,VPRACT,VPRC
"RTN","VPRROS6",11,0)
 N VPRCIEN,VPRDNAME,VPRDOB,VPRIII,VPRINM,VPRLIEN,VPRNAME,VPROIEN,VPRONAME,VPROWNID,VPROWNNM,VPRPAT,VPRPIEN,VPRNME,VPRCNT
"RTN","VPRROS6",12,0)
 N VPRSRCDN,VPRCID,VPRTEXT,VPRTIEN,VPRTLST,VPRVER,VPRWIEN,VPRWNAME,VPRPNME,VPRRCNT,VPRSRCID,X,Y,SSN,VPRZ,VPRIZ,VPRX
"RTN","VPRROS6",13,0)
 N VPRSYS S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRROS6",14,0)
 S VPRIZ=0
"RTN","VPRROS6",15,0)
 I $G(VPRIEN)="" S VPRIEN=0
"RTN","VPRROS6",16,0)
 S (VPRLIST,VPRFILT,VPRTYPE,VPROP,VPRLIST2,VPERR)=""
"RTN","VPRROS6",17,0)
 I +$G(VPRIEN)'>0 S VPERR="0^Invalid Roster IEN" Q
"RTN","VPRROS6",18,0)
 S VPRRNAME=$P($G(^VPROSTER(VPRIEN,0)),"^",1) I VPRRNAME="" S VPERR="0^Deleted Roster IEN" Q
"RTN","VPRROS6",19,0)
 F  S VPRIZ=$O(^VPROSTER(VPRIEN,1,VPRIZ)) Q:VPRIZ'>0  D
"RTN","VPRROS6",20,0)
 . S VPRX=$G(^VPROSTER(VPRIEN,1,VPRIZ,0))
"RTN","VPRROS6",21,0)
 . S VPROP=$P(VPRX,"^",3)
"RTN","VPRROS6",22,0)
 . S VPRFILT=$P(VPRX,"^",4)
"RTN","VPRROS6",23,0)
 . S VPRTAG=$P($P(VPRX,"^",2),";",2)
"RTN","VPRROS6",24,0)
 . S VPRLAB=""
"RTN","VPRROS6",25,0)
 . I VPRTAG["SC(" S VPRLAB="CLIN"
"RTN","VPRROS6",26,0)
 . I VPRTAG["DIC(42" S VPRLAB="WARD"
"RTN","VPRROS6",27,0)
 . I VPRTAG["DPT" S VPRLAB="PAT"
"RTN","VPRROS6",28,0)
 . I VPRTAG["SCTM" S VPRLAB="PCMM"
"RTN","VPRROS6",29,0)
 . I VPRTAG["OR(100.21" S VPRLAB="CPRS"
"RTN","VPRROS6",30,0)
 . I VPRTAG["VPROSTER" S VPRLAB="ROST"
"RTN","VPRROS6",31,0)
 . I VPRTAG["DIC(45.7" S VPRLAB="SPEC"
"RTN","VPRROS6",32,0)
 . I VPRTAG["VA(200" S VPRLAB="PROV"
"RTN","VPRROS6",33,0)
 . I VPRTAG["PXRM(810.4" S VPRLAB="PXRM"
"RTN","VPRROS6",34,0)
 . I VPRLAB="" S VPERR="1^INVALID FILE TYPE" Q
"RTN","VPRROS6",35,0)
 . D @VPRLAB
"RTN","VPRROS6",36,0)
 . S VPRLAB=$S(VPROP=0:"UNION",VPROP=1:"INTER",1:"DIFF")
"RTN","VPRROS6",37,0)
 . S VPRNLIST=""
"RTN","VPRROS6",38,0)
 . D @VPRLAB
"RTN","VPRROS6",39,0)
 M VPRLIST2=VPRLIST
"RTN","VPRROS6",40,0)
 D GENPAT(VPRIEN)
"RTN","VPRROS6",41,0)
 Q
"RTN","VPRROS6",42,0)
 ;
"RTN","VPRROS6",43,0)
CLIN ;Process patients for this clinic.  Select all if filter is null
"RTN","VPRROS6",44,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS6",45,0)
 I '$D(DT) S DT=$$DT^XLFDT()
"RTN","VPRROS6",46,0)
 S BEG=DT,END=$S(VPRFILT="T":DT+.24,1:9999999+.24),VPRIII=BEG
"RTN","VPRROS6",47,0)
 S VPRCIEN=+$P(VPRX,"^",2) F  S VPRIII=$O(^SC(VPRCIEN,"S",VPRIII)) Q:VPRIII'>0!(VPRIII>END)  D
"RTN","VPRROS6",48,0)
 . S VPRII=0 F  S VPRII=$O(^SC(VPRCIEN,"S",VPRIII,1,VPRII)) Q:VPRII'>0  S DFN=$P($G(^SC(VPRCIEN,"S",VPRIII,1,VPRII,0)),"^",1) I DFN>0 D
"RTN","VPRROS6",49,0)
 . .S VPRLIST2(DFN)=VPRIZ
"RTN","VPRROS6",50,0)
 Q
"RTN","VPRROS6",51,0)
 ;
"RTN","VPRROS6",52,0)
WARD ;Process patients for this ward
"RTN","VPRROS6",53,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS6",54,0)
 S VPRWIEN=+$P(VPRX,"^",2),VPRWNAME=$P($G(^DIC(42,VPRWIEN,0)),"^",1)
"RTN","VPRROS6",55,0)
 S VPRIII=0 F  S VPRIII=$O(^DGPM("CN",VPRWNAME,VPRIII)) Q:VPRIII'>0  D
"RTN","VPRROS6",56,0)
 . S DFN=$P($G(^DGPM(VPRIII,0)),"^",3),VPRLIST2(DFN)=VPRIZ
"RTN","VPRROS6",57,0)
 Q
"RTN","VPRROS6",58,0)
 ;
"RTN","VPRROS6",59,0)
PAT ;Process patient from Patient file Source
"RTN","VPRROS6",60,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS6",61,0)
 S DFN=+$P(VPRX,"^",2),VPRLIST2(DFN)=VPRIZ
"RTN","VPRROS6",62,0)
 Q
"RTN","VPRROS6",63,0)
 ;
"RTN","VPRROS6",64,0)
PCMM ;Process patients from a PCMM team
"RTN","VPRROS6",65,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS6",66,0)
 S VPRTIEN=+$P(VPRX,"^",2),VPERR="",VPRTLST=""
"RTN","VPRROS6",67,0)
 D PTTM^SCAPMC(VPRTIEN,,"VPRTLST",VPERR)
"RTN","VPRROS6",68,0)
 S VPRIII="" F  S VPRIII=$O(VPRTLST(VPRIII)) Q:VPRIII'>0  S DFN=$P(VPRTLST(VPRIII),"^",1) S VPRTST2(DFN)=VPRIZ
"RTN","VPRROS6",69,0)
 Q
"RTN","VPRROS6",70,0)
 ;
"RTN","VPRROS6",71,0)
CPRS ;Process patients from CPRS Lists
"RTN","VPRROS6",72,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS6",73,0)
 S VPROIEN=+$P(VPRX,"^",2),VPERR=""
"RTN","VPRROS6",74,0)
 S VPRIII=0 F  S VPRIII=$O(^OR(100.21,VPROIEN,10,VPRIII)) Q:VPRIII'>0  S DFN=$P(^OR(100.21,VPROIEN,10,VPRIII,0),";",1) S VPRLIST2(DFN)=VPRIZ
"RTN","VPRROS6",75,0)
 Q
"RTN","VPRROS6",76,0)
 ;
"RTN","VPRROS6",77,0)
ROST ;Process patients from selected roster
"RTN","VPRROS6",78,0)
 K VPRLIST2,VPRBLIST S (VPRLIST2,VPRBLIST)="" ; -- kcm added comma
"RTN","VPRROS6",79,0)
 N VPR,VPRIEN,VPERR
"RTN","VPRROS6",80,0)
 S VPRIEN=+$P(VPRX,"^",2),VPERR="",VPROUT=1,VPR="VPRBLIST"
"RTN","VPRROS6",81,0)
 D COMPILE^VPRROS2(.VPRZ,VPRIEN,"")
"RTN","VPRROS6",82,0)
 M VPRBLIST=VPRLIST2
"RTN","VPRROS6",83,0)
 K VPROUT
"RTN","VPRROS6",84,0)
 Q
"RTN","VPRROS6",85,0)
 ;
"RTN","VPRROS6",86,0)
SPEC ;Process patients with selected Treating Specialty
"RTN","VPRROS6",87,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS6",88,0)
 S VPROIEN=+$P(VPRX,"^",2),VPERR=""
"RTN","VPRROS6",89,0)
 N DFN S DFN=0 F  S DFN=$O(^DPT("ATR",VPROIEN,DFN)) Q:DFN'>0  S VPRLIST2(DFN)=VPRIZ
"RTN","VPRROS6",90,0)
 Q
"RTN","VPRROS6",91,0)
 ;
"RTN","VPRROS6",92,0)
PROV ;Process patients for selected provider
"RTN","VPRROS6",93,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS6",94,0)
 S VPRPIEN=+$P(VPRX,"^",2),VPERR=""
"RTN","VPRROS6",95,0)
 N DFN S DFN=0 F  S DFN=$O(^DPT("APR",VPRPIEN,DFN)) Q:DFN'>0  S VPRLIST2(DFN)=""
"RTN","VPRROS6",96,0)
 Q
"RTN","VPRROS6",97,0)
 ;
"RTN","VPRROS6",98,0)
PXRM ;Process patients for selected panel
"RTN","VPRROS6",99,0)
 K VPRLIST2 S VPRLIST2=""
"RTN","VPRROS6",100,0)
 S VPRPIEN=+$P(VPRX,"^",2),VPERR=""
"RTN","VPRROS6",101,0)
 S VPRC=VPRPIEN,VPRLIEN=$P(^VPROSTER(VPRIEN,0),"^",1),VPRPNME=$P(^VPROSTER(VPRIEN,0),"^",6) I VPRPNME="" S VPRPNME=VPRRNAME,$P(^VPROSTER(VPRIEN,0),U,6)=VPRRNAME
"RTN","VPRROS6",102,0)
 S VPRPAT="" D RUNLIST^VPRROS5(.VPRPAT,VPRLIEN,VPRPNME,0,1)
"RTN","VPRROS6",103,0)
 S VPRII=0 F  S VPRII=$O(VPRPAT(VPRC,VPRII)) Q:VPRII'>0  S DFN=VPRPAT(VPRC,VPRII),VPRLIST2(DFN)=VPRIZ
"RTN","VPRROS6",104,0)
 Q
"RTN","VPRROS6",105,0)
 ;
"RTN","VPRROS6",106,0)
UNION ;Add to existing list
"RTN","VPRROS6",107,0)
 S VPRII=0 F  S VPRII=$O(VPRLIST2(VPRII)) Q:VPRII'>0  S VPRLIST(VPRII)=VPRLIST2(VPRII)
"RTN","VPRROS6",108,0)
 Q
"RTN","VPRROS6",109,0)
 ;
"RTN","VPRROS6",110,0)
INTER ;Intersect with existing list
"RTN","VPRROS6",111,0)
 S VPRII=0 F  S VPRII=$O(VPRLIST(VPRII)) Q:VPRII'>0  D
"RTN","VPRROS6",112,0)
 . I '$D(VPRLIST2(VPRII)) K VPRLIST(VPRII)
"RTN","VPRROS6",113,0)
 Q
"RTN","VPRROS6",114,0)
 ;
"RTN","VPRROS6",115,0)
DIFF ;Remove patients from this source that we have so far
"RTN","VPRROS6",116,0)
 S VPRII=0 F  S VPRII=$O(VPRLIST2(VPRII)) Q:VPRII'>0  D
"RTN","VPRROS6",117,0)
 . K VPRLIST(VPRII)
"RTN","VPRROS6",118,0)
 Q
"RTN","VPRROS6",119,0)
 ;
"RTN","VPRROS6",120,0)
GENPAT(VPRID) ;
"RTN","VPRROS6",121,0)
 N DFN,DIC,DR,DIE,DA,NODE,VPRNUM
"RTN","VPRROS6",122,0)
 S DFN=0
"RTN","VPRROS6",123,0)
 S VPRNUM=0
"RTN","VPRROS6",124,0)
 K ^VPROSTER(VPRID,4) S ^VPROSTER(VPRID,4,0)="^561.23P^^"
"RTN","VPRROS6",125,0)
 F  S DFN=$O(VPRLIST(DFN)) Q:DFN'>0  D
"RTN","VPRROS6",126,0)
 . S VPRNUM=VPRNUM+1 S ^VPROSTER(VPRID,4,VPRNUM,0)=DFN_"^"_VPRLIST(DFN),^VPROSTER(VPRID,4,"B",DFN,VPRNUM)="",^VPROSTER("AB",DFN,VPRID,VPRNUM)=""
"RTN","VPRROS6",127,0)
 Q
"RTN","VPRROS7")
0^62^B23838606
"RTN","VPRROS7",1,0)
VPRROS7 ;SLC/GRR -- Get Roster identification for patient(s) ;4/24/2012
"RTN","VPRROS7",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;AUG 17, 2011;Build 283
"RTN","VPRROS7",3,0)
GET(VPR,VPRARRAY) ;; Previews what a roster would look like as defined
"RTN","VPRROS7",4,0)
 ;;  Called by the GUI Roster Builder
"RTN","VPRROS7",5,0)
 ;; Input - VPRARRAY - contains roster data entered thru GUI
"RTN","VPRROS7",6,0)
 K VPRLIST,VPRLIST2
"RTN","VPRROS7",7,0)
 N %,BEG,DA,DIDEL,DIE,DOB,SSN,DR,END,GENDER,ICN,NAME,VPRC,VPRCIEN,VPRDIS,VPRDNAME,VPRDOB,VPRDT,VPRIII,VPRLIEN,VPROIEN,VPROWNID
"RTN","VPRROS7",8,0)
 N VPROWNNM,VPRPAT,VPRPIEN,VPRPNME,VPRRCNT,VPRRID,VPRTEXT,VPRTIEN,VPRLST,VPRVAR,VPRVER,VPRWIEN,VPRWNAME,VPRZ,X,Y
"RTN","VPRROS7",9,0)
 N VPRFILT,VPRI,VPRNLIST,VPRSRCID,VPRTAG,VPRTLST,VPRY,VPRTYPE,ZZ,DFN,IEN,VPERR,VPRICN,VPROP,VPRPNAME,VPRRNAME
"RTN","VPRROS7",10,0)
 N VPRSYS S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRROS7",11,0)
 S (VPRLIST,VPRFILT,VPRTYPE,VPROP,VPRLIST2,VPERR)="",VPRI=0
"RTN","VPRROS7",12,0)
 S VPR=$NA(^TMP($J,"VPROSTER")) ; kcm -- moved this here so VPR gets defined
"RTN","VPRROS7",13,0)
 K ^TMP($J,"VPROSTER")
"RTN","VPRROS7",14,0)
 I $O(VPRARRAY(""))="" S @VPR@(1)="0^No patient data passed" Q
"RTN","VPRROS7",15,0)
 D NOW^%DTC S VPRDT=%
"RTN","VPRROS7",16,0)
 S VPRVER="<results version='"_$P($T(VPRROS7+1),";",3)_"'>"
"RTN","VPRROS7",17,0)
 D ADD(VPRVER)
"RTN","VPRROS7",18,0)
 S VPRZ="" F  S VPRZ=$O(VPRARRAY(VPRZ)) Q:VPRZ=""  D
"RTN","VPRROS7",19,0)
 . S DFN=$P(VPRARRAY(VPRZ),"^",1),VPRPNAME=$P(VPRARRAY(VPRZ),"^",2),VPRPNAME=$$ESC^VPRD(VPRPNAME),VPRICN=$P(VPRARRAY(VPRZ),"^",3)
"RTN","VPRROS7",20,0)
 . S ICN=$$GETICN^MPIF001(DFN)
"RTN","VPRROS7",21,0)
 . S NAME=$P(^DPT(DFN,0),"^",1),GENDER=$P(^DPT(DFN,0),"^",2),SSN=$P(^DPT(DFN,0),"^",9),DOB=$P(^DPT(DFN,0),"^",3),VPRDOB=$$FMTHL7^XLFDT(DOB)
"RTN","VPRROS7",22,0)
 . S Y="<patient name='"_NAME_"' gender='"_GENDER_"' dob='"_VPRDOB_"' ssn='"_SSN_"' id='"_DFN_$S(ICN:"' icn='"_ICN,1:"")_"' />" D ADD(Y)
"RTN","VPRROS7",23,0)
 . S IEN="" F  S IEN=$O(^VPROSTER("AB",DFN,IEN)) Q:IEN=""  D
"RTN","VPRROS7",24,0)
 . . S VPRRID=IEN,VPRRNAME=$P($G(^VPROSTER(VPRRID,0)),"^",1),VPRRNAME=$$ESC^VPRD(VPRRNAME)
"RTN","VPRROS7",25,0)
 . . S VPRTEXT="<roster ien='"_VPRRID_"' rosterName='"_VPRRNAME_"'/>" D ADD(VPRTEXT)
"RTN","VPRROS7",26,0)
 S VPRTEXT="</results>" D ADD(VPRTEXT)
"RTN","VPRROS7",27,0)
 Q
"RTN","VPRROS7",28,0)
 ;
"RTN","VPRROS7",29,0)
ADD(X) ; -- Add a line @VPR@(n)=X
"RTN","VPRROS7",30,0)
 S VPRI=$G(VPRI)+1
"RTN","VPRROS7",31,0)
 S @VPR@(VPRI)=X
"RTN","VPRROS7",32,0)
 Q
"RTN","VPRROS7",33,0)
 ;
"RTN","VPRROS7",34,0)
TEST ;TEMPORARY
"RTN","VPRROS7",35,0)
 S VPRARRAY(0)="100845^AVIVAPATIENT,FOUR^"
"RTN","VPRROS7",36,0)
 S VPRARRAY(1)="100850^AVIVAPATIENT,TEN^"
"RTN","VPRROS7",37,0)
 D GET(.VPR,.VPRARRAY)
"RTN","VPRROS7",38,0)
 Q
"RTN","VPRROS7",39,0)
 ;
"RTN","VPRROS7",40,0)
TESTJ ;TEMPORARY
"RTN","VPRROS7",41,0)
 S VPRARRAY(0)="100845^AVIVAPATIENT,FOUR^"
"RTN","VPRROS7",42,0)
 S VPRARRAY(1)="100850^AVIVAPATIENT,TEN^"
"RTN","VPRROS7",43,0)
 D GETJ(.VPR,.VPRARRAY)
"RTN","VPRROS7",44,0)
 Q
"RTN","VPRROS7",45,0)
 ;
"RTN","VPRROS7",46,0)
GETJ(VPR,VPRARRAY) ;Get Rosters which are in selected patient(s)
"RTN","VPRROS7",47,0)
 ;output in JSON object contains patient information and all rosters patient is currently in
"RTN","VPRROS7",48,0)
 S VPR=$NA(^TMP($J,"VPROSTER")) ; kcm -- moved this here so VPR gets defined
"RTN","VPRROS7",49,0)
 N VPRI,VPRDT,VPRZ,DFN,VPRRNAME,VPRICN,NAME,SSN,DOB,VPRDOB,PAT,VPRRID,X,Y
"RTN","VPRROS7",50,0)
 K ^TMP($J,"VPROSTER")
"RTN","VPRROS7",51,0)
 I $O(VPRARRAY(""))="" S @VPR@(1)="0^No patient data passed" Q
"RTN","VPRROS7",52,0)
 D NOW^%DTC S VPRDT=%
"RTN","VPRROS7",53,0)
 S VPRI=0
"RTN","VPRROS7",54,0)
 S VPRZ="" F  S VPRZ=$O(VPRARRAY(VPRZ)) Q:VPRZ=""  D
"RTN","VPRROS7",55,0)
 . S DFN=$P(VPRARRAY(VPRZ),"^",1),VPRPNAME=$P(VPRARRAY(VPRZ),"^",2),VPRPNAME=$$ESC^VPRD(VPRPNAME),VPRICN=$P(VPRARRAY(VPRZ),"^",3)
"RTN","VPRROS7",56,0)
 . S ICN=$$GETICN^MPIF001(DFN)
"RTN","VPRROS7",57,0)
 . S NAME=$P(^DPT(DFN,0),"^",1),GENDER=$P(^DPT(DFN,0),"^",2),SSN=$P(^DPT(DFN,0),"^",9),DOB=$P(^DPT(DFN,0),"^",3),VPRDOB=$$JSONDT^VPRUTILS(DOB)
"RTN","VPRROS7",58,0)
 . S PAT("familyName")=$P(NAME,",",1),PAT("givenNames")=$P(NAME,",",2,99),PAT("ssn")=SSN,PAT("localId")=DFN
"RTN","VPRROS7",59,0)
 . S X=GENDER S PAT("genderCode")="urn:va:pat-gender:"_X,PAT("genderName")=$$NAME^VPRDJ00(X,"gender")
"RTN","VPRROS7",60,0)
 . S PAT("dateOfBirth")=VPRDOB,PAT("uid")=$$SETUID^VPRUTILS("pat",DFN,DFN,"")
"RTN","VPRROS7",61,0)
 . S IEN="" F  S IEN=$O(^VPROSTER("AB",DFN,IEN)) Q:IEN=""  D
"RTN","VPRROS7",62,0)
 . . S VPRRID=IEN,VPRRNAME=$P($G(^VPROSTER(VPRRID,0)),"^",1),VPRRNAME=$$ESC^VPRD(VPRRNAME)
"RTN","VPRROS7",63,0)
 . . S PAT("roster",IEN,"localId")=IEN,PAT("roster",IEN,"uid")=$$SETUID^VPRUTILS("roster","",IEN,"")
"RTN","VPRROS7",64,0)
 . . S PAT("roster",IEN,"rosterName")=VPRRNAME
"RTN","VPRROS7",65,0)
 I $D(PAT)>9 D ADDJ
"RTN","VPRROS7",66,0)
 Q
"RTN","VPRROS7",67,0)
 ;
"RTN","VPRROS7",68,0)
ADDJ ;
"RTN","VPRROS7",69,0)
 N VPRY,ERR
"RTN","VPRROS7",70,0)
 D ENCODE^VPRJSON("PAT","VPRY","ERR")
"RTN","VPRROS7",71,0)
 I $D(VPRY) D
"RTN","VPRROS7",72,0)
 . D:VPRI COMMA(VPRI)
"RTN","VPRROS7",73,0)
 . S VPRI=VPRI+1 M @VPR@(VPRI)=VPRY
"RTN","VPRROS7",74,0)
 Q
"RTN","VPRROS7",75,0)
 ;
"RTN","VPRROS7",76,0)
COMMA(I) ;; -- add comma between items
"RTN","VPRROS7",77,0)
 N J S J=+$O(@VPR@(I,"A"),-1) ;last sub-node for item I
"RTN","VPRROS7",78,0)
 S J=J+1,@VPR@(I,J)=","
"RTN","VPRROS7",79,0)
 Q
"RTN","VPRROS7",80,0)
 ;
"RTN","VPRROS7",81,0)
SUBS(VPR,SYS,ON,LIST) ; -- Un/Subscribe to Patient Data Monitor
"RTN","VPRROS7",82,0)
 ; RPC = VPR SUBSCRIBE ROSTERS
"RTN","VPRROS7",83,0)
 N DA,I,ID,HDR,VPRI
"RTN","VPRROS7",84,0)
 S SYS=$G(SYS),ON=+$G(ON) Q:'$L(SYS)
"RTN","VPRROS7",85,0)
 S DA=$$FIND^VPRPATS(SYS) Q:DA<1
"RTN","VPRROS7",86,0)
 S VPR=$NA(^TMP("VPR",$J)) K @VPR
"RTN","VPRROS7",87,0)
 ;S:'$D(^XTMP("VPROS")) ^XTMP("VPROS",0)="3991231^"_DT_"^VPR Patient Data Monitor"
"RTN","VPRROS7",88,0)
 ;
"RTN","VPRROS7",89,0)
 ; loop through LIST(n) = 'id'
"RTN","VPRROS7",90,0)
 D ADD("<rosters>")
"RTN","VPRROS7",91,0)
 S I="" F  S I=$O(LIST(I)) Q:I=""  S ID=LIST(I) D
"RTN","VPRROS7",92,0)
 . I ID<1!'$D(^VPROSTER(ID)) D RET(ID,"error") Q
"RTN","VPRROS7",93,0)
 . I ON D  Q
"RTN","VPRROS7",94,0)
 .. S:'$D(^VPR(560,DA,2,ID,0)) HDR=$G(^VPR(560,DA,2,0)),^(0)="^560.02P^"_ID_U_($P(HDR,U,4)+1)
"RTN","VPRROS7",95,0)
 .. S ^VPR(560,DA,2,ID,0)=ID_U_ON,^VPR(560,"AROS",ID,DA)=""
"RTN","VPRROS7",96,0)
 .. D RET(ID,"on") ;S ^XTMP("VPROS",ID)=ON
"RTN","VPRROS7",97,0)
 . ; else, remove patient tracking info from ^XTMP
"RTN","VPRROS7",98,0)
 . S:$D(^VPR(560,DA,2,ID,0)) $P(^(0),U,2)=0
"RTN","VPRROS7",99,0)
 . K ^VPR(560,"AROS",ID,DA) ;I '$D(^VPR(560,"AROS",ID)) K ^XTMP("VPROS",ID)
"RTN","VPRROS7",100,0)
 . D RET(ID,"off")
"RTN","VPRROS7",101,0)
 D ADD("</rosters>")
"RTN","VPRROS7",102,0)
 Q
"RTN","VPRROS7",103,0)
 ;
"RTN","VPRROS7",104,0)
RET(ID,STS) ; -- add XML node for roster ID update subscription
"RTN","VPRROS7",105,0)
 N Y S Y="<roster id='"_$G(ID)
"RTN","VPRROS7",106,0)
 S Y=Y_"' subscribe='"_$G(STS)_"' />"
"RTN","VPRROS7",107,0)
 D ADD(Y)
"RTN","VPRROS7",108,0)
 Q
"RTN","VPRSR")
0^4^B406288
"RTN","VPRSR",1,0)
VPRSR ;SLC/MKB -- Surgery interface
"RTN","VPRSR",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRSR",3,0)
 ;
"RTN","VPRSR",4,0)
 ; Supported by DBIA #4750
"RTN","VPRSR",5,0)
 ;
"RTN","VPRSR",6,0)
 ; ---------------- Update Triggers ----------------
"RTN","VPRSR",7,0)
 ;
"RTN","VPRSR",8,0)
NEW(IEN,DFN,STS) ; -- new surgery request [from SROERR]
"RTN","VPRSR",9,0)
 S IEN=+$G(IEN),DFN=+$G(DFN) Q:DFN<1
"RTN","VPRSR",10,0)
 D SR^VPREVNT(DFN,IEN)
"RTN","VPRSR",11,0)
 Q
"RTN","VPRSR",12,0)
 ;
"RTN","VPRSR",13,0)
UPD(IEN,DFN,STS) ; -- updated surgery request [from SROERR0]
"RTN","VPRSR",14,0)
 S IEN=+$G(IEN),DFN=+$G(DFN) Q:DFN<1
"RTN","VPRSR",15,0)
 D SR^VPREVNT(DFN,IEN)
"RTN","VPRSR",16,0)
 Q
"RTN","VPRSR",17,0)
 ;
"RTN","VPRSR",18,0)
DEL(IEN,DFN) ; -- delete surgery request [from SROERR]
"RTN","VPRSR",19,0)
 S IEN=+$G(IEN),DFN=+$G(DFN) Q:DFN<1
"RTN","VPRSR",20,0)
 D SR^VPREVNT(DFN,IEN,"@")
"RTN","VPRSR",21,0)
 Q
"RTN","VPRTRPC")
0^63^B3739499
"RTN","VPRTRPC",1,0)
VPRTRPC ;SLC/AGP - Generic RPC controller for VPR ; 7/30/13 3:29pm
"RTN","VPRTRPC",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRTRPC",3,0)
 ;
"RTN","VPRTRPC",4,0)
 ;
"RTN","VPRTRPC",5,0)
RPC(VPRRES,PARAMS) ; Process request via RPC instead of CSP
"RTN","VPRTRPC",6,0)
 N X,REQ,VPRCNT,VPRSITE,VPRUSER,VPRDBUG,VPRSTA
"RTN","VPRTRPC",7,0)
 ;S VPRXML=$NA(^TMP($J,"VPR RESULTS")) K @VPRXML
"RTN","VPRTRPC",8,0)
 S VPRCNT=0
"RTN","VPRTRPC",9,0)
 ;S VPRUSER=DUZ,VPRSITE=DUZ(2),VPRSTA=$$STA^XUAF4(DUZ(2))
"RTN","VPRTRPC",10,0)
 S X="" F  S X=$O(PARAMS(X)) Q:X=""  S REQ(X,1)=PARAMS(X)
"RTN","VPRTRPC",11,0)
 ;
"RTN","VPRTRPC",12,0)
COMMON ; Come here for both CSP and RPC Mode
"RTN","VPRTRPC",13,0)
 ; 
"RTN","VPRTRPC",14,0)
 N CMD
"RTN","VPRTRPC",15,0)
 S CMD=$G(REQ("command",1))
"RTN","VPRTRPC",16,0)
 ;
"RTN","VPRTRPC",17,0)
 I CMD="testRPC" D  G OUT
"RTN","VPRTRPC",18,0)
 . D TESTRPC(.VPRRES,$$VAL("value"))
"RTN","VPRTRPC",19,0)
 ;
"RTN","VPRTRPC",20,0)
 I CMD="importJson" D IMPJSON^VPRTRPC1(.VPRRES,.PARAMS)
"RTN","VPRTRPC",21,0)
 ;
"RTN","VPRTRPC",22,0)
 I CMD="testDelay" D DELAY^VPRTRPC1(.VPRRES,.PARAMS)
"RTN","VPRTRPC",23,0)
 ;
"RTN","VPRTRPC",24,0)
 I CMD="saveData" D SAVE^VPRTRPC1(.VPRRES,$$VAL("patient"),$$VAL("user"),$$VAL("domain"),$$VAL("num"),$$VAL("system"),$$VAL("json"))
"RTN","VPRTRPC",25,0)
 ;
"RTN","VPRTRPC",26,0)
 I CMD="deleteData" D DELETE^VPRTRPC1(.VPRRES,$$VAL("patient"),$$VAL("system"),$$VAL("json"))
"RTN","VPRTRPC",27,0)
 ;
"RTN","VPRTRPC",28,0)
 ;M ^XTMP("AGP TEST","PARAMS")=PARAMS
"RTN","VPRTRPC",29,0)
 I CMD="clearData" D CLEARVAL^VPRTRPC1(.VPRRES,$$VAL("system"),$$VAL("patient"),$$VAL("beg"),$$VAL("end"),$$VAL("json"))
"RTN","VPRTRPC",30,0)
 ;
"RTN","VPRTRPC",31,0)
 I CMD="getFields" D GETFLDS^VPRTRPC1(.VPRRES)
"RTN","VPRTRPC",32,0)
 ;
"RTN","VPRTRPC",33,0)
OUT ;
"RTN","VPRTRPC",34,0)
 I '$D(VPRRES) S VPRRES=""
"RTN","VPRTRPC",35,0)
END Q
"RTN","VPRTRPC",36,0)
 ;
"RTN","VPRTRPC",37,0)
VAL(X) ; return value from request
"RTN","VPRTRPC",38,0)
 Q $G(REQ(X,1))
"RTN","VPRTRPC",39,0)
 ;
"RTN","VPRTRPC",40,0)
TESTRPC(RESULT,VALUE) ;
"RTN","VPRTRPC",41,0)
 S RESULT="result"
"RTN","VPRTRPC",42,0)
 I VALUE="error" D APPERROR^%ZTER("test RPC Error") Q
"RTN","VPRTRPC",43,0)
 I VALUE="wait" H 60
"RTN","VPRTRPC",44,0)
 Q
"RTN","VPRTRPC",45,0)
 ;
"RTN","VPRTRPC1")
0^64^B41518784
"RTN","VPRTRPC1",1,0)
VPRTRPC1 ; SLC/AGP - Process Order Request from AVIVA System. ; 7/30/13 3:29pm
"RTN","VPRTRPC1",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRTRPC1",3,0)
 Q
"RTN","VPRTRPC1",4,0)
 ;
"RTN","VPRTRPC1",5,0)
GETFLDS(RESULT) ;
"RTN","VPRTRPC1",6,0)
 N ARRAY,CNT,FCNT,FIELDS,NUM,TYPE,VPRP,VPRTYPE,X
"RTN","VPRTRPC1",7,0)
 S CNT=0
"RTN","VPRTRPC1",8,0)
 ;F TYPE="vs","prob","art","order","med","cons","proc","obs","lab","rad","surgery","tiu","mha","imm","pov","skin","exam","cpt","ed","factor","appt","visit","ptf" D
"RTN","VPRTRPC1",9,0)
 S VPRTYPE=$$ALL^VPRDJ
"RTN","VPRTRPC1",10,0)
 F VPRP=1:1:$L(VPRTYPE,";") S TYPE=$P(VPRTYPE,";",VPRP) I $L(TYPE) D
"RTN","VPRTRPC1",11,0)
 .S CNT=CNT+1
"RTN","VPRTRPC1",12,0)
 .S ARRAY("data",CNT,"type","name")=TYPE
"RTN","VPRTRPC1",13,0)
 .S FIELDS=$$ATTR^VPRDCRC(TYPE)
"RTN","VPRTRPC1",14,0)
 .S NUM=$L(FIELDS,U)
"RTN","VPRTRPC1",15,0)
 .S FCNT=0
"RTN","VPRTRPC1",16,0)
 .F X=1:1:NUM D
"RTN","VPRTRPC1",17,0)
 ..I $P(FIELDS,U,X)="" Q
"RTN","VPRTRPC1",18,0)
 ..S FCNT=FCNT+1
"RTN","VPRTRPC1",19,0)
 ..S ARRAY("data",CNT,"type","fields",FCNT,"field")=$P(FIELDS,U,X)
"RTN","VPRTRPC1",20,0)
 D ENCODE^VPRJSON("ARRAY","RESULT","ERROR")
"RTN","VPRTRPC1",21,0)
 ;I $D(ERROR) ZW ERROR
"RTN","VPRTRPC1",22,0)
 Q
"RTN","VPRTRPC1",23,0)
 ;
"RTN","VPRTRPC1",24,0)
TESTRPC(OUT,PARAMS) ;
"RTN","VPRTRPC1",25,0)
 ;K ^XTMP("ZZVPR PARAMS"),^XTMP("ZZVPR JSON") ; KCM -- commented out for XINDEX
"RTN","VPRTRPC1",26,0)
 ;M ^XTMP("ZZVPR JSON")=JSON
"RTN","VPRTRPC1",27,0)
 ;M ^XTMP("ZZVPR PARAMS")=PARAMS ; KCM -- commented out for XINDEX
"RTN","VPRTRPC1",28,0)
 Q
"RTN","VPRTRPC1",29,0)
 ;
"RTN","VPRTRPC1",30,0)
CLEARVAL(RESULT,SYS,PAT,BEG,END,JSON) ;
"RTN","VPRTRPC1",31,0)
 N BDATE,BNUM,DATE,EDATE,ENUM,LAST,NODE,SUB,X,LAST
"RTN","VPRTRPC1",32,0)
 D DELSYS(SYS)
"RTN","VPRTRPC1",33,0)
 S BDATE=$P(BEG,":"),BNUM=$P(BEG,":",2)
"RTN","VPRTRPC1",34,0)
 S EDATE=$P(END,":"),ENUM=$P(END,":",2)
"RTN","VPRTRPC1",35,0)
 S SUB="VPR-"_BDATE
"RTN","VPRTRPC1",36,0)
 ;handle cleaning out the ^xtmp for the same date range
"RTN","VPRTRPC1",37,0)
 I BDATE=EDATE D  Q
"RTN","VPRTRPC1",38,0)
 .F X=BNUM:1:ENUM I $P(^XTMP("VPR-"_BDATE,X),U)=PAT K ^XTMP("VPR-"_BDATE,X)
"RTN","VPRTRPC1",39,0)
 ;
"RTN","VPRTRPC1",40,0)
 F  S SUB=$O(^XTMP(SUB)) D  Q:SUB=""!($$END(SUB,EDATE)=1)
"RTN","VPRTRPC1",41,0)
 .;handle date less then end date but date equal start date
"RTN","VPRTRPC1",42,0)
 .S DATE=$P(SUB,"-",2) I DATE<EDATE,DATE=BDATE D  Q
"RTN","VPRTRPC1",43,0)
 ..S LAST=$O(^XTMP(SUB,""),-1)
"RTN","VPRTRPC1",44,0)
 ..F X=BNUM:1:LAST I $P(^XTMP(SUB,X),U)=PAT K ^XTMP(SUB,X)
"RTN","VPRTRPC1",45,0)
 .;
"RTN","VPRTRPC1",46,0)
 .;handle date greater then start date and less then end date
"RTN","VPRTRPC1",47,0)
 .I DATE<EDATE,DATE>BDATE D  Q
"RTN","VPRTRPC1",48,0)
 ..S LAST=$O(^XTMP(SUB,""),-1)
"RTN","VPRTRPC1",49,0)
 ..F X=1:1:LAST I $P(^XTMP(SUB,X),U)=PAT K ^XTMP(SUB,X)
"RTN","VPRTRPC1",50,0)
 .;
"RTN","VPRTRPC1",51,0)
 .;S LAST=$O(^XTMP(SUB,""),-1)
"RTN","VPRTRPC1",52,0)
 .;assume date equal stop date and greater then start date
"RTN","VPRTRPC1",53,0)
 .F X=1:1:ENUM I $P(^XTMP(SUB,X),U)=PAT K ^XTMP(SUB,X)
"RTN","VPRTRPC1",54,0)
 ;S LAST=$O(^XTMP("VPR-"_DATE,""),-1)
"RTN","VPRTRPC1",55,0)
 ;F X=NUM:1:LAST K ^XTMP("VPR-"_DATE,X)
"RTN","VPRTRPC1",56,0)
 ;Need to iterate json node and delete entries that were marked as entered in error (for example  Vitals)
"RTN","VPRTRPC1",57,0)
 ;This reset the freshness XTMP. Should this be in it own RPC call?
"RTN","VPRTRPC1",58,0)
 ;K ^XTMP("VPR-"_DT) M ^XTMP("VPR-"_DT)=^XTMP("VPR BACKUP") K ^XTMP("VPR BACKUP")
"RTN","VPRTRPC1",59,0)
 Q
"RTN","VPRTRPC1",60,0)
END(NODE,EDATE) ;
"RTN","VPRTRPC1",61,0)
 N DATE
"RTN","VPRTRPC1",62,0)
 S DATE=$P(NODE,"-",2)
"RTN","VPRTRPC1",63,0)
 I DATE'>EDATE Q 0
"RTN","VPRTRPC1",64,0)
 Q 1
"RTN","VPRTRPC1",65,0)
 ;
"RTN","VPRTRPC1",66,0)
DELETE(RESULT,PAT,SYS,JSON) ;
"RTN","VPRTRPC1",67,0)
 N CNT,DA,DIK,ERROR,FILENUM,GLOBAL
"RTN","VPRTRPC1",68,0)
 D DECODE^VPRJSON("JSON","IN","ERROR")
"RTN","VPRTRPC1",69,0)
 S FILENUM=IN("FILENUM")
"RTN","VPRTRPC1",70,0)
 ;Handle files that are not deleted need to check with Mel/Jerry about the action
"RTN","VPRTRPC1",71,0)
 ;I FILENUM="NOT DELETE NODES" D NODELETE D POST^VPREVNT(PAT,DOMAIN,DA,"") Q
"RTN","VPRTRPC1",72,0)
 S GLOBAL=$$GET1^DID(FILENUM,"","","GLOBAL NAME")
"RTN","VPRTRPC1",73,0)
 S DIK=GLOBAL
"RTN","VPRTRPC1",74,0)
 S CNT=0 F  S CNT=$O(IN("ITEMS",CNT)) Q:CNT'>0  D
"RTN","VPRTRPC1",75,0)
 .S DA=$G(IN("ITEMS",CNT,"IEN"))
"RTN","VPRTRPC1",76,0)
 .D ^DIK
"RTN","VPRTRPC1",77,0)
 .D POST^VPREVNT(PAT,"factor",DA,"@")
"RTN","VPRTRPC1",78,0)
 ;This reset the freshness XTMP. Should this be in it own RPC call?
"RTN","VPRTRPC1",79,0)
 ;K ^XTMP("VPR-"_DT) M ^XTMP("VPR-"_DT)=^XTMP("VPR BACKUP") K ^XTMP("VPR BACKUP")
"RTN","VPRTRPC1",80,0)
 Q
"RTN","VPRTRPC1",81,0)
 ;
"RTN","VPRTRPC1",82,0)
DELAY(OUT,PARAMS) ;
"RTN","VPRTRPC1",83,0)
 N ARRAY,DELAY
"RTN","VPRTRPC1",84,0)
 S DELAY=$G(PARAMS("delay"))
"RTN","VPRTRPC1",85,0)
 H DELAY
"RTN","VPRTRPC1",86,0)
 S ARRAY("success")="true"
"RTN","VPRTRPC1",87,0)
 D ENCODE^VPRJSON("ARRAY","OUT","ERROR")
"RTN","VPRTRPC1",88,0)
 I $D(ERROR) D
"RTN","VPRTRPC1",89,0)
 .N RESULT,TXT K OUT
"RTN","VPRTRPC1",90,0)
 .S TXT(1)="Problem encoding json output"
"RTN","VPRTRPC1",91,0)
 .D SETERROR^VPRUTILS(.RESULT,.ERROR,.TXT,.ARRAY)
"RTN","VPRTRPC1",92,0)
 .D ENCODE^VPRJSON("RESULT","OUT","ERROR")
"RTN","VPRTRPC1",93,0)
 Q
"RTN","VPRTRPC1",94,0)
 ;
"RTN","VPRTRPC1",95,0)
DELSYS(SYS) ;
"RTN","VPRTRPC1",96,0)
 N DA,DIK
"RTN","VPRTRPC1",97,0)
 S DA=$O(^VPR(560,"B",SYS,"")) I +DA'>0 Q
"RTN","VPRTRPC1",98,0)
 S DIK="^VPR(560," D ^DIK
"RTN","VPRTRPC1",99,0)
 Q
"RTN","VPRTRPC1",100,0)
 ;
"RTN","VPRTRPC1",101,0)
IMPJSON(OUT,PARAMS) ;
"RTN","VPRTRPC1",102,0)
 N GBL,JSONI,DOMAIN,PATIENT,ERROR
"RTN","VPRTRPC1",103,0)
 S JSONI=PARAMS("value"),DOMAIN=PARAMS("domain"),PATIENT=PARAMS("patientId")
"RTN","VPRTRPC1",104,0)
 S GBL=$NA(^TMP($J,"JSON",DOMAIN,PATIENT)) ; KCM -- changed from ^XTMP("JSON") to pass XINDEX
"RTN","VPRTRPC1",105,0)
 D DECODE^VPRJSON("JSONI",GBL,"ERROR")
"RTN","VPRTRPC1",106,0)
 I $D(ERROR) D  Q
"RTN","VPRTRPC1",107,0)
 .N RESULT,TXT K OUT
"RTN","VPRTRPC1",108,0)
 .S TXT(1)="Problem decoding json input"
"RTN","VPRTRPC1",109,0)
 .D SETERROR^VPRUTILS(.RESULT,.ERROR,.TXT,.JSONI)
"RTN","VPRTRPC1",110,0)
 .D ENCODE^VPRJSON("RESULT","OUT","ERROR")
"RTN","VPRTRPC1",111,0)
 D ENCODE^VPRJSON("ARRAY","OUT","ERROR")
"RTN","VPRTRPC1",112,0)
 Q
"RTN","VPRTRPC1",113,0)
 ;
"RTN","VPRTRPC1",114,0)
GETTEAMS(OUT) ;
"RTN","VPRTRPC1",115,0)
 N ACTPRIM,ARRAY,CNT,ERROR,NODE,NUM,NAME,PATS,SER
"RTN","VPRTRPC1",116,0)
 S NUM=0,CNT=0 F  S NUM=$O(^SCTM(404.51,NUM)) Q:NUM'>0  D
"RTN","VPRTRPC1",117,0)
 .S NODE=$G(^SCTM(404.51,NUM,0)),CNT=CNT+1
"RTN","VPRTRPC1",118,0)
 .S NAME=$P(NODE,U),ACTPRIM=$S($P(NODE,U,5)=1:"true",1:"false")
"RTN","VPRTRPC1",119,0)
 .S SER=""
"RTN","VPRTRPC1",120,0)
 .I $P(NODE,U,6)>6 S SER=$P($G(^DIC(49,$P(NODE,U,6),0)),U)
"RTN","VPRTRPC1",121,0)
 .S PATS=$$TEAMCNT^SCAPMCU1(NUM,DT)
"RTN","VPRTRPC1",122,0)
 .S ARRAY("data",CNT,"name")=NAME
"RTN","VPRTRPC1",123,0)
 .I SER'="" S ARRAY("data",CNT,"service")=SER
"RTN","VPRTRPC1",124,0)
 .S ARRAY("data",CNT,"patients")=PATS
"RTN","VPRTRPC1",125,0)
 D ENCODE^VPRJSON("ARRAY","OUT","ERROR")
"RTN","VPRTRPC1",126,0)
 I $D(ERROR) D
"RTN","VPRTRPC1",127,0)
 .N RESULT,TXT K OUT
"RTN","VPRTRPC1",128,0)
 .S TXT(1)="Problem encoding json output"
"RTN","VPRTRPC1",129,0)
 .D SETERROR^VPRUTILS(.RESULT,.ERROR,.TXT,.ARRAY)
"RTN","VPRTRPC1",130,0)
 .D ENCODE^VPRJSON("RESULT","OUT","ERROR")
"RTN","VPRTRPC1",131,0)
 Q
"RTN","VPRTRPC1",132,0)
 ;
"RTN","VPRTRPC1",133,0)
SAVE(RESULT,PAT,USER,DOMAIN,NUM,SYS,JSON) ;
"RTN","VPRTRPC1",134,0)
 N ERROR,IENARRAY,LDATE,LNUM,VALUE
"RTN","VPRTRPC1",135,0)
 D SETSYS(SYS,PAT)
"RTN","VPRTRPC1",136,0)
 D DECODE^VPRJSON("JSON","VALUE","ERROR")
"RTN","VPRTRPC1",137,0)
 K ^XTMP("VPR BACKUP")
"RTN","VPRTRPC1",138,0)
 S LDATE="VPR-"_DT,LNUM=0
"RTN","VPRTRPC1",139,0)
 I '$D(^XTMP("VPR-"_DT)) S LDATE=$O(^XTMP("VPR-A"),-1)
"RTN","VPRTRPC1",140,0)
 S LNUM=$O(^XTMP(LDATE,""),-1)
"RTN","VPRTRPC1",141,0)
 S IENARRAY("lastUpdate")=$P(LDATE,"-",2)_":"_LNUM
"RTN","VPRTRPC1",142,0)
 M ^XTMP("VPR BACKUP")=^XTMP("VPR-"_DT)
"RTN","VPRTRPC1",143,0)
 I DOMAIN="factor" D HF(PAT,USER,NUM,.VALUE,.IENARRAY)
"RTN","VPRTRPC1",144,0)
 ;M RESULT=IENARRAY
"RTN","VPRTRPC1",145,0)
 D ENCODE^VPRJSON("IENARRAY","RESULT","ERROR")
"RTN","VPRTRPC1",146,0)
 Q
"RTN","VPRTRPC1",147,0)
 ;
"RTN","VPRTRPC1",148,0)
SETSYS(SYS,PAT) ;
"RTN","VPRTRPC1",149,0)
 N FDA,MSG,NAME
"RTN","VPRTRPC1",150,0)
 S NAME=$P($G(^DPT(PAT,0)),U) I NAME="" Q
"RTN","VPRTRPC1",151,0)
 S FDA(560,"?+1,",.01)=SYS
"RTN","VPRTRPC1",152,0)
 S FDA(560.01,"?+2,?+1,",.01)=PAT
"RTN","VPRTRPC1",153,0)
 S FDA(560.01,"?+2,?+1,",2)=1
"RTN","VPRTRPC1",154,0)
 D UPDATE^DIE("","FDA","","MSG")
"RTN","VPRTRPC1",155,0)
 I $D(MSG) D  Q
"RTN","VPRTRPC1",156,0)
 .D EN^DDIOL("Update failed, UPDATE^DIE returned the following error message.")
"RTN","VPRTRPC1",157,0)
 .S IC="MSG"
"RTN","VPRTRPC1",158,0)
 .F  S IC=$Q(@IC) Q:IC=""  W !,IC,"=",@IC
"RTN","VPRTRPC1",159,0)
 .D EN^DDIOL("Examine the above error message for the reason.")
"RTN","VPRTRPC1",160,0)
 .H 2
"RTN","VPRTRPC1",161,0)
 Q
"RTN","VPRTRPC1",162,0)
 ;
"RTN","VPRTRPC1",163,0)
HF(PAT,USER,NUM,VALUE,IENARRAY) ;
"RTN","VPRTRPC1",164,0)
 N CNT,ENCIEN,FDA,FM,FSEC,IEN,LNUM,MSG,NAME,UID,X
"RTN","VPRTRPC1",165,0)
 S FSEC=$P(VALUE("uid"),":",1,5)
"RTN","VPRTRPC1",166,0)
 S FM=$$HL7TFM^XLFDT(VALUE("entered"))
"RTN","VPRTRPC1",167,0)
 S LNUM=$O(^AUPNVHF("A"),-1)
"RTN","VPRTRPC1",168,0)
 S NAME=$G(VALUE("name"))
"RTN","VPRTRPC1",169,0)
 S IEN=$O(^AUTTHF("B",NAME,""))
"RTN","VPRTRPC1",170,0)
 S ENCIEN=$P($G(VALUE("encounterUid")),":",6)
"RTN","VPRTRPC1",171,0)
 S CNT=0
"RTN","VPRTRPC1",172,0)
 F X=1:1:NUM D
"RTN","VPRTRPC1",173,0)
 .S IENS=LNUM+X
"RTN","VPRTRPC1",174,0)
 .S CNT=CNT+1
"RTN","VPRTRPC1",175,0)
 .S FDA(9000010.23,"+"_IENS_",",.01)=IEN
"RTN","VPRTRPC1",176,0)
 .S FDA(9000010.23,"+"_IENS_",",.03)=ENCIEN
"RTN","VPRTRPC1",177,0)
 .S FDA(9000010.23,"+"_IENS_",",1201)=FM
"RTN","VPRTRPC1",178,0)
 .S FDA(9000010.23,"+"_IENS_",",.02)=PAT
"RTN","VPRTRPC1",179,0)
 .D UPDATE^DIE("","FDA","","MSG")
"RTN","VPRTRPC1",180,0)
 .I $D(MSG) D  Q
"RTN","VPRTRPC1",181,0)
 ..D EN^DDIOL("Update failed, UPDATE^DIE returned the following error message.")
"RTN","VPRTRPC1",182,0)
 ..S IC="MSG"
"RTN","VPRTRPC1",183,0)
 ..F  S IC=$Q(@IC) Q:IC=""  W !,IC,"=",@IC
"RTN","VPRTRPC1",184,0)
 ..D EN^DDIOL("Examine the above error message for the reason.")
"RTN","VPRTRPC1",185,0)
 ..H 2
"RTN","VPRTRPC1",186,0)
 .D POST^VPREVNT(PAT,"factor",IENS)
"RTN","VPRTRPC1",187,0)
 .S IENARRAY("FILENUM")="9000010.23"
"RTN","VPRTRPC1",188,0)
 .S IENARRAY("ITEMS",X,"IEN")=IENS
"RTN","VPRTRPC1",189,0)
 Q
"RTN","VPRTRPC1",190,0)
 ;
"RTN","VPRUPD")
0^83^B20368971
"RTN","VPRUPD",1,0)
VPRUPD ;SLC/MKB - Update local data ;11/13/13 2:11pm
"RTN","VPRUPD",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRUPD",3,0)
 ;
"RTN","VPRUPD",4,0)
PHONE(VPR,JSON) ; RPC = VPR PUT PHONE
"RTN","VPRUPD",5,0)
 Q
"RTN","VPRUPD",6,0)
PUT(VPR,DFN,CMD,JSON) ; -- update phone numbers
"RTN","VPRUPD",7,0)
 ; RPC = VPR PUT DEMOGRAPHICS
"RTN","VPRUPD",8,0)
 ;
"RTN","VPRUPD",9,0)
 N ARRAY,VPRERR,ERR,HOME,CELL,NOK,ECON,X,OK,VPRSYS
"RTN","VPRUPD",10,0)
 S VPRSYS=$$GET^XPAR("SYS","VPR SYSTEM NAME")
"RTN","VPRUPD",11,0)
 D DECODE^VPRJSON("JSON","ARRAY","VPRERR")
"RTN","VPRUPD",12,0)
 I $D(VPRERR) D  G PQ
"RTN","VPRUPD",13,0)
 . K ARRAY N VPRTMP,VPRTXT
"RTN","VPRUPD",14,0)
 . S VPRTXT(1)="Problem decoding json input."
"RTN","VPRUPD",15,0)
 . D SETERROR^VPRUTILS(.VPRTMP,.VPRERR,.VPRTXT,.JSON)
"RTN","VPRUPD",16,0)
 . K VPRERR D ENCODE^VPRJSON("VPRTMP","ARRAY","VPRERR")
"RTN","VPRUPD",17,0)
 . S VPR(.5)="{""apiVersion"":""1.01"",""error"":{"
"RTN","VPRUPD",18,0)
 . M VPR(1)=ARRAY
"RTN","VPRUPD",19,0)
 . S VPR(2)="}}"
"RTN","VPRUPD",20,0)
 ;
"RTN","VPRUPD",21,0)
 S DFN=+$G(DFN) I DFN<1 S ERR=$$ERR(1,DFN) G PHQ
"RTN","VPRUPD",22,0)
 S CMD=$G(CMD) ;can only update phone#
"RTN","VPRUPD",23,0)
 N VPRX,VPRDR,I,J S (VPRDR,HOME,CELL,NOK,ECON)=""
"RTN","VPRUPD",24,0)
 D VAL("old")
"RTN","VPRUPD",25,0)
 S I="" F  S I=$O(ARRAY("telecoms",I)) Q:I<1  D
"RTN","VPRUPD",26,0)
 . I $G(ARRAY("telecoms",I,"usageCode"))="H" D  Q
"RTN","VPRUPD",27,0)
 .. S HOME=$G(ARRAY("telecoms",I,"telecom"))
"RTN","VPRUPD",28,0)
 .. I HOME=HOME("old") S HOME="" Q           ;no change
"RTN","VPRUPD",29,0)
 .. I "@"[HOME S:$L(HOME("old")) HOME="@" Q  ;delete
"RTN","VPRUPD",30,0)
 .. S HOME=$$FORMAT(HOME),ARRAY("telecoms",I,"telecom")=HOME
"RTN","VPRUPD",31,0)
 . I $G(ARRAY("telecoms",I,"usageCode"))="MC" D  Q
"RTN","VPRUPD",32,0)
 .. S CELL=$G(ARRAY("telecoms",I,"telecom"))
"RTN","VPRUPD",33,0)
 .. I CELL=CELL("old") S CELL="" Q           ;no change
"RTN","VPRUPD",34,0)
 .. I "@"[CELL S:$L(CELL("old")) CELL="@" Q  ;delete
"RTN","VPRUPD",35,0)
 .. S CELL=$$FORMAT(CELL),ARRAY("telecoms",I,"telecom")=CELL
"RTN","VPRUPD",36,0)
 S I="" F  S I=$O(ARRAY("supports",I)) Q:I<1  D
"RTN","VPRUPD",37,0)
 . S X=$P($G(ARRAY("supports",I,"contactTypeCode")),":",4) Q:X=""  ;NOK or ECON
"RTN","VPRUPD",38,0)
 . S J="" F  S J=$O(ARRAY("supports",I,"telecomList",J)) Q:J<1  D
"RTN","VPRUPD",39,0)
 .. Q:$G(ARRAY("supports",I,"telecomList",J,"usageCode"))'="H"
"RTN","VPRUPD",40,0)
 .. S @X=$G(ARRAY("supports",I,"telecomList",J,"telecom"))
"RTN","VPRUPD",41,0)
 .. I @X=@X@("old") S @X="" Q                ;no change
"RTN","VPRUPD",42,0)
 .. I "@"[@X S:$L(@X@("old")) @X="@" Q       ;delete
"RTN","VPRUPD",43,0)
 .. S @X=$$FORMAT(@X),ARRAY("supports",I,"telecomList",J,"telecom")=@X
"RTN","VPRUPD",44,0)
 .. ; X="NOK" S NOK=$$FORMAT(NOK),ARRAY("supports",I,"telecomList",J,"telecom")=NOK
"RTN","VPRUPD",45,0)
 ;
"RTN","VPRUPD",46,0)
 S:$L(HOME) VPRX(.131)=HOME,VPRDR=".131"
"RTN","VPRUPD",47,0)
 S:$L(CELL) VPRX(.134)=CELL,VPRDR=VPRDR_$S($L(VPRDR):";",1:"")_".134"
"RTN","VPRUPD",48,0)
 S:$L(ECON) VPRX(.339)=ECON,VPRDR=VPRDR_$S($L(VPRDR):";",1:"")_".339"
"RTN","VPRUPD",49,0)
 S:$L(NOK) VPRX(.219)=NOK,VPRDR=VPRDR_$S($L(VPRDR):";",1:"")_".219"
"RTN","VPRUPD",50,0)
 I '$O(VPRX(0)) S ERR=$$ERR(3) G PHQ
"RTN","VPRUPD",51,0)
 D EDIT^VAFCPTED(DFN,"VPRX",VPRDR)
"RTN","VPRUPD",52,0)
 S X=$G(^DPT(DFN,.13)),OK=1 D  ;check global
"RTN","VPRUPD",53,0)
 . I $L(HOME),$S(HOME="@":$L($P(X,U)),1:(VPRX(.131)'=$P(X,U))) S OK=0
"RTN","VPRUPD",54,0)
 . I $L(CELL),$S(CELL="@":$L($P(X,U,4)),1:(VPRX(.134)'=$P(X,U,4))) S OK=0
"RTN","VPRUPD",55,0)
 . I $L(ECON) S X=$G(^DPT(DFN,.33)) I $S(ECON="@":$L($P(X,U,9)),1:(VPRX(.339)'=$P(X,U,9))) S OK=0
"RTN","VPRUPD",56,0)
 . I $L(NOK) S X=$G(^DPT(DFN,.21)) I $S(NOK="@":$L($P(X,U,9)),1:(VPRX(.219)'=$P(X,U,9))) S OK=0
"RTN","VPRUPD",57,0)
 S:'OK ERR=$$ERR(5)
"RTN","VPRUPD",58,0)
 ;
"RTN","VPRUPD",59,0)
PHQ ; add item count and terminating characters
"RTN","VPRUPD",60,0)
 I $D(ERR) S VPR(1)="{""apiVersion"":""1.01"",""error"":{""message"":"""_ERR_"""},""success"":false}" G PQ
"RTN","VPRUPD",61,0)
 ; VPR="{""apiVersion"":""1.01"",""data"":{""updated"":"_""""_$$HL7NOW_""""_",""localId"":"""_DFN_"""},""success"":true}"
"RTN","VPRUPD",62,0)
 D POSTX^VPREVNT("patient",DFN)
"RTN","VPRUPD",63,0)
 D ENCODE^VPRJSON("ARRAY","VPR","VPRERR")
"RTN","VPRUPD",64,0)
 I $D(VPRERR) D  G PQ
"RTN","VPRUPD",65,0)
 . K VPR N VPRTMP,VPRTXT
"RTN","VPRUPD",66,0)
 . S VPRTXT(1)="Problem encoding json output."
"RTN","VPRUPD",67,0)
 . D SETERROR^VPRUTILS(.VPRTMP,.VPRERR,.VPRTXT,.ARRAY)
"RTN","VPRUPD",68,0)
 . K VPRERR D ENCODE^VPRJSON("VPRTMP","VPR","VPRERR")
"RTN","VPRUPD",69,0)
 . S VPR(.5)="{""apiVersion"":""1.01"",""error"":{",VPR(99)="}}"
"RTN","VPRUPD",70,0)
 S VPR(.5)="{""apiVersion"":""1.01"",""params"":{"_$$SYS^VPRDJ_"},""success"":true,"
"RTN","VPRUPD",71,0)
 S VPR(.6)="""data"":{""updated"":"""_$$HL7NOW^VPRDJ_""",""totalItems"":1,""items"":["
"RTN","VPRUPD",72,0)
 S VPR(99)="]}}"
"RTN","VPRUPD",73,0)
PQ ; exit
"RTN","VPRUPD",74,0)
 K ^TMP($J,"VPR")
"RTN","VPRUPD",75,0)
 M ^TMP($J,"VPR")=VPR
"RTN","VPRUPD",76,0)
 K VPR S VPR=$NA(^TMP($J,"VPR"))
"RTN","VPRUPD",77,0)
 Q
"RTN","VPRUPD",78,0)
 ;
"RTN","VPRUPD",79,0)
FORMAT(X) ; -- enforce (xxx)xxx-xxxx phone format
"RTN","VPRUPD",80,0)
 S X=$G(X) I X?1"("3N1")"3N1"-"4N.E Q X
"RTN","VPRUPD",81,0)
 N P,N,I,Y S P=""
"RTN","VPRUPD",82,0)
 F I=1:1:$L(X) S N=$E(X,I) I N=+N S P=P_N
"RTN","VPRUPD",83,0)
 S:$L(P)<10 P=$E("0000000000",1,10-$L(P))_P
"RTN","VPRUPD",84,0)
 S Y=$S(P:"("_$E(P,1,3)_")"_$E(P,4,6)_"-"_$E(P,7,10),1:"")
"RTN","VPRUPD",85,0)
 Q Y
"RTN","VPRUPD",86,0)
 ;
"RTN","VPRUPD",87,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","VPRUPD",88,0)
 Q $P($$FMTHL7^XLFDT($$NOW^XLFDT),"-")
"RTN","VPRUPD",89,0)
 ;
"RTN","VPRUPD",90,0)
ERR(X,VAL) ; -- return error message
"RTN","VPRUPD",91,0)
 N MSG  S MSG="Error"
"RTN","VPRUPD",92,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","VPRUPD",93,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","VPRUPD",94,0)
 I X=3  S MSG="Data not changed"
"RTN","VPRUPD",95,0)
 I X=4  S MSG="Unable to create new object"
"RTN","VPRUPD",96,0)
 I X=5  S MSG="Update failed"
"RTN","VPRUPD",97,0)
 I X=99 S MSG="Unknown request"
"RTN","VPRUPD",98,0)
 Q MSG
"RTN","VPRUPD",99,0)
 ;
"RTN","VPRUPD",100,0)
VAL(SUB) ; -- pull values from ^DPT
"RTN","VPRUPD",101,0)
 N X S X=$G(^DPT(DFN,.13))
"RTN","VPRUPD",102,0)
 S HOME(SUB)=$P(X,U),CELL(SUB)=$P(X,U,4)
"RTN","VPRUPD",103,0)
 S X=$G(^DPT(DFN,.33)),ECON(SUB)=$P(X,U,9)
"RTN","VPRUPD",104,0)
 S X=$G(^DPT(DFN,.21)),NOK(SUB)=$P(X,U,9)
"RTN","VPRUPD",105,0)
 Q
"RTN","VPRUTILS")
0^93^B18659956
"RTN","VPRUTILS",1,0)
VPRUTILS ;SLC/AGP -- VPR utilities routine ;8/14/13  11:22
"RTN","VPRUTILS",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**2,3**;Sep 01, 2011;Build 283
"RTN","VPRUTILS",3,0)
 ;
"RTN","VPRUTILS",4,0)
 ; External References          DBIA#
"RTN","VPRUTILS",5,0)
 ; -------------------          -----
"RTN","VPRUTILS",6,0)
 ; XLFCRC                        3156
"RTN","VPRUTILS",7,0)
 ; XLFDT                        10103
"RTN","VPRUTILS",8,0)
 ; XLFUTL                        2622
"RTN","VPRUTILS",9,0)
 ; XUPARAM                       2541
"RTN","VPRUTILS",10,0)
 ;
"RTN","VPRUTILS",11,0)
 Q
"RTN","VPRUTILS",12,0)
 ;
"RTN","VPRUTILS",13,0)
SETERROR(RESULT,ERROR,EXTERROR,DATA) ; -- error text for JSON
"RTN","VPRUTILS",14,0)
 N CNT,TEMP,VPRTEMP,XCNT
"RTN","VPRUTILS",15,0)
 S VPRTEMP="VPRXTEMP ERRORS"
"RTN","VPRUTILS",16,0)
 I '$D(^XTMP(VPRTEMP,0)) S ^XTMP(VPRTEMP,0)=$$FMADD^XLFDT(DT,7)_U_DT_U_"VPR ERROR GLOBAL"
"RTN","VPRUTILS",17,0)
 S RESULT("success")="false"
"RTN","VPRUTILS",18,0)
 I $D(DATA) S XCNT=$O(^XTMP(VPRTEMP,""),-1)+1 M ^XTMP(VPRTEMP,XCNT,"ERROR")=DATA
"RTN","VPRUTILS",19,0)
 I $D(ERROR) D SETERRTX(.TEMP,.ERROR) S RESULT("error","code")=TEMP
"RTN","VPRUTILS",20,0)
 I +$G(XCNT)>0 S RESULT("error","code")=$G(RESULT("error","code"))_" See ^XTMP("_VPRTEMP_","_XCNT_",DATA) for data"
"RTN","VPRUTILS",21,0)
 I $D(EXTERROR) D SETERRTX(.TEMP,.EXTERROR) I TEMP'="" S RESULT("error","message")=TEMP
"RTN","VPRUTILS",22,0)
 ;
"RTN","VPRUTILS",23,0)
 Q
"RTN","VPRUTILS",24,0)
 ;
"RTN","VPRUTILS",25,0)
SETERRTX(TEMP,ERROR) ;
"RTN","VPRUTILS",26,0)
 S TEMP=""
"RTN","VPRUTILS",27,0)
 S CNT=0 F  S CNT=$O(ERROR(CNT)) Q:CNT'>0  D
"RTN","VPRUTILS",28,0)
 .S TEMP=$S(TEMP'="":TEMP=TEMP_$C(13,10)_ERROR(CNT),1:ERROR(CNT))
"RTN","VPRUTILS",29,0)
 Q
"RTN","VPRUTILS",30,0)
 ;
"RTN","VPRUTILS",31,0)
SETTEXT(X,VALUE) ; -- format word processing
"RTN","VPRUTILS",32,0)
 N FIRST,I,LINE
"RTN","VPRUTILS",33,0)
 S FIRST=1
"RTN","VPRUTILS",34,0)
 S I=0 F  S I=$O(@X@(I)) Q:I<1  D
"RTN","VPRUTILS",35,0)
 .S LINE=$S($D(@X@(I,0)):@X@(I,0),1:@X@(I))
"RTN","VPRUTILS",36,0)
 .; FIRST=1 S @VALUE@(I)=LINE,FIRST=0 Q
"RTN","VPRUTILS",37,0)
 .S @VALUE@(I)=LINE_$C(13)_$C(10)
"RTN","VPRUTILS",38,0)
 Q
"RTN","VPRUTILS",39,0)
 ;
"RTN","VPRUTILS",40,0)
SPLITVAL(NODE,ARRAY) ; -- split a value into a list
"RTN","VPRUTILS",41,0)
 N CNT,NAME,VALUE,FIELD
"RTN","VPRUTILS",42,0)
 S NAME="" F  S NAME=$O(ARRAY(NAME)) Q:NAME=""  D
"RTN","VPRUTILS",43,0)
 .S CNT=+ARRAY(NAME)
"RTN","VPRUTILS",44,0)
 .S VALUE=$P($G(NODE),U,CNT)
"RTN","VPRUTILS",45,0)
 .I NAME="Code" S FIELD=$P(ARRAY(NAME),U,2) S VALUE=$$SETVURN(FIELD,VALUE)
"RTN","VPRUTILS",46,0)
 .S ARRAY(NAME)=VALUE
"RTN","VPRUTILS",47,0)
 Q
"RTN","VPRUTILS",48,0)
 ;
"RTN","VPRUTILS",49,0)
SETPROV(NODE,PROV) ; -- providers
"RTN","VPRUTILS",50,0)
 S PROV("providerUid")=$$SETUID("user",,+NODE)
"RTN","VPRUTILS",51,0)
 S PROV("providerName")=$P(NODE,U,2)
"RTN","VPRUTILS",52,0)
 Q
"RTN","VPRUTILS",53,0)
 ;
"RTN","VPRUTILS",54,0)
SETUID(DOMAIN,PAT,ID,ADDDATA) ; -- create uid string
"RTN","VPRUTILS",55,0)
 N RESULT,SYS
"RTN","VPRUTILS",56,0)
 S SYS=$S($D(VPRSYS):VPRSYS,1:$$GET^XPAR("SYS","VPR SYSTEM NAME"))
"RTN","VPRUTILS",57,0)
 S RESULT="urn:va:"_DOMAIN_":"_SYS_":"_$S($G(PAT):PAT_":",1:"")_ID
"RTN","VPRUTILS",58,0)
 I $L($G(ADDDATA)) S RESULT=RESULT_":"_ADDDATA
"RTN","VPRUTILS",59,0)
 Q RESULT
"RTN","VPRUTILS",60,0)
 ;
"RTN","VPRUTILS",61,0)
SETFCURN(DOMAIN,FACILITY,VALUE) ; -- create facility urn
"RTN","VPRUTILS",62,0)
 Q "urn:va:"_DOMAIN_":"_FACILITY_":"_VALUE
"RTN","VPRUTILS",63,0)
 ;
"RTN","VPRUTILS",64,0)
SETVURN(DOMAIN,VALUE) ; -- create VA urn
"RTN","VPRUTILS",65,0)
 N RESULT S RESULT=""
"RTN","VPRUTILS",66,0)
 S RESULT="urn:va:"_DOMAIN_":"_VALUE
"RTN","VPRUTILS",67,0)
 Q RESULT
"RTN","VPRUTILS",68,0)
 ;
"RTN","VPRUTILS",69,0)
SYS() ; -- return hashed system name
"RTN","VPRUTILS",70,0)
 Q $$BASE^XLFUTL($$CRC16^XLFCRC($$KSP^XUPARAM("WHERE")),10,16)
"RTN","VPRUTILS",71,0)
 ;
"RTN","VPRUTILS",72,0)
SETNCS(CODESET,VALUE) ; -- create national codeset urn
"RTN","VPRUTILS",73,0)
 Q "urn:"_CODESET_":"_VALUE
"RTN","VPRUTILS",74,0)
 ;
"RTN","VPRUTILS",75,0)
JSONDT(X) ; -- convert FileMan DT to HL7 DT for JSON
"RTN","VPRUTILS",76,0)
 N D,DATE,M,TIME,Y
"RTN","VPRUTILS",77,0)
 S DATE=$P($$FMTHL7^XLFDT(X),"-")
"RTN","VPRUTILS",78,0)
 I $L(DATE)>8 S TIME=$E(DATE,9,$L(DATE))
"RTN","VPRUTILS",79,0)
 S Y=$E(DATE,1,4),M=$E(DATE,5,6),D=$E(DATE,7,8)
"RTN","VPRUTILS",80,0)
 K DATE
"RTN","VPRUTILS",81,0)
 S DATE=Y I M>0 S DATE=DATE_M S:D>0 DATE=DATE_D
"RTN","VPRUTILS",82,0)
 I $G(TIME)'="" D  S DATE=DATE_TIME
"RTN","VPRUTILS",83,0)
 . N S S S=$E(TIME_"000000",5,6)
"RTN","VPRUTILS",84,0)
 . I S,S>59 S TIME=$E(TIME,1,4) ;strip bad seconds
"RTN","VPRUTILS",85,0)
 Q DATE
"RTN","VPRUTILS",86,0)
 ;
"RTN","VPRUTILS",87,0)
FACILITY(X,Y) ; -- add facility info to array for JSON
"RTN","VPRUTILS",88,0)
 ;  X=STATION NUMBER^STATION NAME
"RTN","VPRUTILS",89,0)
 ;  Y=Variable array name
"RTN","VPRUTILS",90,0)
 ; >D FACILITY^VPRUTILS("500^CAMP MASTER","LAB")
"RTN","VPRUTILS",91,0)
 ;
"RTN","VPRUTILS",92,0)
 S @Y@("facilityCode")=$P(X,"^")
"RTN","VPRUTILS",93,0)
 S @Y@("facilityName")=$P(X,"^",2)
"RTN","VPRUTILS",94,0)
 Q
"RTN","VPRUTILS",95,0)
VERSRV()   ; Return server version of option name
"RTN","VPRUTILS",96,0)
 N VPRLST,VAL
"RTN","VPRUTILS",97,0)
 D FIND^DIC(19,"",1,"X","VPR UI CONTEXT",1,,,,"VPRLST")
"RTN","VPRUTILS",98,0)
 S VAL=$G(VPRLST("DILIST","ID",1,1))
"RTN","VPRUTILS",99,0)
 Q $$UP^XLFSTR($P(VAL,"version ",2))
"RTN","VPRUTILS",100,0)
 ;
"RTN","VPRUTILS",101,0)
VERCMP(CUR,VAL) ; Returns 1 if CUR<VAL, -1 if CUR>VAL, 0 if equal
"RTN","VPRUTILS",102,0)
 N CURMAJOR,CURMINOR,CURSNAP,VALMAJOR,VALMINOR,VALSNAP
"RTN","VPRUTILS",103,0)
 S CURMAJOR=$P(CUR,"-"),CURMINOR=$P(CUR,"-",2),CURSNAP=$E($P(CUR,"-",3),1,4)="SNAP"
"RTN","VPRUTILS",104,0)
 S VALMAJOR=$P(VAL,"-"),VALMINOR=$P(VAL,"-",2),VALSNAP=$E($P(VAL,"-",3),1,4)="SNAP"
"RTN","VPRUTILS",105,0)
 I $E(VALMINOR)="P" S VALMINOR=$E(VALMINOR,2,99)     ; "P"ilot versions (old)
"RTN","VPRUTILS",106,0)
 I $E(CURMINOR)="P" S CURMINOR=$E(VALMINOR,2,99)
"RTN","VPRUTILS",107,0)
 I $E(VALMINOR)="S" S VALMINOR=$E(VALMINOR,2,99)*10  ; "S"print versions
"RTN","VPRUTILS",108,0)
 I $E(CURMINOR)="S" S CURMINOR=$E(CURMINOR,2,99)*10
"RTN","VPRUTILS",109,0)
 Q:VALMAJOR>CURMAJOR 1   Q:VALMAJOR<CURMAJOR -1  ; compare major versions
"RTN","VPRUTILS",110,0)
 Q:VALMINOR>CURMINOR 1   Q:VALMINOR<CURMINOR -1  ; compare minor versions
"RTN","VPRUTILS",111,0)
 Q:(CURSNAP&'VALSNAP) 1  Q:(VALSNAP&'CURSNAP) -1 ; "SNAPSHOT" < released
"RTN","VPRUTILS",112,0)
 Q 0
"RTN","VPRUTILS",113,0)
 ;
"RTN","VPRYCSI")
0^102^B16364707
"RTN","VPRYCSI",1,0)
VPRYCSI ;SLC/KCM -- Convert system identifier in UID's for VPR objects
"RTN","VPRYCSI",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRYCSI",3,0)
 ;
"RTN","VPRYCSI",4,0)
EN ; Prompt for if the system should really convert
"RTN","VPRYCSI",5,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,X,Y,DA,FROMSYS,TOSYS
"RTN","VPRYCSI",6,0)
 S DIR(0)="F:4:40",DIR("A")="Convert from (System ID or Domain Name)"
"RTN","VPRYCSI",7,0)
 S DIR("?")="Enter the four character system ID or the domain name."
"RTN","VPRYCSI",8,0)
 D ^DIR Q:$D(DIRUT)
"RTN","VPRYCSI",9,0)
 S Y=$$UP^XLFSTR(Y),TOSYS=$$SYS^VPRUTILS
"RTN","VPRYCSI",10,0)
 I $L(Y)'=4,Y["." S Y=$$CNV^XLFUTL($$CRC16^XLFCRC(Y),16)
"RTN","VPRYCSI",11,0)
 I Y=TOSYS W !,"Same ID as this system." Q
"RTN","VPRYCSI",12,0)
 W !,"This will (brute force) replace all instances of "":"_Y_":"""
"RTN","VPRYCSI",13,0)
 W !,"                               with instances of "":"_TOSYS_":"""
"RTN","VPRYCSI",14,0)
 W !,"Continue? NO//" R X:300 Q:$E($$UP^XLFSTR(X))'="Y"
"RTN","VPRYCSI",15,0)
 ;
"RTN","VPRYCSI",16,0)
 N FROMSYS
"RTN","VPRYCSI",17,0)
 S FROMSYS=Y
"RTN","VPRYCSI",18,0)
 W !,"File 560.1:  "
"RTN","VPRYCSI",19,0)
 D CONV(FROMSYS,560.1)
"RTN","VPRYCSI",20,0)
 W !,"File 560.11: "
"RTN","VPRYCSI",21,0)
 D CONV(FROMSYS,560.11)
"RTN","VPRYCSI",22,0)
 Q
"RTN","VPRYCSI",23,0)
CONV(FROMSYS,FILENUM) ; FROMSYS is the system id to be converted
"RTN","VPRYCSI",24,0)
 N TOSYS,FDAIEN
"RTN","VPRYCSI",25,0)
 S TOSYS=$$SYS^VPRUTILS
"RTN","VPRYCSI",26,0)
 S FDAIEN=0 F  S FDAIEN=$O(^VPR(FILENUM,FDAIEN)) Q:'FDAIEN  D CONV1(FILENUM,FDAIEN,FROMSYS,TOSYS)
"RTN","VPRYCSI",27,0)
 Q
"RTN","VPRYCSI",28,0)
CONV1(FILENUM,FDAIEN,FROMSYS,TOSYS) ; convert one record
"RTN","VPRYCSI",29,0)
 ; system id is assumed to be the fourth piece
"RTN","VPRYCSI",30,0)
 N X0,UID,SYS,WPORIG,WPNEW,VAL
"RTN","VPRYCSI",31,0)
 S X0=$G(^VPR(FILENUM,FDAIEN,0)),UID=$P(X0,"^",1),SYS=$P(UID,":",4)
"RTN","VPRYCSI",32,0)
 Q:SYS=TOSYS  ; already native to this account
"RTN","VPRYCSI",33,0)
 S $P(UID,":",4)=TOSYS
"RTN","VPRYCSI",34,0)
 M WPORIG=^VPR(FILENUM,FDAIEN,1)
"RTN","VPRYCSI",35,0)
 S VAL=$$WP2X(.WPORIG)
"RTN","VPRYCSI",36,0)
 S VAL=$$SWAP(VAL,":"_FROMSYS_":",":"_TOSYS_":")
"RTN","VPRYCSI",37,0)
 D X2WP(VAL,.WPNEW)
"RTN","VPRYCSI",38,0)
 D SAVE(FILENUM,FDAIEN,UID,.WPNEW)
"RTN","VPRYCSI",39,0)
 W "."
"RTN","VPRYCSI",40,0)
 Q
"RTN","VPRYCSI",41,0)
SWAP(X,FIND,REPLACE) ; swap string FIND with string REPLACE in X
"RTN","VPRYCSI",42,0)
 N Y,POS,SIZE
"RTN","VPRYCSI",43,0)
 S Y="",POS=0,SIZE=$L(FIND)
"RTN","VPRYCSI",44,0)
 F  S POS=$F(X,FIND,POS) Q:'POS  S $E(X,POS-SIZE,POS-1)=REPLACE
"RTN","VPRYCSI",45,0)
 Q X
"RTN","VPRYCSI",46,0)
 ;
"RTN","VPRYCSI",47,0)
WP2X(WP) ; Return a single string by concatenating the WP fields
"RTN","VPRYCSI",48,0)
 N I,X,ERR
"RTN","VPRYCSI",49,0)
 S X="",ERR=0
"RTN","VPRYCSI",50,0)
 S I=0 F  S I=$O(WP(I)) Q:'I  D  Q:ERR
"RTN","VPRYCSI",51,0)
 . I ($L(X)+$L(WP(I,0)))>32000 D  Q
"RTN","VPRYCSI",52,0)
 . . S ERR=1,X=""
"RTN","VPRYCSI",53,0)
 . . W !,"Can't convert documents longer than 32K",!
"RTN","VPRYCSI",54,0)
 . S X=X_WP(I,0)
"RTN","VPRYCSI",55,0)
 Q X
"RTN","VPRYCSI",56,0)
X2WP(X,WP,SIZE) ; Convert a string to WP field with strings no longer than SIZE
"RTN","VPRYCSI",57,0)
 N START,STOP,LINE,IDX
"RTN","VPRYCSI",58,0)
 S SIZE=$G(SIZE,245)-1 Q:'SIZE
"RTN","VPRYCSI",59,0)
 S START=1,IDX=0
"RTN","VPRYCSI",60,0)
 F  Q:START>$L(X)  D
"RTN","VPRYCSI",61,0)
 . S STOP=START+SIZE,LINE=$E(X,START,STOP),START=STOP+1
"RTN","VPRYCSI",62,0)
 . I $L(LINE) S IDX=IDX+1,WP(IDX,0)=LINE
"RTN","VPRYCSI",63,0)
 Q
"RTN","VPRYCSI",64,0)
SAVE(FILENUM,FDAIEN,UID,WP) ;
"RTN","VPRYCSI",65,0)
 N FDA,DIERR,ERR
"RTN","VPRYCSI",66,0)
 S FDA(FILENUM,FDAIEN_",",.01)=UID
"RTN","VPRYCSI",67,0)
 D FILE^DIE("","FDA","ERR")
"RTN","VPRYCSI",68,0)
 I $D(DIERR) W !,"Save failed for UID: ",UID,! D WOUT("ERR") Q
"RTN","VPRYCSI",69,0)
 I $D(WP) D WP^DIE(FILENUM,FDAIEN_",",1,"","WP","ERR")
"RTN","VPRYCSI",70,0)
 I $D(DIERR) W !,"Save failed for WP: ",UID,! D WOUT("ERR") Q
"RTN","VPRYCSI",71,0)
 D CLEAN^DILF
"RTN","VPRYCSI",72,0)
 Q
"RTN","VPRYCSI",73,0)
 ;
"RTN","VPRYCSI",74,0)
CHECK(FILENUM) ; Check JSON integrity of FILENUM
"RTN","VPRYCSI",75,0)
 S IEN=0 F  S IEN=$O(^VPR(FILENUM,IEN)) Q:'IEN  D CHECK1(FILENUM,IEN)
"RTN","VPRYCSI",76,0)
 Q
"RTN","VPRYCSI",77,0)
CHECK1(FILENUM,IEN) ;
"RTN","VPRYCSI",78,0)
 N JSON,OBJ,ERR,I
"RTN","VPRYCSI",79,0)
 S I=0 F  S I=$O(^VPR(FILENUM,IEN,1,I)) Q:'I  S JSON(I)=^VPR(FILENUM,IEN,1,I,0)
"RTN","VPRYCSI",80,0)
 I $D(JSON)'>1 W !,FILENUM,":",IEN,?20,"no JSON present" Q
"RTN","VPRYCSI",81,0)
 D DECODE^VPRJSON("JSON","OBJ","ERR")
"RTN","VPRYCSI",82,0)
 I $D(ERR) W !,FILENUM,":",IEN,?20,$G(ERR(1))
"RTN","VPRYCSI",83,0)
 W "."
"RTN","VPRYCSI",84,0)
 Q
"RTN","VPRYCSI",85,0)
 ;
"RTN","VPRYCSI",86,0)
TX2WP ;
"RTN","VPRYCSI",87,0)
 N INPUT,OUTPUT
"RTN","VPRYCSI",88,0)
 S INPUT="abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz"
"RTN","VPRYCSI",89,0)
 D X2WP(INPUT,.OUTPUT,5)  W ! D WOUT("OUTPUT") K OUTPUT
"RTN","VPRYCSI",90,0)
 D X2WP(INPUT,.OUTPUT,10) W ! D WOUT("OUTPUT") K OUTPUT
"RTN","VPRYCSI",91,0)
 S INPUT=$E(INPUT,1,25)
"RTN","VPRYCSI",92,0)
 D X2WP(INPUT,.OUTPUT,5)  W ! D WOUT("OUTPUT")
"RTN","VPRYCSI",93,0)
 Q
"RTN","VPRYCSI",94,0)
TSWAP ;
"RTN","VPRYCSI",95,0)
 ;;{"uid":"urn:va:personphoto:F484:1123","summary":"gov.va.cpe.vpr.PersonPhoto@266713c1","personUid":"urn:va:user:F484:1123"}
"RTN","VPRYCSI",96,0)
 N X
"RTN","VPRYCSI",97,0)
 S X=$P($T(TSWAP+1),";;",2,99)
"RTN","VPRYCSI",98,0)
 W !,X
"RTN","VPRYCSI",99,0)
 S X=$$SWAP(X,":F484:",":0F0F:")
"RTN","VPRYCSI",100,0)
 W !,X,!
"RTN","VPRYCSI",101,0)
 Q
"RTN","VPRYCSI",102,0)
TSAVE ;
"RTN","VPRYCSI",103,0)
 S IEN=$O(^VPR(560.11,"B","urn:va:personphoto:2222:123",0)) Q:'IEN
"RTN","VPRYCSI",104,0)
 W !,"IEN:",IEN
"RTN","VPRYCSI",105,0)
 D CONV1(IEN,"2222","3333")
"RTN","VPRYCSI",106,0)
 Q
"RTN","VPRYCSI",107,0)
 ;
"RTN","VPRYCSI",108,0)
WOUT(ROOT) ; Write out a variable named by ROOT
"RTN","VPRYCSI",109,0)
 W !,ROOT," -----"
"RTN","VPRYCSI",110,0)
 N X
"RTN","VPRYCSI",111,0)
 S X=ROOT F  S X=$Q(@X) Q:'$L(X)  Q:$E(X,1,$L(ROOT))'=ROOT  W !,X,"=",@X
"RTN","VPRYCSI",112,0)
 Q
"RTN","VPRYFRP")
0^66^B93175404
"RTN","VPRYFRP",1,0)
VPRYFRP ;SLC/KCM -- Find recent patients and put on roster
"RTN","VPRYFRP",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRYFRP",3,0)
 ;
"RTN","VPRYFRP",4,0)
EN ; Utilities for building roster lists
"RTN","VPRYFRP",5,0)
 W !,"D BLDMTHS to create lists"
"RTN","VPRYFRP",6,0)
 W !,"D SHOWCNT to see how many patients in each month"
"RTN","VPRYFRP",7,0)
 W !,"D XTRLST to get a single month"
"RTN","VPRYFRP",8,0)
 W !,"D GET4ALL to do extracts for all the patients"
"RTN","VPRYFRP",9,0)
 W !,"D SHOWSIZE to show sizes for each month"
"RTN","VPRYFRP",10,0)
 W !,"D SHOWSTS to show task status and any errors in extracts"
"RTN","VPRYFRP",11,0)
 W !,"D SHOWTOP to show the highest times and sizes"
"RTN","VPRYFRP",12,0)
 W !,"D STOP to stop processing of extracts"
"RTN","VPRYFRP",13,0)
 W !!,"Data stored in ^XTMP(""VPRYFRP"")",!
"RTN","VPRYFRP",14,0)
 Q
"RTN","VPRYFRP",15,0)
 ;
"RTN","VPRYFRP",16,0)
BLDMTHS ; Build patient lists for a range of months 
"RTN","VPRYFRP",17,0)
 ; ^XTMP("VPRYFRP","FOUND",DFN)=""         ; patients already found
"RTN","VPRYFRP",18,0)
 ; ^XTMP("VPRYFRP","MONTH",YYYYMM,DFN)=""  ; patients by month of last visit
"RTN","VPRYFRP",19,0)
 ; MONTHS(inverseMonth)=YYYMM^MmmYYYY      ; months to measure
"RTN","VPRYFRP",20,0)
 ;
"RTN","VPRYFRP",21,0)
 K ^XTMP("VPRYFRP")
"RTN","VPRYFRP",22,0)
 S ^XTMP("VPRYFRP",0)=$$HTFM^XLFDT(+$H+4)_"^"_$$HTFM^XLFDT(+$H)_"^VPR Build Rosters by Month"
"RTN","VPRYFRP",23,0)
 ;
"RTN","VPRYFRP",24,0)
 N MTHBEG,MTHEND,MONTH,MONTHS
"RTN","VPRYFRP",25,0)
 D PRMTMTHS(.MTHBEG,.MTHEND) Q:'MTHBEG
"RTN","VPRYFRP",26,0)
 I MTHBEG>MTHEND N X S X=MTHEND,MTHEND=MTHBEG,MTHBEG=X
"RTN","VPRYFRP",27,0)
 S MONTH=MTHBEG F  D  Q:MONTH>MTHEND
"RTN","VPRYFRP",28,0)
 . S MONTHS(MONTH)=MONTH_"^"_$$EXTMTH(MONTH)
"RTN","VPRYFRP",29,0)
 . S MONTH=$$INCMTH(MONTH)
"RTN","VPRYFRP",30,0)
 S MONTH=0 F  S MONTH=$O(MONTHS(MONTH)) Q:'MONTH  D BLDMTH(MONTHS(MONTH)) W "."
"RTN","VPRYFRP",31,0)
 W ! D SHOWCNT
"RTN","VPRYFRP",32,0)
 Q
"RTN","VPRYFRP",33,0)
BLDMTH(MONTH) ; Build list of patients for a month
"RTN","VPRYFRP",34,0)
 N NAME,START,STOP,VDATE,VISIT,X0,DFN,CAT
"RTN","VPRYFRP",35,0)
 S START=$P(MONTH,"^"),NAME=$P(MONTH,"^",2)
"RTN","VPRYFRP",36,0)
 S ^XTMP("VPRYFRP","SEQUENCE",START)=NAME
"RTN","VPRYFRP",37,0)
 S VDATE=+(START_"00"),STOP=+(START_"99")
"RTN","VPRYFRP",38,0)
 F  S VDATE=$O(^AUPNVSIT("B",VDATE))  Q:'VDATE  Q:VDATE>STOP  D
"RTN","VPRYFRP",39,0)
 . S VISIT=0 F  S VISIT=$O(^AUPNVSIT("B",VDATE,VISIT)) Q:'VISIT  D
"RTN","VPRYFRP",40,0)
 . . S X0=^AUPNVSIT(VISIT,0),DFN=$P(X0,"^",5),CAT=$P(X0,"^",7)
"RTN","VPRYFRP",41,0)
 . . Q:$D(^XTMP("VPRYFRP","FOUND",DFN))
"RTN","VPRYFRP",42,0)
 . . Q:CAT="E"  ; event (historical)
"RTN","VPRYFRP",43,0)
 . . Q:CAT="N"  ; not found
"RTN","VPRYFRP",44,0)
 . . S ^XTMP("VPRYFRP","MONTH",NAME,DFN)=""
"RTN","VPRYFRP",45,0)
 . . S ^XTMP("VPRYFRP","FOUND",DFN)=""
"RTN","VPRYFRP",46,0)
 Q
"RTN","VPRYFRP",47,0)
XTRLST ; Prompt for a list name and extract it interactively
"RTN","VPRYFRP",48,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,X,Y,DA,FROMSYS,TOSYS
"RTN","VPRYFRP",49,0)
 S DIR(0)="D^::EMP",DIR("A")="Extract Month",DIR("?")="Enter the month to run an extract."
"RTN","VPRYFRP",50,0)
 D ^DIR I $D(DIRUT) Q
"RTN","VPRYFRP",51,0)
 N VPRYNAME S VPRYNAME=$$EXTMTH(Y)
"RTN","VPRYFRP",52,0)
 W !,"Running Extracts for "_VPRYNAME_".  Continue? NO// " R X:300
"RTN","VPRYFRP",53,0)
 I $E($$UP^XLFSTR(X))'="Y" Q
"RTN","VPRYFRP",54,0)
 W !
"RTN","VPRYFRP",55,0)
 D GET4LST
"RTN","VPRYFRP",56,0)
 Q
"RTN","VPRYFRP",57,0)
GET4ALL ; Extract data for all lists
"RTN","VPRYFRP",58,0)
 ; VARIABLES THAT CONTROL EXTRACT PROCESS
"RTN","VPRYFRP",59,0)
 ; VPRYNAME: name of month for which patients are being extracted
"RTN","VPRYFRP",60,0)
 ; VPRYDFN : current DFN in the month
"RTN","VPRYFRP",61,0)
 ; VPRYDOMS: domains for which extracts will be done
"RTN","VPRYFRP",62,0)
 ; VPRYDOM : current DOMAIN for extract
"RTN","VPRYFRP",63,0)
 ; these variables get saved before each extract so KILL^XUSCLEAN may be called
"RTN","VPRYFRP",64,0)
 N VPRYNAME,X
"RTN","VPRYFRP",65,0)
 W !,"Queue each list?  NO// " R X:300
"RTN","VPRYFRP",66,0)
 I $E($$UP^XLFSTR(X))="Y" N VPRYQ,LASTPT,VPRDTH S VPRYQ=1,LASTPT=0
"RTN","VPRYFRP",67,0)
 S VPRYNAME=""
"RTN","VPRYFRP",68,0)
 F  S VPRYNAME=$O(^XTMP("VPRYFRP","MONTH",VPRYNAME)) Q:VPRYNAME=""  D
"RTN","VPRYFRP",69,0)
 . I $G(VPRYQ) D  Q
"RTN","VPRYFRP",70,0)
 . . S VPRDTH=$$HADD^XLFDT($H,,LASTPT\1000)
"RTN","VPRYFRP",71,0)
 . . D QU4LST
"RTN","VPRYFRP",72,0)
 . . S LASTPT=LASTPT+^XTMP("VPRYFRP","count",VPRYNAME)
"RTN","VPRYFRP",73,0)
 . E  D
"RTN","VPRYFRP",74,0)
 . . W !,"Running extracts for "_VPRYNAME
"RTN","VPRYFRP",75,0)
 . . D GET4LST
"RTN","VPRYFRP",76,0)
 Q
"RTN","VPRYFRP",77,0)
STOP ; Stop queued jobs
"RTN","VPRYFRP",78,0)
 S ^XTMP("VPRYFRP","STOP")=1
"RTN","VPRYFRP",79,0)
 Q
"RTN","VPRYFRP",80,0)
 ;
"RTN","VPRYFRP",81,0)
QU4LST ; Queue extract of a month
"RTN","VPRYFRP",82,0)
 ; expects VPRYNAME from GET4ALL
"RTN","VPRYFRP",83,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","VPRYFRP",84,0)
 S ZTRTN="GET4LST^VPRYFRP",ZTIO="",ZTSAVE("VPRYNAME")="",ZTDTH=VPRDTH
"RTN","VPRYFRP",85,0)
 S ZTDESC="Measure extract sizes for patients with visits in a month"
"RTN","VPRYFRP",86,0)
 D ^%ZTLOAD I '$G(ZTSK) W !,"Error queuing "_VPRYNAME
"RTN","VPRYFRP",87,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYNAME)="Task #"_ZTSK
"RTN","VPRYFRP",88,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYNAME,"status")="Queued"
"RTN","VPRYFRP",89,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYNAME,"count")=0
"RTN","VPRYFRP",90,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYNAME,"result")=""
"RTN","VPRYFRP",91,0)
 W !,VPRYNAME,", task #"_ZTSK_" queued for "_$$HTE^XLFDT(VPRDTH)
"RTN","VPRYFRP",92,0)
 Q
"RTN","VPRYFRP",93,0)
GET4LST ; Extract data for a list & measure size
"RTN","VPRYFRP",94,0)
 ; expects VPRYNAME from GET4ALL or XTRLST or Queued Job
"RTN","VPRYFRP",95,0)
 N VPRYDFN,VPRYH,VPRYDOMS,PTSIZE,VPRFZTSK
"RTN","VPRYFRP",96,0)
 D BLDDOMS(.VPRYDOMS)
"RTN","VPRYFRP",97,0)
 S VPRYH=$H
"RTN","VPRYFRP",98,0)
 S VPRFZTSK=$G(ZTSK) ; if tasked, VPRDJ expects VPRFZTSK to be task
"RTN","VPRYFRP",99,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYNAME,"status")="Started"
"RTN","VPRYFRP",100,0)
 S VPRYDFN=0 F  S VPRYDFN=$O(^XTMP("VPRYFRP","MONTH",VPRYNAME,VPRYDFN)) Q:'VPRYDFN  D
"RTN","VPRYFRP",101,0)
 . S PTSIZE=$$SIZEPT(VPRYDFN)
"RTN","VPRYFRP",102,0)
 . S ^XTMP("VPRYFRP","MONTH",VPRYNAME,VPRYDFN)=PTSIZE
"RTN","VPRYFRP",103,0)
 . D TOPSIZE(VPRYDFN,"",PTSIZE,"PatientSize")
"RTN","VPRYFRP",104,0)
 S ^XTMP("VPRYFRP","MONTH",VPRYNAME)=$$HDIFF^XLFDT($H,VPRYH,2)
"RTN","VPRYFRP",105,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYNAME,"status")="Finished"
"RTN","VPRYFRP",106,0)
 Q
"RTN","VPRYFRP",107,0)
SIZEPT(VPRYDFN) ; Extract data for a patient and return size
"RTN","VPRYFRP",108,0)
 I '$D(ZTQUEUED) W "."
"RTN","VPRYFRP",109,0)
 N VPRYSIZE,VPRYDOM,VPRBATCH,VPRYET,DOMSIZE
"RTN","VPRYFRP",110,0)
 S VPRYSIZE=0,VPRBATCH="VPRYFRP"
"RTN","VPRYFRP",111,0)
 S VPRYDOM="" F  S VPRYDOM=$O(VPRYDOMS(VPRYDOM)) Q:VPRYDOM=""  D
"RTN","VPRYFRP",112,0)
 . D CLEANDOM
"RTN","VPRYFRP",113,0)
 . S VPRYET=$H
"RTN","VPRYFRP",114,0)
 . S DOMSIZE=$$SIZEDOM(VPRYDFN,VPRYDOM)
"RTN","VPRYFRP",115,0)
 . S VPRYET=$$HDIFF^XLFDT($H,VPRYET,2)
"RTN","VPRYFRP",116,0)
 . S VPRYSIZE=VPRYSIZE+DOMSIZE
"RTN","VPRYFRP",117,0)
 . D TOPSIZE(VPRYDFN,VPRYDOM,VPRYET,"ExtractTime")
"RTN","VPRYFRP",118,0)
 . D TOPSIZE(VPRYDFN,VPRYDOM,DOMSIZE,"ExtractSize")
"RTN","VPRYFRP",119,0)
 Q VPRYSIZE
"RTN","VPRYFRP",120,0)
 ;
"RTN","VPRYFRP",121,0)
SIZEDOM(DFN,DOMAIN) ; Extract 1 domain and return size
"RTN","VPRYFRP",122,0)
 N $ESTACK,$ETRAP S $ETRAP="D EXTERR^VPRYFRP"
"RTN","VPRYFRP",123,0)
 Q:$G(^XTMP("VPRYFRP","STOP"))=1 0
"RTN","VPRYFRP",124,0)
 N FILTER,RSLT,SIZE
"RTN","VPRYFRP",125,0)
 S FILTER("patientId")=DFN
"RTN","VPRYFRP",126,0)
 S FILTER("domain")=DOMAIN
"RTN","VPRYFRP",127,0)
 D GET^VPRDJ(.RSLT,.FILTER)
"RTN","VPRYFRP",128,0)
 S SIZE=$$SIZEREF(RSLT)
"RTN","VPRYFRP",129,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYNAME,"count")=$G(^XTMP("VPRYFRP","TASKS",VPRYNAME,"count"))+1
"RTN","VPRYFRP",130,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYNAME,"result")=RSLT
"RTN","VPRYFRP",131,0)
 K @RSLT ;^XTMP("VPRYFRP",VPRYDFN,VPRYDOM)
"RTN","VPRYFRP",132,0)
 Q SIZE
"RTN","VPRYFRP",133,0)
 ;
"RTN","VPRYFRP",134,0)
CLEANDOM ; Clean up partition for domain extract
"RTN","VPRYFRP",135,0)
 N X
"RTN","VPRYFRP",136,0)
 K ^TMP("VPRY",$J)
"RTN","VPRYFRP",137,0)
 F X="VPRYNAME","VPRYDOMS","VPRYDFN","VPRYDOM","VPRYSIZE","VPRYH","VPRBATCH","VPRFZTSK" M ^TMP("VPRY",$J,X)=@X
"RTN","VPRYFRP",138,0)
 D KILL^XUSCLEAN
"RTN","VPRYFRP",139,0)
 F X="VPRYNAME","VPRYDOMS","VPRYDFN","VPRYDOM","VPRYSIZE","VPRYH","VPRBATCH","VPRFZTSK" M @X=^TMP("VPRY",$J,X)
"RTN","VPRYFRP",140,0)
 K ^TMP("VPRY",$J)
"RTN","VPRYFRP",141,0)
 Q
"RTN","VPRYFRP",142,0)
TOPSIZE(DFN,DOMAIN,SIZE,MEASURE) ; Record the highest measures (time, size)
"RTN","VPRYFRP",143,0)
 Q:SIZE<1
"RTN","VPRYFRP",144,0)
 N LOW,NUM,MAX,DFNS,DOMS
"RTN","VPRYFRP",145,0)
 S MAX=30
"RTN","VPRYFRP",146,0)
 S LOW=+$O(^XTMP("VPRYFRP","MEASURE",MEASURE,"")),NUM=$G(^XTMP("VPRYFRP","MEASURE",MEASURE),0)
"RTN","VPRYFRP",147,0)
 I SIZE>LOW S ^XTMP("VPRYFRP","MEASURE",MEASURE,SIZE,DFN,$S($L(DOMAIN):DOMAIN,1:0))="",NUM=NUM+1
"RTN","VPRYFRP",148,0)
 I NUM>MAX D
"RTN","VPRYFRP",149,0)
 . S LOW="" F  S LOW=$O(^XTMP("VPRYFRP","MEASURE",MEASURE,LOW)) Q:'LOW  D  Q:NUM'>MAX
"RTN","VPRYFRP",150,0)
 . . S DFNS="" F  S DFNS=$O(^XTMP("VPRYFRP","MEASURE",MEASURE,LOW,DFNS)) Q:'DFNS  D  Q:NUM'>MAX
"RTN","VPRYFRP",151,0)
 . . . S DOMS="" F  S DOMS=$O(^XTMP("VPRYFRP","MEASURE",MEASURE,LOW,DFNS,DOMS)) Q:DOMS=""  D  Q:NUM'>MAX
"RTN","VPRYFRP",152,0)
 . . . . S NUM=NUM-1 K ^XTMP("VPRYFRP","MEASURE",MEASURE,LOW,DFNS,DOMS)
"RTN","VPRYFRP",153,0)
 S ^XTMP("VPRYFRP","MEASURE",MEASURE)=NUM
"RTN","VPRYFRP",154,0)
 Q
"RTN","VPRYFRP",155,0)
EXTERR ; Come here in case of error during extract
"RTN","VPRYFRP",156,0)
 S ^XTMP("VPRYFRP","ERRORS",$G(VPRYDFN,0),$G(VPRYDOM,0))=$H
"RTN","VPRYFRP",157,0)
 I $D(ZTQUEUED),$L($G(VPRYDFN)),$L($G(VPRYDOM)) K ^XTMP("VPRYFRP",VPRYDFN,VPRYDOM)
"RTN","VPRYFRP",158,0)
 D ^%ZTER
"RTN","VPRYFRP",159,0)
 G UNWIND^%ZTER
"RTN","VPRYFRP",160,0)
 ;
"RTN","VPRYFRP",161,0)
SIZEREF(REF) ; Return size of date in ref
"RTN","VPRYFRP",162,0)
 N X,SIZE,ROOT,LROOT
"RTN","VPRYFRP",163,0)
 S SIZE=0
"RTN","VPRYFRP",164,0)
 S ROOT=$RE($P($RE(REF),")",2,99)),LROOT=$L(ROOT)
"RTN","VPRYFRP",165,0)
 S X=REF F  S X=$Q(@X) Q:$E(X,1,LROOT)'=ROOT  S SIZE=SIZE+$L(@X)
"RTN","VPRYFRP",166,0)
 Q SIZE
"RTN","VPRYFRP",167,0)
 ;
"RTN","VPRYFRP",168,0)
SHOWCNT ; Show counts of unique patients by month
"RTN","VPRYFRP",169,0)
 N NAME,IMONTH,CNT,DFN,TOTAL
"RTN","VPRYFRP",170,0)
 S TOTAL=0
"RTN","VPRYFRP",171,0)
 S IMONTH=0 F  S IMONTH=$O(^XTMP("VPRYFRP","SEQUENCE",IMONTH)) Q:'IMONTH  D
"RTN","VPRYFRP",172,0)
 . S NAME=^XTMP("VPRYFRP","SEQUENCE",IMONTH)
"RTN","VPRYFRP",173,0)
 . S CNT=0
"RTN","VPRYFRP",174,0)
 . S DFN=0 F  S DFN=$O(^XTMP("VPRYFRP","MONTH",NAME,DFN)) Q:'DFN  S CNT=CNT+1
"RTN","VPRYFRP",175,0)
 . W !,NAME,?12,CNT," patients"
"RTN","VPRYFRP",176,0)
 . S ^XTMP("VPRYFRP","count",NAME)=CNT
"RTN","VPRYFRP",177,0)
 . S TOTAL=TOTAL+CNT
"RTN","VPRYFRP",178,0)
 W !!,"Total",?11,TOTAL," patients"
"RTN","VPRYFRP",179,0)
 Q
"RTN","VPRYFRP",180,0)
SHOWSIZE ; Show extract sizes by month
"RTN","VPRYFRP",181,0)
 N NAME,IMONTH,SIZE,DFN,SECS
"RTN","VPRYFRP",182,0)
 S IMONTH=0 F  S IMONTH=$O(^XTMP("VPRYFRP","SEQUENCE",IMONTH)) Q:'IMONTH  D
"RTN","VPRYFRP",183,0)
 . S NAME=^XTMP("VPRYFRP","SEQUENCE",IMONTH)
"RTN","VPRYFRP",184,0)
 . S SIZE=0
"RTN","VPRYFRP",185,0)
 . S DFN=0 F  S DFN=$O(^XTMP("VPRYFRP","MONTH",NAME,DFN)) Q:'DFN  S SIZE=SIZE+^XTMP("VPRYFRP","MONTH",NAME,DFN)
"RTN","VPRYFRP",186,0)
 . S SECS=$G(^XTMP("VPRYFRP","MONTH",NAME),0)
"RTN","VPRYFRP",187,0)
 . W !,NAME,?12,SIZE," bytes",?30,SECS\60," minutes ",SECS#60," seconds"
"RTN","VPRYFRP",188,0)
 Q
"RTN","VPRYFRP",189,0)
SHOWSTS ; Show task status and errors
"RTN","VPRYFRP",190,0)
 N DFN,DOMAIN,X
"RTN","VPRYFRP",191,0)
 S X="" F  S X=$O(^XTMP("VPRYFRP","TASKS",X)) Q:X=""  D
"RTN","VPRYFRP",192,0)
 . W !,X
"RTN","VPRYFRP",193,0)
 . W ?9,$G(^XTMP("VPRYFRP","TASKS",X))
"RTN","VPRYFRP",194,0)
 . W ?25,$G(^XTMP("VPRYFRP","TASKS",X,"status"))
"RTN","VPRYFRP",195,0)
 . W ?35,$G(^XTMP("VPRYFRP","TASKS",X,"count"))
"RTN","VPRYFRP",196,0)
 . ; W ?40,$G(^XTMP("VPRYFRP","TASKS",X,"result"))
"RTN","VPRYFRP",197,0)
 ;
"RTN","VPRYFRP",198,0)
 W !,"Errors (if any) --"
"RTN","VPRYFRP",199,0)
 S DFN="" F  S DFN=$O(^XTMP("VPRYFRP","ERRORS",DFN)) Q:'DFN  D
"RTN","VPRYFRP",200,0)
 . S DOMAIN="" F  S DOMAIN=$O(^XTMP("VPRYFRP","ERRORS",DFN,DOMAIN)) Q:DOMAIN=""  D
"RTN","VPRYFRP",201,0)
 . . W !,DFN,?20,DOMAIN,?45,$$HTE^XLFDT(^XTMP("VPRYFRP","ERRORS",DFN,DOMAIN))
"RTN","VPRYFRP",202,0)
 Q
"RTN","VPRYFRP",203,0)
SHOWTOP ; Show largest sizes and times
"RTN","VPRYFRP",204,0)
 N MEASURE,SIZE,DFN,DOMAIN,I
"RTN","VPRYFRP",205,0)
 F MEASURE="PatientSize","ExtractSize","ExtractTime" D
"RTN","VPRYFRP",206,0)
 . W !,MEASURE," " F I=1:1:24 W "-"
"RTN","VPRYFRP",207,0)
 . W !,"DFN",?15,$S(MEASURE["Time":"Seconds",1:"Bytes")
"RTN","VPRYFRP",208,0)
 . I MEASURE'="PatientSize" W ?30,"Domain"
"RTN","VPRYFRP",209,0)
 . S SIZE=0 F  S SIZE=$O(^XTMP("VPRYFRP","MEASURE",MEASURE,SIZE)) Q:'SIZE  D
"RTN","VPRYFRP",210,0)
 . . S DFN=0 F  S DFN=$O(^XTMP("VPRYFRP","MEASURE",MEASURE,SIZE,DFN)) Q:'DFN  D
"RTN","VPRYFRP",211,0)
 . . . S DOMAIN="" F  S DOMAIN=$O(^XTMP("VPRYFRP","MEASURE",MEASURE,SIZE,DFN,DOMAIN)) Q:DOMAIN=""  D
"RTN","VPRYFRP",212,0)
 . . . . W !,DFN,?15,SIZE
"RTN","VPRYFRP",213,0)
 . . . . I DOMAIN'=0 W ?30,DOMAIN
"RTN","VPRYFRP",214,0)
 . W !
"RTN","VPRYFRP",215,0)
 Q
"RTN","VPRYFRP",216,0)
EXTMTH(DT) ; Return external MmmYYYY format
"RTN","VPRYFRP",217,0)
 N M,Y
"RTN","VPRYFRP",218,0)
 S M=$E(DT,4,5),Y=$E(DT,1,3)
"RTN","VPRYFRP",219,0)
 S Y=Y+1700
"RTN","VPRYFRP",220,0)
 S M=$P($P($T(MNAMES),";;",2,99),";",M)
"RTN","VPRYFRP",221,0)
 Q M_Y
"RTN","VPRYFRP",222,0)
 ;
"RTN","VPRYFRP",223,0)
INCMTH(DT) ; Return incremented month
"RTN","VPRYFRP",224,0)
 N M,Y
"RTN","VPRYFRP",225,0)
 S M=$E(DT,4,5),Y=$E(DT,1,3)
"RTN","VPRYFRP",226,0)
 S M=M+1
"RTN","VPRYFRP",227,0)
 I M>12 S M=1,Y=Y+1
"RTN","VPRYFRP",228,0)
 I $L(Y)'=3 W !,"error in year" Q 99999
"RTN","VPRYFRP",229,0)
 S M="00"_M,M=$E(M,$L(M)-1,$L(M))
"RTN","VPRYFRP",230,0)
 Q Y_M
"RTN","VPRYFRP",231,0)
 ;
"RTN","VPRYFRP",232,0)
PRMTMTHS(BEG,END) ; prompt for the month range
"RTN","VPRYFRP",233,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,X,Y,DA,FROMSYS,TOSYS
"RTN","VPRYFRP",234,0)
 S DIR(0)="D^::EMP",DIR("A")="Beginning Month",DIR("?")="Enter the earliest month of visits to evaluate."
"RTN","VPRYFRP",235,0)
 D ^DIR I $D(DIRUT) S BEG="",END="" Q
"RTN","VPRYFRP",236,0)
 S BEG=Y
"RTN","VPRYFRP",237,0)
 S DIR(0)="D^::EMP",DIR("A")="Ending Month",DIR("?")="Enter the latest month of visits to evaluate."
"RTN","VPRYFRP",238,0)
 D ^DIR I $D(DIRUT) S BEG="",END="" Q
"RTN","VPRYFRP",239,0)
 S END=Y
"RTN","VPRYFRP",240,0)
 W !,"Searching visits from ",$$FMTE^XLFDT(BEG)," through ",$$FMTE^XLFDT(END),".  Continue? NO// " R X:300
"RTN","VPRYFRP",241,0)
 I $E($$UP^XLFSTR(X))'="Y" S BEG="",END="" Q
"RTN","VPRYFRP",242,0)
 S BEG=$E(BEG,1,5),END=$E(END,1,5)
"RTN","VPRYFRP",243,0)
 Q
"RTN","VPRYFRP",244,0)
BLDDOMS(DOMAINS) ; Build a list of domains
"RTN","VPRYFRP",245,0)
 N X
"RTN","VPRYFRP",246,0)
 F I=1:1 S X=$P($T(DOMAINS+I),";;",2) Q:X="zzzzz"  S DOMAINS(X)=""
"RTN","VPRYFRP",247,0)
 Q
"RTN","VPRYFRP",248,0)
MNAMES ;;Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec
"RTN","VPRYFRP",249,0)
 ;
"RTN","VPRYFRP",250,0)
DOMAINS ;
"RTN","VPRYFRP",251,0)
 ;;allergy
"RTN","VPRYFRP",252,0)
 ;;auxiliary
"RTN","VPRYFRP",253,0)
 ;;appointment
"RTN","VPRYFRP",254,0)
 ;;diagnosis
"RTN","VPRYFRP",255,0)
 ;;document
"RTN","VPRYFRP",256,0)
 ;;factor
"RTN","VPRYFRP",257,0)
 ;;immunization
"RTN","VPRYFRP",258,0)
 ;;lab
"RTN","VPRYFRP",259,0)
 ;;med
"RTN","VPRYFRP",260,0)
 ;;obs
"RTN","VPRYFRP",261,0)
 ;;order
"RTN","VPRYFRP",262,0)
 ;;problem
"RTN","VPRYFRP",263,0)
 ;;procedure
"RTN","VPRYFRP",264,0)
 ;;consult
"RTN","VPRYFRP",265,0)
 ;;image
"RTN","VPRYFRP",266,0)
 ;;surgery
"RTN","VPRYFRP",267,0)
 ;;task
"RTN","VPRYFRP",268,0)
 ;;visit
"RTN","VPRYFRP",269,0)
 ;;vital
"RTN","VPRYFRP",270,0)
 ;;mh
"RTN","VPRYFRP",271,0)
 ;;ptf
"RTN","VPRYFRP",272,0)
 ;;exam
"RTN","VPRYFRP",273,0)
 ;;cpt
"RTN","VPRYFRP",274,0)
 ;;education
"RTN","VPRYFRP",275,0)
 ;;pov
"RTN","VPRYFRP",276,0)
 ;;skin
"RTN","VPRYFRP",277,0)
 ;;treatment
"RTN","VPRYFRP",278,0)
 ;;roadtrip
"RTN","VPRYFRP",279,0)
 ;;zzzzz
"RTN","VPRYFRP1")
0^103^B46398226
"RTN","VPRYFRP1",1,0)
VPRYFRP1 ;SLC/KCM -- Find recent patients by week and test extracts
"RTN","VPRYFRP1",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRYFRP1",3,0)
 ;
"RTN","VPRYFRP1",4,0)
EN ; Utilities for building roster lists
"RTN","VPRYFRP1",5,0)
 W !,"D BLDWKS to create lists of new patients by week"
"RTN","VPRYFRP1",6,0)
 W !,"D EXTRACT to start queuing extracts"
"RTN","VPRYFRP1",7,0)
 W !,"D SHOWCNT to see how many new patients in each week"
"RTN","VPRYFRP1",8,0)
 W !,"D SHOWSIZE to show size & elapsed time for each week"
"RTN","VPRYFRP1",9,0)
 W !,"D SHOWSTS to show task status and any errors in extracts"
"RTN","VPRYFRP1",10,0)
 W !,"D SHOWTOP to show the highest times and sizes"
"RTN","VPRYFRP1",11,0)
 W !,"D STOP to stop processing of extracts"
"RTN","VPRYFRP1",12,0)
 W !!,"Data is stored in ^XTMP(""VPRYFRP"")",!
"RTN","VPRYFRP1",13,0)
 Q
"RTN","VPRYFRP1",14,0)
 ;
"RTN","VPRYFRP1",15,0)
 ; ^XTMP("VPRYFRP",dfn,domain,...extract data...) 
"RTN","VPRYFRP1",16,0)
 ; ^XTMP("VPRYFRP","FOUND",dfn)
"RTN","VPRYFRP1",17,0)
 ; ^XTMP("VPRYFRP","MEASURE",type,size,dfn,{domain})
"RTN","VPRYFRP1",18,0)
 ; ^XTMP("VPRYFRP","TASKS",taskId,...)
"RTN","VPRYFRP1",19,0)
 ; ^XTMP("VPRYFRP","TOTALS","patients")
"RTN","VPRYFRP1",20,0)
 ; ^XTMP("VPRYFRP","WEEK",date,dfn)=byteCount
"RTN","VPRYFRP1",21,0)
 ;
"RTN","VPRYFRP1",22,0)
BLDWKS ; Build patient lists for a range of weeks
"RTN","VPRYFRP1",23,0)
 ; ^XTMP("VPRYFRP","FOUND",DFN)=""         ; patients already found
"RTN","VPRYFRP1",24,0)
 ; ^XTMP("VPRYFRP","WEEK",FMDate,DFN)=""   ; patients by week of visit
"RTN","VPRYFRP1",25,0)
 D NEWXTMP^VPRDJFS("VPRYFRP",90,"VPR Extract Patients by Week")
"RTN","VPRYFRP1",26,0)
 S ^XTMP("VPRYFRP","TOTALS","patients")=0
"RTN","VPRYFRP1",27,0)
 ;
"RTN","VPRYFRP1",28,0)
 N BEG,END,WEEK
"RTN","VPRYFRP1",29,0)
 D PRMTWKS(.BEG,.END) Q:'BEG  Q:'END
"RTN","VPRYFRP1",30,0)
 S WEEK=BEG F  D BLDWEEK(WEEK) S WEEK=$$FMADD^XLFDT(WEEK,7) Q:WEEK>END
"RTN","VPRYFRP1",31,0)
 D SHOWCNT
"RTN","VPRYFRP1",32,0)
 Q
"RTN","VPRYFRP1",33,0)
BLDWEEK(SUNDAY) ; Build list of patients for the week starting SUNDAY
"RTN","VPRYFRP1",34,0)
 N VDATE,EOW,IEN,X0,CAT,COUNT
"RTN","VPRYFRP1",35,0)
 S COUNT=0
"RTN","VPRYFRP1",36,0)
 S EOW=$$FMADD^XLFDT(SUNDAY,7)_".9999"     ; to include all Saturday
"RTN","VPRYFRP1",37,0)
 S VDATE=$$FMADD^XLFDT(SUNDAY,-1)_".9999"  ; to get entries with no time
"RTN","VPRYFRP1",38,0)
 F  S VDATE=$O(^AUPNVSIT("B",VDATE)) Q:'VDATE  Q:VDATE>EOW  D
"RTN","VPRYFRP1",39,0)
 . S IEN=0 F  S IEN=$O(^AUPNVSIT("B",VDATE,IEN)) Q:'IEN  D
"RTN","VPRYFRP1",40,0)
 . . S X0=^AUPNVSIT(IEN,0),DFN=$P(X0,"^",5),CAT=$P(X0,"^",7)
"RTN","VPRYFRP1",41,0)
 . . Q:$D(^XTMP("VPRYFRP","FOUND",DFN))
"RTN","VPRYFRP1",42,0)
 . . Q:CAT="E"  ; event (historical)
"RTN","VPRYFRP1",43,0)
 . . Q:CAT="N"  ; not found
"RTN","VPRYFRP1",44,0)
 . . S COUNT=COUNT+1
"RTN","VPRYFRP1",45,0)
 . . S ^XTMP("VPRYFRP","FOUND",DFN)=""
"RTN","VPRYFRP1",46,0)
 . . S ^XTMP("VPRYFRP","WEEK",SUNDAY,DFN)=""
"RTN","VPRYFRP1",47,0)
 S ^XTMP("VPRYFRP","WEEK",SUNDAY,"count")=COUNT
"RTN","VPRYFRP1",48,0)
 S ^XTMP("VPRYFRP","TOTALS","patients")=^XTMP("VPRYFRP","TOTALS","patients")+COUNT
"RTN","VPRYFRP1",49,0)
 Q
"RTN","VPRYFRP1",50,0)
EXTRACT ; Begin first extract by week
"RTN","VPRYFRP1",51,0)
 N TASK,VPRYWEEK
"RTN","VPRYFRP1",52,0)
 S VPRYWEEK=$O(^XTMP("VPRYFRP","WEEK",0))
"RTN","VPRYFRP1",53,0)
 I 'VPRYWEEK W !,"No lists by week" QUIT
"RTN","VPRYFRP1",54,0)
 W !,"Queuing week ",$$FMTE^XLFDT(VPRYWEEK)
"RTN","VPRYFRP1",55,0)
 S TASK=$$QWEEK(VPRYWEEK) W " task ",TASK
"RTN","VPRYFRP1",56,0)
 Q
"RTN","VPRYFRP1",57,0)
STOP ; Stop queued jobs
"RTN","VPRYFRP1",58,0)
 S ^XTMP("VPRYFRP","STOP")=1
"RTN","VPRYFRP1",59,0)
 Q
"RTN","VPRYFRP1",60,0)
QWEEK(VPRYWEEK) ; Queue extracts for VPRYWEEK
"RTN","VPRYFRP1",61,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","VPRYFRP1",62,0)
 S ZTRTN="GET4LST^VPRYFRP1",ZTIO="",ZTSAVE("VPRYWEEK")="",ZTDTH=$H
"RTN","VPRYFRP1",63,0)
 S ZTDESC="Measure extract sizes for patients with visits in a week"
"RTN","VPRYFRP1",64,0)
 D ^%ZTLOAD I '$G(ZTSK) W !,"Error queuing "_VPRYWEEK
"RTN","VPRYFRP1",65,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYWEEK)="Task #"_ZTSK
"RTN","VPRYFRP1",66,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYWEEK,"status")="Queued"
"RTN","VPRYFRP1",67,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYWEEK,"count")=0
"RTN","VPRYFRP1",68,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYWEEK,"result")=""
"RTN","VPRYFRP1",69,0)
 Q ZTSK
"RTN","VPRYFRP1",70,0)
GET4LST ; Extract data for a list & measure size
"RTN","VPRYFRP1",71,0)
 ; expects VPRYWEEK (date of Sunday for the week)
"RTN","VPRYFRP1",72,0)
 N VPRYDFN,VPRYH,VPRYDOMS,PTSIZE,VPRFZTSK
"RTN","VPRYFRP1",73,0)
 D BLDDOMS^VPRYFRP(.VPRYDOMS)
"RTN","VPRYFRP1",74,0)
 S VPRYH=$H
"RTN","VPRYFRP1",75,0)
 S VPRFZTSK=$G(ZTSK) ; if tasked, VPRDJ expects VPRFZTSK to be task id
"RTN","VPRYFRP1",76,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYWEEK,"status")="Started"
"RTN","VPRYFRP1",77,0)
 S VPRYDFN=0 F  S VPRYDFN=$O(^XTMP("VPRYFRP","WEEK",VPRYWEEK,VPRYDFN)) Q:'VPRYDFN  D
"RTN","VPRYFRP1",78,0)
 . S PTSIZE=$$SIZEPT(VPRYDFN)
"RTN","VPRYFRP1",79,0)
 . S ^XTMP("VPRYFRP","WEEK",VPRYWEEK,VPRYDFN)=PTSIZE
"RTN","VPRYFRP1",80,0)
 . D TOPSIZE^VPRYFRP(VPRYDFN,"",PTSIZE,"PatientSize")
"RTN","VPRYFRP1",81,0)
 S ^XTMP("VPRYFRP","WEEK",VPRYWEEK)=$$HDIFF^XLFDT($H,VPRYH,2) ; elapsed time for week
"RTN","VPRYFRP1",82,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYWEEK,"status")="Finished"
"RTN","VPRYFRP1",83,0)
 S VPRYWEEK=$O(^XTMP("VPRYFRP","WEEK",VPRYWEEK))
"RTN","VPRYFRP1",84,0)
 I VPRYWEEK,'$G(^XTMP("VPRYFRP","STOP")) D QWEEK(VPRYWEEK)
"RTN","VPRYFRP1",85,0)
 Q
"RTN","VPRYFRP1",86,0)
SIZEPT(VPRYDFN) ; Extract data for a patient and return size
"RTN","VPRYFRP1",87,0)
 N VPRYSIZE,VPRYDOM,VPRBATCH,VPRYET,DOMSIZE
"RTN","VPRYFRP1",88,0)
 S VPRYSIZE=0,VPRBATCH="VPRYFRP"
"RTN","VPRYFRP1",89,0)
 S VPRYDOM="" F  S VPRYDOM=$O(VPRYDOMS(VPRYDOM)) Q:VPRYDOM=""  D
"RTN","VPRYFRP1",90,0)
 . D CLEANDOM
"RTN","VPRYFRP1",91,0)
 . S VPRYET=$H
"RTN","VPRYFRP1",92,0)
 . S DOMSIZE=$$SIZEDOM(VPRYDFN,VPRYDOM)
"RTN","VPRYFRP1",93,0)
 . S VPRYET=$$HDIFF^XLFDT($H,VPRYET,2)
"RTN","VPRYFRP1",94,0)
 . S VPRYSIZE=VPRYSIZE+DOMSIZE
"RTN","VPRYFRP1",95,0)
 . D TOPSIZE^VPRYFRP(VPRYDFN,VPRYDOM,VPRYET,"ExtractTime")
"RTN","VPRYFRP1",96,0)
 . D TOPSIZE^VPRYFRP(VPRYDFN,VPRYDOM,DOMSIZE,"ExtractSize")
"RTN","VPRYFRP1",97,0)
 Q VPRYSIZE
"RTN","VPRYFRP1",98,0)
 ;
"RTN","VPRYFRP1",99,0)
SIZEDOM(DFN,DOMAIN) ; Extract 1 domain and return size
"RTN","VPRYFRP1",100,0)
 N $ESTACK,$ETRAP S $ETRAP="D EXTERR^VPRYFRP"
"RTN","VPRYFRP1",101,0)
 Q:$G(^XTMP("VPRYFRP","STOP"))=1 0
"RTN","VPRYFRP1",102,0)
 N FILTER,RSLT,SIZE
"RTN","VPRYFRP1",103,0)
 S FILTER("patientId")=DFN
"RTN","VPRYFRP1",104,0)
 S FILTER("domain")=DOMAIN
"RTN","VPRYFRP1",105,0)
 D GET^VPRDJ(.RSLT,.FILTER)
"RTN","VPRYFRP1",106,0)
 S SIZE=$$SIZEREF^VPRYFRP(RSLT)
"RTN","VPRYFRP1",107,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYWEEK,"count")=$G(^XTMP("VPRYFRP","TASKS",VPRYWEEK,"count"))+1
"RTN","VPRYFRP1",108,0)
 S ^XTMP("VPRYFRP","TASKS",VPRYWEEK,"result")=RSLT
"RTN","VPRYFRP1",109,0)
 K @RSLT ;^XTMP("VPRYFRP",VPRYDFN,VPRYDOM)
"RTN","VPRYFRP1",110,0)
 Q SIZE
"RTN","VPRYFRP1",111,0)
 ;
"RTN","VPRYFRP1",112,0)
CLEANDOM ; Clean up partition for domain extract
"RTN","VPRYFRP1",113,0)
 N X
"RTN","VPRYFRP1",114,0)
 K ^TMP("VPRY",$J)
"RTN","VPRYFRP1",115,0)
 F X="VPRYWEEK","VPRYDOMS","VPRYDFN","VPRYDOM","VPRYSIZE","VPRYH","VPRBATCH","VPRFZTSK" M ^TMP("VPRY",$J,X)=@X
"RTN","VPRYFRP1",116,0)
 D KILL^XUSCLEAN
"RTN","VPRYFRP1",117,0)
 F X="VPRYWEEK","VPRYDOMS","VPRYDFN","VPRYDOM","VPRYSIZE","VPRYH","VPRBATCH","VPRFZTSK" M @X=^TMP("VPRY",$J,X)
"RTN","VPRYFRP1",118,0)
 K ^TMP("VPRY",$J)
"RTN","VPRYFRP1",119,0)
 Q
"RTN","VPRYFRP1",120,0)
 ; 
"RTN","VPRYFRP1",121,0)
SHOWCNT ; Show counts of unique patients by week
"RTN","VPRYFRP1",122,0)
 N WEEK
"RTN","VPRYFRP1",123,0)
 S WEEK=0 F  S WEEK=$O(^XTMP("VPRYFRP","WEEK",WEEK)) Q:'WEEK  D
"RTN","VPRYFRP1",124,0)
 . W !,"Week beginning "_$$FMTE^XLFDT(WEEK,8)_":"
"RTN","VPRYFRP1",125,0)
 . W ?26,$J(^XTMP("VPRYFRP","WEEK",WEEK,"count"),7)," patients"
"RTN","VPRYFRP1",126,0)
 W !!,?10,"Total patients:",?26,$J(^XTMP("VPRYFRP","TOTALS","patients"),7)
"RTN","VPRYFRP1",127,0)
 Q
"RTN","VPRYFRP1",128,0)
SHOWSIZE ; Show extract sizes by week
"RTN","VPRYFRP1",129,0)
 N NAME,WEEK,SIZE,DFN,SECS,TOTSIZE,TOTSECS
"RTN","VPRYFRP1",130,0)
 S TOTSIZE=0,TOTSECS=0
"RTN","VPRYFRP1",131,0)
 S WEEK=0 F  S WEEK=$O(^XTMP("VPRYFRP","WEEK",WEEK)) Q:'WEEK  D
"RTN","VPRYFRP1",132,0)
 . I $G(^XTMP("VPRYFRP","TASKS",WEEK,"status"))'="Finished" QUIT
"RTN","VPRYFRP1",133,0)
 . S SIZE=0
"RTN","VPRYFRP1",134,0)
 . S DFN=0 F  S DFN=$O(^XTMP("VPRYFRP","WEEK",WEEK,DFN)) Q:'DFN  D
"RTN","VPRYFRP1",135,0)
 . . S SIZE=SIZE+^XTMP("VPRYFRP","WEEK",WEEK,DFN)
"RTN","VPRYFRP1",136,0)
 . S SECS=$G(^XTMP("VPRYFRP","WEEK",WEEK),0)
"RTN","VPRYFRP1",137,0)
 . S TOTSIZE=TOTSIZE+SIZE,TOTSECS=TOTSECS+SECS
"RTN","VPRYFRP1",138,0)
 . W !,$$FMTE^XLFDT(WEEK),?15,$J(SIZE,15)," bytes",?40,SECS\60," minutes ",SECS#60," seconds"
"RTN","VPRYFRP1",139,0)
 W !!,"Totals:",?15,$J(TOTSIZE,15)," bytes",?40,TOTSECS\60," minutes ",TOTSECS#60," seconds"
"RTN","VPRYFRP1",140,0)
 Q
"RTN","VPRYFRP1",141,0)
SHOWSTS ; Show task status and errors
"RTN","VPRYFRP1",142,0)
 G SHOWSTS^VPRYFRP
"RTN","VPRYFRP1",143,0)
 ;
"RTN","VPRYFRP1",144,0)
SHOWTOP ; Show largest sizes and times
"RTN","VPRYFRP1",145,0)
 G SHOWTOP^VPRYFRP
"RTN","VPRYFRP1",146,0)
 ;
"RTN","VPRYFRP1",147,0)
 ;
"RTN","VPRYFRP1",148,0)
PRMTWKS(BEG,END) ; prompt for date range of weeks
"RTN","VPRYFRP1",149,0)
 S BEG="",END=""
"RTN","VPRYFRP1",150,0)
 S BEG=$$ASKDT("Beginning Date","Enter beginning visit date to evaluate.") Q:'BEG
"RTN","VPRYFRP1",151,0)
 S END=$$ASKDT("Ending Date","Enter latest date to evaluate.") Q:'END
"RTN","VPRYFRP1",152,0)
 S BEG=$$FMADD^XLFDT(BEG,-$$DOW^XLFDT(BEG,1))    ; get previous Sunday
"RTN","VPRYFRP1",153,0)
 S END=$$FMADD^XLFDT(END,(6-$$DOW^XLFDT(END,1))) ; get following Saturday
"RTN","VPRYFRP1",154,0)
 S BEG=$P(BEG,"."),END=$P(END,".")               ; only dates
"RTN","VPRYFRP1",155,0)
 I BEG>END N X S X=BEG,BEG=END,END=X             ; swap if entered backwards
"RTN","VPRYFRP1",156,0)
 W !,"Searching visits from Sunday ",$$FMTE^XLFDT(BEG)
"RTN","VPRYFRP1",157,0)
 W !,"            through Saturday ",$$FMTE^XLFDT(END)
"RTN","VPRYFRP1",158,0)
 I '$$ASKYN("Continue","No") S BEG="",END=""
"RTN","VPRYFRP1",159,0)
 Q
"RTN","VPRYFRP1",160,0)
ASKDT(ASK,HELP) ; prompt for a date in the past
"RTN","VPRYFRP1",161,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,Y
"RTN","VPRYFRP1",162,0)
 S DIR(0)="D^::EP",DIR("A")=ASK,DIR("?")=HELP
"RTN","VPRYFRP1",163,0)
 D ^DIR I $D(DIRUT) Q ""
"RTN","VPRYFRP1",164,0)
 Q Y
"RTN","VPRYFRP1",165,0)
 ;
"RTN","VPRYFRP1",166,0)
ASKYN(ASK,DFLT) ; prompt for yes/no
"RTN","VPRYFRP1",167,0)
 N DIR,DTOUT,DUOUT,DIRUT,DIROUT,Y
"RTN","VPRYFRP1",168,0)
 S DIR(0)="Y",DIR("A")=ASK,DIR("B")=DFLT
"RTN","VPRYFRP1",169,0)
 D ^DIR
"RTN","VPRYFRP1",170,0)
 Q Y
"RTN","VPRYFRP1",171,0)
 ;
"RTN","VPRYPAR")
0^67^B3971880
"RTN","VPRYPAR",1,0)
VPRYPAR ;SLC/KCM -- Modify Parameters
"RTN","VPRYPAR",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**3**;Sep 01, 2011;Build 283
"RTN","VPRYPAR",3,0)
 ;
"RTN","VPRYPAR",4,0)
PARLOOP ; Loop thru parameter
"RTN","VPRYPAR",5,0)
 N PAR,ENT,INST,IEN
"RTN","VPRYPAR",6,0)
 S PAR=$O(^XTV(8989.51,"B","VPR PARAMETERS",0))
"RTN","VPRYPAR",7,0)
 S ENT="" F  S ENT=$O(^XTV(8989.5,"AC",PAR,ENT)) Q:ENT=""  D
"RTN","VPRYPAR",8,0)
 . S INST="" F  S INST=$O(^XTV(8989.5,"AC",PAR,ENT,INST)) Q:INST=""  D
"RTN","VPRYPAR",9,0)
 . . S IEN=0 F  S IEN=$O(^XTV(8989.5,"AC",PAR,ENT,INST,IEN)) Q:IEN=""  D
"RTN","VPRYPAR",10,0)
 . . . I $P(^XTV(8989.5,IEN,0),":",6)'="VPR USER PREF" Q
"RTN","VPRYPAR",11,0)
 . . . D PULLPID(IEN)
"RTN","VPRYPAR",12,0)
 Q
"RTN","VPRYPAR",13,0)
PULLPID(IEN) ; Remove PID entries
"RTN","VPRYPAR",14,0)
 N JSON,WP,OBJ,ERR,I
"RTN","VPRYPAR",15,0)
 S I=0 F  S I=$O(^XTV(8989.5,IEN,2,I)) Q:'I  S JSON(I)=^XTV(8989.5,IEN,2,I,0)
"RTN","VPRYPAR",16,0)
 D DECODE^VPRJSON("JSON","OBJ","ERR")
"RTN","VPRYPAR",17,0)
 I $D(ERR) W !,"Error decoding ",IEN Q
"RTN","VPRYPAR",18,0)
 I '$D(OBJ("cpe.context.patient")) Q
"RTN","VPRYPAR",19,0)
 ;
"RTN","VPRYPAR",20,0)
 K OBJ("cpe.context.patient"),JSON
"RTN","VPRYPAR",21,0)
 D ENCODE^VPRJSON("OBJ","JSON","ERR")
"RTN","VPRYPAR",22,0)
 I $D(ERR) W !,"Error encoding ",IEN
"RTN","VPRYPAR",23,0)
 ;
"RTN","VPRYPAR",24,0)
 W !,"Updating ",^XTV(8989.5,IEN,0)
"RTN","VPRYPAR",25,0)
 S I=0 F  S I=$O(JSON(I)) Q:'I  S WP(I,0)=JSON(I)
"RTN","VPRYPAR",26,0)
 I $D(WP) D WP^DIE(8989.5,IEN_",",2,"","WP","ERR")
"RTN","VPRYPAR",27,0)
 I $D(DIERR) W !,"Save failed for WP: ",IEN,!
"RTN","VPRYPAR",28,0)
 D CLEAN^DILF
"RTN","VPRYPAR",29,0)
 Q
"RTN","VPRYPAR",30,0)
SHOWPAR ; Show values for parameters
"RTN","VPRYPAR",31,0)
 N PARAM,IEN
"RTN","VPRYPAR",32,0)
 S PARAM=$O(^XTV(8989.51,"B","VPR PARAMETERS",0))
"RTN","VPRYPAR",33,0)
 W !,"Param:",PARAM
"RTN","VPRYPAR",34,0)
 S IEN=0 F  S IEN=$O(^XTV(8989.5,IEN)) Q:'IEN  D
"RTN","VPRYPAR",35,0)
 . I $P(^XTV(8989.5,IEN,0),"^",2)'=PARAM Q
"RTN","VPRYPAR",36,0)
 . S INST=$P(^XTV(8989.5,IEN,0),"^",3)
"RTN","VPRYPAR",37,0)
 . I $P(INST,":",6)'="VPR USER PREF" Q
"RTN","VPRYPAR",38,0)
 . N JSON,OBJ,ERR,X
"RTN","VPRYPAR",39,0)
 . S I=0 F  S I=$O(^XTV(8989.5,IEN,2,I)) Q:'I  S JSON(I)=^XTV(8989.5,IEN,2,I,0)
"RTN","VPRYPAR",40,0)
 . D DECODE^VPRJSON("JSON","OBJ","ERR")
"RTN","VPRYPAR",41,0)
 . W !!,INST,"  ("_IEN_") --------------------"
"RTN","VPRYPAR",42,0)
 . S X="" F  S X=$O(OBJ(X)) Q:X=""  W !,X," = ",OBJ(X)
"RTN","VPRYPAR",43,0)
 Q
"SEC","^DIC",560,560,0,"AUDIT")
@
"SEC","^DIC",560,560,0,"DD")
@
"SEC","^DIC",560,560,0,"DEL")
@
"SEC","^DIC",560,560,0,"LAYGO")
@
"SEC","^DIC",560,560,0,"RD")
@
"SEC","^DIC",560,560,0,"WR")
@
"SEC","^DIC",560.1,560.1,0,"AUDIT")
@
"SEC","^DIC",560.1,560.1,0,"DD")
@
"SEC","^DIC",560.1,560.1,0,"DEL")
@
"SEC","^DIC",560.1,560.1,0,"LAYGO")
@
"SEC","^DIC",560.1,560.1,0,"RD")
@
"SEC","^DIC",560.1,560.1,0,"WR")
@
"SEC","^DIC",560.11,560.11,0,"AUDIT")
@
"SEC","^DIC",560.11,560.11,0,"DD")
@
"SEC","^DIC",560.11,560.11,0,"DEL")
@
"SEC","^DIC",560.11,560.11,0,"LAYGO")
@
"SEC","^DIC",560.11,560.11,0,"RD")
@
"SEC","^DIC",560.11,560.11,0,"WR")
@
"SEC","^DIC",561,561,0,"AUDIT")
@
"SEC","^DIC",561,561,0,"DD")
@
"SEC","^DIC",561,561,0,"DEL")
@
"SEC","^DIC",561,561,0,"LAYGO")
#
"SEC","^DIC",561,561,0,"RD")
#
"SEC","^DIC",561,561,0,"WR")
#
"SEC","^DIC",561.2,561.2,0,"AUDIT")
@
"SEC","^DIC",561.2,561.2,0,"DD")
@
"SEC","^DIC",561.2,561.2,0,"DEL")
@
"SEC","^DIC",561.2,561.2,0,"LAYGO")
@
"SEC","^DIC",561.2,561.2,0,"RD")
@
"SEC","^DIC",561.2,561.2,0,"WR")
@
"VER")
8.0^22.0
"^DD",100.98,100.98,0)
FIELD^^4^5
"^DD",100.98,100.98,0,"DDA")
N
"^DD",100.98,100.98,0,"DT")
2960814
"^DD",100.98,100.98,0,"IX","AD",100.981,.01)

"^DD",100.98,100.98,0,"IX","B",100.98,.01)

"^DD",100.98,100.98,0,"IX","B",100.98,3)

"^DD",100.98,100.98,0,"NM","DISPLAY GROUP")

"^DD",100.98,100.98,0,"PT",100,23)

"^DD",100.98,100.98,0,"PT",100.65,.01)

"^DD",100.98,100.98,0,"PT",100.981,.01)

"^DD",100.98,100.98,0,"PT",100.995,1.1)

"^DD",100.98,100.98,0,"PT",101.41,5)

"^DD",100.98,100.98,0,"PT",101.43,5)

"^DD",100.98,100.98,0,"PT",123.5,123.01)

"^DD",100.98,100.98,0,"VRPK")
ORDER ENTRY/RESULTS REPORTING
"^DD",100.98,100.98,.01,0)
NAME^RF^^0;1^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",100.98,100.98,.01,1,0)
^.1^^-1
"^DD",100.98,100.98,.01,1,1,0)
100.98^B
"^DD",100.98,100.98,.01,1,1,1)
S ^ORD(100.98,"B",$E(X,1,30),DA)=""
"^DD",100.98,100.98,.01,1,1,2)
K ^ORD(100.98,"B",$E(X,1,30),DA)
"^DD",100.98,100.98,.01,3)
ANSWER MUST BE 3-30 CHARACTERS IN LENGTH
"^DD",100.98,100.98,.01,4)

"^DD",100.98,100.98,.01,21,0)
^^3^3^2920224^^^^
"^DD",100.98,100.98,.01,21,1,0)
This is the name of the display group for a particular kind of order.
"^DD",100.98,100.98,.01,21,2,0)
The display group generally corresponds to a hospital service or part
"^DD",100.98,100.98,.01,21,3,0)
of a service.
"^DD",100.98,100.98,.01,"DT")
2890131
"^DD",100.98,100.98,1,0)
MEMBER^100.981P^^1;0
"^DD",100.98,100.98,1,3)
Enter a display group as a member.
"^DD",100.98,100.98,1,21,0)
^^3^3^2920224^^^^
"^DD",100.98,100.98,1,21,1,0)
This is a list of specific display groups that `belong' to the display
"^DD",100.98,100.98,1,21,2,0)
group listed in the NAME field.  (This is similar to menu items in the
"^DD",100.98,100.98,1,21,3,0)
OPTION File.)
"^DD",100.98,100.98,2,0)
MIXED NAME^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",100.98,100.98,2,3)
Answer must be 1-30 characters in length.
"^DD",100.98,100.98,2,21,0)
^^3^3^2960617^
"^DD",100.98,100.98,2,21,1,0)
This field contains a mixed case name for the display group.  The name 
"^DD",100.98,100.98,2,21,2,0)
should be as short as possible without being obscure.  This name is 
"^DD",100.98,100.98,2,21,3,0)
primarily intended for use in the windows display of orders.
"^DD",100.98,100.98,2,"DT")
2960617
"^DD",100.98,100.98,3,0)
SHORT NAME^F^^0;3^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>5!($L(X)<1) X
"^DD",100.98,100.98,3,1,0)
^.1
"^DD",100.98,100.98,3,1,1,0)
100.98^B^MNEMONIC
"^DD",100.98,100.98,3,1,1,1)
S:'$D(^ORD(100.98,"B",$E(X,1,30),DA)) ^(DA)=1
"^DD",100.98,100.98,3,1,1,2)
I $D(^ORD(100.98,"B",$E(X,1,30),DA)),^(DA) K ^(DA)
"^DD",100.98,100.98,3,3)
ANSWER MUST BE 1-5 CHARACTERS IN LENGTH
"^DD",100.98,100.98,3,21,0)
^^2^2^2920224^^^
"^DD",100.98,100.98,3,21,1,0)
This is an abbreviation for the display group to be used in displays and
"^DD",100.98,100.98,3,21,2,0)
reports.
"^DD",100.98,100.98,3,"DT")
2880308
"^DD",100.98,100.98,4,0)
DEFAULT DIALOG^P101.41'^ORD(101.41,^0;4^Q
"^DD",100.98,100.98,4,3)
Enter the default ordering dialog for this display group.
"^DD",100.98,100.98,4,21,0)
^^2^2^2960815^^
"^DD",100.98,100.98,4,21,1,0)
This is the dialog that will be used as the default definition when
"^DD",100.98,100.98,4,21,2,0)
placing quick orders associated with this display group.
"^DD",100.98,100.98,4,"DT")
2960814
"^DD",100.98,100.981,0)
MEMBER SUB-FIELD^^.01^2
"^DD",100.98,100.981,0,"DT")
2920601
"^DD",100.98,100.981,0,"IX","B",100.981,.01)

"^DD",100.98,100.981,0,"NM","MEMBER")

"^DD",100.98,100.981,0,"UP")
100.98
"^DD",100.98,100.981,.001,0)
SEQUENCE^NJ5,1^^ ^K:+X'=X!(X>900)!(X<0)!(X?.E1"."2N.N) X
"^DD",100.98,100.981,.001,3)
Type a Number between 0 and 900, 1 Decimal Digit
"^DD",100.98,100.981,.001,21,0)
^^2^2^2920601^
"^DD",100.98,100.981,.001,21,1,0)
This is the sequence of the member in the display group for reporting
"^DD",100.98,100.981,.001,21,2,0)
purposes.
"^DD",100.98,100.981,.001,"DT")
2920601
"^DD",100.98,100.981,.01,0)
MEMBER^MP100.98X^ORD(100.98,^0;1^S ORDDF=100.98 D TREE^ORDD101
"^DD",100.98,100.981,.01,1,0)
^.1
"^DD",100.98,100.981,.01,1,1,0)
100.981^B
"^DD",100.98,100.981,.01,1,1,1)
S ^ORD(100.98,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",100.98,100.981,.01,1,1,2)
K ^ORD(100.98,DA(1),1,"B",$E(X,1,30),DA)
"^DD",100.98,100.981,.01,1,2,0)
100.98^AD^MUMPS
"^DD",100.98,100.981,.01,1,2,1)
S ^ORD(100.98,"AD",$E(X,1,30),DA(1),DA)=""
"^DD",100.98,100.981,.01,1,2,2)
K ^ORD(100.98,"AD",$E(X,1,30),DA(1),DA)
"^DD",100.98,100.981,.01,1,2,"%D",0)
^^2^2^2971217^^
"^DD",100.98,100.981,.01,1,2,"%D",1,0)
^ORD(100.98,"AD",ORMEM,ORGRP,DA)
"^DD",100.98,100.981,.01,1,2,"%D",2,0)
Provides backwards pointer from member to parent group.
"^DD",100.98,100.981,.01,3)
Enter a display group.  A display group that is an ancestor may not also be a member.
"^DD",100.98,100.981,.01,4)

"^DD",100.98,100.981,.01,21,0)
^^2^2^2920224^^^
"^DD",100.98,100.981,.01,21,1,0)
This is a display group listed in the NAME field. (This is similar to a
"^DD",100.98,100.981,.01,21,2,0)
menu item in the OPTION File.)
"^DD",100.98,100.981,.01,"DT")
2890207
"^DD",101.41,101.41,0)
FIELD^^99^30
"^DD",101.41,101.41,0,"DDA")
N
"^DD",101.41,101.41,0,"DT")
2980501
"^DD",101.41,101.41,0,"IX","AB",101.41,.01)

"^DD",101.41,101.41,0,"IX","AD",101.412,2)

"^DD",101.41,101.41,0,"IX","AM",101.41,99)

"^DD",101.41,101.41,0,"IX","AM2",101.41,2)

"^DD",101.41,101.41,0,"IX","AM51",101.41,51)

"^DD",101.41,101.41,0,"IX","AM52",101.41,52)

"^DD",101.41,101.41,0,"IX","AMM",101.412,.01)

"^DD",101.41,101.41,0,"IX","AMM2",101.412,2)

"^DD",101.41,101.41,0,"IX","AMM3",101.412,3)

"^DD",101.41,101.41,0,"IX","AMM4",101.412,4)

"^DD",101.41,101.41,0,"IX","AMM5",101.412,5)

"^DD",101.41,101.41,0,"IX","APKG",101.41,7)

"^DD",101.41,101.41,0,"IX","C",101.41,2)

"^DD",101.41,101.41,0,"NM","ORDER DIALOG")

"^DD",101.41,101.41,0,"PT",100,2)

"^DD",101.41,101.41,0,"PT",100,7)

"^DD",101.41,101.41,0,"PT",100.045,.02)

"^DD",101.41,101.41,0,"PT",100.5,4)

"^DD",101.41,101.41,0,"PT",100.5,5)

"^DD",101.41,101.41,0,"PT",100.98,4)

"^DD",101.41,101.41,0,"PT",101.412,1)

"^DD",101.41,101.41,0,"PT",101.412,2)

"^DD",101.41,101.41,0,"PT",101.415,2)

"^DD",101.41,101.41,0,"PT",101.416,.02)

"^DD",101.41,101.41,0,"PT",101.441,.01)

"^DD",101.41,101.41,0,"PT",561.05,.01)

"^DD",101.41,101.41,0,"PT",801.41,15)

"^DD",101.41,101.41,0,"PT",801.4118,.01)

"^DD",101.41,101.41,0,"VRPK")
OR
"^DD",101.41,101.41,.01,0)
NAME^RF^^0;1^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>63!($L(X)<3)!'(X'?1P.E) X
"^DD",101.41,101.41,.01,1,0)
^.1^^-1
"^DD",101.41,101.41,.01,1,2,0)
101.41^AB
"^DD",101.41,101.41,.01,1,2,1)
S ^ORD(101.41,"AB",$E(X,1,63),DA)=""
"^DD",101.41,101.41,.01,1,2,2)
K ^ORD(101.41,"AB",$E(X,1,63),DA)
"^DD",101.41,101.41,.01,1,2,"%D",0)
^^1^1^2971020^
"^DD",101.41,101.41,.01,1,2,"%D",1,0)
This is a regular index on the full 63 characters of the Name field.
"^DD",101.41,101.41,.01,1,2,"DT")
2971020
"^DD",101.41,101.41,.01,3)
Answer must be 3-63 characters in length.
"^DD",101.41,101.41,.01,21,0)
^^3^3^2971219^
"^DD",101.41,101.41,.01,21,1,0)
This is the name of the dialog; entries that were converted from the
"^DD",101.41,101.41,.01,21,2,0)
Protocol file will retain the same name.  Namespacing is not required,
"^DD",101.41,101.41,.01,21,3,0)
but still encouraged.
"^DD",101.41,101.41,.01,"DT")
2971020
"^DD",101.41,101.41,2,0)
DISPLAY TEXT^FX^^0;2^K:$L(X)>80!($L(X)<3)!($$CHKNAM^ORUTL(X)) X
"^DD",101.41,101.41,2,1,0)
^.1
"^DD",101.41,101.41,2,1,1,0)
101.41^C
"^DD",101.41,101.41,2,1,1,1)
S ^ORD(101.41,"C",$$UP^XLFSTR($E(X,1,63)),DA)=""
"^DD",101.41,101.41,2,1,1,2)
K ^ORD(101.41,"C",$$UP^XLFSTR($E(X,1,63)),DA)
"^DD",101.41,101.41,2,1,1,"DT")
2950112
"^DD",101.41,101.41,2,1,2,0)
101.41^AM2^MUMPS
"^DD",101.41,101.41,2,1,2,1)
D REDOM^ORDD41
"^DD",101.41,101.41,2,1,2,2)
D REDOM^ORDD41
"^DD",101.41,101.41,2,1,2,"%D",0)
^^1^1^2990210^
"^DD",101.41,101.41,2,1,2,"%D",1,0)
Update TIMESTAMP whenever DISPLAY TEXT is changed.
"^DD",101.41,101.41,2,1,2,"DT")
2990210
"^DD",101.41,101.41,2,3)
Answer must be 3-80 characters in length and cannot contain a semicolon (;), a comma (,), an up-arrow (^), a dash (-), or an equal sign (=). 
"^DD",101.41,101.41,2,21,0)
^.001^1^1^3010913^^^^
"^DD",101.41,101.41,2,21,1,0)
The text of this dialog's name as it appears on a menu or subheader.
"^DD",101.41,101.41,2,"DT")
3000823
"^DD",101.41,101.41,3,0)
DISABLE^F^^0;3^K:$L(X)>40!($L(X)<1) X
"^DD",101.41,101.41,3,3)
Enter a message here to disable this dialog, 1-40 characters in length.
"^DD",101.41,101.41,3,21,0)
^^3^3^2950112^
"^DD",101.41,101.41,3,21,1,0)
This field disables use of this dialog when it contains text.  The text
"^DD",101.41,101.41,3,21,2,0)
should be a short message explaining why use of this dialog has been
"^DD",101.41,101.41,3,21,3,0)
disabled, as it will be displayed if this dialog is selected.
"^DD",101.41,101.41,3,"DT")
2950112
"^DD",101.41,101.41,4,0)
TYPE^RS^P:prompt;D:dialog;Q:quick order;O:order set;M:menu;A:action;^0;4^Q
"^DD",101.41,101.41,4,3)
Specify a type for this dialog.
"^DD",101.41,101.41,4,21,0)
^^5^5^2950716^^^^
"^DD",101.41,101.41,4,21,1,0)
This field defines the type of order dialog to be processed.  Control
"^DD",101.41,101.41,4,21,2,0)
will be passed to the OE/RR Dialog Processor for dialog items; menu types
"^DD",101.41,101.41,4,21,3,0)
are used for displaying and selecting dialog items.  Action types will only
"^DD",101.41,101.41,4,21,4,0)
execute the entry and exit actions, ignoring any items that may exist; these
"^DD",101.41,101.41,4,21,5,0)
dialogs should not create entries in the Orders file.
"^DD",101.41,101.41,4,"DT")
2950716
"^DD",101.41,101.41,5,0)
DISPLAY GROUP^P100.98'^ORD(100.98,^0;5^Q
"^DD",101.41,101.41,5,3)
Enter the display group containing orderable items defined by this dialog.
"^DD",101.41,101.41,5,21,0)
^^3^3^2950112^
"^DD",101.41,101.41,5,21,1,0)
This field determines what display group this dialog has been defined for.
"^DD",101.41,101.41,5,21,2,0)
It will define which orderable items are selectable with this dialog,
"^DD",101.41,101.41,5,21,3,0)
as well as what service to send the order to when it is complete.
"^DD",101.41,101.41,5,"DT")
2950112
"^DD",101.41,101.41,6,0)
SIGNATURE REQUIRED^S^0:NONE;1:ORELSE;2:ORES;^0;6^Q
"^DD",101.41,101.41,6,3)
Enter the OR key required to sign orders created by this dialog
"^DD",101.41,101.41,6,21,0)
^^6^6^2970318^^
"^DD",101.41,101.41,6,21,1,0)
This field indicates what signature will be required for orders created by
"^DD",101.41,101.41,6,21,2,0)
this dialog, to be considered complete and ready to release to the service
"^DD",101.41,101.41,6,21,3,0)
for action.  If this flag is set to NO and the dialog contains a prompt
"^DD",101.41,101.41,6,21,4,0)
for item(s) from the Orderable Item file, the order created may still
"^DD",101.41,101.41,6,21,5,0)
require a signature if any of the items ordered are individually flagged
"^DD",101.41,101.41,6,21,6,0)
as requiring a signature.
"^DD",101.41,101.41,6,"DT")
2970318
"^DD",101.41,101.41,7,0)
PACKAGE^P9.4'^DIC(9.4,^0;7^Q
"^DD",101.41,101.41,7,1,0)
^.1
"^DD",101.41,101.41,7,1,1,0)
101.41^APKG
"^DD",101.41,101.41,7,1,1,1)
S ^ORD(101.41,"APKG",$E(X,1,30),DA)=""
"^DD",101.41,101.41,7,1,1,2)
K ^ORD(101.41,"APKG",$E(X,1,30),DA)
"^DD",101.41,101.41,7,1,1,"DT")
2970325
"^DD",101.41,101.41,7,3)
Enter the VISTA package that is to receive orders created by this dialog.
"^DD",101.41,101.41,7,21,0)
^^3^3^2950208^
"^DD",101.41,101.41,7,21,1,0)
This is the VISTA package that is intended to receive orders created by
"^DD",101.41,101.41,7,21,2,0)
this dialog; this is required for creating the HL7 messages to pass the
"^DD",101.41,101.41,7,21,3,0)
order.
"^DD",101.41,101.41,7,"DT")
2970325
"^DD",101.41,101.41,8,0)
VERIFY ORDER^S^1:YES;0:NO;^0;8^Q
"^DD",101.41,101.41,8,3)
Enter YES to have orders created by this dialog presented to the user before saving, with the opportunity to edit.
"^DD",101.41,101.41,8,21,0)
^^3^3^2950623^
"^DD",101.41,101.41,8,21,1,0)
This field is a flag, which determines if the order created by this dialog
"^DD",101.41,101.41,8,21,2,0)
will be presented to the user for verification before saving in the Orders
"^DD",101.41,101.41,8,21,3,0)
file; for most quick orders, this flag should be set to 0 (no).
"^DD",101.41,101.41,8,"DT")
2950623
"^DD",101.41,101.41,9,0)
ASK FOR ANOTHER ORDER^S^0:NO;1:YES;2:YES-DON'T ASK;^0;9^Q
"^DD",101.41,101.41,9,3)
Enter YES to have the user asked to enter another order from this dialog before exiting.
"^DD",101.41,101.41,9,21,0)
^^6^6^2970616^^^
"^DD",101.41,101.41,9,21,1,0)
This field allows the user to add another order from this dialog, when the
"^DD",101.41,101.41,9,21,2,0)
initial order is accepted and placed; if set to YES, the user will be
"^DD",101.41,101.41,9,21,3,0)
asked "Add another <dialog display text> order?" to allow for either
"^DD",101.41,101.41,9,21,4,0)
exiting the processor or adding an additional order of the same type.
"^DD",101.41,101.41,9,21,5,0)
This field can also be set to YES-DON'T ASK to force the processor to
"^DD",101.41,101.41,9,21,6,0)
automatically drop into prompting for another order without asking first.
"^DD",101.41,101.41,9,"DT")
2970616
"^DD",101.41,101.41,10,0)
ITEMS^101.412IA^^10;0
"^DD",101.41,101.41,10,21,0)
^^5^5^2990211^^^^
"^DD",101.41,101.41,10,21,1,0)
This field contains the components for dialogs:
"^DD",101.41,101.41,10,21,2,0)
     Dialogs      -> prompts
"^DD",101.41,101.41,10,21,3,0)
     Quick orders -> prompts (completed)
"^DD",101.41,101.41,10,21,4,0)
     Order sets   -> dialogs or quick orders
"^DD",101.41,101.41,10,21,5,0)
     Menus        -> dialogs, quick orders, or order sets
"^DD",101.41,101.41,11,0)
DATA TYPE^S^D:date/time;R:free text date/time;F:free text;N:numeric;S:set of codes;Y:yes/no;P:pointer;W:word processing;^1;1^Q
"^DD",101.41,101.41,11,3)
Enter the type of data to be collected at this prompt.
"^DD",101.41,101.41,11,21,0)
^^2^2^2950823^^
"^DD",101.41,101.41,11,21,1,0)
This is the type of data being prompted for; this field is used to define
"^DD",101.41,101.41,11,21,2,0)
a call to the reader (^DIR) in most cases.
"^DD",101.41,101.41,11,23,0)
^^1^1^2950823^^
"^DD",101.41,101.41,11,23,1,0)
Used with Prompt-type only.
"^DD",101.41,101.41,11,"DT")
2950407
"^DD",101.41,101.41,12,0)
DOMAIN^F^^1;2^K:$L(X)>235!($L(X)<1) X
"^DD",101.41,101.41,12,3)
Answer must be 1-235 characters in length.
"^DD",101.41,101.41,12,21,0)
^^3^3^2990225^^^^
"^DD",101.41,101.41,12,21,1,0)
This is a parameter that may be used to further specify the data type.
"^DD",101.41,101.41,12,21,2,0)
The string stored here should be appropriate for the second ^-piece of
"^DD",101.41,101.41,12,21,3,0)
DIR(0) when used with the data type field.
"^DD",101.41,101.41,12,23,0)
^^1^1^2990225^^^^
"^DD",101.41,101.41,12,23,1,0)
Used with Prompt-type only.
"^DD",101.41,101.41,12,"DT")
2990225
"^DD",101.41,101.41,13,0)
ID^F^^1;3^K:$L(X)>10!($L(X)<2) X
"^DD",101.41,101.41,13,3)
Answer must be 2-10 characters in length.
"^DD",101.41,101.41,13,21,0)
^.001^20^20^3010727^^
"^DD",101.41,101.41,13,21,1,0)
This field may contain a single word identifier which will be
"^DD",101.41,101.41,13,21,2,0)
stored with the user response in the Orders file #100, where it
"^DD",101.41,101.41,13,21,3,0)
will be indexed for quick reference to certain values in the
"^DD",101.41,101.41,13,21,4,0)
order dialog.  The following are some examples of values
"^DD",101.41,101.41,13,21,5,0)
currently in use:
"^DD",101.41,101.41,13,21,6,0)
 
"^DD",101.41,101.41,13,21,7,0)
   START      -> Start date/time
"^DD",101.41,101.41,13,21,8,0)
   STOP       -> Stop date/time
"^DD",101.41,101.41,13,21,9,0)
   SCHEDULE   -> Administration Schedule
"^DD",101.41,101.41,13,21,10,0)
   ORDERABLE  -> Orderable Item
"^DD",101.41,101.41,13,21,11,0)
   DRUG       -> Dispense Drug
"^DD",101.41,101.41,13,21,12,0)
   CANCEL     -> Cancel Future Orders flag
"^DD",101.41,101.41,13,21,13,0)
   COMMENT    -> Word processing comments
"^DD",101.41,101.41,13,21,14,0)
 
"^DD",101.41,101.41,13,21,15,0)
These values must be unique among entries within an order dialog
"^DD",101.41,101.41,13,21,16,0)
but do not need to be unique across the entire file.  Be sure to
"^DD",101.41,101.41,13,21,17,0)
check the IDs assigned to generic text entries to make sure that
"^DD",101.41,101.41,13,21,18,0)
all IDs are unique.  In order to avoid potential problems it's
"^DD",101.41,101.41,13,21,19,0)
recommended that you use unique IDs for any local entries that you
"^DD",101.41,101.41,13,21,20,0)
create.
"^DD",101.41,101.41,13,"DT")
2960215
"^DD",101.41,101.41,17,0)
VALIDATION^K^^7;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.41,17,3)
This is Standard MUMPS code.
"^DD",101.41,101.41,17,9)
@
"^DD",101.41,101.41,17,21,0)
^^3^3^2960912^
"^DD",101.41,101.41,17,21,1,0)
This is MUMPS code that will be executed at the time of releasing an
"^DD",101.41,101.41,17,21,2,0)
order created with this dialog; dialog responses may be checked again
"^DD",101.41,101.41,17,21,3,0)
here before releasing the order to the service.
"^DD",101.41,101.41,17,"DT")
2960912
"^DD",101.41,101.41,19,0)
ADDITIONAL TEXT^K^^9;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.41,19,3)
This is Standard MUMPS code.
"^DD",101.41,101.41,19,9)
@
"^DD",101.41,101.41,19,21,0)
^^3^3^2960405^^
"^DD",101.41,101.41,19,21,1,0)
This is MUMPS code that will be executed when order ORIFN created by this
"^DD",101.41,101.41,19,21,2,0)
dialog is about to be displayed; any string that should be appended to the
"^DD",101.41,101.41,19,21,3,0)
order text should be returned in Y.
"^DD",101.41,101.41,19,"DT")
2960405
"^DD",101.41,101.41,20,0)
DESCRIPTION^101.411^^2;0
"^DD",101.41,101.41,20,21,0)
^^1^1^2971219^
"^DD",101.41,101.41,20,21,1,0)
This is a description of the dialog and its uses.
"^DD",101.41,101.41,21,0)
RESPONSES^101.416^^6;0
"^DD",101.41,101.41,21,21,0)
^^2^2^2971219^
"^DD",101.41,101.41,21,21,1,0)
This multiple contains any responses to prompts that have been pre-answered
"^DD",101.41,101.41,21,21,2,0)
to create a quick order.
"^DD",101.41,101.41,30,0)
ENTRY ACTION^K^^3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.41,30,3)
This is Standard MUMPS code.
"^DD",101.41,101.41,30,9)
@
"^DD",101.41,101.41,30,21,0)
^^4^4^2950425^
"^DD",101.41,101.41,30,21,1,0)
This is MUMPS code that will be executed at the top of a dialog, prior to
"^DD",101.41,101.41,30,21,2,0)
the execution of any prompts; it may perform functions such as listing
"^DD",101.41,101.41,30,21,3,0)
the recent Radiology exams before ordering a new one, or alerting the
"^DD",101.41,101.41,30,21,4,0)
user to an existing diet order before making a change.
"^DD",101.41,101.41,30,"DT")
2950425
"^DD",101.41,101.41,31,0)
QUICK SETUP^K^^3.1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.41,31,3)
This is Standard MUMPS code.
"^DD",101.41,101.41,31,9)
@
"^DD",101.41,101.41,31,21,0)
^^3^3^2970113^
"^DD",101.41,101.41,31,21,1,0)
This is MUMPS code that will be executed in the place of the Entry Action
"^DD",101.41,101.41,31,21,2,0)
when creating quick orders for this dialog; variables may be set here
"^DD",101.41,101.41,31,21,3,0)
instead to bypass the usual dependence on specific patient values.
"^DD",101.41,101.41,31,"DT")
2970113
"^DD",101.41,101.41,40,0)
EXIT ACTION^K^^4;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.41,40,3)
This is Standard MUMPS code.
"^DD",101.41,101.41,40,9)
@
"^DD",101.41,101.41,40,21,0)
^^2^2^2950622^
"^DD",101.41,101.41,40,21,1,0)
This is MUMPS code that will be executed upon completion of processing the
"^DD",101.41,101.41,40,21,2,0)
dialog; it is currently used only with dialog-type entries.
"^DD",101.41,101.41,40,"DT")
2950622
"^DD",101.41,101.41,50,0)
CONTROLS^101.415A^^50;0
"^DD",101.41,101.41,51,0)
COLUMN WIDTH^NJ3,0^^5;1^K:+X'=X!(X>240)!(X<20)!(X?.E1"."1N.N) X
"^DD",101.41,101.41,51,1,0)
^.1
"^DD",101.41,101.41,51,1,1,0)
101.41^AM51^MUMPS
"^DD",101.41,101.41,51,1,1,1)
D REDO^ORDD41
"^DD",101.41,101.41,51,1,1,2)
D REDO^ORDD41
"^DD",101.41,101.41,51,1,1,"%D",0)
^^1^1^2990210^
"^DD",101.41,101.41,51,1,1,"%D",1,0)
Update TIMESTAMP whenever COLUMN WIDTH is changed.
"^DD",101.41,101.41,51,1,1,"DT")
2990210
"^DD",101.41,101.41,51,3)
Type a Number between 20 and 240, 0 Decimal Digits
"^DD",101.41,101.41,51,21,0)
^^2^2^2950623^
"^DD",101.41,101.41,51,21,1,0)
This is the width, in characters, for each column in a menu.  For example,
"^DD",101.41,101.41,51,21,2,0)
to have 3 columns on an 80 character device, enter a width of 26.
"^DD",101.41,101.41,51,"DT")
2990210
"^DD",101.41,101.41,52,0)
MNEMONIC WIDTH^NJ1,0^^5;2^K:+X'=X!(X>9)!(X<1)!(X?.E1"."1N.N) X
"^DD",101.41,101.41,52,1,0)
^.1
"^DD",101.41,101.41,52,1,1,0)
101.41^AM52^MUMPS
"^DD",101.41,101.41,52,1,1,1)
D REDO^ORDD41
"^DD",101.41,101.41,52,1,1,2)
D REDO^ORDD41
"^DD",101.41,101.41,52,1,1,"%D",0)
^^1^1^2990210^
"^DD",101.41,101.41,52,1,1,"%D",1,0)
Update TIMESTAMP whenever MNEMONIC WIDTH is changed.
"^DD",101.41,101.41,52,1,1,"DT")
2990210
"^DD",101.41,101.41,52,3)
Type a Number between 1 and 9, 0 Decimal Digits
"^DD",101.41,101.41,52,21,0)
^^2^2^2950623^
"^DD",101.41,101.41,52,21,1,0)
This field allows the width of item mnemonics to be varied; the default
"^DD",101.41,101.41,52,21,2,0)
value is 5.
"^DD",101.41,101.41,52,"DT")
2990210
"^DD",101.41,101.41,53,0)
PATH SWITCH^S^1:YES;0:NO;^5;3^Q
"^DD",101.41,101.41,53,3)
Enter YES if this menu should be redisplayed when traversing back up the menu tree.
"^DD",101.41,101.41,53,21,0)
^^5^5^2950623^
"^DD",101.41,101.41,53,21,1,0)
This switch allows the user, when traversing back UP the tree of menus and
"^DD",101.41,101.41,53,21,2,0)
items, to select a new path back down the tree.  In other words, the menu
"^DD",101.41,101.41,53,21,3,0)
is redisplayed when returning to that menu's level in the tree and
"^DD",101.41,101.41,53,21,4,0)
processing back down the tree is possible from that point.  If nothing is
"^DD",101.41,101.41,53,21,5,0)
selected from the menu, the path continues back up the tree.
"^DD",101.41,101.41,53,"DT")
2950623
"^DD",101.41,101.41,54,0)
LISTBOX TEXT^F^^5;4^K:$L(X)>30!($L(X)<1) X
"^DD",101.41,101.41,54,3)
Answer must be 1-30 characters in length.
"^DD",101.41,101.41,54,"DT")
2960524
"^DD",101.41,101.41,55,0)
WINDOW FORM ID^NJ4,0^^5;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X
"^DD",101.41,101.41,55,3)
Type a Number between 0 and 9999, 0 Decimal Digits
"^DD",101.41,101.41,55,21,0)
^.001^23^23^3010727^^
"^DD",101.41,101.41,55,21,1,0)
This field tells the GUI DELPHI code which form to use to process the
"^DD",101.41,101.41,55,21,2,0)
order dialog.  Each number represents a unique form.  Following are some
"^DD",101.41,101.41,55,21,3,0)
of the more common codes and their corresponding form in DELPHI.
"^DD",101.41,101.41,55,21,4,0)
 
"^DD",101.41,101.41,55,21,5,0)
    Form Name     Windows Form ID
"^DD",101.41,101.41,55,21,6,0)
    ---------     ---------------
"^DD",101.41,101.41,55,21,7,0)
  OD_ACTIVITY           100
"^DD",101.41,101.41,55,21,8,0)
  OD_ALLERGY            105
"^DD",101.41,101.41,55,21,9,0)
  OD_CONSULT            110
"^DD",101.41,101.41,55,21,10,0)
  OD_PROCEDURE          112
"^DD",101.41,101.41,55,21,11,0)
  OD_DIET_TXT           115
"^DD",101.41,101.41,55,21,12,0)
  OD_DIET               117
"^DD",101.41,101.41,55,21,13,0)
  OD_LAB                120
"^DD",101.41,101.41,55,21,14,0)
  OD_MEDINPT            130
"^DD",101.41,101.41,55,21,15,0)
  OD_MEDS               135
"^DD",101.41,101.41,55,21,16,0)
  OD_MEDOUTPT           140
"^DD",101.41,101.41,55,21,17,0)
  OD_NURSING            150
"^DD",101.41,101.41,55,21,18,0)
  OD_MISC               151
"^DD",101.41,101.41,55,21,19,0)
  OD_GENERIC            152
"^DD",101.41,101.41,55,21,20,0)
  OD_IMAGING            160
"^DD",101.41,101.41,55,21,21,0)
  OD_VITALS             171 
"^DD",101.41,101.41,55,21,22,0)
  OD_MEDIV              180
"^DD",101.41,101.41,55,21,23,0)
  OD_TEXTONLY           999
"^DD",101.41,101.41,55,"DT")
2960804
"^DD",101.41,101.41,56,0)
CREATE PARENT ORDER^S^1:YES;0:NO;^5;6^Q
"^DD",101.41,101.41,56,3)
Enter YES if a parent order should be created for this order set
"^DD",101.41,101.41,56,21,0)
^^6^6^2970227^
"^DD",101.41,101.41,56,21,1,0)
This flag indicates whether a parent order should be created to group
"^DD",101.41,101.41,56,21,2,0)
together all the orders created by this order set; this flag is only
"^DD",101.41,101.41,56,21,3,0)
valid with SET type order dialogs.  If this value is YES, a parent
"^DD",101.41,101.41,56,21,4,0)
order will be created, and only the parent will be presented on the
"^DD",101.41,101.41,56,21,5,0)
orders list for display and action; NO will prevent a parent from being
"^DD",101.41,101.41,56,21,6,0)
created and all orders will be created and displayed independently.
"^DD",101.41,101.41,56,"DT")
2970227
"^DD",101.41,101.41,57,0)
DISPLAY SUBHEADER^S^1:YES;0:NO;^5;7^Q
"^DD",101.41,101.41,57,3)
Enter YES if a subheader should be displayed as each order in this set is processed
"^DD",101.41,101.41,57,21,0)
^^3^3^2970227^
"^DD",101.41,101.41,57,21,1,0)
This flag indicates whether a subheader is to be displayed for each order
"^DD",101.41,101.41,57,21,2,0)
in this set as it is processed and placed; this flag is only valid with
"^DD",101.41,101.41,57,21,3,0)
SET type order dialogs.
"^DD",101.41,101.41,57,"DT")
2970227
"^DD",101.41,101.41,58,0)
AUTO-ACCEPT QUICK ORDER^S^1:YES;^5;8^Q
"^DD",101.41,101.41,58,3)
Enter 'Yes' if the order should be placed without displaying the dialog window.
"^DD",101.41,101.41,58,21,0)
^^2^2^2980902^
"^DD",101.41,101.41,58,21,1,0)
This can be set to yes for a quick order so that it can be placed simply
"^DD",101.41,101.41,58,21,2,0)
by clicking on it in the GUI (no ordering dialog is displayed).
"^DD",101.41,101.41,58,"DT")
2980902
"^DD",101.41,101.41,99,0)
TIMESTAMP^F^^99;1^K:$L(X)>15!($L(X)<1) X
"^DD",101.41,101.41,99,1,0)
^.1
"^DD",101.41,101.41,99,1,1,0)
101.41^AM^MUMPS
"^DD",101.41,101.41,99,1,1,1)
D SET^ORDD41(DA)
"^DD",101.41,101.41,99,1,1,2)
D KILL^ORDD41(DA)
"^DD",101.41,101.41,99,1,1,"%D",0)
^^2^2^2990210^
"^DD",101.41,101.41,99,1,1,"%D",1,0)
Recompiles order dialog menus in ^XUTL("XQORM",<dialog#>_";ORD(101.41,")
"^DD",101.41,101.41,99,1,1,"%D",2,0)
whenever fields necessary to displaying the menu are changed.
"^DD",101.41,101.41,99,1,1,"DT")
2990210
"^DD",101.41,101.41,99,3)
Answer must be 1-15 characters in length.
"^DD",101.41,101.41,99,21,0)
^^2^2^2980501^
"^DD",101.41,101.41,99,21,1,0)
For menus, this contains the $H time the menu was last compiled for use
"^DD",101.41,101.41,99,21,2,0)
with the Unwinder utility (^XQOR).
"^DD",101.41,101.41,99,"DT")
2990210
"^DD",101.41,101.411,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",101.41,101.411,0,"DT")
2950407
"^DD",101.41,101.411,0,"NM","DESCRIPTION")

"^DD",101.41,101.411,0,"UP")
101.41
"^DD",101.41,101.411,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",101.41,101.411,.01,3)
Enter a description of this dialog.
"^DD",101.41,101.411,.01,21,0)
^^1^1^2950425^^
"^DD",101.41,101.411,.01,21,1,0)
This field contains a description of the content and use of this dialog.
"^DD",101.41,101.411,.01,"DT")
2950407
"^DD",101.41,101.412,0)
ITEMS SUB-FIELD^^117^37
"^DD",101.41,101.412,0,"DT")
2971117
"^DD",101.41,101.412,0,"ID","WRITE")
N OR0,ORNM S OR0=^(0) I $P(OR0,U,2) S ORNM=$P($G(^ORD(101.41,+$P(OR0,U,2),0)),U) D:$L(ORNM) EN^DDIOL(ORNM,,"?10")
"^DD",101.41,101.412,0,"IX","ATXT",101.412,21)

"^DD",101.41,101.412,0,"IX","B",101.412,.01)

"^DD",101.41,101.412,0,"IX","D",101.412,2)

"^DD",101.41,101.412,0,"IX","DAD",101.412,1)

"^DD",101.41,101.412,0,"IX","DAD1",101.412,.01)

"^DD",101.41,101.412,0,"NM","ITEMS")

"^DD",101.41,101.412,0,"UP")
101.41
"^DD",101.41,101.412,.01,0)
SEQUENCE^MNJ5,1^^0;1^K:+X'=X!(X>999.9)!(X<.1)!(X?.E1"."2N.N) X
"^DD",101.41,101.412,.01,1,0)
^.1
"^DD",101.41,101.412,.01,1,1,0)
101.412^B
"^DD",101.41,101.412,.01,1,1,1)
S ^ORD(101.41,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",101.41,101.412,.01,1,1,2)
K ^ORD(101.41,DA(1),10,"B",$E(X,1,30),DA)
"^DD",101.41,101.412,.01,1,2,0)
101.412^DAD1^MUMPS
"^DD",101.41,101.412,.01,1,2,1)
N ORP S ORP=$P(^ORD(101.41,DA(1),10,DA,0),U,11) S:ORP ^ORD(101.41,DA(1),10,"DAD",ORP,X,DA)=""
"^DD",101.41,101.412,.01,1,2,2)
N ORP S ORP=$P(^ORD(101.41,DA(1),10,DA,0),U,11) K:ORP ^ORD(101.41,DA(1),10,"DAD",ORP,X,DA)
"^DD",101.41,101.412,.01,1,2,"%D",0)
^^1^1^2950511^
"^DD",101.41,101.412,.01,1,2,"%D",1,0)
Allows retrieval of 'child' prompts in sequence by parent.
"^DD",101.41,101.412,.01,1,2,"DT")
2950511
"^DD",101.41,101.412,.01,1,3,0)
101.41^AMM^MUMPS
"^DD",101.41,101.412,.01,1,3,1)
D REDOX^ORDD41
"^DD",101.41,101.412,.01,1,3,2)
D REDOX^ORDD41
"^DD",101.41,101.412,.01,1,3,"%D",0)
^^1^1^2990210^
"^DD",101.41,101.412,.01,1,3,"%D",1,0)
Update TIMESTAMP whenever SEQUENCE is changed.
"^DD",101.41,101.412,.01,1,3,"DT")
2990210
"^DD",101.41,101.412,.01,3)
Type a Number between .1 and 999.9, 1 Decimal Digit
"^DD",101.41,101.412,.01,21,0)
^^2^2^2971117^^^^
"^DD",101.41,101.412,.01,21,1,0)
This field specifies the order in which this item will be displayed or
"^DD",101.41,101.412,.01,21,2,0)
processed.
"^DD",101.41,101.412,.01,"DT")
2990210
"^DD",101.41,101.412,.1,0)
INPUT TRANSFORM^K^^.1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,.1,3)
This is Standard MUMPS code.
"^DD",101.41,101.412,.1,9)
@
"^DD",101.41,101.412,.1,21,0)
^^2^2^2950816^
"^DD",101.41,101.412,.1,21,1,0)
This is code that will be used as the third piece of DIR(0) when asking
"^DD",101.41,101.412,.1,21,2,0)
this prompt.
"^DD",101.41,101.412,.1,"DT")
2950816
"^DD",101.41,101.412,1,0)
PARENT^P101.41'^ORD(101.41,^0;11^Q
"^DD",101.41,101.412,1,1,0)
^.1
"^DD",101.41,101.412,1,1,1,0)
101.412^DAD^MUMPS
"^DD",101.41,101.412,1,1,1,1)
S ^ORD(101.41,DA(1),10,"DAD",X,$P(^ORD(101.41,DA(1),10,DA,0),U),DA)=""
"^DD",101.41,101.412,1,1,1,2)
K ^ORD(101.41,DA(1),10,"DAD",X,$P(^ORD(101.41,DA(1),10,DA,0),U),DA)
"^DD",101.41,101.412,1,1,1,"%D",0)
^^1^1^2950511^^
"^DD",101.41,101.412,1,1,1,"%D",1,0)
Allows retrieval of 'child' prompts in sequence by parent.
"^DD",101.41,101.412,1,1,1,"DT")
2950511
"^DD",101.41,101.412,1,3)
If this prompt is subordinate to another in this dialog, enter the parent prompt here
"^DD",101.41,101.412,1,21,0)
^^4^4^2950511^
"^DD",101.41,101.412,1,21,1,0)
This field controls the behavior of this prompt.  If a parent is defined
"^DD",101.41,101.412,1,21,2,0)
here, this prompt will be asked from within the parent's dialog; when it
"^DD",101.41,101.412,1,21,3,0)
is invoked independently based on its position sequence number, the child
"^DD",101.41,101.412,1,21,4,0)
prompt will be ignored.
"^DD",101.41,101.412,1,"DT")
2950511
"^DD",101.41,101.412,2,0)
ITEM^P101.41'X^ORD(101.41,^0;2^D TREE^ORDD41
"^DD",101.41,101.412,2,1,0)
^.1
"^DD",101.41,101.412,2,1,1,0)
101.41^AD
"^DD",101.41,101.412,2,1,1,1)
S ^ORD(101.41,"AD",$E(X,1,30),DA(1),DA)=""
"^DD",101.41,101.412,2,1,1,2)
K ^ORD(101.41,"AD",$E(X,1,30),DA(1),DA)
"^DD",101.41,101.412,2,1,1,"DT")
2950123
"^DD",101.41,101.412,2,1,2,0)
101.412^D
"^DD",101.41,101.412,2,1,2,1)
S ^ORD(101.41,DA(1),10,"D",$E(X,1,30),DA)=""
"^DD",101.41,101.412,2,1,2,2)
K ^ORD(101.41,DA(1),10,"D",$E(X,1,30),DA)
"^DD",101.41,101.412,2,1,2,"DT")
2950411
"^DD",101.41,101.412,2,1,3,0)
101.41^AMM2^MUMPS
"^DD",101.41,101.412,2,1,3,1)
D REDOX^ORDD41
"^DD",101.41,101.412,2,1,3,2)
D REDOX^ORDD41
"^DD",101.41,101.412,2,1,3,"%D",0)
^^1^1^2990210^
"^DD",101.41,101.412,2,1,3,"%D",1,0)
Update TIMESTAMP whenever ITEM is changed.
"^DD",101.41,101.412,2,1,3,"DT")
2990210
"^DD",101.41,101.412,2,3)
Enter an order dialog; a dialog that is an ancestor may not also be a sub-item.
"^DD",101.41,101.412,2,21,0)
^^3^3^2950123^
"^DD",101.41,101.412,2,21,1,0)
This field points to an order dialog which is subordinate to this dialog.
"^DD",101.41,101.412,2,21,2,0)
NOTE:  The parent dialog menu or one of its ancestors may not be entered
"^DD",101.41,101.412,2,21,3,0)
as an item.
"^DD",101.41,101.412,2,"DT")
2990217
"^DD",101.41,101.412,3,0)
MNEMONIC^FX^^0;3^K:$L(X)>4!($L(X)<1)!(+X=X&($L(X,".")>1))!($$CHKMNE^ORUTL(X)) X
"^DD",101.41,101.412,3,1,0)
^.1
"^DD",101.41,101.412,3,1,1,0)
101.41^AMM3^MUMPS
"^DD",101.41,101.412,3,1,1,1)
D REDOX^ORDD41
"^DD",101.41,101.412,3,1,1,2)
D REDOX^ORDD41
"^DD",101.41,101.412,3,1,1,"%D",0)
^^1^1^2990210^
"^DD",101.41,101.412,3,1,1,"%D",1,0)
Update TIMESTAMP whenever MNEMONIC is changed.
"^DD",101.41,101.412,3,1,1,"DT")
2990210
"^DD",101.41,101.412,3,3)
Enter a mnemonic to be used when this dialog is displayed for selection, 1-4 characters in length with no decimal places if numeric. Standard list manager mnemonics may not be used.
"^DD",101.41,101.412,3,21,0)
^.001^2^2^3010727^^^^
"^DD",101.41,101.412,3,21,1,0)
This is a short abbreviation for this item dialog to be used when this
"^DD",101.41,101.412,3,21,2,0)
dialog is displayed for selection.
"^DD",101.41,101.412,3,"DT")
3000822
"^DD",101.41,101.412,4,0)
DISPLAY TEXT^FX^^0;4^K:$L(X)>80!($L(X)<1)!($$CHKNAM^ORUTL(X)) X
"^DD",101.41,101.412,4,1,0)
^.1
"^DD",101.41,101.412,4,1,1,0)
101.41^AMM4^MUMPS
"^DD",101.41,101.412,4,1,1,1)
D REDOX^ORDD41
"^DD",101.41,101.412,4,1,1,2)
D REDOX^ORDD41
"^DD",101.41,101.412,4,1,1,"%D",0)
^^1^1^2990210^
"^DD",101.41,101.412,4,1,1,"%D",1,0)
Update TIMESTAMP whenever DISPLAY TEXT is changed.
"^DD",101.41,101.412,4,1,1,"DT")
2990210
"^DD",101.41,101.412,4,3)
Answer must be 1-80 characters in length and cannot contain a semicolon (;), a comma (,), an up-arrow (^), a dash (-), or an equal sign (=).
"^DD",101.41,101.412,4,21,0)
^.001^2^2^3010419^^^^
"^DD",101.41,101.412,4,21,1,0)
This field allows the text that normally appears for this item to be
"^DD",101.41,101.412,4,21,2,0)
replaced with alternate text for use in this dialog or menu.
"^DD",101.41,101.412,4,"DT")
3000823
"^DD",101.41,101.412,5,0)
DISPLAY ONLY?^S^0:NO;1:YES;2:YES-HEADER;^0;5^Q
"^DD",101.41,101.412,5,1,0)
^.1
"^DD",101.41,101.412,5,1,1,0)
101.41^AMM5^MUMPS
"^DD",101.41,101.412,5,1,1,1)
D REDOX^ORDD41
"^DD",101.41,101.412,5,1,1,2)
D REDOX^ORDD41
"^DD",101.41,101.412,5,1,1,"%D",0)
^^1^1^2990210^
"^DD",101.41,101.412,5,1,1,"%D",1,0)
Update TIMESTAMP whenever DISPLAY ONLY? is changed.
"^DD",101.41,101.412,5,1,1,"DT")
2990210
"^DD",101.41,101.412,5,3)
Enter YES if this item is text for display only and not a selectable item.
"^DD",101.41,101.412,5,21,0)
^^3^3^2970409^^^^
"^DD",101.41,101.412,5,21,1,0)
This field identifies an item as being free text for display purposes
"^DD",101.41,101.412,5,21,2,0)
only.  The text in the Display Text field will be displayed, but it
"^DD",101.41,101.412,5,21,3,0)
is not selectable; if designated as a header, the text will be underlined.
"^DD",101.41,101.412,5,"DT")
2990210
"^DD",101.41,101.412,6,0)
REQUIRED^S^1:YES;0:NO;^0;6^Q
"^DD",101.41,101.412,6,3)
Enter YES if a response to this prompt is mandatory.
"^DD",101.41,101.412,6,21,0)
^^1^1^2950407^
"^DD",101.41,101.412,6,21,1,0)
This field indicates that the user must enter a response to this prompt.
"^DD",101.41,101.412,6,"DT")
2950407
"^DD",101.41,101.412,7,0)
MULTIPLE VALUED^S^1:YES;0:NO;^0;7^Q
"^DD",101.41,101.412,7,3)
Enter YES if this prompt is to be asked multiple times.
"^DD",101.41,101.412,7,21,0)
^^3^3^2950407^
"^DD",101.41,101.412,7,21,1,0)
This field determines if this prompt will be allowed to have multiple
"^DD",101.41,101.412,7,21,2,0)
values, or be prompted for only once; if this prompt is a sub-dialog,
"^DD",101.41,101.412,7,21,3,0)
the entire dialog will be asked once or many times, as a group.
"^DD",101.41,101.412,7,"DT")
2950407
"^DD",101.41,101.412,7.1,0)
MAX NUMBER OF MULTIPLES^NJ2,0^^0;12^K:+X'=X!(X>99)!(X<2)!(X?.E1"."1N.N) X
"^DD",101.41,101.412,7.1,3)
Type a Number between 2 and 99, 0 Decimal Digits
"^DD",101.41,101.412,7.1,21,0)
^^4^4^2950815^
"^DD",101.41,101.412,7.1,21,1,0)
This is the maximum number of values that may be entered for this prompt,
"^DD",101.41,101.412,7.1,21,2,0)
if it is flagged as being multiple-valued.  For example, a diet order may
"^DD",101.41,101.412,7.1,21,3,0)
have up to 5 diet modifications entered, where 5 is the maximum allowed
"^DD",101.41,101.412,7.1,21,4,0)
that would be entered here.
"^DD",101.41,101.412,7.1,"DT")
2950815
"^DD",101.41,101.412,7.2,0)
TITLE^F^^0;13^K:$L(X)>30!($L(X)<3) X
"^DD",101.41,101.412,7.2,3)
Answer must be 3-30 characters in length.
"^DD",101.41,101.412,7.2,21,0)
^^8^8^2970430^^
"^DD",101.41,101.412,7.2,21,1,0)
This is text that will be used in place of the prompt when the order is
"^DD",101.41,101.412,7.2,21,2,0)
displayed for place, edit, or cancel, or at the top of a multiple-valued
"^DD",101.41,101.412,7.2,21,3,0)
prompt.  The Display Text for the prompt will be used together with the
"^DD",101.41,101.412,7.2,21,4,0)
instance number to prompt for user input; for example if Title="Lab Tests:"
"^DD",101.41,101.412,7.2,21,5,0)
and Display Text="Test:" the user would see
"^DD",101.41,101.412,7.2,21,6,0)
  Lab Tests:
"^DD",101.41,101.412,7.2,21,7,0)
  1. Test:
"^DD",101.41,101.412,7.2,21,8,0)
  2. Test:
"^DD",101.41,101.412,7.2,"DT")
2950815
"^DD",101.41,101.412,7.3,0)
PROMPT^F^^0;14^K:$L(X)>10!($L(X)<1) X
"^DD",101.41,101.412,7.3,3)
Answer must be 1-10 characters in length.
"^DD",101.41,101.412,7.3,21,0)
^^3^3^2970618^
"^DD",101.41,101.412,7.3,21,1,0)
This field contains text that will be appended to the beginning of the
"^DD",101.41,101.412,7.3,21,2,0)
display text when prompting for additional values; if this field is
"^DD",101.41,101.412,7.3,21,3,0)
empty, then "Another " will be used.
"^DD",101.41,101.412,7.3,"DT")
2970618
"^DD",101.41,101.412,8,0)
ASK ON EDIT ONLY^S^1:YES;0:NO;^0;8^Q
"^DD",101.41,101.412,8,3)
Enter YES if this prompt should not be asked initially when creating this order, only if the user chooses to edit the order.
"^DD",101.41,101.412,8,21,0)
^^4^4^2960112^^^
"^DD",101.41,101.412,8,21,1,0)
This field determines the behaviour of the dialog driver for this prompt;
"^DD",101.41,101.412,8,21,2,0)
if no value or the defined default is usually correct for this prompt,
"^DD",101.41,101.412,8,21,3,0)
enter YES here to have this prompt skipped on the first pass through this
"^DD",101.41,101.412,8,21,4,0)
dialog when creating an order.
"^DD",101.41,101.412,8,"DT")
2950407
"^DD",101.41,101.412,9,0)
ASK ON ACTION^F^^0;9^K:$L(X)>3!($L(X)<1) X
"^DD",101.41,101.412,9,3)
Answer must be 1-3 characters in length.
"^DD",101.41,101.412,9,21,0)
^^6^6^2970708^^^
"^DD",101.41,101.412,9,21,1,0)
This field determines the behaviour of the dialog driver for this prompt
"^DD",101.41,101.412,9,21,2,0)
when taking a particular action on an order created by this dialog.  If
"^DD",101.41,101.412,9,21,3,0)
this string contains "R", this prompt will be asked when renewing an order;
"^DD",101.41,101.412,9,21,4,0)
if this string contains "C", this prompt will be asked when changing an
"^DD",101.41,101.412,9,21,5,0)
order; if this string contains "W", this prompt will be asked when
"^DD",101.41,101.412,9,21,6,0)
rewriting an order.
"^DD",101.41,101.412,9,"DT")
2970708
"^DD",101.41,101.412,10,0)
INDEX^F^^0;10^K:$L(X)>25!($L(X)<1) X
"^DD",101.41,101.412,10,3)
Answer must be 1-25 characters in length.
"^DD",101.41,101.412,10,21,0)
^^3^3^2950713^^^
"^DD",101.41,101.412,10,21,1,0)
For pointer-type prompts, this is the index to use when searching the file;
"^DD",101.41,101.412,10,21,2,0)
it must be in the form of a regular cross-reference.  To search on multiple
"^DD",101.41,101.412,10,21,3,0)
indices, enter a string of index names separated by semi-colons, i.e. "B;C".
"^DD",101.41,101.412,10,"DT")
2950713
"^DD",101.41,101.412,11,0)
HELP MESSAGE^F^^1;1^K:$L(X)>160!($L(X)<1) X
"^DD",101.41,101.412,11,3)
Answer must be 1-160 characters in length.
"^DD",101.41,101.412,11,21,0)
^^2^2^2970609^^
"^DD",101.41,101.412,11,21,1,0)
This field contains the help message to be presented when the user enters
"^DD",101.41,101.412,11,21,2,0)
a question mark at this prompt.
"^DD",101.41,101.412,11,"DT")
2970609
"^DD",101.41,101.412,12,0)
SPECIAL LOOKUP ROUTINE^F^^1;2^K:$L(X)>20!($L(X)<3) X
"^DD",101.41,101.412,12,3)
Enter the routine to use instead of DIC to do this lookup, as [TAG;]ROUTINE
"^DD",101.41,101.412,12,21,0)
^^3^3^2970609^
"^DD",101.41,101.412,12,21,1,0)
This field contains a routine to execute that will replace the standard
"^DD",101.41,101.412,12,21,2,0)
DIC lookup for this prompt; it must be entered here as LINETAG;ROUTINE
"^DD",101.41,101.412,12,21,3,0)
using a ; instead of ^ and where LINETAG is optional.
"^DD",101.41,101.412,12,"DT")
2970609
"^DD",101.41,101.412,13,0)
ASK ON CONDITION^K^^3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,13,3)
This is MUMPS code that sets $T to determine if this prompt should be asked, or given a default value and bypassed.
"^DD",101.41,101.412,13,9)
@
"^DD",101.41,101.412,13,21,0)
^^5^5^2950407^
"^DD",101.41,101.412,13,21,1,0)
This is MUMPS code that sets $T to determine if this prompt should be asked
"^DD",101.41,101.412,13,21,2,0)
or simply given a default value and presented to the user for acceptance
"^DD",101.41,101.412,13,21,3,0)
or editing.  For example, the prompt "Pregnant: " may have code here to
"^DD",101.41,101.412,13,21,4,0)
check the sex of the current patient, i.e. I ORSEX="F" will allow it to be
"^DD",101.41,101.412,13,21,5,0)
asked only for female patients.
"^DD",101.41,101.412,13,"DT")
2950407
"^DD",101.41,101.412,14,0)
SCREEN^K^^4;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,14,3)
This is Standard MUMPS code.
"^DD",101.41,101.412,14,9)
@
"^DD",101.41,101.412,14,21,0)
^^2^2^2950407^
"^DD",101.41,101.412,14,21,1,0)
For pointer-type prompts, this field may contain MUMPS code that will be
"^DD",101.41,101.412,14,21,2,0)
set into DIC("S") to screen the possible choices in the pointed-to file.
"^DD",101.41,101.412,14,"DT")
2950407
"^DD",101.41,101.412,15,0)
POST-SELECTION ACTION^K^^5;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,15,3)
This is Standard MUMPS code.
"^DD",101.41,101.412,15,9)
@
"^DD",101.41,101.412,15,21,0)
^^3^3^2970923^^^^
"^DD",101.41,101.412,15,21,1,0)
This is code that will be executed after a response is entered to this
"^DD",101.41,101.412,15,21,2,0)
prompt; if this prompt should be re-asked, kill the variable DONE.
"^DD",101.41,101.412,15,21,3,0)
If execution of the ordering dialog should be stopped, set ORQUIT=1.
"^DD",101.41,101.412,15,"DT")
2970923
"^DD",101.41,101.412,16,0)
XECUTABLE HELP^K^^6;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,16,3)
This is Standard MUMPS code.
"^DD",101.41,101.412,16,9)
@
"^DD",101.41,101.412,16,21,0)
^^2^2^2950407^
"^DD",101.41,101.412,16,21,1,0)
This is code that is to be executed when the user enters two or more
"^DD",101.41,101.412,16,21,2,0)
question marks at this prompt.
"^DD",101.41,101.412,16,"DT")
2950407
"^DD",101.41,101.412,17,0)
DEFAULT^K^^7;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,17,3)
This is Standard MUMPS code.
"^DD",101.41,101.412,17,9)
@
"^DD",101.41,101.412,17,21,0)
^^2^2^2971219^^^^
"^DD",101.41,101.412,17,21,1,0)
This is code that is to be executed to determine the appropriate default
"^DD",101.41,101.412,17,21,2,0)
value for this prompt, setting Y=internal form of this value.
"^DD",101.41,101.412,17,"DT")
2950519
"^DD",101.41,101.412,18,0)
DEFAULT WORD-PROCESSING TEXT^101.41218^^8;0
"^DD",101.41,101.412,18,21,0)
^^1^1^2971219^
"^DD",101.41,101.412,18,21,1,0)
This is default text to be stuffed into this word-processing prompt.
"^DD",101.41,101.412,19,0)
ENTRY ACTION^K^^9;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,19,3)
This is Standard MUMPS code.
"^DD",101.41,101.412,19,9)
@
"^DD",101.41,101.412,19,21,0)
^^3^3^2970609^
"^DD",101.41,101.412,19,21,1,0)
This is code that will be executed at the beginning of the processing of
"^DD",101.41,101.412,19,21,2,0)
this prompt, before the Default and Ask on Condition fields are executed;
"^DD",101.41,101.412,19,21,3,0)
any special setup required for this field should be done here.
"^DD",101.41,101.412,19,"DT")
2970609
"^DD",101.41,101.412,20,0)
EXIT ACTION^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,20,3)
This is Standard MUMPS code.
"^DD",101.41,101.412,20,9)
@
"^DD",101.41,101.412,20,21,0)
^^3^3^2970609^
"^DD",101.41,101.412,20,21,1,0)
This is code that will be executed at the very end of the processing of
"^DD",101.41,101.412,20,21,2,0)
this prompt, after prompting and the Validation field is executed;
"^DD",101.41,101.412,20,21,3,0)
any special cleanup should be done here.
"^DD",101.41,101.412,20,"DT")
2970609
"^DD",101.41,101.412,21,0)
ORDER TEXT SEQUENCE^NJ5,2^^2;1^K:+X'=X!(X>99.99)!(X<1)!(X?.E1"."3N.N) X
"^DD",101.41,101.412,21,1,0)
^.1
"^DD",101.41,101.412,21,1,1,0)
101.412^ATXT
"^DD",101.41,101.412,21,1,1,1)
S ^ORD(101.41,DA(1),10,"ATXT",$E(X,1,30),DA)=""
"^DD",101.41,101.412,21,1,1,2)
K ^ORD(101.41,DA(1),10,"ATXT",$E(X,1,30),DA)
"^DD",101.41,101.412,21,1,1,"%D",0)
^^1^1^2960226^
"^DD",101.41,101.412,21,1,1,"%D",1,0)
Used to build order text.
"^DD",101.41,101.412,21,1,1,"DT")
2960226
"^DD",101.41,101.412,21,3)
Enter the order in which this value should be added to the order text, as a number between 1 and 99.99; leave this field blank to prevent this value from being included
"^DD",101.41,101.412,21,21,0)
^^3^3^2970607^^^
"^DD",101.41,101.412,21,21,1,0)
This field indicates the order in which values will be concatenated
"^DD",101.41,101.412,21,21,2,0)
together to build the order text; this may differ from the prompting
"^DD",101.41,101.412,21,21,3,0)
order defined in the .01 Sequence field.
"^DD",101.41,101.412,21,"DT")
2960226
"^DD",101.41,101.412,22,0)
FORMAT^F^^2;2^K:$L(X)>10!($L(X)<1) X
"^DD",101.41,101.412,22,3)
Answer must be 1-10 characters in length.
"^DD",101.41,101.412,22,21,0)
^^15^15^2971207^^^^
"^DD",101.41,101.412,22,21,1,0)
This is a string of characters that will define any exceptions to how
"^DD",101.41,101.412,22,21,2,0)
the external form of this value is generated.  Possible values include:
"^DD",101.41,101.412,22,21,3,0)
  Pointer         -> <field #>~<piece in RPC list of field #>, default =.01
"^DD",101.41,101.412,22,21,4,0)
  Set of Codes    -> 1~<piece in RPC list of code> to use code for name
"^DD",101.41,101.412,22,21,5,0)
  Date/Time       -> Format string to pass $$FMTE^XLFDT (default = 2)
"^DD",101.41,101.412,22,21,6,0)
  
"^DD",101.41,101.412,22,21,7,0)
  Suppress value  -> @
"^DD",101.41,101.412,22,21,8,0)
  Replace value   -> @<ptr> where ptr is the Dialog IEN of the prompt
"^DD",101.41,101.412,22,21,9,0)
                      whose value, when present, supersedes this value
"^DD",101.41,101.412,22,21,10,0)
  Required value  -> *<ptr> where ptr is the Dialog IEN of the prompt
"^DD",101.41,101.412,22,21,11,0)
                      whose value is required to be present to include
"^DD",101.41,101.412,22,21,12,0)
                      this value
"^DD",101.41,101.412,22,21,13,0)
  Ignore if same  -> =<ptr> where ptr is the Dialog IEN of the prompt
"^DD",101.41,101.412,22,21,14,0)
                      whose value, if the external form is the same,
"^DD",101.41,101.412,22,21,15,0)
                      supersedes this value
"^DD",101.41,101.412,22,"DT")
2960226
"^DD",101.41,101.412,23,0)
OMIT TEXT^F^^2;3^K:$L(X)>30!($L(X)<1) X
"^DD",101.41,101.412,23,3)
Answer must be 1-30 characters in length.
"^DD",101.41,101.412,23,21,0)
^^3^3^2970829^^^^
"^DD",101.41,101.412,23,21,1,0)
This is the external form of a value that is not to be included when building
"^DD",101.41,101.412,23,21,2,0)
the order text.  E.g. to include the urgency in the order text unless it
"^DD",101.41,101.412,23,21,3,0)
is routine, enter "ROUTINE" here.
"^DD",101.41,101.412,23,"DT")
2970829
"^DD",101.41,101.412,24,0)
LEADING TEXT^F^^2;4^K:$L(X)>80!($L(X)<1) X
"^DD",101.41,101.412,24,3)
Answer must be 1-80 characters in length.
"^DD",101.41,101.412,24,21,0)
^^3^3^2970724^^^^
"^DD",101.41,101.412,24,21,1,0)
This field contains text that will be appended to the order text
"^DD",101.41,101.412,24,21,2,0)
immediately in front of this value, e.g. "Instructions:".  If this text
"^DD",101.41,101.412,24,21,3,0)
is contained in a variable, enter @NAME where NAME is the variable name.
"^DD",101.41,101.412,24,"DT")
2970724
"^DD",101.41,101.412,25,0)
TRAILING TEXT^F^^2;5^K:$L(X)>80!($L(X)<1) X
"^DD",101.41,101.412,25,3)
Answer must be 1-80 characters in length.
"^DD",101.41,101.412,25,21,0)
^^3^3^2970724^^^^
"^DD",101.41,101.412,25,21,1,0)
This field contains text that will be appended to the order text
"^DD",101.41,101.412,25,21,2,0)
immediately following this value, e.g. "refills".  If this text is
"^DD",101.41,101.412,25,21,3,0)
contained in a variable, enter @NAME where NAME is the variable name.
"^DD",101.41,101.412,25,"DT")
2970724
"^DD",101.41,101.412,26,0)
START NEW LINE^S^1:YES;0:NO;^2;6^Q
"^DD",101.41,101.412,26,3)
Enter YES if this value should begin on a new line in the order text.
"^DD",101.41,101.412,26,21,0)
0^^2^2^2970911^
"^DD",101.41,101.412,26,21,1,0)
This field determines if this value is concatenated onto the current line
"^DD",101.41,101.412,26,21,2,0)
when building the order text, or if a new line is started with this value.
"^DD",101.41,101.412,26,"DT")
2970911
"^DD",101.41,101.412,27,0)
WORD-WRAP^S^1:DON'T WRAP;0:WRAP;^2;7^Q
"^DD",101.41,101.412,27,3)
Enter 'Don't Wrap' to have the text be added line-by-line as it is stored; the default formatting is 'Wrap'.
"^DD",101.41,101.412,27,21,0)
^^3^3^2970926^^^
"^DD",101.41,101.412,27,21,1,0)
This field determines if this text should be wrapped when added to the
"^DD",101.41,101.412,27,21,2,0)
order text, or appended line by line as stored in the file; this is only
"^DD",101.41,101.412,27,21,3,0)
used for word-processing type prompts.
"^DD",101.41,101.412,27,"DT")
2970926
"^DD",101.41,101.412,101,0)
WINDOWS CONTROL^F^^W;1^K:$L(X)>30!($L(X)<1) X
"^DD",101.41,101.412,101,3)
Answer must be 1-30 characters in length.
"^DD",101.41,101.412,101,21,0)
^^2^2^2950715^
"^DD",101.41,101.412,101,21,1,0)
Stores the type of Windows control necessary to get the data for this
"^DD",101.41,101.412,101,21,2,0)
prompt.
"^DD",101.41,101.412,101,"DT")
2960517
"^DD",101.41,101.412,102,0)
API NAME^F^^W;2^K:$L(X)>30!($L(X)<1) X
"^DD",101.41,101.412,102,3)
Answer must be 1-30 characters in length.
"^DD",101.41,101.412,102,21,0)
^^3^3^2950715^
"^DD",101.41,101.412,102,21,1,0)
This is the API that should be called when the control is used.  How the API
"^DD",101.41,101.412,102,21,2,0)
is used varys with the control.  Examples are: filling list boxes, getting
"^DD",101.41,101.412,102,21,3,0)
boilerplate text, etc.
"^DD",101.41,101.412,102,"DT")
2951002
"^DD",101.41,101.412,103,0)
API PARAMETER #1^F^^W;3^K:$L(X)>30!($L(X)<1) X
"^DD",101.41,101.412,103,3)
Answer must be 1-30 characters in length.
"^DD",101.41,101.412,103,21,0)
^^1^1^2950715^
"^DD",101.41,101.412,103,21,1,0)
A parameter that is used by the API call may be stored here.
"^DD",101.41,101.412,103,"DT")
2950715
"^DD",101.41,101.412,113,0)
WINDOWS CONDITION^K^^W3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,113,3)
This is Standard MUMPS code.
"^DD",101.41,101.412,113,9)
@
"^DD",101.41,101.412,113,21,0)
^^3^3^2950715^
"^DD",101.41,101.412,113,21,1,0)
This is silent code that is executed when building the dialog for windows.
"^DD",101.41,101.412,113,21,2,0)
It identifies which prompts should be included in the dialog.  The condition
"^DD",101.41,101.412,113,21,3,0)
should leave $T false if the prompt should not be asked.
"^DD",101.41,101.412,113,"DT")
2950715
"^DD",101.41,101.412,117,0)
WINDOWS DEFAULT^K^^W7;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",101.41,101.412,117,3)
This is Standard MUMPS code.
"^DD",101.41,101.412,117,9)
@
"^DD",101.41,101.412,117,21,0)
^^2^2^2950715^
"^DD",101.41,101.412,117,21,1,0)
This code should silently set the default value of a prompt when it is 
"^DD",101.41,101.412,117,21,2,0)
selected.
"^DD",101.41,101.412,117,"DT")
2950715
"^DD",101.41,101.41218,0)
DEFAULT WORD-PROCESSING TEXT SUB-FIELD^^.01^1
"^DD",101.41,101.41218,0,"DT")
2950407
"^DD",101.41,101.41218,0,"NM","DEFAULT WORD-PROCESSING TEXT")

"^DD",101.41,101.41218,0,"UP")
101.412
"^DD",101.41,101.41218,.01,0)
DEFAULT WORD-PROCESSING TEXT^W^^0;1^Q
"^DD",101.41,101.41218,.01,3)
Enter the default response for a word-processing type prompt.
"^DD",101.41,101.41218,.01,21,0)
^^2^2^2950407^
"^DD",101.41,101.41218,.01,21,1,0)
This field contains the text to be presented as the default for this prompt,
"^DD",101.41,101.41218,.01,21,2,0)
for word-processing type prompts.
"^DD",101.41,101.41218,.01,"DT")
2950407
"^DD",101.41,101.415,0)
CONTROLS SUB-FIELD^^14^14
"^DD",101.41,101.415,0,"DT")
2960202
"^DD",101.41,101.415,0,"IX","AC",101.415,3)

"^DD",101.41,101.415,0,"IX","B",101.415,.01)

"^DD",101.41,101.415,0,"NM","CONTROLS")

"^DD",101.41,101.415,0,"UP")
101.41
"^DD",101.41,101.415,.01,0)
LOGICAL NAME^MF^^0;1^K:$L(X)>8!($L(X)<1)!'(X?1.8U) X
"^DD",101.41,101.415,.01,1,0)
^.1
"^DD",101.41,101.415,.01,1,1,0)
101.415^B
"^DD",101.41,101.415,.01,1,1,1)
S ^ORD(101.41,DA(1),50,"B",$E(X,1,30),DA)=""
"^DD",101.41,101.415,.01,1,1,2)
K ^ORD(101.41,DA(1),50,"B",$E(X,1,30),DA)
"^DD",101.41,101.415,.01,3)
Answer must be 1-8 characters in length.
"^DD",101.41,101.415,.01,21,0)
^^1^1^2960202^
"^DD",101.41,101.415,.01,21,1,0)
This is the name by which controls can refer to each other.
"^DD",101.41,101.415,.01,"DT")
2960202
"^DD",101.41,101.415,2,0)
ITEM^P101.41'^ORD(101.41,^0;2^Q
"^DD",101.41,101.415,2,"DT")
2960202
"^DD",101.41,101.415,3,0)
CREATE SEQUENCE^NJ2,0^^0;3^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",101.41,101.415,3,1,0)
^.1
"^DD",101.41,101.415,3,1,1,0)
101.415^AC
"^DD",101.41,101.415,3,1,1,1)
S ^ORD(101.41,DA(1),50,"AC",$E(X,1,30),DA)=""
"^DD",101.41,101.415,3,1,1,2)
K ^ORD(101.41,DA(1),50,"AC",$E(X,1,30),DA)
"^DD",101.41,101.415,3,1,1,"%D",0)
^^2^2^2960202^
"^DD",101.41,101.415,3,1,1,"%D",1,0)
The 'AC' cross-reference puts in window controls in order by creation 
"^DD",101.41,101.415,3,1,1,"%D",2,0)
sequence.
"^DD",101.41,101.415,3,1,1,"DT")
2960202
"^DD",101.41,101.415,3,3)
Type a Number between 1 and 99, 0 Decimal Digits
"^DD",101.41,101.415,3,"DT")
2960202
"^DD",101.41,101.415,4,0)
CONTROL TYPE^S^0:Label;1:Button;2:Edit;3:Memo;4:ListBox;5:SimpleCombo;6:DropDownList;7:LongCombo;^0;4^Q
"^DD",101.41,101.415,4,"DT")
2960202
"^DD",101.41,101.415,5,0)
LABEL^F^^0;5^K:$L(X)>30!($L(X)<1) X
"^DD",101.41,101.415,5,3)
Answer must be 1-30 characters in length.
"^DD",101.41,101.415,5,"DT")
2960202
"^DD",101.41,101.415,6,0)
BESIDE^F^^0;6^K:$L(X)>8!($L(X)<1) X
"^DD",101.41,101.415,6,3)
Answer must be 1-8 characters in length.
"^DD",101.41,101.415,6,"DT")
2960202
"^DD",101.41,101.415,7,0)
BELOW^F^^0;7^K:$L(X)>8!($L(X)<1) X
"^DD",101.41,101.415,7,3)
Answer must be 1-8 characters in length.
"^DD",101.41,101.415,7,"DT")
2960202
"^DD",101.41,101.415,8,0)
WIDTH^NJ6,4^^0;8^K:+X'=X!(X>1)!(X<0)!(X?.E1"."5N.N) X
"^DD",101.41,101.415,8,3)
Type a Number between 0 and 1, 4 Decimal Digits
"^DD",101.41,101.415,8,"DT")
2960202
"^DD",101.41,101.415,9,0)
LEFT CONTROL^F^^0;9^K:$L(X)>8!($L(X)<1) X
"^DD",101.41,101.415,9,3)
Answer must be 1-8 characters in length.
"^DD",101.41,101.415,9,"DT")
2960202
"^DD",101.41,101.415,10,0)
RIGHT CONTROL^F^^0;10^K:$L(X)>8!($L(X)<1) X
"^DD",101.41,101.415,10,3)
Answer must be 1-8 characters in length.
"^DD",101.41,101.415,10,"DT")
2960202
"^DD",101.41,101.415,11,0)
HEIGHT^NJ2,0^^0;11^K:+X'=X!(X>15)!(X<1)!(X?.E1"."1N.N) X
"^DD",101.41,101.415,11,3)
Type a Number between 1 and 15, 0 Decimal Digits
"^DD",101.41,101.415,11,"DT")
2960202
"^DD",101.41,101.415,12,0)
UPPER CONTROL^F^^0;12^K:$L(X)>8!($L(X)<1) X
"^DD",101.41,101.415,12,3)
Answer must be 1-8 characters in length.
"^DD",101.41,101.415,12,"DT")
2960202
"^DD",101.41,101.415,13,0)
LOWER CONTROL^F^^0;13^K:$L(X)>8!($L(X)<1) X
"^DD",101.41,101.415,13,3)
Answer must be 1-8 characters in length.
"^DD",101.41,101.415,13,"DT")
2960202
"^DD",101.41,101.415,14,0)
TAB SEQUENCE^NJ2,0^^0;14^K:+X'=X!(X>89)!(X<0)!(X?.E1"."1N.N) X
"^DD",101.41,101.415,14,3)
Type a Number between 0 and 89, 0 Decimal Digits
"^DD",101.41,101.415,14,"DT")
2960202
"^DD",101.41,101.416,0)
RESPONSES SUB-FIELD^^2^5
"^DD",101.41,101.416,0,"DT")
2960717
"^DD",101.41,101.416,0,"IX","D",101.416,.02)

"^DD",101.41,101.416,0,"NM","RESPONSES")

"^DD",101.41,101.416,0,"UP")
101.41
"^DD",101.41,101.416,.01,0)
ITEM ENTRY^MNJ7,0^^0;1^K:+X'=X!(X>9999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",101.41,101.416,.01,1,0)
^.1^^0
"^DD",101.41,101.416,.01,3)
Type a Number between 1 and 9999999, 0 Decimal Digits
"^DD",101.41,101.416,.01,21,0)
^^2^2^2971219^^^
"^DD",101.41,101.416,.01,21,1,0)
This is the internal entry number of the prompt in the Item multiple
"^DD",101.41,101.416,.01,21,2,0)
by which this response was obtained.
"^DD",101.41,101.416,.01,"DT")
2961118
"^DD",101.41,101.416,.02,0)
DIALOG^P101.41'^ORD(101.41,^0;2^Q
"^DD",101.41,101.416,.02,1,0)
^.1
"^DD",101.41,101.416,.02,1,1,0)
101.416^D
"^DD",101.41,101.416,.02,1,1,1)
S ^ORD(101.41,DA(1),6,"D",$E(X,1,30),DA)=""
"^DD",101.41,101.416,.02,1,1,2)
K ^ORD(101.41,DA(1),6,"D",$E(X,1,30),DA)
"^DD",101.41,101.416,.02,1,1,"DT")
2961118
"^DD",101.41,101.416,.02,3)
Select the dialog prompt from which this response was generated.
"^DD",101.41,101.416,.02,21,0)
^^2^2^2960717^
"^DD",101.41,101.416,.02,21,1,0)
This is a pointer to the dialog prompt, which is in the Order Dialog file
"^DD",101.41,101.416,.02,21,2,0)
as type prompt.
"^DD",101.41,101.416,.02,"DT")
2961118
"^DD",101.41,101.416,.03,0)
INSTANCE^NJ7,0^^0;3^K:+X'=X!(X>9999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",101.41,101.416,.03,3)
Type a Number between 1 and 9999999, 0 Decimal Digits
"^DD",101.41,101.416,.03,21,0)
^^2^2^2960717^
"^DD",101.41,101.416,.03,21,1,0)
In the case of multiple answers for the same item, this identifies the
"^DD",101.41,101.416,.03,21,2,0)
individual instance.
"^DD",101.41,101.416,.03,"DT")
2960717
"^DD",101.41,101.416,1,0)
VALUE^FO^^1;1^K:$L(X)>245!($L(X)<1) X
"^DD",101.41,101.416,1,2)
S Y(0)=Y S Y=$$OUTPUT^ORCMEDT5(Y)
"^DD",101.41,101.416,1,2.1)
S Y=$$OUTPUT^ORCMEDT5(Y)
"^DD",101.41,101.416,1,3)
Answer must be 1-245 characters in length.
"^DD",101.41,101.416,1,21,0)
^^2^2^2971219^^
"^DD",101.41,101.416,1,21,1,0)
This contains the actual response, unless the value is a word processing
"^DD",101.41,101.416,1,21,2,0)
type.
"^DD",101.41,101.416,1,"DT")
2980717
"^DD",101.41,101.416,2,0)
TEXT^101.4162^^2;0
"^DD",101.41,101.416,2,21,0)
^^1^1^2971219^
"^DD",101.41,101.416,2,21,1,0)
This contains the actual response, for word-processing type prompts.
"^DD",101.41,101.416,2,"DT")
2960717
"^DD",101.41,101.4162,0)
TEXT SUB-FIELD^^.01^1
"^DD",101.41,101.4162,0,"DT")
2960717
"^DD",101.41,101.4162,0,"NM","TEXT")

"^DD",101.41,101.4162,0,"UP")
101.416
"^DD",101.41,101.4162,.01,0)
TEXT^WL^^0;1^Q
"^DD",101.41,101.4162,.01,21,0)
^^1^1^2960717^^
"^DD",101.41,101.4162,.01,21,1,0)
This contains responses to items that are a word processing type.
"^DD",101.41,101.4162,.01,"DT")
2960717
"^DD",560,560,0)
FIELD^^.04^7
"^DD",560,560,0,"DT")
3140521
"^DD",560,560,0,"IX","B",560,.01)

"^DD",560,560,0,"NM","VPR SUBSCRIPTION")

"^DD",560,560,0,"VRPK")
VPR
"^DD",560,560,.01,0)
SERVER^RF^^0;1^K:$L(X)>64!($L(X)<1)!'(X'?1P.E) X
"^DD",560,560,.01,1,0)
^.1^^-1
"^DD",560,560,.01,1,1,0)
560^B
"^DD",560,560,.01,1,1,1)
S ^VPR(560,"B",$E(X,1,64),DA)=""
"^DD",560,560,.01,1,1,2)
K ^VPR(560,"B",$E(X,1,64),DA)
"^DD",560,560,.01,3)
Answer must be 1-64 characters in length.
"^DD",560,560,.01,21,0)
^.001^1^1^3140212^^^^
"^DD",560,560,.01,21,1,0)
This is the name of the client system that is subscribing to data updates.
"^DD",560,560,.01,"DT")
3120522
"^DD",560,560,.02,0)
LASTUPDATE^F^^0;2^K:$L(X)>100!($L(X)<3) X
"^DD",560,560,.02,3)
Answer must be 3-100 characters in length. (Do not modified)
"^DD",560,560,.02,21,0)
^^3^3^3110908^
"^DD",560,560,.02,21,1,0)
This field holds a flag, indicating if this URL should be notified via the
"^DD",560,560,.02,21,2,0)
nightly scheduled option VPR APPOINTMENTS of the list of patients expected
"^DD",560,560,.02,21,3,0)
to be seen tomorrow.
"^DD",560,560,.02,"DT")
3140225
"^DD",560,560,.03,0)
OPERATION DATA^S^0:UNSUBCRIBED;1:SUBSCRIBED;2:INITIALIZED;^0;3^Q
"^DD",560,560,.03,3)
Enter YES if the hmp server has received a sync of operational data (Do Not Modified)
"^DD",560,560,.03,21,0)
^^2^2^3110908^
"^DD",560,560,.03,21,1,0)
This field holds a flag, indicating if this URL should be notified via http
"^DD",560,560,.03,21,2,0)
when a patient is admitted.
"^DD",560,560,.03,"DT")
3140226
"^DD",560,560,.04,0)
REPEAT POLLS^NJ8,0^^0;4^K:+X'=X!(X>99999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",560,560,.04,3)
Type a number between 0 and 99999999, 0 decimal digits.
"^DD",560,560,.04,21,0)
^^2^2^3140404^
"^DD",560,560,.04,21,1,0)
This tracks the number of times the same "last update" value has been
"^DD",560,560,.04,21,2,0)
repeated.  A high repeat may be normal if data are not changing.
"^DD",560,560,.04,"DT")
3140404
"^DD",560,560,.1,0)
URL^F^^.1;1^K:$L(X)>250!($L(X)<1) X
"^DD",560,560,.1,3)
Answer must be 1-250 characters in length.
"^DD",560,560,.1,21,0)
^^1^1^3110706^
"^DD",560,560,.1,21,1,0)
This is the fully specified URL to call when updates are available.
"^DD",560,560,.1,"DT")
3110706
"^DD",560,560,1,0)
PATIENT^560.01P^^1;0
"^DD",560,560,1,21,0)
^.001^1^1^3140212^^^^
"^DD",560,560,1,21,1,0)
This is a patient that will be monitored for new data and updates.
"^DD",560,560,2,0)
ROSTER^560.02P^^2;0
"^DD",560,560,2,21,0)
^.001^1^1^3130417^^^^
"^DD",560,560,2,21,1,0)
This is a roster that will be monitored for new patients and updates.
"^DD",560,560,2,"DT")
3130417
"^DD",560,560.01,0)
PATIENT SUB-FIELD^^3^3
"^DD",560,560.01,0,"DT")
3140521
"^DD",560,560.01,0,"NM","PATIENT")

"^DD",560,560.01,0,"UP")
560
"^DD",560,560.01,.01,0)
PATIENT NAME^MP2'X^DPT(^0;1^S DINUM=X
"^DD",560,560.01,.01,1,0)
^.1^^0
"^DD",560,560.01,.01,3)
Enter the name of a patient to be tracked.
"^DD",560,560.01,.01,21,0)
^.001^1^1^3140212^^
"^DD",560,560.01,.01,21,1,0)
This is the name of the patient being monitored for new data.
"^DD",560,560.01,.01,"DT")
3140226
"^DD",560,560.01,2,0)
STATUS^S^0:UNINITIALIZED;1:INITIALIZING;2:INITIALIZED;^0;2^Q
"^DD",560,560.01,2,3)
Tracks the status of a patient sync. (Do Not Modify)
"^DD",560,560.01,2,21,0)
^^4^4^3140521^
"^DD",560,560.01,2,21,1,0)
This field tracks the initialization progress of the patient.  When a 
"^DD",560,560.01,2,21,2,0)
patient is initially subscribed, they are added to this multiple.  The 
"^DD",560,560.01,2,21,3,0)
statis is "1" when the extracts start and "2" when they finish.  At that 
"^DD",560,560.01,2,21,4,0)
point, freshness updates are moved into the stream.
"^DD",560,560.01,2,"DT")
3140521
"^DD",560,560.01,3,0)
STATUS TIME^D^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",560,560.01,3,3)
Enter the time the status changed.
"^DD",560,560.01,3,21,0)
^^1^1^3140521^
"^DD",560,560.01,3,21,1,0)
This is the time of the last change in extract status.
"^DD",560,560.01,3,"DT")
3140521
"^DD",560,560.02,0)
ROSTER SUB-FIELD^^2^2
"^DD",560,560.02,0,"DT")
3130417
"^DD",560,560.02,0,"NM","ROSTER")

"^DD",560,560.02,0,"UP")
560
"^DD",560,560.02,.01,0)
NAME^MP561.2'X^VPROSTER(^0;1^S DINUM=X
"^DD",560,560.02,.01,1,0)
^.1^^0
"^DD",560,560.02,.01,3)
Enter the name of a roster to be tracked.
"^DD",560,560.02,.01,21,0)
^.001^1^1^3130417^^
"^DD",560,560.02,.01,21,1,0)
This is the name of the roster being monitored for new patients.
"^DD",560,560.02,.01,"DT")
3130417
"^DD",560,560.02,2,0)
ON^S^1:YES;0:NO;^0;2^Q
"^DD",560,560.02,2,3)
Enter YES to turn on data tracking for this roster.
"^DD",560,560.02,2,21,0)
^.001^3^3^3130417^^
"^DD",560,560.02,2,21,1,0)
This field turns on the Data Monitor for this roster and client system.
"^DD",560,560.02,2,21,2,0)
If ON=true, a new snapshot of this roster will be sent to the client
"^DD",560,560.02,2,21,3,0)
when new data updates are requested.
"^DD",560,560.02,2,"DT")
3130417
"^DD",560.1,560.1,0)
FIELD^^1^4
"^DD",560.1,560.1,0,"DT")
3121129
"^DD",560.1,560.1,0,"IX","B",560.1,.01)

"^DD",560.1,560.1,0,"NM","VPR PATIENT OBJECT")

"^DD",560.1,560.1,0,"VRPK")
VPR
"^DD",560.1,560.1,.01,0)
UID^RF^^0;1^K:$L(X)>63!($L(X)<3)!'(X'?1P.E) X
"^DD",560.1,560.1,.01,1,0)
^.1
"^DD",560.1,560.1,.01,1,1,0)
560.1^B
"^DD",560.1,560.1,.01,1,1,1)
S ^VPR(560.1,"B",$E(X,1,63),DA)=""
"^DD",560.1,560.1,.01,1,1,2)
K ^VPR(560.1,"B",$E(X,1,63),DA)
"^DD",560.1,560.1,.01,3)
Answer must be 3-63 characters in length.
"^DD",560.1,560.1,.01,21,0)
^^1^1^3121129^
"^DD",560.1,560.1,.01,21,1,0)
The fully specified Universal ID string for this object.
"^DD",560.1,560.1,.01,23,0)
^^1^1^3121129^
"^DD",560.1,560.1,.01,23,1,0)
urn:va:{systemId}:{DFN}:{collection}:{ien}
"^DD",560.1,560.1,.01,"DT")
3121129
"^DD",560.1,560.1,.02,0)
PATIENT^RP2'^DPT(^0;2^Q
"^DD",560.1,560.1,.02,3)
Enter the patient that owns this object.
"^DD",560.1,560.1,.02,21,0)
^^1^1^3121129^
"^DD",560.1,560.1,.02,21,1,0)
Patient file #2 ien
"^DD",560.1,560.1,.02,"DT")
3121129
"^DD",560.1,560.1,.03,0)
COLLECTION^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",560.1,560.1,.03,3)
Answer must be 3-30 characters in length.
"^DD",560.1,560.1,.03,21,0)
^^1^1^3121129^
"^DD",560.1,560.1,.03,21,1,0)
The name of the type or kind of data this object belongs to.
"^DD",560.1,560.1,.03,"DT")
3121129
"^DD",560.1,560.1,1,0)
DATA^560.101^^1;0
"^DD",560.1,560.101,0)
DATA SUB-FIELD^^.01^1
"^DD",560.1,560.101,0,"DT")
3121129
"^DD",560.1,560.101,0,"NM","DATA")

"^DD",560.1,560.101,0,"UP")
560.1
"^DD",560.1,560.101,.01,0)
DATA^Wx^^0;1^Q
"^DD",560.1,560.101,.01,21,0)
^^1^1^3121129^
"^DD",560.1,560.101,.01,21,1,0)
JSON data object
"^DD",560.1,560.101,.01,"DT")
3121129
"^DD",560.11,560.11,0)
FIELD^^1^3
"^DD",560.11,560.11,0,"DT")
3121129
"^DD",560.11,560.11,0,"IX","ACNT",560.11,.03)

"^DD",560.11,560.11,0,"IX","B",560.11,.01)

"^DD",560.11,560.11,0,"IX","C",560.11,.03)

"^DD",560.11,560.11,0,"NM","VPR OBJECT")

"^DD",560.11,560.11,0,"VRPK")
VPR
"^DD",560.11,560.11,.01,0)
UID^RF^^0;1^K:$L(X)>63!($L(X)<3)!'(X'?1P.E) X
"^DD",560.11,560.11,.01,1,0)
^.1
"^DD",560.11,560.11,.01,1,1,0)
560.11^B
"^DD",560.11,560.11,.01,1,1,1)
S ^VPR(560.11,"B",$E(X,1,63),DA)=""
"^DD",560.11,560.11,.01,1,1,2)
K ^VPR(560.11,"B",$E(X,1,63),DA)
"^DD",560.11,560.11,.01,3)
Answer must be 3-63 characters in length.
"^DD",560.11,560.11,.01,21,0)
^^1^1^3121129^
"^DD",560.11,560.11,.01,21,1,0)
The fully specified Universal ID string for this object.
"^DD",560.11,560.11,.01,23,0)
^^1^1^3121129^
"^DD",560.11,560.11,.01,23,1,0)
urn:va:{collection}:{systemId}:{ien}
"^DD",560.11,560.11,.01,"DT")
3121129
"^DD",560.11,560.11,.03,0)
COLLECTION^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",560.11,560.11,.03,1,0)
^.1
"^DD",560.11,560.11,.03,1,1,0)
560.11^C
"^DD",560.11,560.11,.03,1,1,1)
S ^VPR(560.11,"C",$E(X,1,30),DA)=""
"^DD",560.11,560.11,.03,1,1,2)
K ^VPR(560.11,"C",$E(X,1,30),DA)
"^DD",560.11,560.11,.03,1,1,"DT")
3121129
"^DD",560.11,560.11,.03,1,2,0)
560.11^ACNT^MUMPS
"^DD",560.11,560.11,.03,1,2,1)
S ^VPR(560.11,"ACNT",$E(X,1,30))=$G(^VPR(560.11,"ACNT",$E(X,1,30)))+1
"^DD",560.11,560.11,.03,1,2,2)
S ^VPR(560.11,"ACNT",$E(X,1,30))=$G(^VPR(560.11,"ACNT",$E(X,1,30)))-1
"^DD",560.11,560.11,.03,1,2,"%D",0)
^^1^1^3140503^
"^DD",560.11,560.11,.03,1,2,"%D",1,0)
Maintain a count of the number of items in each collection.
"^DD",560.11,560.11,.03,1,2,"DT")
3140503
"^DD",560.11,560.11,.03,3)
Answer must be 3-30 characters in length.
"^DD",560.11,560.11,.03,21,0)
^^1^1^3121129^
"^DD",560.11,560.11,.03,21,1,0)
The name of the type or kind of data this object belongs to.
"^DD",560.11,560.11,.03,"DT")
3140503
"^DD",560.11,560.11,1,0)
DATA^560.111^^1;0
"^DD",560.11,560.111,0)
DATA SUB-FIELD^^.01^1
"^DD",560.11,560.111,0,"DT")
3121129
"^DD",560.11,560.111,0,"NM","DATA")

"^DD",560.11,560.111,0,"UP")
560.11
"^DD",560.11,560.111,.01,0)
DATA^Wx^^0;1^Q
"^DD",560.11,560.111,.01,21,0)
^^1^1^3121129^
"^DD",560.11,560.111,.01,21,1,0)
JSON data object
"^DD",560.11,560.111,.01,"DT")
3121129
"^DD",561,561,0)
FIELD^^.03^4
"^DD",561,561,0,"DDA")
N
"^DD",561,561,0,"DT")
3110729
"^DD",561,561,0,"IX","B",561,.01)

"^DD",561,561,0,"IX","C",561,.03)

"^DD",561,561,0,"NM","VPR PANEL")

"^DD",561,561,0,"PT",561.21,.02)

"^DD",561,561,0,"VRPK")
VPR
"^DD",561,561,.01,0)
NAME^R*P810.4'^PXRM(810.4,^0;1^S DIC("S")="I $P(^(0),U,3)=3" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",561,561,.01,1,0)
^.1
"^DD",561,561,.01,1,1,0)
561^B
"^DD",561,561,.01,1,1,1)
S ^VPRPANEL("B",$E(X,1,30),DA)=""
"^DD",561,561,.01,1,1,2)
K ^VPRPANEL("B",$E(X,1,30),DA)
"^DD",561,561,.01,3)

"^DD",561,561,.01,12)
Only select RULE SET types
"^DD",561,561,.01,12.1)
S DIC("S")="I $P(^(0),U,3)=3"
"^DD",561,561,.01,"DT")
3110629
"^DD",561,561,.02,0)
DISPLAY NAME^RF^^0;2^K:$L(X)>50!($L(X)<3) X
"^DD",561,561,.02,3)
Answer must be 3-50 characters in length.
"^DD",561,561,.02,"DT")
3110630
"^DD",561,561,.03,0)
PATIENT LIST NAME^F^^0;3^K:$L(X)>40!($L(X)<3) X
"^DD",561,561,.03,1,0)
^.1
"^DD",561,561,.03,1,1,0)
561^C
"^DD",561,561,.03,1,1,1)
S ^VPRPANEL("C",$E(X,1,30),DA)=""
"^DD",561,561,.03,1,1,2)
K ^VPRPANEL("C",$E(X,1,30),DA)
"^DD",561,561,.03,1,1,"DT")
3111006
"^DD",561,561,.03,3)
Answer must be 3-40 characters in length.
"^DD",561,561,.03,"DT")
3111006
"^DD",561,561,5,0)
ORDER DIALOGS^561.05P^^ORDER DIALOGS;0
"^DD",561,561.05,0)
ORDER DIALOGS SUB-FIELD^^.01^1
"^DD",561,561.05,0,"DT")
3110629
"^DD",561,561.05,0,"IX","B",561.05,.01)

"^DD",561,561.05,0,"NM","ORDER DIALOGS")

"^DD",561,561.05,0,"UP")
561
"^DD",561,561.05,.01,0)
ORDER DIALOGS^MP101.41'^ORD(101.41,^0;1^Q
"^DD",561,561.05,.01,1,0)
^.1
"^DD",561,561.05,.01,1,1,0)
561.05^B
"^DD",561,561.05,.01,1,1,1)
S ^VPRPANEL(DA(1),"ORDER DIALOGS","B",$E(X,1,30),DA)=""
"^DD",561,561.05,.01,1,1,2)
K ^VPRPANEL(DA(1),"ORDER DIALOGS","B",$E(X,1,30),DA)
"^DD",561,561.05,.01,"DT")
3110629
"^DD",561.2,561.2,0)
FIELD^^3^10
"^DD",561.2,561.2,0,"DT")
3130717
"^DD",561.2,561.2,0,"IX","AB",561.23,.01)

"^DD",561.2,561.2,0,"IX","AC",561.2,.04)

"^DD",561.2,561.2,0,"IX","AD",561.21,.02)

"^DD",561.2,561.2,0,"IX","ATS",561.2,99)

"^DD",561.2,561.2,0,"IX","B",561.2,.01)

"^DD",561.2,561.2,0,"NM","VPROSTER")

"^DD",561.2,561.2,0,"PT",560.02,.01)

"^DD",561.2,561.2,0,"PT",561.21,.02)

"^DD",561.2,561.2,0,"VRPK")
VPR
"^DD",561.2,561.2,.01,0)
NAME^RF^^0;1^K:$L(X)>104!($L(X)<3)!'(X'?1P.E) X
"^DD",561.2,561.2,.01,1,0)
^.1
"^DD",561.2,561.2,.01,1,1,0)
561.2^B
"^DD",561.2,561.2,.01,1,1,1)
S ^VPROSTER("B",$E(X,1,30),DA)=""
"^DD",561.2,561.2,.01,1,1,2)
K ^VPROSTER("B",$E(X,1,30),DA)
"^DD",561.2,561.2,.01,3)
Answer must be 3-104 characters in length.
"^DD",561.2,561.2,.01,"DT")
3130220
"^DD",561.2,561.2,.02,0)
DISPLAY NAME^F^^0;2^K:$L(X)>45!($L(X)<3) X
"^DD",561.2,561.2,.02,3)
Answer must be 3-45 characters in length.
"^DD",561.2,561.2,.02,"DT")
3110830
"^DD",561.2,561.2,.03,0)
DISABLE^S^1:YES;^0;3^Q
"^DD",561.2,561.2,.03,3)
ENTER A 1 OR YES TO DISABLE THIS ROSTER.
"^DD",561.2,561.2,.03,"DT")
3110830
"^DD",561.2,561.2,.04,0)
OWNER^P200'^VA(200,^0;4^Q
"^DD",561.2,561.2,.04,1,0)
^.1
"^DD",561.2,561.2,.04,1,1,0)
561.2^AC
"^DD",561.2,561.2,.04,1,1,1)
S ^VPROSTER("AC",$E(X,1,30),DA)=""
"^DD",561.2,561.2,.04,1,1,2)
K ^VPROSTER("AC",$E(X,1,30),DA)
"^DD",561.2,561.2,.04,1,1,"%D",0)
^^1^1^3120105^
"^DD",561.2,561.2,.04,1,1,"%D",1,0)
Index all rosters by owner.
"^DD",561.2,561.2,.04,1,1,"DT")
3120105
"^DD",561.2,561.2,.04,3)
ENTER THE OWNER OF THIS ROSTER
"^DD",561.2,561.2,.04,"DT")
3120105
"^DD",561.2,561.2,.05,0)
TYPE^RS^PU:PUBLIC;PR:PRIVATE;^0;5^Q
"^DD",561.2,561.2,.05,"DT")
3111115
"^DD",561.2,561.2,.06,0)
PATIENT LIST NAME^F^^0;6^K:$L(X)>40!($L(X)<3) X
"^DD",561.2,561.2,.06,3)
Answer must be 3-40 characters in length.
"^DD",561.2,561.2,.06,"DT")
3120120
"^DD",561.2,561.2,1,0)
SOURCES^561.21^^1;0
"^DD",561.2,561.2,2,0)
SPECIAL HANDLING^K^^3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",561.2,561.2,2,3)
This is Standard MUMPS code.
"^DD",561.2,561.2,2,9)
@
"^DD",561.2,561.2,2,"DT")
3120103
"^DD",561.2,561.2,3,0)
PATIENT^561.23P^^4;0
"^DD",561.2,561.2,99,0)
TIMESTAMP^D^^2;1^S %DT="ESTXR" D ^%DT S X=Y K:3110830.0839>X X
"^DD",561.2,561.2,99,1,0)
^.1
"^DD",561.2,561.2,99,1,1,0)
561.2^ATS
"^DD",561.2,561.2,99,1,1,1)
S ^VPROSTER("ATS",$E(X,1,30),DA)=""
"^DD",561.2,561.2,99,1,1,2)
K ^VPROSTER("ATS",$E(X,1,30),DA)
"^DD",561.2,561.2,99,1,1,"DT")
3110831
"^DD",561.2,561.2,99,3)
Type a date not earlier than AUG 30, 2011@08:39.
"^DD",561.2,561.2,99,"DT")
3110831
"^DD",561.2,561.21,0)
SOURCES SUB-FIELD^^.05^5
"^DD",561.2,561.21,0,"DT")
3120119
"^DD",561.2,561.21,0,"IX","AS",561.21,.01)

"^DD",561.2,561.21,0,"IX","B",561.21,.01)

"^DD",561.2,561.21,0,"NM","SOURCES")

"^DD",561.2,561.21,0,"UP")
561.2
"^DD",561.2,561.21,.01,0)
SEQUENCE^MNJ8,0^^0;1^K:+X'=X!(X>99999999)!(X<1)!(X?.E1"."1.N) X
"^DD",561.2,561.21,.01,1,0)
^.1
"^DD",561.2,561.21,.01,1,1,0)
561.21^B
"^DD",561.2,561.21,.01,1,1,1)
S ^VPROSTER(DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",561.2,561.21,.01,1,1,2)
K ^VPROSTER(DA(1),1,"B",$E(X,1,30),DA)
"^DD",561.2,561.21,.01,1,2,0)
561.21^AS
"^DD",561.2,561.21,.01,1,2,1)
S ^VPROSTER(DA(1),1,"AS",$E(X,1,30),DA)=""
"^DD",561.2,561.21,.01,1,2,2)
K ^VPROSTER(DA(1),1,"AS",$E(X,1,30),DA)
"^DD",561.2,561.21,.01,1,2,"DT")
3110901
"^DD",561.2,561.21,.01,3)
Type a number between 1 and 99999999, 0 decimal digits.
"^DD",561.2,561.21,.01,"DT")
3110901
"^DD",561.2,561.21,.02,0)
SOURCE^RV^^0;2^Q
"^DD",561.2,561.21,.02,1,0)
^.1
"^DD",561.2,561.21,.02,1,1,0)
561.2^AD
"^DD",561.2,561.21,.02,1,1,1)
S ^VPROSTER("AD",$E(X,1,30),DA(1),DA)=""
"^DD",561.2,561.21,.02,1,1,2)
K ^VPROSTER("AD",$E(X,1,30),DA(1),DA)
"^DD",561.2,561.21,.02,1,1,"DT")
3131126
"^DD",561.2,561.21,.02,3)
ENTER FILE WHICH WILL BE THE SOURCE FOR THIS ROSTER
"^DD",561.2,561.21,.02,"DT")
3131126
"^DD",561.2,561.21,.02,"V",0)
^.12P^12^10
"^DD",561.2,561.21,.02,"V",1,0)
2^PATIENT^1^PAT^n^n
"^DD",561.2,561.21,.02,"V",1,1)

"^DD",561.2,561.21,.02,"V",1,2)

"^DD",561.2,561.21,.02,"V",2,0)
42^WARD LOCATION^2^WARD^n^n
"^DD",561.2,561.21,.02,"V",2,1)

"^DD",561.2,561.21,.02,"V",2,2)

"^DD",561.2,561.21,.02,"V",3,0)
44^CLINIC^3^CL^n^n
"^DD",561.2,561.21,.02,"V",3,1)

"^DD",561.2,561.21,.02,"V",3,2)

"^DD",561.2,561.21,.02,"V",5,0)
200^PROVIDER^5^PROV^n^n
"^DD",561.2,561.21,.02,"V",5,1)

"^DD",561.2,561.21,.02,"V",5,2)

"^DD",561.2,561.21,.02,"V",6,0)
100.21^CPRS^6^CPRS^n^n
"^DD",561.2,561.21,.02,"V",6,1)

"^DD",561.2,561.21,.02,"V",6,2)

"^DD",561.2,561.21,.02,"V",7,0)
404.51^PCMM TEAM^7^PCMM^n^n
"^DD",561.2,561.21,.02,"V",7,1)

"^DD",561.2,561.21,.02,"V",7,2)

"^DD",561.2,561.21,.02,"V",8,0)
810.4^REMINDER'S LIST RULE FILE^22^PXRM^y^n
"^DD",561.2,561.21,.02,"V",8,1)
S DIC("S")="I $P(^(0),U,3)=3"
"^DD",561.2,561.21,.02,"V",8,2)
Only select Rule Set types
"^DD",561.2,561.21,.02,"V",9,0)
561.2^VPR ROSTER FILE^9^ROST^^n
"^DD",561.2,561.21,.02,"V",11,0)
45.7^SPECIALTY^70^SPEC^n^n
"^DD",561.2,561.21,.02,"V",12,0)
561^Select VPR Panel List Rule^80^VPRPAN^n^n
"^DD",561.2,561.21,.03,0)
OPERATION^S^0:UNION;1:INTERSECTION;2:DIFFERENCE;^0;3^Q
"^DD",561.2,561.21,.03,"DT")
3110830
"^DD",561.2,561.21,.04,0)
FILTER^S^T:TODAY;^0;4^Q
"^DD",561.2,561.21,.04,3)

"^DD",561.2,561.21,.04,"DT")
3110901
"^DD",561.2,561.21,.05,0)
REFRESH FREQUENCY^S^D:DAILY;H:HOURLY;^0;5^Q
"^DD",561.2,561.21,.05,3)

"^DD",561.2,561.21,.05,"DT")
3120119
"^DD",561.2,561.23,0)
PATIENT SUB-FIELD^^.02^2
"^DD",561.2,561.23,0,"DT")
3130717
"^DD",561.2,561.23,0,"IX","B",561.23,.01)

"^DD",561.2,561.23,0,"NM","PATIENT")

"^DD",561.2,561.23,0,"UP")
561.2
"^DD",561.2,561.23,.01,0)
PATIENT^MP2'^DPT(^0;1^Q
"^DD",561.2,561.23,.01,1,0)
^.1
"^DD",561.2,561.23,.01,1,1,0)
561.23^B
"^DD",561.2,561.23,.01,1,1,1)
S ^VPROSTER(DA(1),4,"B",$E(X,1,30),DA)=""
"^DD",561.2,561.23,.01,1,1,2)
K ^VPROSTER(DA(1),4,"B",$E(X,1,30),DA)
"^DD",561.2,561.23,.01,1,2,0)
561.2^AB
"^DD",561.2,561.23,.01,1,2,1)
S ^VPROSTER("AB",$E(X,1,30),DA(1),DA)=""
"^DD",561.2,561.23,.01,1,2,2)
K ^VPROSTER("AB",$E(X,1,30),DA(1),DA)
"^DD",561.2,561.23,.01,1,2,"%D",0)
^^1^1^3121220^
"^DD",561.2,561.23,.01,1,2,"%D",1,0)
Index of all rosters patient is in.
"^DD",561.2,561.23,.01,1,2,"DT")
3121220
"^DD",561.2,561.23,.01,"DT")
3121220
"^DD",561.2,561.23,.02,0)
SRCSEQ^NJ6,0^^0;2^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",561.2,561.23,.02,3)
Type a number between 1 and 999999, 0 decimal digits.
"^DD",561.2,561.23,.02,"DT")
3130717
"^DIC",100.98,100.98,0)
DISPLAY GROUP^100.98I
"^DIC",100.98,100.98,0,"GL")
^ORD(100.98,
"^DIC",100.98,100.98,"%D",0)
^^5^5^2971218^^^^
"^DIC",100.98,100.98,"%D",1,0)
This file allows orders to be clustered in groups other than by package.
"^DIC",100.98,100.98,"%D",2,0)
It is similar in structure to the OPTION File (19).  This allows display
"^DIC",100.98,100.98,"%D",3,0)
groups to be arranged in a hierarchy.  The main entry in this file
"^DIC",100.98,100.98,"%D",4,0)
should be 'ALL SERVICES'.  Other entries should be logically subordinate
"^DIC",100.98,100.98,"%D",5,0)
to the 'ALL SERVICES' entry.
"^DIC",100.98,"B","DISPLAY GROUP",100.98)

"^DIC",101.41,101.41,0)
ORDER DIALOG^101.41
"^DIC",101.41,101.41,0,"GL")
^ORD(101.41,
"^DIC",101.41,101.41,"%D",0)
^^2^2^2960819^^
"^DIC",101.41,101.41,"%D",1,0)
This file contains the information needed to define how to prompt for each
"^DIC",101.41,101.41,"%D",2,0)
order, what values are acceptable, etc.
"^DIC",101.41,"B","ORDER DIALOG",101.41)

"^DIC",560,560,0)
VPR SUBSCRIPTION^560
"^DIC",560,560,0,"GL")
^VPR(560,
"^DIC",560,"B","VPR SUBSCRIPTION",560)

"^DIC",560.1,560.1,0)
VPR PATIENT OBJECT^560.1
"^DIC",560.1,560.1,0,"GL")
^VPR(560.1,
"^DIC",560.1,560.1,"%",0)
^1.005^^0
"^DIC",560.1,"B","VPR PATIENT OBJECT",560.1)

"^DIC",560.11,560.11,0)
VPR OBJECT^560.11
"^DIC",560.11,560.11,0,"GL")
^VPR(560.11,
"^DIC",560.11,"B","VPR OBJECT",560.11)

"^DIC",561,561,0)
VPR PANEL^561
"^DIC",561,561,0,"GL")
^VPRPANEL(
"^DIC",561,561,"%",0)
^1.005^1^1
"^DIC",561,561,"%",1,0)
VPR
"^DIC",561,561,"%","B","VPR",1)

"^DIC",561,561,"%D",0)
^1.001^4^4^3110701^^^
"^DIC",561,561,"%D",1,0)
Contains the Rule Sets that contain the cohorts for creating patient panels.
"^DIC",561,561,"%D",2,0)
For example, panel which includes Diabetic patients will be created
"^DIC",561,561,"%D",3,0)
nightly to update the list of patients.  All panels in this file will be
"^DIC",561,561,"%D",4,0)
updated nightly.
"^DIC",561,"B","VPR PANEL",561)

"^DIC",561.2,561.2,0)
VPROSTER^561.2
"^DIC",561.2,561.2,0,"GL")
^VPROSTER(
"^DIC",561.2,"B","VPROSTER",561.2)

**INSTALL NAME**
TIU*1.0*106
"BLD",8919,0)
TIU*1.0*106^TEXT INTEGRATION UTILITIES^0^3140611^y
"BLD",8919,1,0)
^^1^1^3140522^
"BLD",8919,1,1,0)
Support for VPR
"BLD",8919,4,0)
^9.64PA^^
"BLD",8919,6.3)
19
"BLD",8919,"INID")
^n
"BLD",8919,"INIT")
MAIN^TIUPS106
"BLD",8919,"KRN",0)
^9.67PA^779.2^20
"BLD",8919,"KRN",.4,0)
.4
"BLD",8919,"KRN",.401,0)
.401
"BLD",8919,"KRN",.402,0)
.402
"BLD",8919,"KRN",.403,0)
.403
"BLD",8919,"KRN",.5,0)
.5
"BLD",8919,"KRN",.84,0)
.84
"BLD",8919,"KRN",3.6,0)
3.6
"BLD",8919,"KRN",3.8,0)
3.8
"BLD",8919,"KRN",9.2,0)
9.2
"BLD",8919,"KRN",9.8,0)
9.8
"BLD",8919,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",8919,"KRN",9.8,"NM",1,0)
TIUPS106^^0^B3246449
"BLD",8919,"KRN",9.8,"NM",2,0)
TIUVPR^^0^B3758863
"BLD",8919,"KRN",9.8,"NM","B","TIUPS106",1)

"BLD",8919,"KRN",9.8,"NM","B","TIUVPR",2)

"BLD",8919,"KRN",19,0)
19
"BLD",8919,"KRN",19.1,0)
19.1
"BLD",8919,"KRN",101,0)
101
"BLD",8919,"KRN",409.61,0)
409.61
"BLD",8919,"KRN",771,0)
771
"BLD",8919,"KRN",779.2,0)
779.2
"BLD",8919,"KRN",870,0)
870
"BLD",8919,"KRN",8989.51,0)
8989.51
"BLD",8919,"KRN",8989.52,0)
8989.52
"BLD",8919,"KRN",8994,0)
8994
"BLD",8919,"KRN","B",.4,.4)

"BLD",8919,"KRN","B",.401,.401)

"BLD",8919,"KRN","B",.402,.402)

"BLD",8919,"KRN","B",.403,.403)

"BLD",8919,"KRN","B",.5,.5)

"BLD",8919,"KRN","B",.84,.84)

"BLD",8919,"KRN","B",3.6,3.6)

"BLD",8919,"KRN","B",3.8,3.8)

"BLD",8919,"KRN","B",9.2,9.2)

"BLD",8919,"KRN","B",9.8,9.8)

"BLD",8919,"KRN","B",19,19)

"BLD",8919,"KRN","B",19.1,19.1)

"BLD",8919,"KRN","B",101,101)

"BLD",8919,"KRN","B",409.61,409.61)

"BLD",8919,"KRN","B",771,771)

"BLD",8919,"KRN","B",779.2,779.2)

"BLD",8919,"KRN","B",870,870)

"BLD",8919,"KRN","B",8989.51,8989.51)

"BLD",8919,"KRN","B",8989.52,8989.52)

"BLD",8919,"KRN","B",8994,8994)

"BLD",8919,"QUES",0)
^9.62^^
"BLD",8919,"REQB",0)
^9.611^^
"INIT")
MAIN^TIUPS106
"MBREQ")
1
"PKG",516,-1)
1^1
"PKG",516,0)
TEXT INTEGRATION UTILITIES^TIU^Text Integration Utilities 
"PKG",516,20,0)
^9.402P^^
"PKG",516,22,0)
^9.49I^1^1
"PKG",516,22,1,0)
1.0^2970620^2970815^11712
"PKG",516,22,1,"PAH",1,0)
106^3140611^1085
"PKG",516,22,1,"PAH",1,1,0)
^^1^1^3140611
"PKG",516,22,1,"PAH",1,1,1,0)
Support for VPR
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","TIUPS106")
0^1^B3246449
"RTN","TIUPS106",1,0)
TIUPS106 ; SLC/JER,MKB - post install for 106 ;14-MAY-2004 [9/21/04 1:07pm]
"RTN","TIUPS106",2,0)
 ;;1.0;TEXT INTEGRATION UTILITIES;**106**;Jun 20, 1997;Build 19
"RTN","TIUPS106",3,0)
MAIN ;controls branching
"RTN","TIUPS106",4,0)
 D NEWXREF
"RTN","TIUPS106",5,0)
 Q
"RTN","TIUPS106",6,0)
NEWXREF ;creates new index "AVPR" to support the VPR
"RTN","TIUPS106",7,0)
 I $O(^DD("IX","BB",8925,"AVPR",0)) D DELIXN^DDMOD(8925,"AVPR","W")
"RTN","TIUPS106",8,0)
 N TIUARR,TIURES
"RTN","TIUPS106",9,0)
 S TIUARR("FILE")=8925
"RTN","TIUPS106",10,0)
 S TIUARR("NAME")="AVPR"
"RTN","TIUPS106",11,0)
 S TIUARR("TYPE")="MU"
"RTN","TIUPS106",12,0)
 S TIUARR("USE")="A"
"RTN","TIUPS106",13,0)
 S TIUARR("EXECUTION")="R"
"RTN","TIUPS106",14,0)
 S TIUARR("ACTIVITY")=""
"RTN","TIUPS106",15,0)
 S TIUARR("SET CONDITION")="S X=(X2(12)'="""")" ;Patient defined
"RTN","TIUPS106",16,0)
 S TIUARR("KILL CONDITION")="S X=(X2(1)="""")" ;Document type deleted
"RTN","TIUPS106",17,0)
 S TIUARR("SET")="D TIU^VPREVNT(X2(12),DA)"
"RTN","TIUPS106",18,0)
 S TIUARR("KILL")="D TIU^VPREVNT(X2(12),DA)"
"RTN","TIUPS106",19,0)
 S TIUARR("SHORT DESCR")="Trigger updates to VPR"
"RTN","TIUPS106",20,0)
 S TIUARR("DESCR",1)="This is an action index that updates the VPR"
"RTN","TIUPS106",21,0)
 S TIUARR("DESCR",2)="  when any of the fields in this index are"
"RTN","TIUPS106",22,0)
 S TIUARR("DESCR",3)="  changed.  The index will not fire if there"
"RTN","TIUPS106",23,0)
 S TIUARR("DESCR",4)="  is no patient defined for the document."
"RTN","TIUPS106",24,0)
 S TIUARR("VAL",1)=.01
"RTN","TIUPS106",25,0)
 S TIUARR("VAL",2)=.05
"RTN","TIUPS106",26,0)
 S TIUARR("VAL",3)=.06
"RTN","TIUPS106",27,0)
 S TIUARR("VAL",4)=.07
"RTN","TIUPS106",28,0)
 S TIUARR("VAL",5)=.08
"RTN","TIUPS106",29,0)
 S TIUARR("VAL",6)=1202
"RTN","TIUPS106",30,0)
 S TIUARR("VAL",7)=1205
"RTN","TIUPS106",31,0)
 S TIUARR("VAL",8)=1301
"RTN","TIUPS106",32,0)
 S TIUARR("VAL",9)=1405
"RTN","TIUPS106",33,0)
 S TIUARR("VAL",10)=1701
"RTN","TIUPS106",34,0)
 S TIUARR("VAL",11)=2101
"RTN","TIUPS106",35,0)
 S TIUARR("VAL",12)=.02
"RTN","TIUPS106",36,0)
 D CREIXN^DDMOD(.TIUARR,"W",.TIURES)
"RTN","TIUPS106",37,0)
 Q
"RTN","TIUVPR")
0^2^B3758863
"RTN","TIUVPR",1,0)
TIUVPR ; SLC/JER-Server functions for lists ;7/9/96  12:47 [9/21/04 1:07pm]
"RTN","TIUVPR",2,0)
 ;;1.0;TEXT INTEGRATION UTILITIES;**106**;Jun 20, 1997;Build 19
"RTN","TIUVPR",3,0)
NOTES(TIUY,DFN,EARLY,LATE) ; Gets list of Notes
"RTN","TIUVPR",4,0)
 I $S(+$G(DFN)'>0:1,'$D(^DPT(+$G(DFN),0)):1,1:0) Q
"RTN","TIUVPR",5,0)
 D LIST(TIUY,DFN,3,$G(EARLY),$G(LATE))
"RTN","TIUVPR",6,0)
 Q
"RTN","TIUVPR",7,0)
SUMMARY(TIUY,DFN,EARLY,LATE) ; Gets list of Summaries
"RTN","TIUVPR",8,0)
 I $S(+$G(DFN)'>0:1,'$D(^DPT(+$G(DFN),0)):1,1:0) Q
"RTN","TIUVPR",9,0)
 D LIST(TIUY,DFN,244,$G(EARLY),$G(LATE))
"RTN","TIUVPR",10,0)
 Q
"RTN","TIUVPR",11,0)
LIST(TIUY,DFN,TYPE,EARLY,LATE) ; Build List
"RTN","TIUVPR",12,0)
 N TIUCOUNT,TIUI
"RTN","TIUVPR",13,0)
 S TIUCOUNT=0
"RTN","TIUVPR",14,0)
 I +$D(TYPE)'>0 S @TIUY@("COUNT")=0 Q
"RTN","TIUVPR",15,0)
 S EARLY=9999999-+$G(EARLY),LATE=9999999-$S(+$G(LATE):+$G(LATE),1:3333333)
"RTN","TIUVPR",16,0)
 S TIUI=LATE
"RTN","TIUVPR",17,0)
 F  S TIUI=$O(^TIU(8925,"APTCL",DFN,TYPE,TIUI)) Q:TIUI'>0!(TIUI>EARLY)  D
"RTN","TIUVPR",18,0)
 . N DA S DA=0
"RTN","TIUVPR",19,0)
 . F  S DA=$O(^TIU(8925,"APTCL",DFN,TYPE,TIUI,DA)) Q:+DA'>0  D
"RTN","TIUVPR",20,0)
 . . S @TIUY@(DA)="",TIUCOUNT=TIUCOUNT+1
"RTN","TIUVPR",21,0)
 S @TIUY@("COUNT")=$G(TIUCOUNT)
"RTN","TIUVPR",22,0)
 Q
"RTN","TIUVPR",23,0)
 ;
"RTN","TIUVPR",24,0)
GET(TIUY,DFN,CLASS,EARLY,LATE) ; Build List/MKB
"RTN","TIUVPR",25,0)
 ;   TIUY     - Return array, pass by reference
"RTN","TIUVPR",26,0)
 ;   DFN      - Pointer to PATIENT #2
"RTN","TIUVPR",27,0)
 ;   CLASS    - Pointer to TIU DOCUMENT DEFINITION #8925.1
"RTN","TIUVPR",28,0)
 ;  [EARLY]   - FM date/time to begin search
"RTN","TIUVPR",29,0)
 ;  [LATE]    - FM date/time to end search
"RTN","TIUVPR",30,0)
 N TIUCOUNT,TIUI,DA
"RTN","TIUVPR",31,0)
 S TIUCOUNT=0,TIUY=$NA(^TMP("TIULIST",$J)) K @TIUY
"RTN","TIUVPR",32,0)
 I +$G(CLASS)'>0 S CLASS=38 ;S @TIUY@("COUNT")=0 Q
"RTN","TIUVPR",33,0)
 S EARLY=9999999-+$G(EARLY),TIUI=9999999-$S(+$G(LATE):+$G(LATE),1:3333333)
"RTN","TIUVPR",34,0)
 F  S TIUI=$O(^TIU(8925,"APTCL",DFN,CLASS,TIUI)) Q:TIUI<1!(TIUI>EARLY)  D
"RTN","TIUVPR",35,0)
 . S DA=0 F  S DA=$O(^TIU(8925,"APTCL",DFN,CLASS,TIUI,DA)) Q:+DA'>0  D
"RTN","TIUVPR",36,0)
 . . I +$$ISADDNDM^TIULC1(+DA) Q  ;no addenda
"RTN","TIUVPR",37,0)
 . . I +$$ISCOMP^TIUSRVR1(+DA) Q  ;no components
"RTN","TIUVPR",38,0)
 . . ;I +$G(^TIU(8925,+DA,21)) Q  ;no id children
"RTN","TIUVPR",39,0)
 . . S TIUCOUNT=TIUCOUNT+1
"RTN","TIUVPR",40,0)
 . . S @TIUY@(TIUCOUNT)=DA
"RTN","TIUVPR",41,0)
 S @TIUY@("COUNT")=$G(TIUCOUNT)
"RTN","TIUVPR",42,0)
 Q
"VER")
8.0^22.0
**END**
**END**
