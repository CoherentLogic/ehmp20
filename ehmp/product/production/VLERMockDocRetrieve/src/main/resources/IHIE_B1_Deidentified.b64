<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="cda2detail.xsl"?>

<ClinicalDocument xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:hl7-org:v3" xmlns:_ns0="http://www.w3.org/2001/XMLSchema-instance" xmlns:sdtc="urn:hl7-org:sdtc" classCode="DOCCLIN" moodCode="EVN">
  <realmCode code="US"/>
  <typeId displayable="false" root="2.16.840.1.113883.1.3" extension="POCD_HD000040"/>
  <templateId root="2.16.840.1.113883.10.20.1" displayable="false"/>
  <templateId root="2.16.840.1.113883.10.20.3" displayable="false"/>
  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.1.1" displayable="false"/>
  <templateId root="2.16.840.1.113883.3.88.11.32.1" displayable="false"/>
  <templateId root="2.16.840.1.113883.10.20.30" displayable="false"/>
  <templateId root="2.16.840.1.113883.10.20.20" displayable="false"/>
  <templateId root="2.16.840.1.113883.10.20.10" displayable="false"/>
  <templateId root="2.16.840.1.113883.10.20.2" displayable="false"/>
  <id root="3fac8cb3-c827-4d29-ad75-a775522901c5" displayable="false"/>
  <code code="34133-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="SUMMARIZATION OF EPISODE NOTE"/>
  <title representation="TXT" mediaType="text/plain">Regenstrief Institute Clinic Continuity of Care Document</title>
  <effectiveTime value="20140314113111.206-0500"/>
  <confidentialityCode code="N" codeSystem="2.16.840.1.113883.5.25" codeSystemName="Confidentiality" displayName="normal"/>
  <languageCode code="en-US"/>
  <recordTarget typeCode="RCT" contextControlCode="OP">
    <patientRole classCode="PAT">
      <id root="2.16.840.1.113883.4.1" extension="0123456789" assigningAuthorityName="Social Security Numbers"/>
      <addr use="HP">
				<streetAddressLine>000 ANY STREET</streetAddressLine>
				<city>ANY CITY</city>
				<state>IN</state>
				<postalCode>46224</postalCode>
			</addr>
      <telecom value="tel:+1-800-123-4567" use="HP"/>
      <patient>
        <name>
					<given>FIRSTNAME_PATIENT</given>
					<given>MI</given>
					<family>LASTNAME</family>
				</name>
        <administrativeGenderCode code="F" codeSystem="2.16.840.1.113883.5.1" codeSystemName="AdministrativeGender" displayName="Female">
          <translation code="F" codeSystem="1.3.6.1.4.1.12009.8.1" codeSystemName="SEX" displayName="female"/>
        </administrativeGenderCode>
        <birthTime value="19000101"/>
        <maritalStatusCode code="S" codeSystem="2.16.840.1.113883.5.2" codeSystemName="MaritalStatus" displayName="Never Married">
          <translation code="S" codeSystem="1.3.6.1.4.1.12009.1.1.8" codeSystemName="Wishard Memorial Hospital Person MARITAL STATUS codes" displayName="S"/>
        </maritalStatusCode>
        <raceCode code="2054-5" codeSystem="2.16.840.1.113883.6.238" codeSystemName="CDC Race and Ethnicity" displayName="Black or African American">
          <translation code="B" codeSystemName="RACE" displayName="Black">
            <translation code="B" codeSystem="1.3.6.1.4.1.12009.1.1.9" codeSystemName="Wishard Memorial Hospital Person RACE codes" displayName="Black"/>
          </translation>
        </raceCode>
      </patient>
      <providerOrganization>
        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
        <name>WISHARD MEMORIAL HOSPITAL</name>
        <telecom nullFlavor="UNK"/>
        <addr>
					<streetAddressLine>000 ANY STREET</streetAddressLine>
					<city>ANY CITY</city>
					<state>IN</state>
					<postalCode>46202</postalCode>
				</addr>
      </providerOrganization>
    </patientRole>
  </recordTarget>
  <author typeCode="AUT" contextControlCode="OP">
    <time xsi:type="IVL_TS">
      <low value="20140314113111.206-0500"/>
    </time>
    <assignedAuthor classCode="ASSIGNED">
      <id nullFlavor="NA"/>
      <addr>
				<streetAddressLine>1050 Wishard Blvd.</streetAddressLine>
				<city>ANY CITY</city>
				<state>IN</state>
				<postalCode>46202</postalCode>
			</addr>
      <telecom value="tel:+1-317-630-6083"/>
      <assignedPerson>
        <name>REGENSTRIEF INSTITUTE, INC.</name>
      </assignedPerson>
      <representedOrganization classCode="ORG" determinerCode="INSTANCE">
        <id root="1.3.6.1.4.1.12009" displayable="false"/>
        <name>REGENSTRIEF INSTITUTE, INC.</name>
        <telecom value="tel:+1-317-630-6083"/>
        <addr>
					<streetAddressLine>1050 Wishard Blvd.</streetAddressLine>
					<city>ANY CITY</city>
					<state>IN</state>
					<postalCode>46202</postalCode>
				</addr>
      </representedOrganization>
    </assignedAuthor>
  </author>
  <custodian typeCode="CST">
    <assignedCustodian classCode="ASSIGNED">
      <representedCustodianOrganization classCode="ORG" determinerCode="INSTANCE">
        <id root="1.3.6.1.4.1.12009" displayable="false"/>
        <name>REGENSTRIEF INSTITUTE, INC.</name>
        <telecom value="tel:+1-317-630-6083"/>
        <addr>
					<streetAddressLine>1050 Wishard Blvd.</streetAddressLine>
					<city>ANY CITY</city>
					<state>IN</state>
					<postalCode>46202</postalCode>
				</addr>
      </representedCustodianOrganization>
    </assignedCustodian>
  </custodian>
  <participant typeCode="IND" contextControlCode="OP">
    <templateId root="2.16.840.1.113883.3.88.11.83.3"/>
    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.4"/>
    <time value="20121204130218.000-0500"/>
    <associatedEntity classCode="NOK">
      <code code="NOK" codeSystem="2.16.840.1.113883.5.111" codeSystemName="HL73 RoleCode" displayName="next of kin"/>
      <addr use="HP">
				<streetAddressLine>000 ANY STREET</streetAddressLine>
				<city>ANY CITY</city>
				<state>MARYLAND</state>
				<postalCode>21620</postalCode>
			</addr>
      <telecom value="tel:+1-800-123-4567" use="HP"/>
      <associatedPerson classCode="PSN" determinerCode="INSTANCE">
        <name>
					<given>FIRSTNAME_NOK</given>
					<family>LASTNAME</family>
				</name>
      </associatedPerson>
    </associatedEntity>
  </participant>
  <participant typeCode="RESP" contextControlCode="OP">
    <time value="20140314113111.206-0500"/>
    <associatedEntity classCode="PROV">
      <id root="1.3.6.1.4.1.12009.1.99.7" extension="GATEWAY" assigningAuthorityName="SPIN Users"/>
      <code nullFlavor="NA"/>
      <addr nullFlavor="UNK"/>
      <telecom nullFlavor="UNK"/>
      <associatedPerson classCode="PSN" determinerCode="INSTANCE">
        <name>
					<given>GATEWAY</given>
					<family>USER</family>
				</name>
      </associatedPerson>
    </associatedEntity>
  </participant>
  <documentationOf typeCode="DOC">
    <serviceEvent classCode="PCPR" moodCode="EVN">
      <effectiveTime>
        <low value="19770101000000.000-0500"/>
        <high value="20140117144700.000-0500"/>
      </effectiveTime>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20140117081200.000-0500"/>
          <high value="20140117144700.000-0500"/>
        </time>
        <assignedEntity>
          <id root="2.16.840.1.113883.4.6" extension="1619929106" assigningAuthorityName="National Provider Identifier"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>BREASTCARE</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20140117081200.000-0500"/>
          <high value="20140117144700.000-0500"/>
        </time>
        <assignedEntity>
          <id root="2.16.840.1.113883.4.6" extension="1720021694" assigningAuthorityName="National Provider Identifier"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<city>ANY CITY</city>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>BREASTCARE</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20140117081200.000-0500"/>
          <high value="20140117144700.000-0500"/>
        </time>
        <assignedEntity>
          <id root="2.16.840.1.113883.4.6" extension="1619929106" assigningAuthorityName="National Provider Identifier"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>BREASTCARE</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20131206134700.000-0500"/>
          <high value="20131206235900.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>BREASTCARE</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20131206134700.000-0500"/>
          <high value="20131206235900.000-0500"/>
        </time>
        <assignedEntity>
          <id root="2.16.840.1.113883.4.6" extension="1801038047" assigningAuthorityName="National Provider Identifier"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>BREASTCARE</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20131206134700.000-0500"/>
          <high value="20131206235900.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>BREASTCARE</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20121204105000.000-0500"/>
          <high value="20121204110000.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>BREASTCARE</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20121204105000.000-0500"/>
          <high value="20121204110000.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>BREASTCARE</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20121204105000.000-0500"/>
          <high value="20121204110000.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>BREASTCARE</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20121119080900.000-0500"/>
          <high value="20121119235900.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20121119080900.000-0500"/>
          <high value="20121119235900.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20121119080900.000-0500"/>
          <high value="20121119235900.000-0500"/>
        </time>
        <assignedEntity>
          <id root="2.16.840.1.113883.4.6" extension="1255374385" assigningAuthorityName="National Provider Identifier"/>
          <addr>
						<streetAddressLine>EF 205, IU SCHOOL OF MEDICINE</streetAddressLine>
						<city>FISHERS</city>
						<state>IN</state>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME</given>
							<given>H</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20110819080700.000-0500"/>
          <high value="20110822093600.000-0500"/>
        </time>
        <assignedEntity>
          <id root="2.16.840.1.113883.4.6" extension="1801038047" assigningAuthorityName="National Provider Identifier"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20110819080700.000-0500"/>
          <high value="20110822093600.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20110819080700.000-0500"/>
          <high value="20110822093600.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="109918" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr nullFlavor="UNK"/>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<family>NOT-ASSIGNED</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20110819080700.000-0500"/>
          <high value="20110822093600.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20110819080700.000-0500"/>
          <high value="20110822093600.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20110819080700.000-0500"/>
          <high value="20110822093600.000-0500"/>
        </time>
        <assignedEntity>
          <id root="2.16.840.1.113883.4.6" extension="1801038047" assigningAuthorityName="National Provider Identifier"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20100806102400.000-0500"/>
          <high value="20100806152800.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20100806102400.000-0500"/>
          <high value="20100806152800.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20100806102400.000-0500"/>
          <high value="20100806152800.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20100806102400.000-0500"/>
          <high value="20100806152800.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20100806102400.000-0500"/>
          <high value="20100806152800.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr>
						<streetAddressLine>000 ANY STREET</streetAddressLine>
						<state>IN</state>
						<postalCode>46202</postalCode>
					</addr>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<given>FIRSTNAME_PROVIDER</given>
							<given>MI</given>
							<family>LASTNAME</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
      <performer typeCode="PRF">
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.3"/>
        <time>
          <low value="20100806102400.000-0500"/>
          <high value="20100806152800.000-0500"/>
        </time>
        <assignedEntity>
          <id root="1.3.6.1.4.1.12009.1.1.4" extension="109918" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
          <addr nullFlavor="UNK"/>
          <telecom nullFlavor="UNK"/>
          <assignedPerson>
            <name>
							<family>NOT-ASSIGNED</family>
						</name>
          </assignedPerson>
          <representedOrganization>
            <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
            <name>Wishard Memorial Hospital</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </representedOrganization>
          <sdtc:patient>
            <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
          </sdtc:patient>
        </assignedEntity>
      </performer>
    </serviceEvent>
  </documentationOf>
  <component typeCode="COMP" contextConductionInd="true">
    <structuredBody classCode="DOCBODY" moodCode="EVN">
      <component typeCode="COMP" contextConductionInd="true">
        <section classCode="DOCSECT" moodCode="EVN">
          <templateId root="2.16.840.1.113883.10.20.1.11" displayable="false"/>
          <templateId root="2.16.840.1.113883.3.88.11.83.103" displayable="false"/>
          <templateId root="1.3.6.1.4.1.19376.1.5.3.1.3.6" displayable="false"/>
          <code code="11450-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Problem list Reported"/>
          <title representation="TXT" mediaType="text/plain">Problems</title>
          <text><table ID="_nbConditionProblems" border="1" width="100%"><thead><tr><th>Problem</th><th>Status</th><th>Problem Code</th><th>Problem Type</th><th>Date of Onset</th><th>Date Resolved</th><th>Cause of Death</th><th>Age at Onset</th><th>Age at Death</th><th>Time of Death</th><th>Provider</th><th>Source</th></tr>
</thead><tbody><tr><td ID="#Problems-value-4213872155-000-0">Breast lump symptom (finding)</td><td>--</td><td>162160003</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-4171163431-000-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3774790760-000-0">Chronic disease of breast (disorder)</td><td>--</td><td>128529002</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3759902934-000-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3759902935-001-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3229889249-000-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-4214651089-001-0">Breast lump symptom (finding)</td><td>--</td><td>162160003</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-4176542496-001-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3773060229-001-0">Chronic disease of breast (disorder)</td><td>--</td><td>128529002</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3757814228-001-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3759261308-002-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3220408256-001-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3220408257-002-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3220308652-001-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-2703114529-001-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-2703114530-002-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-4214651086-001-0">Breast lump symptom (finding)</td><td>--</td><td>162160003</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-4214651087-002-0">Breast lump symptom (finding)</td><td>--</td><td>162160003</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-4176542494-001-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-4176542495-002-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3773060228-001-0">Chronic disease of breast (disorder)</td><td>--</td><td>128529002</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3757814227-001-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3759146553-002-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3220308650-001-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr><tr><td ID="#Problems-value-3220308651-002-0">Problem (finding)</td><td>--</td><td>55607006</td><td>Problem (finding)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL</td></tr></tbody></table><td ID="Problems-value-4213872155-000-0">Breast lump symptom (finding)</td>
<td ID="Problems-value-4171163431-000-0">Problem (finding)</td>
<td ID="Problems-value-3774790760-000-0">Chronic disease of breast (disorder)</td>
<td ID="Problems-value-3759902934-000-0">Problem (finding)</td>
<td ID="Problems-value-3759902935-001-0">Problem (finding)</td>
<td ID="Problems-value-3229889249-000-0">Problem (finding)</td>
<td ID="Problems-value-4214651089-001-0">Breast lump symptom (finding)</td>
<td ID="Problems-value-4176542496-001-0">Problem (finding)</td>
<td ID="Problems-value-3773060229-001-0">Chronic disease of breast (disorder)</td>
<td ID="Problems-value-3757814228-001-0">Problem (finding)</td>
<td ID="Problems-value-3759261308-002-0">Problem (finding)</td>
<td ID="Problems-value-3220408256-001-0">Problem (finding)</td>
<td ID="Problems-value-3220408257-002-0">Problem (finding)</td>
<td ID="Problems-value-3220308652-001-0">Problem (finding)</td>
<td ID="Problems-value-2703114529-001-0">Problem (finding)</td>
<td ID="Problems-value-2703114530-002-0">Problem (finding)</td>
<td ID="Problems-value-4214651086-001-0">Breast lump symptom (finding)</td>
<td ID="Problems-value-4214651087-002-0">Breast lump symptom (finding)</td>
<td ID="Problems-value-4176542494-001-0">Problem (finding)</td>
<td ID="Problems-value-4176542495-002-0">Problem (finding)</td>
<td ID="Problems-value-3773060228-001-0">Chronic disease of breast (disorder)</td>
<td ID="Problems-value-3757814227-001-0">Problem (finding)</td>
<td ID="Problems-value-3759146553-002-0">Problem (finding)</td>
<td ID="Problems-value-3220308650-001-0">Problem (finding)</td>
<td ID="Problems-value-3220308651-002-0">Problem (finding)</td>
</text>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4213872155-000-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="18075" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Hosp ICD9 Dx"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-4213872155-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20140117144700.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="162160003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Breast lump symptom (finding)">
                    <translation code="611.72" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="LUMP OR MASS IN BREAST"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-4213872155-000-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5121765903" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4171163431-000-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="18075" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Hosp ICD9 Dx"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-4171163431-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20131206235900.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-4171163431-000-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5094357919" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3774790760-000-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="18075" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Hosp ICD9 Dx"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3774790760-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20121204110000.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="128529002" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Chronic disease of breast (disorder)">
                    <translation code="611.9" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="BREAST DISORDER NOS"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3774790760-000-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4634604815" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3759902934-000-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="18075" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Hosp ICD9 Dx"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3759902934-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20121119235900.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3759902934-000-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374532" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3759902935-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="18075" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Hosp ICD9 Dx"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3759902935-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20121119235900.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3759902935-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374532" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3229889249-000-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="18075" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Hosp ICD9 Dx"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3229889249-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20110822093600.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3229889249-000-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="3972367487" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4214651089-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-4214651089-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20140117081200.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="162160003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Breast lump symptom (finding)">
                    <translation code="611.72" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="LUMP OR MASS IN BREAST"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-4214651089-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5121765903" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4176542496-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-4176542496-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20131206134700.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-4176542496-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5094357919" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3773060229-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3773060229-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20121204105000.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="128529002" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Chronic disease of breast (disorder)">
                    <translation code="611.9" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="BREAST DISORDER NOS"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3773060229-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4634604815" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3757814228-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3757814228-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20121119080900.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3757814228-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374532" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3759261308-002-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3759261308-002-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20121119080900.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3759261308-002-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374532" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3220408256-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3220408256-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20110819080700.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="WISHARD" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHAPT" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3220408256-001-0</name>
                        <desc>Wishard Appointment Scheduler</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="3972367487" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3220408257-002-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3220408257-002-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20110819080700.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="WISHARD" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHAPT" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3220408257-002-0</name>
                        <desc>Wishard Appointment Scheduler</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="3972367487" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3220308652-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3220308652-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20110819080700.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3220308652-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="3972367487" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="2703114529-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-2703114529-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20100806102400.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="WISHARD" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHAPT" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-2703114529-001-0</name>
                        <desc>Wishard Appointment Scheduler</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="2910015274" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="2703114530-002-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19766" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="DISCHARGE DIAGNOSIS"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-2703114530-002-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20100806102400.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="WISHARD" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHAPT" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-2703114530-002-0</name>
                        <desc>Wishard Appointment Scheduler</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="2910015274" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4214651086-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19765" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Admission Diagnosis"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-4214651086-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20140117081200.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="162160003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Breast lump symptom (finding)">
                    <translation code="611.72" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="LUMP OR MASS IN BREAST"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-4214651086-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5121765903" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4214651087-002-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19765" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Admission Diagnosis"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-4214651087-002-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20140117081200.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="162160003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Breast lump symptom (finding)">
                    <translation code="611.72" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="LUMP OR MASS IN BREAST"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-4214651087-002-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5121765903" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4176542494-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19765" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Admission Diagnosis"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-4176542494-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20131206134700.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-4176542494-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5094357919" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4176542495-002-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19765" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Admission Diagnosis"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-4176542495-002-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20131206134700.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-4176542495-002-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5094357919" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3773060228-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19765" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Admission Diagnosis"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3773060228-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20121204105000.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="128529002" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Chronic disease of breast (disorder)">
                    <translation code="611.9" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="BREAST DISORDER NOS"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3773060228-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4634604815" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3757814227-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19765" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Admission Diagnosis"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3757814227-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20121119080900.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3757814227-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374532" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3759146553-002-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19765" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Admission Diagnosis"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3759146553-002-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20121119080900.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3759146553-002-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374532" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3220308650-001-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19765" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Admission Diagnosis"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3220308650-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20110819080700.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3220308650-001-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="3972367487" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.27" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.7" displayable="false"/>
              <id nullFlavor="NI"/>
              <code nullFlavor="NA"/>
              <statusCode code="active"/>
              <effectiveTime>
                <low nullFlavor="NI"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ" inversionInd="false" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.28" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3220308651-002-0" displayable="false"/>
                  <code code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="19765" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Admission Diagnosis"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Problems-value-3220308651-002-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low value="20110819080700.000-0500"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="55607006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Problem (finding)">
                    <translation code="V76.12" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OTH SCN MAMMO MAL NEOPLASM"/>
                  </value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1.3" extension="W" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>Wishard Health Services</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="STAR" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Problems-value-3220308651-002-0</name>
                        <desc>McKesson ADT messages (Wishard)</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="3972367487" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </entryRelationship>
            </act>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.1.8"/>
          <templateId root="1.3.6.1.4.1.19376.1.5.3.1.3.19"/>
          <templateId root="2.16.840.1.113883.3.88.11.83.112"/>
          <code code="10160-0" codeSystem="2.16.840.1.113883.6.1"/>
          <title>Medications</title>
          <text><table ID="_nbMedications" border="1" width="100%">
	<thead>
<tr><th>Medications</th><th>Medication Brand Name</th><th>Medication Status</th><th>Order Date</th><th>Order Expiration</th><th>Provider (Ordering)</th><th>Prescription #</th><th>Fill Status</th><th>Quantity Dispensed</th><th>Dispense Date</th><th>Sig</th><th>Source</th><th>Reaction</th><th>Indicate Medication Stopped</th><th>Administrative Timing</th><th>Route Code</th><th>Body Site</th><th>Dose Quanity</th><th>Dose Restriction</th><th>Product Form</th><th>Delivery Method</th><th>Drug Manufacture</th><th>Type of Medication</th><th>Indication</th><th>Vehicle</th><th>Dose Indicator</th><th>Order Number</th><th>Total Fills</th><th>FulFillment Instructions</th><th>Dispensing Provider</th><th>Pharmacy Location</th><th>Fill Number</th></tr>
</thead>
<tbody>
<tr><td><content ID="Medications-drug-4">FLU,3 YRS</content></td><td>--</td><td>completed</td><td>20120917000000.000-0500</td><td>--</td><td>--</td><td>NA</td><td>--</td><td>0</td><td>20120917000000.000-0500</td><td>--</td><td>--</td><td>--</td><td>--</td><td>From: 20120917000000.000-0500 </td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>20120917_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td></tr>
<tr><td><content ID="Medications-drug-7">TETANUS+DIPHTH TOXOID/ACELL PERTUSSIS VI</content></td><td>--</td><td>completed</td><td>20120301000000.000-0500</td><td>--</td><td>--</td><td>NA</td><td>--</td><td>0</td><td>20120301000000.000-0500</td><td>--</td><td>--</td><td>--</td><td>--</td><td>From: 20120301000000.000-0500 </td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>20120301_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td></tr>
<tr><td><content ID="Medications-drug-10">REFUSED INFLUENZA VACCINE</content></td><td>--</td><td>completed</td><td>20081008000000.000-0500</td><td>--</td><td>--</td><td>NA</td><td>--</td><td>0</td><td>20081008000000.000-0500</td><td>--</td><td>--</td><td>--</td><td>--</td><td>From: 20081008000000.000-0500 </td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>20081008_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td></tr>
<tr><td><content ID="Medications-drug-13">INFLUENZA</content></td><td>--</td><td>completed</td><td>20081002000000.000-0500</td><td>--</td><td>--</td><td>NA</td><td>--</td><td>0</td><td>20081002000000.000-0500</td><td>--</td><td>--</td><td>--</td><td>--</td><td>From: 20081002000000.000-0500 </td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>20081002_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td></tr>
<tr><td><content ID="Medications-drug-16">REFUSED INFLUENZA VACCINE</content></td><td>--</td><td>completed</td><td>20080326000000.000-0500</td><td>--</td><td>--</td><td>NA</td><td>--</td><td>0</td><td>20080326000000.000-0500</td><td>--</td><td>--</td><td>--</td><td>--</td><td>From: 20080326000000.000-0500 </td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>20080326_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td></tr>
<tr><td><content ID="Medications-drug-19">TETANUS DIPTHERIA (TD-ADULT)</content></td><td>--</td><td>completed</td><td>20030101000000.000-0500</td><td>--</td><td>--</td><td>NA</td><td>--</td><td>0</td><td>20030101000000.000-0500</td><td>--</td><td>--</td><td>--</td><td>--</td><td>From: 20030101000000.000-0500 </td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>20030101_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td></tr>
<tr><td><content ID="Medications-drug-22">TETANUS DIPTHERIA (TD-ADULT)</content></td><td>--</td><td>completed</td><td>19980101000000.000-0500</td><td>--</td><td>--</td><td>NA</td><td>--</td><td>0</td><td>19980101000000.000-0500</td><td>--</td><td>--</td><td>--</td><td>--</td><td>From: 19980101000000.000-0500 </td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>19980101_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td></tr>
</tbody></table><content ID="Medications-drug-4">FLU,3 YRS</content>
<content ID="Medications-dispense-date-4">17-Sep-2012</content>
<content ID="Medications-quantity-4">0</content>
<content ID="Medications-drug-7">TETANUS+DIPHTH TOXOID/ACELL PERTUSSIS VI</content>
<content ID="Medications-dispense-date-7">01-Mar-2012</content>
<content ID="Medications-quantity-7">0</content>
<content ID="Medications-drug-10">REFUSED INFLUENZA VACCINE</content>
<content ID="Medications-dispense-date-10">08-Oct-2008</content>
<content ID="Medications-quantity-10">0</content>
<content ID="Medications-drug-13">INFLUENZA</content>
<content ID="Medications-dispense-date-13">02-Oct-2008</content>
<content ID="Medications-quantity-13">0</content>
<content ID="Medications-drug-16">REFUSED INFLUENZA VACCINE</content>
<content ID="Medications-dispense-date-16">26-Mar-2008</content>
<content ID="Medications-quantity-16">0</content>
<content ID="Medications-drug-19">TETANUS DIPTHERIA (TD-ADULT)</content>
<content ID="Medications-dispense-date-19">01-Jan-2003</content>
<content ID="Medications-quantity-19">0</content>
<content ID="Medications-drug-22">TETANUS DIPTHERIA (TD-ADULT)</content>
<content ID="Medications-dispense-date-22">01-Jan-1998</content>
<content ID="Medications-quantity-22">0</content>
</text>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.24"/>
              <templateId root="2.16.840.1.113883.3.88.11.32.8"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.8"/>
              <id extension="20120917_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
              <statusCode code="completed"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20120917000000.000-0500"/>
              </effectiveTime>
              <consumable>
                <manufacturedProduct>
                  <templateId root="2.16.840.1.113883.10.20.1.53"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.8.2"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"/>
                  <manufacturedMaterial>
                    <code nullFlavor="UNK">
                      <originalText>FLU,3 YRS<reference value="Medications-drug-4"/>
											</originalText>
                    </code>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <participant typeCode="AUT">
                <participantRole>
                  <scopingEntity>
                    <desc>REGENSTRIEF - NHIN_RD_NHIN_VA</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.3.88.1.11.32.11"/>
                  <id extension="20120917_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
                  <statusCode code="completed"/>
                  <author>
                    <time value="20120917000000.000-0500"/>
                    <assignedAuthor>
                      <id nullFlavor="UNK"/>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name nullFlavor="UNK"/>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <supply classCode="SPLY" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.34"/>
                  <id nullFlavor="UNK" extension="NA"/>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917000000.000-0500"/>
                  <quantity value="0"/>
                </supply>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.24"/>
              <templateId root="2.16.840.1.113883.3.88.11.32.8"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.8"/>
              <id extension="20120301_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
              <statusCode code="completed"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20120301000000.000-0500"/>
              </effectiveTime>
              <consumable>
                <manufacturedProduct>
                  <templateId root="2.16.840.1.113883.10.20.1.53"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.8.2"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"/>
                  <manufacturedMaterial>
                    <code nullFlavor="UNK">
                      <originalText>TETANUS+DIPHTH TOXOID/ACELL PERTUSSIS VI<reference value="Medications-drug-7"/>
											</originalText>
                    </code>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <participant typeCode="AUT">
                <participantRole>
                  <scopingEntity>
                    <desc>REGENSTRIEF - NHIN_RD_NHIN_VA</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.3.88.1.11.32.11"/>
                  <id extension="20120301_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
                  <statusCode code="completed"/>
                  <author>
                    <time value="20120301000000.000-0500"/>
                    <assignedAuthor>
                      <id nullFlavor="UNK"/>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name nullFlavor="UNK"/>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <supply classCode="SPLY" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.34"/>
                  <id nullFlavor="UNK" extension="NA"/>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120301000000.000-0500"/>
                  <quantity value="0"/>
                </supply>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.24"/>
              <templateId root="2.16.840.1.113883.3.88.11.32.8"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.8"/>
              <id extension="20081008_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
              <statusCode code="completed"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20081008000000.000-0500"/>
              </effectiveTime>
              <consumable>
                <manufacturedProduct>
                  <templateId root="2.16.840.1.113883.10.20.1.53"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.8.2"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"/>
                  <manufacturedMaterial>
                    <code nullFlavor="UNK">
                      <originalText>REFUSED INFLUENZA VACCINE<reference value="Medications-drug-10"/>
											</originalText>
                    </code>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <participant typeCode="AUT">
                <participantRole>
                  <scopingEntity>
                    <desc>REGENSTRIEF - NHIN_RD_NHIN_VA</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.3.88.1.11.32.11"/>
                  <id extension="20081008_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
                  <statusCode code="completed"/>
                  <author>
                    <time value="20081008000000.000-0500"/>
                    <assignedAuthor>
                      <id nullFlavor="UNK"/>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name nullFlavor="UNK"/>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <supply classCode="SPLY" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.34"/>
                  <id nullFlavor="UNK" extension="NA"/>
                  <statusCode code="completed"/>
                  <effectiveTime value="20081008000000.000-0500"/>
                  <quantity value="0"/>
                </supply>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.24"/>
              <templateId root="2.16.840.1.113883.3.88.11.32.8"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.8"/>
              <id extension="20081002_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
              <statusCode code="completed"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20081002000000.000-0500"/>
              </effectiveTime>
              <consumable>
                <manufacturedProduct>
                  <templateId root="2.16.840.1.113883.10.20.1.53"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.8.2"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"/>
                  <manufacturedMaterial>
                    <code nullFlavor="UNK">
                      <originalText>INFLUENZA<reference value="Medications-drug-13"/>
											</originalText>
                    </code>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <participant typeCode="AUT">
                <participantRole>
                  <scopingEntity>
                    <desc>REGENSTRIEF - NHIN_RD_NHIN_VA</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.3.88.1.11.32.11"/>
                  <id extension="20081002_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
                  <statusCode code="completed"/>
                  <author>
                    <time value="20081002000000.000-0500"/>
                    <assignedAuthor>
                      <id nullFlavor="UNK"/>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name nullFlavor="UNK"/>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <supply classCode="SPLY" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.34"/>
                  <id nullFlavor="UNK" extension="NA"/>
                  <statusCode code="completed"/>
                  <effectiveTime value="20081002000000.000-0500"/>
                  <quantity value="0"/>
                </supply>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.24"/>
              <templateId root="2.16.840.1.113883.3.88.11.32.8"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.8"/>
              <id extension="20080326_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
              <statusCode code="completed"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20080326000000.000-0500"/>
              </effectiveTime>
              <consumable>
                <manufacturedProduct>
                  <templateId root="2.16.840.1.113883.10.20.1.53"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.8.2"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"/>
                  <manufacturedMaterial>
                    <code nullFlavor="UNK">
                      <originalText>REFUSED INFLUENZA VACCINE<reference value="Medications-drug-16"/>
											</originalText>
                    </code>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <participant typeCode="AUT">
                <participantRole>
                  <scopingEntity>
                    <desc>REGENSTRIEF - NHIN_RD_NHIN_VA</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.3.88.1.11.32.11"/>
                  <id extension="20080326_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
                  <statusCode code="completed"/>
                  <author>
                    <time value="20080326000000.000-0500"/>
                    <assignedAuthor>
                      <id nullFlavor="UNK"/>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name nullFlavor="UNK"/>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <supply classCode="SPLY" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.34"/>
                  <id nullFlavor="UNK" extension="NA"/>
                  <statusCode code="completed"/>
                  <effectiveTime value="20080326000000.000-0500"/>
                  <quantity value="0"/>
                </supply>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.24"/>
              <templateId root="2.16.840.1.113883.3.88.11.32.8"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.8"/>
              <id extension="20030101_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
              <statusCode code="completed"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20030101000000.000-0500"/>
              </effectiveTime>
              <consumable>
                <manufacturedProduct>
                  <templateId root="2.16.840.1.113883.10.20.1.53"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.8.2"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"/>
                  <manufacturedMaterial>
                    <code nullFlavor="UNK">
                      <originalText>TETANUS DIPTHERIA (TD-ADULT)<reference value="Medications-drug-19"/>
											</originalText>
                    </code>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <participant typeCode="AUT">
                <participantRole>
                  <scopingEntity>
                    <desc>REGENSTRIEF - NHIN_RD_NHIN_VA</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.3.88.1.11.32.11"/>
                  <id extension="20030101_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
                  <statusCode code="completed"/>
                  <author>
                    <time value="20030101000000.000-0500"/>
                    <assignedAuthor>
                      <id nullFlavor="UNK"/>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name nullFlavor="UNK"/>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <supply classCode="SPLY" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.34"/>
                  <id nullFlavor="UNK" extension="NA"/>
                  <statusCode code="completed"/>
                  <effectiveTime value="20030101000000.000-0500"/>
                  <quantity value="0"/>
                </supply>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.24"/>
              <templateId root="2.16.840.1.113883.3.88.11.32.8"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.8"/>
              <id extension="19980101_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
              <statusCode code="completed"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="19980101000000.000-0500"/>
              </effectiveTime>
              <consumable>
                <manufacturedProduct>
                  <templateId root="2.16.840.1.113883.10.20.1.53"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.8.2"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"/>
                  <manufacturedMaterial>
                    <code nullFlavor="UNK">
                      <originalText>TETANUS DIPTHERIA (TD-ADULT)<reference value="Medications-drug-22"/>
											</originalText>
                    </code>
                  </manufacturedMaterial>
                </manufacturedProduct>
              </consumable>
              <participant typeCode="AUT">
                <participantRole>
                  <scopingEntity>
                    <desc>REGENSTRIEF - NHIN_RD_NHIN_VA</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.3.88.1.11.32.11"/>
                  <id extension="19980101_IMMUNIZ_1011074312V455804^^^&amp;2.16.840.1.113883.4.349&amp;ISO"/>
                  <statusCode code="completed"/>
                  <author>
                    <time value="19980101000000.000-0500"/>
                    <assignedAuthor>
                      <id nullFlavor="UNK"/>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name nullFlavor="UNK"/>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <supply classCode="SPLY" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.34"/>
                  <id nullFlavor="UNK" extension="NA"/>
                  <statusCode code="completed"/>
                  <effectiveTime value="19980101000000.000-0500"/>
                  <quantity value="0"/>
                </supply>
              </entryRelationship>
            </substanceAdministration>
          </entry>
        </section>
      </component>
      <component typeCode="COMP" contextConductionInd="true">
        <section classCode="DOCSECT" moodCode="EVN">
          <templateId root="2.16.840.1.113883.10.20.1.12" displayable="false"/>
          <templateId root="2.16.840.1.113883.3.88.11.83.108" displayable="false"/>
          <templateId root="1.3.6.1.4.1.19376.1.5.3.1.3.12" displayable="false"/>
          <templateId root="1.3.6.1.4.1.19376.1.5.3.1.3.11" displayable="false"/>
          <code code="47519-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Procedures Hx Doc"/>
          <title representation="TXT" mediaType="text/plain">Procedures</title>
          <text><table ID="_nbProcedures" border="1" width="100%"><thead><tr><th>Date/Time</th><th>Procedure Type</th><th>Procedure Description</th><th>Procedure Type Details</th><th>Provider</th><th>Body Site</th><th>Source</th></tr>
</thead><tbody><tr><td>20120707122800.000-0500</td><td>X-RAY EXAM OF FOOT</td><td><content ID="#Procedures-value-3757814305-001-0">X-RAY EXAM OF FOOT</content></td><td>--</td><td>--</td><td>--</td><td>VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION</td></tr></tbody></table><td ID="Procedures-value-3757814305-001-0">X-RAY EXAM OF FOOT</td>
</text>
          <entry typeCode="DRIV" contextConductionInd="true">
            <procedure classCode="PROC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.29" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.17" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" displayable="false"/>
              <id extension="3757814305-001-0" displayable="false"/>
              <code code="73630" codeSystem="2.16.840.1.113883.6.12" codeSystemName="CPT4" displayName="X-RAY EXAM OF FOOT">
                <originalText>
									<reference value="#Procedures-value-3757814305-001-0"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Procedures-value-3757814305-001-0"/>
							</text>
              <statusCode code="completed"/>
              <effectiveTime>
                <low value="20120707122800.000-0500"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <addr>
										<city>ANY CITY</city>
										<state>IN</state>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <playingEntity classCode="PLC">
                    <name>2.16.840.1.113883.4.349</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <participant typeCode="AUT">
                <participantRole>
                  <addr nullFlavor="UNK"/>
                  <telecom nullFlavor="UNK"/>
                  <playingEntity>
                    <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                    <name>#Procedures-value-3757814305-001-0</name>
                    <desc>NHIN Gateway VA Document Retrieve</desc>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="REFR">
                <encounter classCode="ENC" moodCode="EVN">
                  <id root="1.3.6.1.4.1.12009.9.4" extension="4632374653" assigningAuthorityName="Regenstrief Encounter IDs"/>
                </encounter>
              </entryRelationship>
            </procedure>
          </entry>
        </section>
      </component>
      <component typeCode="COMP" contextConductionInd="true">
        <section classCode="DOCSECT" moodCode="EVN">
          <templateId root="2.16.840.1.113883.10.20.1.14" displayable="false"/>
          <code code="30954-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Relevant Dx tests/lab data"/>
          <title representation="TXT" mediaType="text/plain">Results</title>
          <text>
<div ID="_nbResultsSection">
	
	<table ID="_nbResults">
		<thead>
			<th>Date/Time</th>
			<th>Result Type</th>
			<th>Source</th>
			<th>Result</th>
			<th>Unit</th>
			<th>Interpretation</th>
			<th>Reference Range</th>
			<th>Comments</th>
			<th>Status</th>
			<th>Analyte Source</th>
		</thead>
		<tbody>

<tr>
	<td>
	20140117090800.000-0500
	</td>
	<td>
	Brst US	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Impression	
	</td>
	<td/>
	<td>
				1. No mammographic or sonographic evidence of malignancy. Recommend annual [&lt;screening>] mammography and clinical breast exam. A result letter has been given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2: Benign. DICTATED BY : Dr.PROVIDER1 Jan 17 2014 9:17AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Jan 17 2014 12:03PM TRANSCRIBED BY: PSCB Jan 17 2014 9:17AM RADRES 04085			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL
	</td>
</tr>
<tr>
	<td>
	20140117085000.000-0500
	</td>
	<td>
	Digital Mammogram Unilat Diag	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Impression	
	</td>
	<td/>
	<td>
				1. No mammographic or sonographic evidence of malignancy. Recommend annual [&lt;screening>] mammography and clinical breast exam. A result letter has been given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2: Benign. DICTATED BY : Dr.PROVIDER1 Jan 17 2014 9:17AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Jan 17 2014 12:03PM TRANSCRIBED BY: PSCB Jan 17 2014 9:17AM RADRES 04085			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL
	</td>
</tr>
<tr>
	<td>
	20131206142100.000-0500
	</td>
	<td>
	Digital Mammogram Screen	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Impression	
	</td>
	<td/>
	<td>
				1. Right breast subareolar mass. Recommend additional evaluation with spot compression CC and MLO views with possible right breast ultrasound. 2. No mammographic evidence of malignancy in the left breast. Our office will contact the patient about the need for additional images. BIRADS Category 0: Incomplete - Need Additional Imaging Evaluation DICTATED BY : Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:08PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:11PM TRANSCRIBED BY: PSCB RADRES 04085			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL
	</td>
</tr>
<tr>
	<td>
	20121204123400.000-0500
	</td>
	<td>
	Digital Mammogram Diagnostic	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Impression	
	</td>
	<td/>
	<td>
				No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. 2. Stroma overlap causing the bilateral asymmetries on screening exam. A result letter was given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. MATTHEW LASTNAME Dec 4 2012 12:44PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 4 2012 3:54PM TRANSCRIBED BY: PSCB Dec 4 2012 12:51PM RADRES 04085			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL
	</td>
</tr>
<tr>
	<td>
	20121119082400.000-0500
	</td>
	<td>
	Digital Mammogram Screen	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Impression	
	</td>
	<td/>
	<td>
				1. Right breast asymmetry. Recommend five degree and rolled XCCL views. 2. Left breast asymmetry. Recommend five degree XCCL view. Our office will contact the patient regarding the need for additional views. BI-RADS Final Assessment Category 0: Incomplete. Need additional imaging for evaluation. DICTATED BY : Dr. MATTHEW LASTNAME Nov 20 2012 8:36AM ELECTRONICALLY SIGNED BY: Dr. SUSAN LASTNAME Nov 20 2012 12:48PM TRANSCRIBED BY: PSCB Nov 20 2012 9:49AM RADRES 04085			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL
	</td>
</tr>
<tr>
	<td>
	20120917103900.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	HPV High Risk Strains DNA Q1	
	</td>
	<td/>
	<td>
				NEG			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	-
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120917095017.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				74.0			
	</td>
	<td>
				{/min}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120917095017.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				63.0			
	</td>
	<td>
				{[in'us]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120917095017.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				118.0			
	</td>
	<td>
				{[lb'av]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120917095017.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				97.4			
	</td>
	<td>
				{[degf]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120917095017.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				106.0			
	</td>
	<td>
				{mm[hg]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120917095017.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				60.0			
	</td>
	<td>
				{mm[hg]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120917095017.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				99.0			
	</td>
	<td>
				{%}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120910080000.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Prot SerPl-mCnc	
	</td>
	<td/>
	<td>
				7.3 g/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	6.4-8.2
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Calcium SerPl-mCnc	
	</td>
	<td/>
	<td>
				9.7 mg/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	8.4-10.6
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				11 mg/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	7-26
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				73.5 mL/min			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	-
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				7.0 mmol/L			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	5.0-15.0
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				26 Iu/L			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	22-65
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				87 Iu/L			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	50-136
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				0.2 mg/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	0.0-1.0
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				3.8 g/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	3.4-4.7
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				30 mmol/L			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	21-32
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				99 mmol/L			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	98-107
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				4.7 mmol/L			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	3.5-5.5
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				136 mmol/L			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	135-145
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				1.0 mg/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	0.8-1.4
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	GLU (SMA)	
	</td>
	<td/>
	<td>
				88 mg/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	70-99
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120910080001.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				1.822 mIU/L			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	0.465-4.680
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120910080000.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				185 mg/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	-
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				122 mg/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	-
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				52 mg/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	40->=60
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td/>
	<td>
	Trigl SerPl-mCnc	
	</td>
	<td/>
	<td>
				56 mg/dL			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
	-
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120707120100.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				80.0			
	</td>
	<td>
				{/min}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120707120100.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				115.0			
	</td>
	<td>
				{mm[hg]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120707120100.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				71.0			
	</td>
	<td>
				{mm[hg]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120707120100.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				98.3			
	</td>
	<td>
				{[degf]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120301085233.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				70.0			
	</td>
	<td>
				{mm[hg]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120301085233.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				114.0			
	</td>
	<td>
				{mm[hg]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120301085233.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				98.4			
	</td>
	<td>
				{[degf]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120301085233.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				80.0			
	</td>
	<td>
				{/min}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20120301085233.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				114.6			
	</td>
	<td>
				{[lb'av]}			
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20110819082700.000-0500
	</td>
	<td>
	Digital Mammogram Screen	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Impression	
	</td>
	<td/>
	<td>
				No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. A result letter will be sent to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. KEITH LASTNAME Aug 22 2011 8:24AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME LASTNAME Aug 22 2011 3:04PM TRANSCRIBED BY: PSCB Aug 22 2011 2:32PM RADRES 04085			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		WISHARD MEMORIAL HOSPITAL, WISHARD MEMORIAL HOSPITAL
	</td>
</tr>
<tr>
	<td>
	20081008140235.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				Coded Allergy Name Not Available			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20080326082851.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
				Coded Allergy Name Not Available			
	</td>
	<td>
							
	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20070227000000.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
	INT HEMORRHOID W/O COMPL	
	</td>
	<td>

	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20060101000000.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
	HYPERLIPIDEMIA NEC/NOS	
	</td>
	<td>

	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	20030101000000.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
	OSTEOARTHRO NOS-OTH SITE	
	</td>
	<td>

	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	19880101000000.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
	MIGRAINE NOS/NOT INTRCBL	
	</td>
	<td>

	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
<tr>
	<td>
	19770101000000.000-0500
	</td>
	<td>
	Unknown Battery	
	</td>
	<td>--</td>
	<td/>
	<td/>
	<td/>
	<td/>
	<td/>
	<td>
			--
	</td>
	<td/>
</tr>
<tr>
	<td/>
	<td>
	Misc Esoterix Endocrine Amb Test	
	</td>
	<td/>
	<td>
	TOBACCO USE DISORDER	
	</td>
	<td>

	</td>
	<td> 
	--
	</td>
	<td>
			--
	</td>
	<td>
			--
	</td>
	<td>
	completed
	</td>
	<td>
		VETERAN'S ADMINISTRATION, VETERAN'S ADMINISTRATION
	</td>
</tr>
		</tbody>
	</table>
</div>
<td ID="Results-value-3757814283-001-0">NEG</td>
<td ID="Results-value-3757814297-001-0">7.3 g/dL</td>
<td ID="Results-value-3757814296-001-0">9.7 mg/dL</td>
<td ID="Results-value-3757814290-001-0">11 mg/dL</td>
<td ID="Results-value-3757814304-001-0">73.5 mL/min</td>
<td ID="Results-value-3757814303-001-0">7.0 mmol/L</td>
<td ID="Results-value-3757814302-001-0">26 Iu/L</td>
<td ID="Results-value-3757814300-001-0">87 Iu/L</td>
<td ID="Results-value-3757814299-001-0">0.2 mg/dL</td>
<td ID="Results-value-3757814298-001-0">3.8 g/dL</td>
<td ID="Results-value-3757814295-001-0">30 mmol/L</td>
<td ID="Results-value-3757814294-001-0">99 mmol/L</td>
<td ID="Results-value-3757814293-001-0">4.7 mmol/L</td>
<td ID="Results-value-3757814292-001-0">136 mmol/L</td>
<td ID="Results-value-3757814291-001-0">1.0 mg/dL</td>
<td ID="Results-value-3757814289-001-0">88 mg/dL</td>
<td ID="Results-value-3757814266-001-0">74</td>
<td ID="Results-value-3757814265-001-0">63</td>
<td ID="Results-value-3757814270-001-0">118</td>
<td ID="Results-value-3757814269-001-0">97.4</td>
<td ID="Results-value-3757814271-001-0">106</td>
<td ID="Results-value-3757814272-001-0">60</td>
<td ID="Results-value-3757814267-001-0">99</td>
<td ID="Results-value-3757814284-001-0">1.822 mIU/L</td>
<td ID="Results-value-3757814285-001-0">185 mg/dL</td>
<td ID="Results-value-3757814288-001-0">122 mg/dL</td>
<td ID="Results-value-3757814287-001-0">52 mg/dL</td>
<td ID="Results-value-3757814286-001-0">56 mg/dL</td>
<td ID="Results-value-3757814273-001-0">80</td>
<td ID="Results-value-3757814276-001-0">115</td>
<td ID="Results-value-3757814277-001-0">71</td>
<td ID="Results-value-3757814275-001-0">98.3</td>
<td ID="Results-value-3757814282-001-0">70</td>
<td ID="Results-value-3757814281-001-0">114</td>
<td ID="Results-value-3757814279-001-0">98.4</td>
<td ID="Results-value-3757814278-001-0">80</td>
<td ID="Results-value-3757814280-001-0">114.6</td>
<td ID="Results-value-3757814259-001-0">Coded Allergy Name Not Available</td>
<td ID="Results-value-3757814258-001-0">Coded Allergy Name Not Available</td>
<td ID="Results-value-3773135871-001-0">INT HEMORRHOID W/O COMPL</td>
<td ID="Results-value-3773135873-001-0">HYPERLIPIDEMIA NEC/NOS</td>
<td ID="Results-value-3773135870-001-0">OSTEOARTHRO NOS-OTH SITE</td>
<td ID="Results-value-3773135869-001-0">MIGRAINE NOS/NOT INTRCBL</td>
<td ID="Results-value-3773135872-001-0">TOBACCO USE DISORDER</td>
<td ID="Results-value-4213557301-000-0">1. No mammographic or sonographic evidence of malignancy. Recommend annual [&lt;screening>] mammography and clinical breast exam. A result letter has been given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2: Benign. DICTATED BY : Dr.PROVIDER1 Jan 17 2014 9:17AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Jan 17 2014 12:03PM TRANSCRIBED BY: PSCB Jan 17 2014 9:17AM RADRES 04085</td>
<td ID="Results-value-4213557316-000-0">1. No mammographic or sonographic evidence of malignancy. Recommend annual [&lt;screening>] mammography and clinical breast exam. A result letter has been given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2: Benign. DICTATED BY : Dr.PROVIDER1 Jan 17 2014 9:17AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Jan 17 2014 12:03PM TRANSCRIBED BY: PSCB Jan 17 2014 9:17AM RADRES 04085</td>
<td ID="Results-value-4169732911-000-0">1. Right breast subareolar mass. Recommend additional evaluation with spot compression CC and MLO views with possible right breast ultrasound. 2. No mammographic evidence of malignancy in the left breast. Our office will contact the patient about the need for additional images. BIRADS Category 0: Incomplete - Need Additional Imaging Evaluation DICTATED BY : Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:08PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:11PM TRANSCRIBED BY: PSCB RADRES 04085</td>
<td ID="Results-value-3773761307-000-0">No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. 2. Stroma overlap causing the bilateral asymmetries on screening exam. A result letter was given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. MATTHEW LASTNAME Dec 4 2012 12:44PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 4 2012 3:54PM TRANSCRIBED BY: PSCB Dec 4 2012 12:51PM RADRES 04085</td>
<td ID="Results-value-3759902938-000-0">1. Right breast asymmetry. Recommend five degree and rolled XCCL views. 2. Left breast asymmetry. Recommend five degree XCCL view. Our office will contact the patient regarding the need for additional views. BI-RADS Final Assessment Category 0: Incomplete. Need additional imaging for evaluation. DICTATED BY : Dr. MATTHEW LASTNAME Nov 20 2012 8:36AM ELECTRONICALLY SIGNED BY: Dr. SUSAN LASTNAME Nov 20 2012 12:48PM TRANSCRIBED BY: PSCB Nov 20 2012 9:49AM RADRES 04085</td>
<td ID="Results-value-3230336916-000-0">No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. A result letter will be sent to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. KEITH LASTNAME Aug 22 2011 8:24AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME LASTNAME Aug 22 2011 3:04PM TRANSCRIBED BY: PSCB Aug 22 2011 2:32PM RADRES 04085</td>
</text>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120917103900.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814283-001-0" displayable="false"/>
                  <code code="30167-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="HPV High Risk Strains DNA Q1">
                    <translation code="27189" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="HPV High Risk Strains DNA Ql"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814283-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917103900.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">NEG</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814283-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374649" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">-</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120910080000.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814297-001-0" displayable="false"/>
                  <code code="2885-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Prot SerPl-mCnc">
                    <translation code="19607" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Tot Prot Ser"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814297-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">7.3 g/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814297-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">6.4-8.2</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814296-001-0" displayable="false"/>
                  <code code="17861-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Calcium SerPl-mCnc">
                    <translation code="7984" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Calcium (EKTA) Ser"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814296-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">9.7 mg/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814296-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">8.4-10.6</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814290-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814290-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">11 mg/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814290-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">7-26</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814304-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814304-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">73.5 mL/min</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814304-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">-</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814303-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814303-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">7.0 mmol/L</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814303-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">5.0-15.0</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814302-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814302-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">26 Iu/L</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814302-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">22-65</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814300-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814300-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">87 Iu/L</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814300-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">50-136</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814299-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814299-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">0.2 mg/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814299-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">0.0-1.0</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814298-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814298-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">3.8 g/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814298-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">3.4-4.7</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814295-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814295-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">30 mmol/L</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814295-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">21-32</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814294-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814294-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">99 mmol/L</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814294-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">98-107</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814293-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814293-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">4.7 mmol/L</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814293-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">3.5-5.5</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814292-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814292-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">136 mmol/L</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814292-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">135-145</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814291-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814291-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">1.0 mg/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814291-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">0.8-1.4</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814289-001-0" displayable="false"/>
                  <code code="2345-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="GLU (SMA)">
                    <translation code="7979" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Glucose Rand (EKTA)"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814289-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">88 mg/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814289-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">70-99</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120917095017.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814266-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814266-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917095230.000-0500"/>
                  <value xsi:type="PQ" value="74.0" unit="{/min}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814266-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374650" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120917095017.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814265-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814265-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917095230.000-0500"/>
                  <value xsi:type="PQ" value="63.0" unit="{[in'us]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814265-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374650" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120917095017.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814270-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814270-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917095230.000-0500"/>
                  <value xsi:type="PQ" value="118.0" unit="{[lb'av]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814270-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374650" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120917095017.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814269-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814269-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917095230.000-0500"/>
                  <value xsi:type="PQ" value="97.4" unit="{[degf]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814269-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374650" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120917095017.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814271-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814271-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917095230.000-0500"/>
                  <value xsi:type="PQ" value="106.0" unit="{mm[hg]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814271-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374650" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120917095017.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814272-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814272-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917095230.000-0500"/>
                  <value xsi:type="PQ" value="60.0" unit="{mm[hg]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814272-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374650" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120917095017.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814267-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814267-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917095230.000-0500"/>
                  <value xsi:type="PQ" value="99.0" unit="{%}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814267-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374650" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120910080001.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814284-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814284-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080001.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">1.822 mIU/L</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814284-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">0.465-4.680</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120910080000.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814285-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814285-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">185 mg/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814285-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">-</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814288-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814288-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">122 mg/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814288-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">-</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814287-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814287-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">52 mg/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814287-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">40->=60</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814286-001-0" displayable="false"/>
                  <code code="2571-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Trigl SerPl-mCnc">
                    <translation code="7987" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Triglyceride (EKTA)"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814286-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120910080000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">56 mg/dL</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814286-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" representation="TXT" mediaType="text/plain">-</text>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120707120100.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814273-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814273-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120707120517.000-0500"/>
                  <value xsi:type="PQ" value="80.0" unit="{/min}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814273-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374653" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120707120100.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814276-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814276-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120707120517.000-0500"/>
                  <value xsi:type="PQ" value="115.0" unit="{mm[hg]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814276-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374653" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120707120100.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814277-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814277-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120707120517.000-0500"/>
                  <value xsi:type="PQ" value="71.0" unit="{mm[hg]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814277-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374653" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120707120100.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814275-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814275-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120707120517.000-0500"/>
                  <value xsi:type="PQ" value="98.3" unit="{[degf]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814275-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374653" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120301085233.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814282-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814282-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120301085353.000-0500"/>
                  <value xsi:type="PQ" value="70.0" unit="{mm[hg]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814282-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374657" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120301085233.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814281-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814281-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120301085353.000-0500"/>
                  <value xsi:type="PQ" value="114.0" unit="{mm[hg]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814281-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374657" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120301085233.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814279-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814279-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120301085353.000-0500"/>
                  <value xsi:type="PQ" value="98.4" unit="{[degf]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814279-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374657" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120301085233.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814278-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814278-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120301085353.000-0500"/>
                  <value xsi:type="PQ" value="80.0" unit="{/min}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814278-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374657" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20120301085233.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814280-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814280-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120301085353.000-0500"/>
                  <value xsi:type="PQ" value="114.6" unit="{[lb'av]}"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814280-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374657" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20081008140235.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814259-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814259-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20081008140235.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">Coded Allergy Name Not Available</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814259-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20080326082851.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3757814258-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3757814258-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20080326082851.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">Coded Allergy Name Not Available</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3757814258-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20070227000000.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3773135871-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3773135871-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20070227000000.000-0500"/>
                  <value xsi:type="CD" code="455.0" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="INT HEMORRHOID W/O COMPL"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3773135871-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20060101000000.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3773135873-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3773135873-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20060101000000.000-0500"/>
                  <value xsi:type="CD" code="272.4" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="HYPERLIPIDEMIA NEC/NOS"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3773135873-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="20030101000000.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3773135870-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3773135870-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20030101000000.000-0500"/>
                  <value xsi:type="CD" code="715.98" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="OSTEOARTHRO NOS-OTH SITE"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3773135870-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="19880101000000.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3773135869-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3773135869-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="19880101000000.000-0500"/>
                  <value xsi:type="CD" code="346.90" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="MIGRAINE NOS/NOT INTRCBL"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3773135869-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="23728" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Unknown Battery"/>
              <statusCode code="completed"/>
              <effectiveTime value="19770101000000.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id extension="3773135872-001-0" displayable="false"/>
                  <code code="19146-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Misc Esoterix Endocrine Amb Test">
                    <translation code="15214" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Miscellaneous Test"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3773135872-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="19770101000000.000-0500"/>
                  <value xsi:type="CD" code="305.1" codeSystem="2.16.840.1.113883.6.2" codeSystemName="ICD9" displayName="TOBACCO USE DISORDER"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3773135872-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="24601-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Brst US">
                <translation code="8498" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Breast Ultrasound Unilateral"/>
              </code>
              <statusCode code="completed"/>
              <effectiveTime value="20140117090800.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4213557301-000-0" displayable="false"/>
                  <code code="19811-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Impression">
                    <translation code="19776" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="IMPRESSION"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-4213557301-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20140117090800.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">1. No mammographic or sonographic evidence of malignancy. Recommend annual [&lt;screening>] mammography and clinical breast exam. A result letter has been given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2: Benign. DICTATED BY : Dr.PROVIDER1 Jan 17 2014 9:17AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Jan 17 2014 12:03PM TRANSCRIBED BY: PSCB Jan 17 2014 9:17AM RADRES 04085</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>WISH</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHRAD" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-4213557301-000-0</name>
                        <desc>Wishard Radiology v26</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5121765903" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="31419" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Unilat Diag"/>
              <statusCode code="completed"/>
              <effectiveTime value="20140117085000.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4213557316-000-0" displayable="false"/>
                  <code code="19811-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Impression">
                    <translation code="19776" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="IMPRESSION"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-4213557316-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20140117085000.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">1. No mammographic or sonographic evidence of malignancy. Recommend annual [&lt;screening>] mammography and clinical breast exam. A result letter has been given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2: Benign. DICTATED BY : Dr.PROVIDER1 Jan 17 2014 9:17AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Jan 17 2014 12:03PM TRANSCRIBED BY: PSCB Jan 17 2014 9:17AM RADRES 04085</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>WISH</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHRAD" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-4213557316-000-0</name>
                        <desc>Wishard Radiology v26</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5121765903" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="31552" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Screen"/>
              <statusCode code="completed"/>
              <effectiveTime value="20131206142100.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4169732911-000-0" displayable="false"/>
                  <code code="19811-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Impression">
                    <translation code="19776" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="IMPRESSION"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-4169732911-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20131206142100.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">1. Right breast subareolar mass. Recommend additional evaluation with spot compression CC and MLO views with possible right breast ultrasound. 2. No mammographic evidence of malignancy in the left breast. Our office will contact the patient about the need for additional images. BIRADS Category 0: Incomplete - Need Additional Imaging Evaluation DICTATED BY : Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:08PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:11PM TRANSCRIBED BY: PSCB RADRES 04085</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>WISH</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHRAD" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-4169732911-000-0</name>
                        <desc>Wishard Radiology v26</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="5094357919" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="31418" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Diagnostic"/>
              <statusCode code="completed"/>
              <effectiveTime value="20121204123400.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3773761307-000-0" displayable="false"/>
                  <code code="19811-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Impression">
                    <translation code="19776" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="IMPRESSION"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3773761307-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20121204123400.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. 2. Stroma overlap causing the bilateral asymmetries on screening exam. A result letter was given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. MATTHEW LASTNAME Dec 4 2012 12:44PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 4 2012 3:54PM TRANSCRIBED BY: PSCB Dec 4 2012 12:51PM RADRES 04085</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>WISH</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHRAD" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3773761307-000-0</name>
                        <desc>Wishard Radiology v26</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="31552" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Screen"/>
              <statusCode code="completed"/>
              <effectiveTime value="20121119082400.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3759902938-000-0" displayable="false"/>
                  <code code="19811-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Impression">
                    <translation code="19776" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="IMPRESSION"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3759902938-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20121119082400.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">1. Right breast asymmetry. Recommend five degree and rolled XCCL views. 2. Left breast asymmetry. Recommend five degree XCCL view. Our office will contact the patient regarding the need for additional views. BI-RADS Final Assessment Category 0: Incomplete. Need additional imaging for evaluation. DICTATED BY : Dr. MATTHEW LASTNAME Nov 20 2012 8:36AM ELECTRONICALLY SIGNED BY: Dr. SUSAN LASTNAME Nov 20 2012 12:48PM TRANSCRIBED BY: PSCB Nov 20 2012 9:49AM RADRES 04085</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>WISH</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHRAD" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3759902938-000-0</name>
                        <desc>Wishard Radiology v26</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374532" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
          <entry typeCode="COMP" contextConductionInd="true">
            <organizer classCode="BATTERY" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32"/>
              <id nullFlavor="NA"/>
              <code code="31552" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Screen"/>
              <statusCode code="completed"/>
              <effectiveTime value="20110819082700.000-0500"/>
              <component>
                <procedure classCode="PROC" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.3.88.11.83.17" assigningAuthorityName="HITSP/C83-[DE-17-CDA-1]"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="HITSP/C83-[DE-17-CDA-2]"/>
                  <templateId root="2.16.840.1.113883.10.20.1.29" assigningAuthorityName="HL7 CCD CONF-427"/>
                  <id/>
                  <code>
                    <originalText>
											<reference value=""/>
										</originalText>
                  </code>
                  <text>
										<reference nullFlavor="NI"/>
									</text>
                  <statusCode code="completed"/>
                </procedure>
              </component>
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.15.1" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3230336916-000-0" displayable="false"/>
                  <code code="19811-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Impression">
                    <translation code="19776" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="IMPRESSION"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#Results-value-3230336916-000-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20110819082700.000-0500"/>
                  <value xsi:type="ST" representation="TXT" mediaType="text/plain">No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. A result letter will be sent to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. KEITH LASTNAME Aug 22 2011 8:24AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME LASTNAME Aug 22 2011 3:04PM TRANSCRIBED BY: PSCB Aug 22 2011 2:32PM RADRES 04085</value>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <id root="1.3.6.1.4.1.12009.1.1"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>WISH</name>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="WMHRAD" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#Results-value-3230336916-000-0</name>
                        <desc>Wishard Radiology v26</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                        <desc>WISHARD MEMORIAL HOSPITAL</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="3972367487" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
        </section>
      </component>
      <component typeCode="COMP" contextConductionInd="true">
        <section classCode="DOCSECT" moodCode="EVN">
          <templateId root="2.16.840.1.113883.10.20.1.16" displayable="false"/>
          <templateId root="1.3.6.1.4.1.19376.1.5.3.1.3.25" displayable="false"/>
          <templateId root="1.3.6.1.4.1.19376.1.5.3.1.1.5.3.2" displayable="false"/>
          <templateId root="2.16.840.1.113883.3.88.11.83.119" displayable="false"/>
          <code code="8716-3" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Vital signs"/>
          <title representation="TXT" mediaType="text/plain">Vital Signs</title>
          <text><table ID="_nbVitalSignsComments" border="1" width="100%"><thead><tr><th>Comments</th></tr></thead><tbody/></table><table ID="_nbVitalSigns" border="1" width="100%"><thead><tr><th>Date</th><th>TEMP</th><th>Heart Rate</th><th>Resp Rate</th><th>BP</th><th>Height</th><th>Height-Lying</th><th>Body Mass Index</th><th>Weight</th><th>O2 Sat</th><th>Head Circumf</th><th>Body Surface Area</th><th>Source</th></tr>
</thead><tbody><tr><td>20120917095230.000-0500</td><td>--</td><td>--</td><td>12.0  /min  (9:52 AM)//18.0  /min  (12:05 PM)</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td><td>--</td></tr></tbody></table><td ID="VitalSigns-value-3757814268-001-0">12</td>
<td ID="VitalSigns-value-3757814274-001-0">18</td>
</text>
          <entry typeCode="DRIV" contextConductionInd="true">
            <organizer classCode="CLUSTER" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.32" displayable="false"/>
              <templateId root="2.16.840.1.113883.10.20.1.35" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13.1" displayable="false"/>
              <id nullFlavor="NA" displayable="false"/>
              <code code="46680005" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Vital signs"/>
              <statusCode code="completed"/>
              <effectiveTime>
                <low value="20120917095230.000-0500"/>
              </effectiveTime>
              <component typeCode="COMP" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13.2" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.14" displayable="false"/>
                  <id extension="3757814268-001-0" displayable="false"/>
                  <code code="9279-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="RESP RATE AUTO">
                    <translation code="12988" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Resp Rate Auto"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#VitalSigns-value-3757814268-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120917095230.000-0500"/>
                  <value xsi:type="PQ" value="12.0" unit="/min"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#VitalSigns-value-3757814268-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374650" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
              <component typeCode="COMP" contextConductionInd="true">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13" displayable="false"/>
                  <templateId root="2.16.840.1.113883.10.20.1.31" displayable="false"/>
                  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13.2" displayable="false"/>
                  <templateId root="2.16.840.1.113883.3.88.11.83.14" displayable="false"/>
                  <id extension="3757814274-001-0" displayable="false"/>
                  <code code="9279-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="RESP RATE AUTO">
                    <translation code="12988" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Resp Rate Auto"/>
                  </code>
                  <text mediaType="text/plain">
										<reference value="#VitalSigns-value-3757814274-001-0"/>
									</text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20120707120517.000-0500"/>
                  <value xsi:type="PQ" value="18.0" unit="/min"/>
                  <interpretationCode nullFlavor="NI"/>
                  <participant typeCode="LOC">
                    <templateId root="2.16.840.1.113883.10.20.1.45"/>
                    <participantRole classCode="SDLOC">
                      <addr>
												<city>ANY CITY</city>
												<state>IN</state>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity classCode="PLC">
                        <name>2.16.840.1.113883.4.349</name>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <participant typeCode="AUT">
                    <participantRole>
                      <addr nullFlavor="UNK"/>
                      <telecom nullFlavor="UNK"/>
                      <playingEntity>
                        <code code="NHIN_RD_NHIN_VA" codeSystem="1.3.6.1.4.1.12009.9.2"/>
                        <name>#VitalSigns-value-3757814274-001-0</name>
                        <desc>NHIN Gateway VA Document Retrieve</desc>
                      </playingEntity>
                      <scopingEntity>
                        <id displayable="false"/>
                        <desc>VETERAN'S ADMINISTRATION</desc>
                      </scopingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <encounter classCode="ENC" moodCode="EVN">
                      <id root="1.3.6.1.4.1.12009.9.4" extension="4632374653" assigningAuthorityName="Regenstrief Encounter IDs"/>
                    </encounter>
                  </entryRelationship>
                  <referenceRange typeCode="REFV">
                    <observationRange classCode="OBS" moodCode="EVN.CRT">
                      <text xsi:type="ST" nullFlavor="NA"/>
                    </observationRange>
                  </referenceRange>
                </observation>
              </component>
            </organizer>
          </entry>
        </section>
      </component>
      <component typeCode="COMP" contextConductionInd="true">
        <section classCode="DOCSECT" moodCode="EVN">
          <templateId root="2.16.840.1.113883.10.20.1.3" displayable="false"/>
          <templateId root="2.16.840.1.113883.3.88.11.83.127" displayable="false"/>
          <templateId root="1.3.6.1.4.1.19376.1.5.3.1.1.5.3.3" displayable="false"/>
          <code code="46240-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LN" displayName="Hospitalizations+OP visits Hx Reported"/>
          <title representation="TXT" mediaType="text/plain">Encounters</title>
          <text>

	<table ID="_nbEncounter" border="1" width="100%">
		<thead>
			<tr>
			<th>Date/Time</th>
			<th>Encounter Type</th>
			<th>Encounter Description</th>
			<th>Encounter Note</th>
			<th>Admission Type</th>
			<th>Provider</th>
			<th>Admission Source</th>
			<th>Facility Location</th>
			<th>In Facility Duration</th>
			<th>Reason for visit</th>
			<th>Source</th>
			<th>Patient Class</th>
			<th>Discharge Disposition</th>
			<th>Health Care Facility Name</th>
			<th>Health Care Facility Location Type</th>
			<th>Health Care Facility ID</th>
			<th>Health Care Facility Address</th>
			</tr>
		</thead>
		<tbody>
			<tr>
			<td>
		20140117081200.000-0500 20140117144700.000-0500 FromTo
			</td>
			<td>
	OUTPATIENT
			</td>
			<td>
	<td ID="Encounters-type-5121765903">OUTPATIENT
	</td>
			</td>
			<td>
	<td ID="Encounters-note-5121765903"><paragraph>RADIOLOGY REPORT: Procedure: 1. Right Digital Diagnostic Mammogram1/17/2014 2. Right Breast Ultrasound Date: 1/17/2014 Indication: Additional views requested for right breast asymmetry. The patient reports no complaints in the right breast. Comparison: Mammography dated 12/6/2013 Findings: Mammogram: The previously identified subareolar focal asymmetry persists on compression CC and MLO views, however it appears less masslike. Clinical exam: No palpable abnormalities. Ultrasound: Focused ultrasound of the area of interest reveals a region of hyperechogenic breast tissue throughout which multiple mildly dilated ducts are noted. This corresponds to the mammographic finding. No findings concerning for malignancy.Transcribed by - PSCBTranscription Date - 201401170948</paragraph><paragraph>IMPRESSION: 1. No mammographic or sonographic evidence of malignancy. Recommend annual [&lt;screening>] mammography and clinical breast exam. A result letter has been given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2: Benign. DICTATED BY : Dr.PROVIDER1 Jan 17 2014 9:17AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Jan 17 2014 12:03PM TRANSCRIBED BY: PSCB Jan 17 2014 9:17AM RADRES 04085</paragraph><paragraph>SIGNATURE: LASTNAME,FIRSTNAME_PROVIDER</paragraph>
	</td>
			</td>
			<td>
					--
			</td>
			<td>
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME
			</td>
			<td>
					--
			</td>
			<td>
							BREASTCARE
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				BREASTCARE , BREASTCARE , BREASTCARE 
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
		20131206134700.000-0500 20131206235900.000-0500 FromTo
			</td>
			<td>
	OUTPATIENT
			</td>
			<td>
	<td ID="Encounters-type-5094357919">OUTPATIENT
	</td>
			</td>
			<td>
	<td ID="Encounters-note-5094357919"><paragraph>SIGNATURE: LASTNAME,FIRSTNAME_PROVIDER</paragraph><paragraph>RADIOLOGY REPORT: Bilateral Digital Screening Mammogram with CAD, Dec 6, 2013 2:21:00 PM Indication: Screen Comparison: 11/19/2012, 8/19/2011, 8/6/2010 Self-reported family history of breast cancer: Sister at age 60 and aunt at age 75 Findings: There are scattered fibroglandular tissues. No suspicious findings are present in the left breast. There is a 2.4 cm mass in the subareolar right breast at approximately the 9 to 10:00 position.Transcribed by - PSCBTranscription Date - 201312061511</paragraph><paragraph>IMPRESSION: 1. Right breast subareolar mass. Recommend additional evaluation with spot compression CC and MLO views with possible right breast ultrasound. 2. No mammographic evidence of malignancy in the left breast. Our office will contact the patient about the need for additional images. BIRADS Category 0: Incomplete - Need Additional Imaging Evaluation DICTATED BY : Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:08PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:11PM TRANSCRIBED BY: PSCB RADRES 04085</paragraph>
	</td>
			</td>
			<td>
					--
			</td>
			<td>
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME
			</td>
			<td>
					--
			</td>
			<td>
							BREASTCARE
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				BREASTCARE , BREASTCARE , BREASTCARE 
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
		20121204130218.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4634631965">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4634631965">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
		20121204105000.000-0500 20121204110000.000-0500 FromTo
			</td>
			<td>
	OUTPATIENT
			</td>
			<td>
	<td ID="Encounters-type-4634604815">OUTPATIENT
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4634604815">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME
			</td>
			<td>
					--
			</td>
			<td>
							BREASTCARE
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				BREASTCARE , BREASTCARE , BREASTCARE 
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
		20121119080900.000-0500 20121119235900.000-0500 FromTo
			</td>
			<td>
	OUTPATIENT
			</td>
			<td>
	<td ID="Encounters-type-4632374532">OUTPATIENT
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374532"><paragraph>RADIOLOGY REPORT: Exam: Bilateral Digital Screening Mammogram with CAD, 11/19/2012. Indication: Screen. Comparison: 8/19/2011, 8/6/2010. Findings: Breast tissue is heterogeneously dense, which could obscure detection of small masses. There is a 10 x 6 mm asymmetry within the posterior one-third, medial right breast on the XCCL view. The middle one-third lateral left breast contains a 10 x 7 mm asymmetry seen only on the XCCL view.Transcribed by - PSCBTranscription Date - 201211200949</paragraph><paragraph>IMPRESSION: 1. Right breast asymmetry. Recommend five degree and rolled XCCL views. 2. Left breast asymmetry. Recommend five degree XCCL view. Our office will contact the patient regarding the need for additional views. BI-RADS Final Assessment Category 0: Incomplete. Need additional imaging for evaluation. DICTATED BY : Dr. MATTHEW LASTNAME Nov 20 2012 8:36AM ELECTRONICALLY SIGNED BY: Dr. SUSAN LASTNAME Nov 20 2012 12:48PM TRANSCRIBED BY: PSCB Nov 20 2012 9:49AM RADRES 04085</paragraph><paragraph>SIGNATURE: LASTNAME,SUSAN</paragraph>
	</td>
			</td>
			<td>
					--
			</td>
			<td>
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME LASTNAME
			</td>
			<td>
					--
			</td>
			<td>
							Wishard Memorial Hospital
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				Wishard Memorial Hospital , Wishard Memorial Hospital , Wishard Memorial Hospital 
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
		20121119070953.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374673">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374673">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120927094414.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374648">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374648">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120917100000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374649">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374649">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120917093000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374650">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374650">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120915082000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374651">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374651">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120710121926.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374652">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374652">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120707113900.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374653">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374653">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120323130000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374654">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374654">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120323124000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374655">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374655">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120301090000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374656">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374656">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20120301083000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374657">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374657">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20111116110000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374658">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374658">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20111116103000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374659">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374659">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20111115153359.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374660">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374660">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20111115140700.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374661">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374661">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20110831084000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374662">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374662">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
		20110819080700.000-0500 20110822093600.000-0500 FromTo
			</td>
			<td>
	OUTPATIENT
			</td>
			<td>
	<td ID="Encounters-type-3972367811">OUTPATIENT
	</td>
			</td>
			<td>
	<td ID="Encounters-note-3972367811">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME,
							NOT-ASSIGNED
			</td>
			<td>
					--
			</td>
			<td>
							Wishard Memorial Hospital
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				Wishard Memorial Hospital , Wishard Memorial Hospital , Wishard Memorial Hospital 
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
		20110819080700.000-0500 20110822093600.000-0500 FromTo
			</td>
			<td>
	OUTPATIENT
			</td>
			<td>
	<td ID="Encounters-type-3972367487">OUTPATIENT
	</td>
			</td>
			<td>
	<td ID="Encounters-note-3972367487"><paragraph>RADIOLOGY REPORT: VA Override #0-09992660-0 EXAM: Bilateral digital screening mammogram with CAD, Aug 19, 2011 8:27:00 AM INDICATION: 56 year-old female for routine screening mammography. COMPARISON: August 6, 2010. FINDINGS: The breast tissue is heterogeneously dense, which could obscure detection of small masses. No suspicious findings are seen.Transcribed by - PSCBTranscription Date - 201108221432</paragraph><paragraph>IMPRESSION: No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. A result letter will be sent to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. KEITH LASTNAME Aug 22 2011 8:24AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME LASTNAME Aug 22 2011 3:04PM TRANSCRIBED BY: PSCB Aug 22 2011 2:32PM RADRES 04085</paragraph><paragraph>SIGNATURE: LASTNAME,FIRSTNAME</paragraph>
	</td>
			</td>
			<td>
					--
			</td>
			<td>
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME
			</td>
			<td>
					--
			</td>
			<td>
							Wishard Memorial Hospital
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				Wishard Memorial Hospital , Wishard Memorial Hospital , Wishard Memorial Hospital 
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20110712083000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374663">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374663">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20110712080000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374664">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374664">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20101223110734.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374665">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374665">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20101029070000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374666">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374666">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20101022070000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374667">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374667">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20101015070000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374668">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374668">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20101001073000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374669">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374669">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20100927130800.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374670">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374670">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20100913083000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374671">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374671">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	20100913080000.000-0500
			</td>
			<td>
	--
			</td>
			<td>
	<td ID="Encounters-note-4632374672">--
	</td>
			</td>
			<td>
	<td ID="Encounters-note-4632374672">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
							VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				VETERAN'S ADMINISTRATION
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
		20100806102400.000-0500 20100806152800.000-0500 FromTo
			</td>
			<td>
	OUTPATIENT
			</td>
			<td>
	<td ID="Encounters-type-2910018962">OUTPATIENT
	</td>
			</td>
			<td>
	<td ID="Encounters-note-2910018962">--
	</td>
			</td>
			<td>
					--
			</td>
			<td>
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME
			</td>
			<td>
					--
			</td>
			<td>
							Wishard Memorial Hospital
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				Wishard Memorial Hospital , Wishard Memorial Hospital , Wishard Memorial Hospital 
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
		20100806102400.000-0500 20100806152800.000-0500 FromTo
			</td>
			<td>
	OUTPATIENT
			</td>
			<td>
	<td ID="Encounters-type-2910015274">OUTPATIENT
	</td>
			</td>
			<td>
	<td ID="Encounters-note-2910015274"><paragraph>FINDINGS: VA override: #009992660 Exam: Bilateral Digital Screening Mammogram with CAD, 8/6/2010 Indication: Screen Comparison: None available. Previous performed at VA Hospital in Wilmington, Delaware 2 years ago. Findings: Breast tissue is heterogeneously dense, which could obscure detection of small masses. There are bilateral asymmetries.Transcribed by - PSCTranscription Date - 201008110955</paragraph><paragraph>RADIOLOGY IMPRESSION: No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. A result letter will be sent to the patient. Final Assessment Category 2: Benign.</paragraph><paragraph>SIGNATURE: LASTNAME,VALERIE</paragraph>
	</td>
			</td>
			<td>
					--
			</td>
			<td>
							FIRSTNAME_PROVIDER LASTNAME,
							FIRSTNAME_PROVIDER LASTNAME,
							NOT-ASSIGNED
			</td>
			<td>
					--
			</td>
			<td>
							Wishard Memorial Hospital
			</td>
			<td>
	--
			</td>

			<td>
					--
			</td>
			<td>
				Wishard Memorial Hospital , Wishard Memorial Hospital , Wishard Memorial Hospital 
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
			<tr>
			<td>
	--
			</td>
			<td>
	UNKNOWN
			</td>
			<td>
	<td ID="Encounters-type-0">UNKNOWN
	</td>
			</td>
			<td>
	<td ID="Encounters-note-0"><paragraph>RADIOLOGY REPORT: Bilateral Digital Diagnostic Mammogram, 12/4/2012. Indication: 57-year-old female with bilateral breast asymmetries seen on recent screening mammogram. Comparison: 11/19/2012, 8/19/2011, 8/6/2010. Findings: The previously described bilateral breast asymmetries do not persist on additional images, compatible with tissue summation artifact. No suspicious findings are seen within either breast.Transcribed by - PSCBTranscription Date - 201212041251</paragraph><paragraph>IMPRESSION: No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. 2. Stroma overlap causing the bilateral asymmetries on screening exam. A result letter was given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. MATTHEW LASTNAME Dec 4 2012 12:44PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 4 2012 3:54PM TRANSCRIBED BY: PSCB Dec 4 2012 12:51PM RADRES 04085</paragraph><paragraph>SIGNATURE: LASTNAME,FIRSTNAME_PROVIDER</paragraph>
	</td>
			</td>
			<td>
					--
			</td>
			<td>
						--
			</td>
			<td>
					--
			</td>
			<td>
					--
			</td>
			<td>
					--
			</td>

			<td>
					--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
	--
			</td>
			<td>
				--
			</td>
			<td>
	--
			</td>
			<td>
					--
			</td>
			<td>
				--
			</td>
			</tr>
		</tbody>
	</table>
<td ID="Encounters-type-5121765903">OUTPATIENT</td>
<td ID="Encounters-note-5121765903"><paragraph>RADIOLOGY REPORT: Procedure: 1. Right Digital Diagnostic Mammogram1/17/2014 2. Right Breast Ultrasound Date: 1/17/2014 Indication: Additional views requested for right breast asymmetry. The patient reports no complaints in the right breast. Comparison: Mammography dated 12/6/2013 Findings: Mammogram: The previously identified subareolar focal asymmetry persists on compression CC and MLO views, however it appears less masslike. Clinical exam: No palpable abnormalities. Ultrasound: Focused ultrasound of the area of interest reveals a region of hyperechogenic breast tissue throughout which multiple mildly dilated ducts are noted. This corresponds to the mammographic finding. No findings concerning for malignancy.Transcribed by - PSCBTranscription Date - 201401170948</paragraph><paragraph>IMPRESSION: 1. No mammographic or sonographic evidence of malignancy. Recommend annual [&lt;screening>] mammography and clinical breast exam. A result letter has been given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2: Benign. DICTATED BY : Dr.PROVIDER1 Jan 17 2014 9:17AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Jan 17 2014 12:03PM TRANSCRIBED BY: PSCB Jan 17 2014 9:17AM RADRES 04085</paragraph><paragraph>SIGNATURE: LASTNAME,FIRSTNAME_PROVIDER</paragraph></td>
<td ID="Encounters-type-5094357919">OUTPATIENT</td>
<td ID="Encounters-note-5094357919"><paragraph>SIGNATURE: LASTNAME,FIRSTNAME_PROVIDER</paragraph><paragraph>RADIOLOGY REPORT: Bilateral Digital Screening Mammogram with CAD, Dec 6, 2013 2:21:00 PM Indication: Screen Comparison: 11/19/2012, 8/19/2011, 8/6/2010 Self-reported family history of breast cancer: Sister at age 60 and aunt at age 75 Findings: There are scattered fibroglandular tissues. No suspicious findings are present in the left breast. There is a 2.4 cm mass in the subareolar right breast at approximately the 9 to 10:00 position.Transcribed by - PSCBTranscription Date - 201312061511</paragraph><paragraph>IMPRESSION: 1. Right breast subareolar mass. Recommend additional evaluation with spot compression CC and MLO views with possible right breast ultrasound. 2. No mammographic evidence of malignancy in the left breast. Our office will contact the patient about the need for additional images. BIRADS Category 0: Incomplete - Need Additional Imaging Evaluation DICTATED BY : Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:08PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:11PM TRANSCRIBED BY: PSCB RADRES 04085</paragraph></td>
<td ID="Encounters-note-4634631965"/>
<td ID="Encounters-type-4634604815">OUTPATIENT</td>
<td ID="Encounters-note-4634604815"/>
<td ID="Encounters-type-4632374532">OUTPATIENT</td>
<td ID="Encounters-note-4632374532"><paragraph>RADIOLOGY REPORT: Exam: Bilateral Digital Screening Mammogram with CAD, 11/19/2012. Indication: Screen. Comparison: 8/19/2011, 8/6/2010. Findings: Breast tissue is heterogeneously dense, which could obscure detection of small masses. There is a 10 x 6 mm asymmetry within the posterior one-third, medial right breast on the XCCL view. The middle one-third lateral left breast contains a 10 x 7 mm asymmetry seen only on the XCCL view.Transcribed by - PSCBTranscription Date - 201211200949</paragraph><paragraph>IMPRESSION: 1. Right breast asymmetry. Recommend five degree and rolled XCCL views. 2. Left breast asymmetry. Recommend five degree XCCL view. Our office will contact the patient regarding the need for additional views. BI-RADS Final Assessment Category 0: Incomplete. Need additional imaging for evaluation. DICTATED BY : Dr. MATTHEW LASTNAME Nov 20 2012 8:36AM ELECTRONICALLY SIGNED BY: Dr. SUSAN LASTNAME Nov 20 2012 12:48PM TRANSCRIBED BY: PSCB Nov 20 2012 9:49AM RADRES 04085</paragraph><paragraph>SIGNATURE: LASTNAME,SUSAN</paragraph></td>
<td ID="Encounters-note-4632374673"/>
<td ID="Encounters-note-4632374648"/>
<td ID="Encounters-note-4632374649"/>
<td ID="Encounters-note-4632374650"/>
<td ID="Encounters-note-4632374651"/>
<td ID="Encounters-note-4632374652"/>
<td ID="Encounters-note-4632374653"/>
<td ID="Encounters-note-4632374654"/>
<td ID="Encounters-note-4632374655"/>
<td ID="Encounters-note-4632374656"/>
<td ID="Encounters-note-4632374657"/>
<td ID="Encounters-note-4632374658"/>
<td ID="Encounters-note-4632374659"/>
<td ID="Encounters-note-4632374660"/>
<td ID="Encounters-note-4632374661"/>
<td ID="Encounters-note-4632374662"/>
<td ID="Encounters-type-3972367811">OUTPATIENT</td>
<td ID="Encounters-note-3972367811"/>
<td ID="Encounters-type-3972367487">OUTPATIENT</td>
<td ID="Encounters-note-3972367487"><paragraph>RADIOLOGY REPORT: VA Override #0-09992660-0 EXAM: Bilateral digital screening mammogram with CAD, Aug 19, 2011 8:27:00 AM INDICATION: 56 year-old female for routine screening mammography. COMPARISON: August 6, 2010. FINDINGS: The breast tissue is heterogeneously dense, which could obscure detection of small masses. No suspicious findings are seen.Transcribed by - PSCBTranscription Date - 201108221432</paragraph><paragraph>IMPRESSION: No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. A result letter will be sent to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. KEITH LASTNAME Aug 22 2011 8:24AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME LASTNAME Aug 22 2011 3:04PM TRANSCRIBED BY: PSCB Aug 22 2011 2:32PM RADRES 04085</paragraph><paragraph>SIGNATURE: LASTNAME,FIRSTNAME</paragraph></td>
<td ID="Encounters-note-4632374663"/>
<td ID="Encounters-note-4632374664"/>
<td ID="Encounters-note-4632374665"/>
<td ID="Encounters-note-4632374666"/>
<td ID="Encounters-note-4632374667"/>
<td ID="Encounters-note-4632374668"/>
<td ID="Encounters-note-4632374669"/>
<td ID="Encounters-note-4632374670"/>
<td ID="Encounters-note-4632374671"/>
<td ID="Encounters-note-4632374672"/>
<td ID="Encounters-type-2910018962">OUTPATIENT</td>
<td ID="Encounters-note-2910018962"/>
<td ID="Encounters-type-2910015274">OUTPATIENT</td>
<td ID="Encounters-note-2910015274"><paragraph>FINDINGS: VA override: #009992660 Exam: Bilateral Digital Screening Mammogram with CAD, 8/6/2010 Indication: Screen Comparison: None available. Previous performed at VA Hospital in Wilmington, Delaware 2 years ago. Findings: Breast tissue is heterogeneously dense, which could obscure detection of small masses. There are bilateral asymmetries.Transcribed by - PSCTranscription Date - 201008110955</paragraph><paragraph>RADIOLOGY IMPRESSION: No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. A result letter will be sent to the patient. Final Assessment Category 2: Benign.</paragraph><paragraph>SIGNATURE: LASTNAME,VALERIE</paragraph></td>
<td ID="Encounters-type-0">UNKNOWN</td>
<td ID="Encounters-note-0"><paragraph>RADIOLOGY REPORT: Bilateral Digital Diagnostic Mammogram, 12/4/2012. Indication: 57-year-old female with bilateral breast asymmetries seen on recent screening mammogram. Comparison: 11/19/2012, 8/19/2011, 8/6/2010. Findings: The previously described bilateral breast asymmetries do not persist on additional images, compatible with tissue summation artifact. No suspicious findings are seen within either breast.Transcribed by - PSCBTranscription Date - 201212041251</paragraph><paragraph>IMPRESSION: No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. 2. Stroma overlap causing the bilateral asymmetries on screening exam. A result letter was given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. MATTHEW LASTNAME Dec 4 2012 12:44PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 4 2012 3:54PM TRANSCRIBED BY: PSCB Dec 4 2012 12:51PM RADRES 04085</paragraph><paragraph>SIGNATURE: LASTNAME,FIRSTNAME_PROVIDER</paragraph></td>
</text>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="5121765903" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code code="O" codeSystem="1.3.6.1.4.1.12009.8.6" codeSystemName="CARE_SETTING" displayName="OUTPATIENT">
                <originalText>
									<reference value="#Encounters-type-5121765903"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-5121765903"/>
							</text>
              <effectiveTime>
                <low value="20140117081200.000-0500"/>
                <high value="20140117144700.000-0500"/>
              </effectiveTime>
              <performer typeCode="PRF">
                <time>
                  <low value="20140117081200.000-0500"/>
                  <high value="20140117144700.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="2.16.840.1.113883.4.6" extension="1619929106" assigningAuthorityName="National Provider Identifier"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>BREASTCARE</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20140117081200.000-0500"/>
                  <high value="20140117144700.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="2.16.840.1.113883.4.6" extension="1720021694" assigningAuthorityName="National Provider Identifier"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<city>ANY CITY</city>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>BREASTCARE</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20140117081200.000-0500"/>
                  <high value="20140117144700.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="2.16.840.1.113883.4.6" extension="1619929106" assigningAuthorityName="National Provider Identifier"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>BREASTCARE</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <id root="1.3.6.1.4.1.12009.1.1.3" extension="BREASTCARE" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                  <playingEntity classCode="PLC">
                    <name>BREASTCARE</name>
                  </playingEntity>
                  <scopingEntity>
                    <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                    <desc>WISHARD MEMORIAL HOSPITAL</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4213557299" displayable="false"/>
                  <code code="8498" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Breast Ultrasound Unilateral"/>
                  <text>&lt;text_report>&lt;text title='RADIOLOGY REPORT'>Procedure: 1. Right Digital Diagnostic Mammogram1/17/2014 2. Right Breast Ultrasound Date: 1/17/2014 Indication: Additional views requested for right breast asymmetry. The patient reports no complaints in the right breast. Comparison: Mammography dated 12/6/2013 Findings: Mammogram: The previously identified subareolar focal asymmetry persists on compression CC and MLO views, however it appears less masslike. Clinical exam: No palpable abnormalities. Ultrasound: Focused ultrasound of the area of interest reveals a region of hyperechogenic breast tissue throughout which multiple mildly dilated ducts are noted. This corresponds to the mammographic finding. No findings concerning for malignancy.&lt;br/>Transcribed by - PSCB&lt;br/>Transcription Date - 201401170948&lt;/text>&lt;text title='IMPRESSION'>1. No mammographic or sonographic evidence of malignancy. Recommend annual [&amp;lt;screening&amp;gt;] mammography and clinical breast exam. A result letter has been given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2: Benign. DICTATED BY : Dr.PROVIDER1 Jan 17 2014 9:17AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Jan 17 2014 12:03PM TRANSCRIBED BY: PSCB Jan 17 2014 9:17AM RADRES 04085&lt;/text>&lt;text title='SIGNATURE'>LASTNAME,FIRSTNAME_PROVIDER&lt;/text>&lt;/text_report></text>
                  <statusCode code="F"/>
                  <effectiveTime value="20140117090800.000-0500"/>
                  <author>
                    <time value="20140117090800.000-0500"/>
                    <assignedAuthor>
                      <id root="1.3.6.1.4.1.12009.1.1.4" extension="726588" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name>
													<given>ZACHARY</given>
													<given>E</given>
													<family>BALLENGER</family>
												</name>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </observation>
              </entryRelationship>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="5094357919" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code code="O" codeSystem="1.3.6.1.4.1.12009.8.6" codeSystemName="CARE_SETTING" displayName="OUTPATIENT">
                <originalText>
									<reference value="#Encounters-type-5094357919"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-5094357919"/>
							</text>
              <effectiveTime>
                <low value="20131206134700.000-0500"/>
                <high value="20131206235900.000-0500"/>
              </effectiveTime>
              <performer typeCode="PRF">
                <time>
                  <low value="20131206134700.000-0500"/>
                  <high value="20131206235900.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>BREASTCARE</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20131206134700.000-0500"/>
                  <high value="20131206235900.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="2.16.840.1.113883.4.6" extension="1801038047" assigningAuthorityName="National Provider Identifier"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>BREASTCARE</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20131206134700.000-0500"/>
                  <high value="20131206235900.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>BREASTCARE</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <id root="1.3.6.1.4.1.12009.1.1.3" extension="BREASTCARE" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                  <playingEntity classCode="PLC">
                    <name>BREASTCARE</name>
                  </playingEntity>
                  <scopingEntity>
                    <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                    <desc>WISHARD MEMORIAL HOSPITAL</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="4169732909" displayable="false"/>
                  <code code="31552" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Screen"/>
                  <text>&lt;text_report>&lt;text title='SIGNATURE'>LASTNAME,FIRSTNAME_PROVIDER&lt;/text>&lt;text title='RADIOLOGY REPORT'>Bilateral Digital Screening Mammogram with CAD, Dec 6, 2013 2:21:00 PM Indication: Screen Comparison: 11/19/2012, 8/19/2011, 8/6/2010 Self-reported family history of breast cancer: Sister at age 60 and aunt at age 75 Findings: There are scattered fibroglandular tissues. No suspicious findings are present in the left breast. There is a 2.4 cm mass in the subareolar right breast at approximately the 9 to 10:00 position.&lt;br/>Transcribed by - PSCB&lt;br/>Transcription Date - 201312061511&lt;/text>&lt;text title='IMPRESSION'>1. Right breast subareolar mass. Recommend additional evaluation with spot compression CC and MLO views with possible right breast ultrasound. 2. No mammographic evidence of malignancy in the left breast. Our office will contact the patient about the need for additional images. BIRADS Category 0: Incomplete - Need Additional Imaging Evaluation DICTATED BY : Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:08PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 6 2013 3:11PM TRANSCRIBED BY: PSCB RADRES 04085&lt;/text>&lt;/text_report></text>
                  <statusCode code="F"/>
                  <effectiveTime value="20131206142100.000-0500"/>
                  <author>
                    <time value="20131206142100.000-0500"/>
                    <assignedAuthor>
                      <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name>
													<given>FIRSTNAME_PROVIDER</given>
													<given>MI</given>
													<family>LASTNAME</family>
												</name>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </observation>
              </entryRelationship>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4634631965" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4634631965"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4634631965"/>
							</text>
              <effectiveTime>
                <low value="20121204130218.000-0500"/>
                <high value="20121204130218.000-0500"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4634604815" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code code="O" codeSystem="1.3.6.1.4.1.12009.8.6" codeSystemName="CARE_SETTING" displayName="OUTPATIENT">
                <originalText>
									<reference value="#Encounters-type-4634604815"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4634604815"/>
							</text>
              <effectiveTime>
                <low value="20121204105000.000-0500"/>
                <high value="20121204110000.000-0500"/>
              </effectiveTime>
              <performer typeCode="PRF">
                <time>
                  <low value="20121204105000.000-0500"/>
                  <high value="20121204110000.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>BREASTCARE</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20121204105000.000-0500"/>
                  <high value="20121204110000.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>BREASTCARE</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20121204105000.000-0500"/>
                  <high value="20121204110000.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>BREASTCARE</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <id root="1.3.6.1.4.1.12009.1.1.3" extension="BREASTCARE" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                  <playingEntity classCode="PLC">
                    <name>BREASTCARE</name>
                  </playingEntity>
                  <scopingEntity>
                    <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                    <desc>WISHARD MEMORIAL HOSPITAL</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374532" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code code="O" codeSystem="1.3.6.1.4.1.12009.8.6" codeSystemName="CARE_SETTING" displayName="OUTPATIENT">
                <originalText>
									<reference value="#Encounters-type-4632374532"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374532"/>
							</text>
              <effectiveTime>
                <low value="20121119080900.000-0500"/>
                <high value="20121119235900.000-0500"/>
              </effectiveTime>
              <performer typeCode="PRF">
                <time>
                  <low value="20121119080900.000-0500"/>
                  <high value="20121119235900.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20121119080900.000-0500"/>
                  <high value="20121119235900.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20121119080900.000-0500"/>
                  <high value="20121119235900.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="2.16.840.1.113883.4.6" extension="1255374385" assigningAuthorityName="National Provider Identifier"/>
                  <addr>
										<streetAddressLine>EF 205, IU SCHOOL OF MEDICINE</streetAddressLine>
										<city>FISHERS</city>
										<state>IN</state>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME</given>
											<given>H</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <id root="1.3.6.1.4.1.12009.1.1.3" extension="BREASTCTR" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                  <playingEntity classCode="PLC">
                    <name>Wishard Memorial Hospital</name>
                  </playingEntity>
                  <scopingEntity>
                    <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                    <desc>WISHARD MEMORIAL HOSPITAL</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3759072494" displayable="false"/>
                  <code code="31552" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Screen"/>
                  <text>&lt;text_report>&lt;text title='RADIOLOGY REPORT'>Exam: Bilateral Digital Screening Mammogram with CAD, 11/19/2012. Indication: Screen. Comparison: 8/19/2011, 8/6/2010. Findings: Breast tissue is heterogeneously dense, which could obscure detection of small masses. There is a 10 x 6 mm asymmetry within the posterior one-third, medial right breast on the XCCL view. The middle one-third lateral left breast contains a 10 x 7 mm asymmetry seen only on the XCCL view.&lt;br/>Transcribed by - PSCB&lt;br/>Transcription Date - 201211200949&lt;/text>&lt;text title='IMPRESSION'>1. Right breast asymmetry. Recommend five degree and rolled XCCL views. 2. Left breast asymmetry. Recommend five degree XCCL view. Our office will contact the patient regarding the need for additional views. BI-RADS Final Assessment Category 0: Incomplete. Need additional imaging for evaluation. DICTATED BY : Dr. MATTHEW LASTNAME Nov 20 2012 8:36AM ELECTRONICALLY SIGNED BY: Dr. SUSAN LASTNAME Nov 20 2012 12:48PM TRANSCRIBED BY: PSCB Nov 20 2012 9:49AM RADRES 04085&lt;/text>&lt;text title='SIGNATURE'>LASTNAME,SUSAN&lt;/text>&lt;/text_report></text>
                  <statusCode code="F"/>
                  <effectiveTime value="20121119082400.000-0500"/>
                  <author>
                    <time value="20121119082400.000-0500"/>
                    <assignedAuthor>
                      <id root="1.3.6.1.4.1.12009.1.1.4" extension="579649" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name>
													<given>MATTHEW</given>
													<given>MI</given>
													<family>LASTNAME</family>
												</name>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </observation>
              </entryRelationship>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374673" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374673"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374673"/>
							</text>
              <effectiveTime>
                <low value="20121119070953.000-0500"/>
                <high value="20121119070953.000-0500"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374648" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374648"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374648"/>
							</text>
              <effectiveTime>
                <low value="20120927094414.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374649" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374649"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374649"/>
							</text>
              <effectiveTime>
                <low value="20120917100000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374650" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374650"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374650"/>
							</text>
              <effectiveTime>
                <low value="20120917093000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374651" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374651"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374651"/>
							</text>
              <effectiveTime>
                <low value="20120915082000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374652" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374652"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374652"/>
							</text>
              <effectiveTime>
                <low value="20120710121926.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374653" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374653"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374653"/>
							</text>
              <effectiveTime>
                <low value="20120707113900.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374654" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374654"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374654"/>
							</text>
              <effectiveTime>
                <low value="20120323130000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374655" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374655"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374655"/>
							</text>
              <effectiveTime>
                <low value="20120323124000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374656" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374656"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374656"/>
							</text>
              <effectiveTime>
                <low value="20120301090000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374657" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374657"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374657"/>
							</text>
              <effectiveTime>
                <low value="20120301083000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374658" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374658"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374658"/>
							</text>
              <effectiveTime>
                <low value="20111116110000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374659" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374659"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374659"/>
							</text>
              <effectiveTime>
                <low value="20111116103000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374660" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374660"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374660"/>
							</text>
              <effectiveTime>
                <low value="20111115153359.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374661" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374661"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374661"/>
							</text>
              <effectiveTime>
                <low value="20111115140700.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374662" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374662"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374662"/>
							</text>
              <effectiveTime>
                <low value="20110831084000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="3972367811" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code code="O" codeSystem="1.3.6.1.4.1.12009.8.6" codeSystemName="CARE_SETTING" displayName="OUTPATIENT">
                <originalText>
									<reference value="#Encounters-type-3972367811"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-3972367811"/>
							</text>
              <effectiveTime>
                <low value="20110819080700.000-0500"/>
                <high value="20110822093600.000-0500"/>
              </effectiveTime>
              <performer typeCode="PRF">
                <time>
                  <low value="20110819080700.000-0500"/>
                  <high value="20110822093600.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="2.16.840.1.113883.4.6" extension="1801038047" assigningAuthorityName="National Provider Identifier"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20110819080700.000-0500"/>
                  <high value="20110822093600.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20110819080700.000-0500"/>
                  <high value="20110822093600.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="109918" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr nullFlavor="UNK"/>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<family>NOT-ASSIGNED</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <id root="1.3.6.1.4.1.12009.1.1.3" extension="BREASTCTR" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                  <playingEntity classCode="PLC">
                    <name>Wishard Memorial Hospital</name>
                  </playingEntity>
                  <scopingEntity>
                    <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                    <desc>WISHARD MEMORIAL HOSPITAL</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="3972367487" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code code="O" codeSystem="1.3.6.1.4.1.12009.8.6" codeSystemName="CARE_SETTING" displayName="OUTPATIENT">
                <originalText>
									<reference value="#Encounters-type-3972367487"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-3972367487"/>
							</text>
              <effectiveTime>
                <low value="20110819080700.000-0500"/>
                <high value="20110822093600.000-0500"/>
              </effectiveTime>
              <performer typeCode="PRF">
                <time>
                  <low value="20110819080700.000-0500"/>
                  <high value="20110822093600.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20110819080700.000-0500"/>
                  <high value="20110822093600.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20110819080700.000-0500"/>
                  <high value="20110822093600.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="2.16.840.1.113883.4.6" extension="1801038047" assigningAuthorityName="National Provider Identifier"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <id root="1.3.6.1.4.1.12009.1.1.3" extension="BREASTCTR" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                  <playingEntity classCode="PLC">
                    <name>Wishard Memorial Hospital</name>
                  </playingEntity>
                  <scopingEntity>
                    <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                    <desc>WISHARD MEMORIAL HOSPITAL</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3230336915" displayable="false"/>
                  <code code="31552" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Screen"/>
                  <text>&lt;text_report>&lt;text title='RADIOLOGY REPORT'>VA Override #0-09992660-0 EXAM: Bilateral digital screening mammogram with CAD, Aug 19, 2011 8:27:00 AM INDICATION: 56 year-old female for routine screening mammography. COMPARISON: August 6, 2010. FINDINGS: The breast tissue is heterogeneously dense, which could obscure detection of small masses. No suspicious findings are seen.&lt;br/>Transcribed by - PSCB&lt;br/>Transcription Date - 201108221432&lt;/text>&lt;text title='IMPRESSION'>No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. A result letter will be sent to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. KEITH LASTNAME Aug 22 2011 8:24AM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME LASTNAME Aug 22 2011 3:04PM TRANSCRIBED BY: PSCB Aug 22 2011 2:32PM RADRES 04085&lt;/text>&lt;text title='SIGNATURE'>LASTNAME,FIRSTNAME&lt;/text>&lt;/text_report></text>
                  <statusCode code="F"/>
                  <effectiveTime value="20110819082700.000-0500"/>
                  <author>
                    <time value="20110819082700.000-0500"/>
                    <assignedAuthor>
                      <id root="1.3.6.1.4.1.12009.1.1.4" extension="602771" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name>
													<given>KEITH</given>
													<given>E</given>
													<family>LASTNAME</family>
												</name>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </observation>
              </entryRelationship>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374663" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374663"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374663"/>
							</text>
              <effectiveTime>
                <low value="20110712083000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374664" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374664"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374664"/>
							</text>
              <effectiveTime>
                <low value="20110712080000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374665" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374665"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374665"/>
							</text>
              <effectiveTime>
                <low value="20101223110734.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374666" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374666"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374666"/>
							</text>
              <effectiveTime>
                <low value="20101029070000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374667" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374667"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374667"/>
							</text>
              <effectiveTime>
                <low value="20101022070000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374668" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374668"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374668"/>
							</text>
              <effectiveTime>
                <low value="20101015070000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374669" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374669"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374669"/>
							</text>
              <effectiveTime>
                <low value="20101001073000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374670" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374670"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374670"/>
							</text>
              <effectiveTime>
                <low value="20100927130800.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374671" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374671"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374671"/>
							</text>
              <effectiveTime>
                <low value="20100913083000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="4632374672" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code nullFlavor="UNK">
                <originalText>
									<reference value="#Encounters-type-4632374672"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-4632374672"/>
							</text>
              <effectiveTime>
                <low value="20100913080000.000-0500"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <playingEntity classCode="PLC">
                    <name>VETERAN'S ADMINISTRATION</name>
                  </playingEntity>
                  <scopingEntity>
                    <id displayable="false"/>
                    <desc>VETERAN'S ADMINISTRATION</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="2910018962" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code code="O" codeSystem="1.3.6.1.4.1.12009.8.6" codeSystemName="CARE_SETTING" displayName="OUTPATIENT">
                <originalText>
									<reference value="#Encounters-type-2910018962"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-2910018962"/>
							</text>
              <effectiveTime>
                <low value="20100806102400.000-0500"/>
                <high value="20100806152800.000-0500"/>
              </effectiveTime>
              <performer typeCode="PRF">
                <time>
                  <low value="20100806102400.000-0500"/>
                  <high value="20100806152800.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20100806102400.000-0500"/>
                  <high value="20100806152800.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20100806102400.000-0500"/>
                  <high value="20100806152800.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="436824" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <id root="1.3.6.1.4.1.12009.1.1.3" extension="BREASTCTR" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                  <playingEntity classCode="PLC">
                    <name>Wishard Memorial Hospital</name>
                  </playingEntity>
                  <scopingEntity>
                    <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                    <desc>WISHARD MEMORIAL HOSPITAL</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id root="1.3.6.1.4.1.12009.9.4" extension="2910015274" assigningAuthorityName="Regenstrief Encounter IDs"/>
              <code code="O" codeSystem="1.3.6.1.4.1.12009.8.6" codeSystemName="CARE_SETTING" displayName="OUTPATIENT">
                <originalText>
									<reference value="#Encounters-type-2910015274"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-2910015274"/>
							</text>
              <effectiveTime>
                <low value="20100806102400.000-0500"/>
                <high value="20100806152800.000-0500"/>
              </effectiveTime>
              <performer typeCode="PRF">
                <time>
                  <low value="20100806102400.000-0500"/>
                  <high value="20100806152800.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20100806102400.000-0500"/>
                  <high value="20100806152800.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="35220" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr>
										<streetAddressLine>000 ANY STREET</streetAddressLine>
										<state>IN</state>
										<postalCode>46202</postalCode>
									</addr>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<given>FIRSTNAME_PROVIDER</given>
											<given>MI</given>
											<family>LASTNAME</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <performer typeCode="PRF">
                <time>
                  <low value="20100806102400.000-0500"/>
                  <high value="20100806152800.000-0500"/>
                </time>
                <assignedEntity>
                  <id root="1.3.6.1.4.1.12009.1.1.4" extension="109918" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                  <addr nullFlavor="UNK"/>
                  <telecom nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
											<family>NOT-ASSIGNED</family>
										</name>
                  </assignedPerson>
                  <representedOrganization>
                    <id root="2.16.840.1.113883.4.6" extension="1568407310" assigningAuthorityName="National Provider Identifier"/>
                    <name>Wishard Memorial Hospital</name>
                    <telecom nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                  <sdtc:patient>
                    <sdtc:id root="1.3.6.1.4.1.12009.1.1.1" extension="18745117" assigningAuthorityName="Wishard Memorial Hospital Medical Record Numbers"/>
                  </sdtc:patient>
                </assignedEntity>
              </performer>
              <participant typeCode="LOC">
                <templateId root="2.16.840.1.113883.10.20.1.45"/>
                <participantRole classCode="SDLOC">
                  <id root="1.3.6.1.4.1.12009.1.1.3" extension="BREASTCTR" assigningAuthorityName="Wishard Memorial Hospital Service Locations"/>
                  <playingEntity classCode="PLC">
                    <name>Wishard Memorial Hospital</name>
                  </playingEntity>
                  <scopingEntity>
                    <id root="1.3.6.1.4.1.12009.1.1" displayable="false"/>
                    <desc>WISHARD MEMORIAL HOSPITAL</desc>
                  </scopingEntity>
                </participantRole>
              </participant>
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="2703811710" displayable="false"/>
                  <code code="31552" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Screen"/>
                  <text>&lt;text_report>&lt;text title='FINDINGS'>VA override: #009992660 Exam: Bilateral Digital Screening Mammogram with CAD, 8/6/2010 Indication: Screen Comparison: None available. Previous performed at VA Hospital in Wilmington, Delaware 2 years ago. Findings: Breast tissue is heterogeneously dense, which could obscure detection of small masses. There are bilateral asymmetries.&lt;br/>Transcribed by - PSC&lt;br/>Transcription Date - 201008110955&lt;/text>&lt;text title='RADIOLOGY IMPRESSION'>No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. A result letter will be sent to the patient. Final Assessment Category 2: Benign.&lt;/text>&lt;text title='SIGNATURE'>LASTNAME,VALERIE&lt;/text>&lt;/text_report></text>
                  <statusCode code="F"/>
                  <effectiveTime value="20100806102800.000-0500"/>
                  <author>
                    <time value="20100806102800.000-0500"/>
                    <assignedAuthor>
                      <id root="1.3.6.1.4.1.12009.1.1.4" extension="98137" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name>
													<given>LEANN</given>
													<given>MI</given>
													<family>STIDHAM</family>
												</name>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </observation>
              </entryRelationship>
            </encounter>
          </entry>
          <entry typeCode="DRIV" contextConductionInd="true">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.1.21" displayable="false"/>
              <templateId root="2.16.840.1.113883.3.88.11.83.16" displayable="false"/>
              <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.14" displayable="false"/>
              <id nullFlavor="UNK"/>
              <code code="U" codeSystem="1.3.6.1.4.1.12009.8.6" codeSystemName="CARE_SETTING" displayName="UNKNOWN">
                <originalText>
									<reference value="#Encounters-type-0"/>
								</originalText>
              </code>
              <text mediaType="text/plain">
								<reference value="#Encounters-note-0"/>
							</text>
              <effectiveTime>
                <low nullFlavor="UNK"/>
                <high nullFlavor="UNK"/>
              </effectiveTime>
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <id root="1.3.6.1.4.1.12009.1.1.12" extension="3773133295" displayable="false"/>
                  <code code="31418" codeSystem="1.3.6.1.4.1.12009.2" codeSystemName="Local Concept" displayName="Digital Mammogram Diagnostic"/>
                  <text>&lt;text_report>&lt;text title='RADIOLOGY REPORT'>Bilateral Digital Diagnostic Mammogram, 12/4/2012. Indication: 57-year-old female with bilateral breast asymmetries seen on recent screening mammogram. Comparison: 11/19/2012, 8/19/2011, 8/6/2010. Findings: The previously described bilateral breast asymmetries do not persist on additional images, compatible with tissue summation artifact. No suspicious findings are seen within either breast.&lt;br/>Transcribed by - PSCB&lt;br/>Transcription Date - 201212041251&lt;/text>&lt;text title='IMPRESSION'>No mammographic evidence of malignancy. Recommend annual screening mammography and clinical breast exam. 2. Stroma overlap causing the bilateral asymmetries on screening exam. A result letter was given to the patient. She will also receive a reminder 1 month prior to her next mammogram. BI-RADS Final Assessment Category 2 - BENIGN. DICTATED BY : Dr. MATTHEW LASTNAME Dec 4 2012 12:44PM ELECTRONICALLY SIGNED BY: Dr. FIRSTNAME_PROVIDER LASTNAME Dec 4 2012 3:54PM TRANSCRIBED BY: PSCB Dec 4 2012 12:51PM RADRES 04085&lt;/text>&lt;text title='SIGNATURE'>LASTNAME,FIRSTNAME_PROVIDER&lt;/text>&lt;/text_report></text>
                  <statusCode code="F"/>
                  <effectiveTime value="20121204123400.000-0500"/>
                  <author>
                    <time value="20121204123400.000-0500"/>
                    <assignedAuthor>
                      <id root="1.3.6.1.4.1.12009.1.1.4" extension="579649" assigningAuthorityName="Wishard Memorial Hospital Doctors"/>
                      <addr>
												<streetAddressLine>000 ANY STREET</streetAddressLine>
												<city>ANY CITY</city>
												<state>IN</state>
												<postalCode>46202</postalCode>
											</addr>
                      <telecom nullFlavor="UNK"/>
                      <assignedPerson>
                        <name>
													<given>MATTHEW</given>
													<given>MI</given>
													<family>LASTNAME</family>
												</name>
                      </assignedPerson>
                    </assignedAuthor>
                  </author>
                </observation>
              </entryRelationship>
            </encounter>
          </entry>
        </section>
      </component>
    </structuredBody>
  </component>
</ClinicalDocument>
