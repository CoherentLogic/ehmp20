if(System.getenv()['CHEF_REPO']){
  def commit = "git rev-parse HEAD".execute(null, new File("${rootDir}/../../chef-repo")).text
  println "chef-repo commit hash: ${commit}"
}

import groovy.json.JsonBuilder
import groovy.json.JsonOutput

configurations {
  antform
}

buildscript {
  repositories {
    maven { url "https://store.vistacore.us/nexus/content/groups/public" }
  }

  dependencies {
    classpath 'net.java.dev.jna:jna:4.0.0'
  }
}

dependencies {
  antform group: 'com.sardak', name: 'antform', version: '2.0'
}

def deployGroup = 'Deployment/Vagrant'

def projectInfoCollection = [
  [
    taskNamePart : 'JDS',
    dependsOn : [':production:jds:build', ':tests:jds_data:zipData'],
    machineName: "jds",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal :
    [
      "JDS_LOCAL_FILE": "${-> project(':production:jds').packRO.outputs.files.singleFile.getCanonicalPath()}",
      "JDS_DATA_LOCAL_FILE": "${-> project(':tests:jds_data').zipData.outputs.files.singleFile.getCanonicalPath()}",
      "DEV_DEPLOY": "true"
    ],
    vagrantEnvVarsVersion :
    [
      'JDS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','JDS_VERSION')}",
      "JDS_DATA_VERSION" : "${-> chooseStableBuild('ehmp','acceptance-test','JDS_DATA_VERSION')}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'Panorama',
    dependsOn : [':production:hmp:build'],
    machineName: "vista-panorama",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal :
    [
      "HMP_LOCAL_FILE": "${-> project(':production:hmp').zipHmp.outputs.files.singleFile.getCanonicalPath()}",
      "CACHE_VERSION" : "${new File("$rootDir/production/cache/cacheVersion").text.trim()}",
      "CORRELATED_IDS_LOCAL_FILE" : "${-> project(':production:correlated_ids').id_json}",
      "DEV_DEPLOY": "true"
    ],
    vagrantEnvVarsVersion :
    [
      'HMP_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','HMP_VERSION')}",
      'CACHE_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CACHE_VERSION')}",
      'CORRELATED_IDS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CORRELATED_IDS_VERSION')}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'PanoramaLocal',
    dependsOn : [':production:hmp:build'],
    machineName: "vista-panorama",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal :
    [
      "HMP_LOCAL_FILE": "${-> project(':production:hmp').zipHmp.outputs.files.singleFile.getCanonicalPath()}",
      "CACHE_LOCAL_FILE": "true",
      "CORRELATED_IDS_LOCAL_FILE" : "${-> project(':production:correlated_ids').id_json}",
      "DEV_DEPLOY": "true"
    ],
    vagrantEnvVarsVersion :
    [
      'HMP_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','HMP_VERSION')}",
      "CACHE_LOCAL_FILE": "true",
      'CORRELATED_IDS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CORRELATED_IDS_VERSION')}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'PanoramaSQA',
    dependsOn : [':production:hmp:build'],
    machineName: "vista-panorama",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal :
    [
      "HMP_LOCAL_FILE": "${-> project(':production:hmp').zipHmp.outputs.files.singleFile.getCanonicalPath()}",
      "CACHE_VERSION" : "${new File("$rootDir/production/cache/cacheVersion").text.trim()}",
      "RUN_CHECKSUMS": "true",
      "CORRELATED_IDS_LOCAL_FILE" : "${-> project(':production:correlated_ids').id_json}",
      "DEV_DEPLOY": "true"
    ],
    vagrantEnvVarsVersion :
    [
      'HMP_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','HMP_VERSION')}",
      'CACHE_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CACHE_VERSION')}",
      "RUN_CHECKSUMS": "true",
      'CORRELATED_IDS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CORRELATED_IDS_VERSION')}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'Kodak',
    dependsOn : [':production:hmp:build'],
    machineName: "vista-kodak",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal :
    [
      "HMP_LOCAL_FILE": "${-> project(':production:hmp').zipHmp.outputs.files.singleFile.getCanonicalPath()}",
      "CACHE_VERSION" : "${new File("$rootDir/production/cache/cacheVersion").text.trim()}",
      "CORRELATED_IDS_LOCAL_FILE" : "${-> project(':production:correlated_ids').id_json}",
      "DEV_DEPLOY": "true"
    ],
    vagrantEnvVarsVersion :
    [
      'HMP_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','HMP_VERSION')}",
      'CACHE_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CACHE_VERSION')}",
      'CORRELATED_IDS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CORRELATED_IDS_VERSION')}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'KodakLocal',
    dependsOn : [':production:hmp:build'],
    machineName: "vista-kodak",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal :
    [
      "HMP_LOCAL_FILE": "${-> project(':production:hmp').zipHmp.outputs.files.singleFile.getCanonicalPath()}",
      "CACHE_LOCAL_FILE": "true",
      "CORRELATED_IDS_LOCAL_FILE" : "${-> project(':production:correlated_ids').id_json}",
      "DEV_DEPLOY": "true"
    ],
    vagrantEnvVarsVersion :
    [
      'HMP_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','HMP_VERSION')}",
      "CACHE_LOCAL_FILE": "true",
      'CORRELATED_IDS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CORRELATED_IDS_VERSION')}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'KodakSQA',
    dependsOn : [':production:hmp:build'],
    machineName: "vista-kodak",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal :
    [
      "HMP_LOCAL_FILE": "${-> project(':production:hmp').zipHmp.outputs.files.singleFile.getCanonicalPath()}",
      "CACHE_VERSION" : "${new File("$rootDir/production/cache/cacheVersion").text.trim()}",
      "RUN_CHECKSUMS": "true",
      "CORRELATED_IDS_LOCAL_FILE" : "${-> project(':production:correlated_ids').id_json}",
      "DEV_DEPLOY": "true"
    ],
    vagrantEnvVarsVersion :
    [
      'HMP_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','HMP_VERSION')}",
      'CACHE_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CACHE_VERSION')}",
      "RUN_CHECKSUMS": "true",
      'CORRELATED_IDS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CORRELATED_IDS_VERSION')}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'Solr',
    dependsOn : [':production:health-time:health-time-core:build', ':production:health-time:health-time-solr:build', ':production:vpr:packageVPR'],
    machineName: "solr",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsVersion : [:],
    partOfTestEnv : true,
    partOfBackend : true,
    vagrantEnvVarsLocal :
    [
      "DEV_DEPLOY": "true",
      "HEALTH_TIME_CORE_LOCAL_FILE": "${-> project(':production:health-time:health-time-core').jar.outputs.files.singleFile.getCanonicalPath()}",
      "HEALTH_TIME_SOLR_LOCAL_FILE": "${-> project(':production:health-time:health-time-solr').jar.outputs.files.singleFile.getCanonicalPath()}",
      'VPR_LOCAL_FILE': "${-> project(':production:vpr').packageVPR.outputs.files.singleFile.getCanonicalPath()}"
    ],
    vagrantEnvVarsVersion :
    [
      'VPR_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','VPR_VERSION')}",
      'HEALTH_TIME_CORE_VERSION': "${-> chooseStableBuild('ehmp','acceptance-test','HEALTH_TIME_CORE_VERSION')}",
      'HEALTH_TIME_SOLR_VERSION': "${-> chooseStableBuild('ehmp','acceptance-test','HEALTH_TIME_SOLR_VERSION')}"
    ],
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'VXSync',
    dependsOn : [':production:vx-sync:zipVXSync', ':production:soap-handler:build', ':production:asu:zipAsu'],
    machineName: "vxsync",
    vagrantDir : "${rootDir}/../../.chef/vms",
    partOfTestEnv : true,
    partOfBackend : true,
    vagrantEnvVarsLocal :
    [
      "DEV_DEPLOY": "true",
      'VX_SYNC_LOCAL_FILE': "${-> project(':production:vx-sync').zipVXSync.outputs.files.singleFile.getCanonicalPath()}",
      'SOAP_HANDLER_LOCAL_FILE': "${-> project(':production:soap-handler').fatJar.outputs.files.singleFile.getCanonicalPath()}",
      'ASU_LOCAL_FILE': "${-> project(':production:asu').zipAsu.outputs.files.singleFile.getCanonicalPath()}",
      //'OSYNC_LOCAL_FILE': "${-> project(':production:osync').ziposync.outputs.files.singleFile.getCanonicalPath()}"
    ],
    vagrantEnvVarsVersion :
    [
      'VX_SYNC_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','VX_SYNC_VERSION')}",
      'SOAP_HANDLER_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','SOAP_HANDLER_VERSION')}",
      'ASU_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','ASU_VERSION')}",
     // 'OSYNC_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','OSYNC_VERSION')}"
    ],
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'VXSyncNoPublish',
    dependsOn : [':production:vx-sync:zipVXSync', ':production:soap-handler:build', ':production:asu:zipAsu'],
    machineName: "vxsync",
    vagrantDir : "${rootDir}/../../.chef/vms",
    partOfTestEnv : true,
    partOfBackend : true,
    vagrantEnvVarsLocal :
    [
      "DEV_DEPLOY": "true",
      'VX_SYNC_LOCAL_FILE': "${-> project(':production:vx-sync').zipVXSync.outputs.files.singleFile.getCanonicalPath()}",
      'SOAP_HANDLER_LOCAL_FILE': "${-> project(':production:soap-handler').fatJar.outputs.files.singleFile.getCanonicalPath()}",
      'ASU_LOCAL_FILE': "${-> project(':production:asu').zipAsu.outputs.files.singleFile.getCanonicalPath()}",
      //'OSYNC_LOCAL_FILE': "${-> project(':production:osync').ziposync.outputs.files.singleFile.getCanonicalPath()}"
      'CHEF_ENV': "noPublishTubes"
    ],
    vagrantEnvVarsVersion :
    [
      'VX_SYNC_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','VX_SYNC_VERSION')}",
      'SOAP_HANDLER_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','SOAP_HANDLER_VERSION')}",
      'ASU_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','ASU_VERSION')}",
      'CHEF_ENV': "noPublishTubes"
    ],
    devDeploy : true,
    testDeploy : true,
    environment: "noPublishTubes",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'Mocks',
    dependsOn : [':production:NodeMockServices:zipNodeMockServices',
    ':production:health-time:health-time-core:build', ':production:health-time:health-time-solr:build', ':production:vpr:packageVPR'],
    machineName: "mocks",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal :
    [
      "DEV_DEPLOY": "true",
      'NODEMOCKSERVICES_LOCAL_FILE': "${-> project(':production:NodeMockServices').zipNodeMockServices.outputs.files.singleFile.getCanonicalPath()}",
      "HEALTH_TIME_CORE_LOCAL_FILE": "${-> project(':production:health-time:health-time-core').jar.outputs.files.singleFile.getCanonicalPath()}",
      "HEALTH_TIME_SOLR_LOCAL_FILE": "${-> project(':production:health-time:health-time-solr').jar.outputs.files.singleFile.getCanonicalPath()}",
      'VPR_LOCAL_FILE': "${-> project(':production:vpr').packageVPR.outputs.files.singleFile.getCanonicalPath()}",
      "CORRELATED_IDS_LOCAL_FILE" : "${-> project(':production:correlated_ids').id_json}"
    ],
    vagrantEnvVarsVersion :
    [
      'NODEMOCKSERVICES_VERSION': "${-> chooseStableBuild('ehmp','acceptance-test','NODEMOCKSERVICES_VERSION')}",
      'VPR_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','VPR_VERSION')}",
      'HEALTH_TIME_CORE_VERSION': "${-> chooseStableBuild('ehmp','acceptance-test','HEALTH_TIME_CORE_VERSION')}",
      'HEALTH_TIME_SOLR_VERSION': "${-> chooseStableBuild('ehmp','acceptance-test','HEALTH_TIME_SOLR_VERSION')}",
      'CORRELATED_IDS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CORRELATED_IDS_VERSION')}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    partOfVE2 : false,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'Mocks-SSOi',
    dependsOn : [':production:NodeMockServices:zipNodeMockServices',
    ':production:mockssoiservlet:build', ':production:mocktokengenerator:build',
    ':production:health-time:health-time-core:build', ':production:health-time:health-time-solr:build', ':production:vpr:packageVPR'],
    machineName: "mocks",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal :
    [
      "DEV_DEPLOY": "true",
      'NODEMOCKSERVICES_LOCAL_FILE': "${-> project(':production:NodeMockServices').zipNodeMockServices.outputs.files.singleFile.getCanonicalPath()}",
      "HEALTH_TIME_CORE_LOCAL_FILE": "${-> project(':production:health-time:health-time-core').jar.outputs.files.singleFile.getCanonicalPath()}",
      "HEALTH_TIME_SOLR_LOCAL_FILE": "${-> project(':production:health-time:health-time-solr').jar.outputs.files.singleFile.getCanonicalPath()}",
      'VPR_LOCAL_FILE': "${-> project(':production:vpr').packageVPR.outputs.files.singleFile.getCanonicalPath()}",
      "CORRELATED_IDS_LOCAL_FILE" : "${-> project(':production:correlated_ids').id_json}",
      'MOCKSSOISERVLET_LOCAL_FILE': "${-> project(':production:mockssoiservlet').war.outputs.files.singleFile.getCanonicalPath()}",
      'MOCKTOKENGENERATOR_LOCAL_FILE': "${-> project(':production:mocktokengenerator').war.outputs.files.singleFile.getCanonicalPath()}",
      'MOCKSSOI_USERS_LOCAL_FILE': "${-> project(':production:mockssoi-users').ssoiUsersJson}"
    ],
    vagrantEnvVarsVersion :
    [
      'NODEMOCKSERVICES_VERSION': "${-> chooseStableBuild('ehmp','acceptance-test','NODEMOCKSERVICES_VERSION')}",
      'VPR_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','VPR_VERSION')}",
      'HEALTH_TIME_CORE_VERSION': "${-> chooseStableBuild('ehmp','acceptance-test','HEALTH_TIME_CORE_VERSION')}",
      'HEALTH_TIME_SOLR_VERSION': "${-> chooseStableBuild('ehmp','acceptance-test','HEALTH_TIME_SOLR_VERSION')}",
      'CORRELATED_IDS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','CORRELATED_IDS_VERSION')}",
      'MOCKSSOISERVLET_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','MOCKSSOISERVLET_VERSION')}",
      'MOCKTOKENGENERATOR_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','MOCKTOKENGENERATOR_VERSION')}",
      'MOCKSSOI_USERS_VERSION' : "${-> chooseStableBuild('ehmp','acceptance-test','MOCKSSOI_USERS_VERSION')}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    partOfVE2 : false,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'Cprs',
    machineName: "cprs",
    vagrantDir : "${rootDir}/../../.chef/vms",
    partOfTestEnv: true,
    partOfBackend: false,
    devDeploy: false,
    testDeploy: true,
    vagrantEnvVarsLocal : ["DEV_DEPLOY": "true"],
    vagrantEnvVarsVersion : [],
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'CRS',
    dependsOn : [':production:crs:tarCRS'],
    machineName: "crs",
    vagrantDir : "${rootDir}/../../.chef/vms",
    partOfTestEnv : true,
    partOfBackend : true,
    vagrantEnvVarsLocal :
    [
      'CRS_LOCAL_FILE': "${-> project(':production:crs').tarCRS.outputs.files.singleFile.getCanonicalPath()}"
    ],
    vagrantEnvVarsVersion :
    [
      'CRS_VERSION' : "${-> chooseStableBuild('ehmp','dev','CRS_VERSION')}"
    ],
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ],
  [
    taskNamePart : 'All',
    dependsOn : [
      ':production:jds:build', ':tests:jds_data:zipData', // JDS artifacts
      ':production:hmp:build', // Vista artifacts
      ':production:vx-sync:zipVXSync', ':production:soap-handler:build', ':production:asu:zipAsu',  // VxSync artifacts
      ':production:NodeMockServices:zipNodeMockServices', // Mocks artifacts
      ':production:health-time:health-time-core:build', ':production:health-time:health-time-solr:build', ':production:vpr:packageVPR' // Solr artifacts
    ],
    machineName: "all-machines",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsVersion : "",
    vagrantEnvVarsLocal :
    [
      "DEV_DEPLOY": "true",
      'NODEMOCKSERVICES_LOCAL_FILE': "${-> project(':production:NodeMockServices').zipNodeMockServices.outputs.files.singleFile.getCanonicalPath()}",
      "HEALTH_TIME_CORE_LOCAL_FILE": "${-> project(':production:health-time:health-time-core').jar.outputs.files.singleFile.getCanonicalPath()}",
      "HEALTH_TIME_SOLR_LOCAL_FILE": "${-> project(':production:health-time:health-time-solr').jar.outputs.files.singleFile.getCanonicalPath()}",
      'VPR_LOCAL_FILE': "${-> project(':production:vpr').packageVPR.outputs.files.singleFile.getCanonicalPath()}",
      'VX_SYNC_LOCAL_FILE': "${-> project(':production:vx-sync').zipVXSync.outputs.files.singleFile.getCanonicalPath()}",
      'SOAP_HANDLER_LOCAL_FILE': "${-> project(':production:soap-handler').fatJar.outputs.files.singleFile.getCanonicalPath()}",
      'ASU_LOCAL_FILE': "${-> project(':production:asu').zipAsu.outputs.files.singleFile.getCanonicalPath()}",
      "HMP_LOCAL_FILE": "${-> project(':production:hmp').zipHmp.outputs.files.singleFile.getCanonicalPath()}",
      "CACHE_VERSION" : "${new File("$rootDir/production/cache/cacheVersion").text.trim()}",
      "JDS_LOCAL_FILE": "${-> project(':production:jds').packRO.outputs.files.singleFile.getCanonicalPath()}",
      "JDS_DATA_LOCAL_FILE": "${-> project(':tests:jds_data').zipData.outputs.files.singleFile.getCanonicalPath()}",
      "CORRELATED_IDS_LOCAL_FILE" : "${-> project(':production:correlated_ids').id_json}"
    ],
    partOfTestEnv : true,
    partOfBackend : true,
    partOfVE2 : false,
    devDeploy : true,
    testDeploy : true,
    environment: "_default",
    provisioner : "ehmp_provision"
  ]
]

projectInfoCollection.each { projectInfo ->
  ext.set("deploy${projectInfo['taskNamePart']}DevFlag", false)
  ext.set("deploy${projectInfo['taskNamePart']}Flag", false)
  ext.set("start${projectInfo['taskNamePart']}Flag", false)
  ext.set("stop${projectInfo['taskNamePart']}Flag", false)
  ext.set("reload${projectInfo['taskNamePart']}Flag", false)
  ext.set("destroy${projectInfo['taskNamePart']}Flag", false)
  ext.set("snapshot${projectInfo['taskNamePart']}Flag", false)
  ext.set("restore${projectInfo['taskNamePart']}Flag", false)
  ext.set("ssh${projectInfo['taskNamePart']}Flag", false)
}
ext.set("deployForTesterFlag", false)
ext.set("deployBackendDevFlag", false)
ext.set("deployBackendFlag", false)
ext.set("destroyBackendDevFlag", false)
ext.set("stopBackendDevFlag", false)
ext.set("startBackendDevFlag", false)
ext.set("destroyAllFlag", false)
ext.set("stopAllFlag", false)
ext.set("startAllFlag", false)
ext.set("deployVE2Flag",false)
ext.set("destroyVE2Flag",false)

allprojects  {

  if (tasks.grep{it.name == 'deployFrontendDev'}.size() == 0) {

    projectInfoCollection.each { projectInfo ->

      if (projectInfo['devDeploy']) {
        task "deploy${projectInfo['taskNamePart']}Dev"(dependsOn:projectInfo['dependsOn']) {
          group deployGroup
          description "Locally deploys ${projectInfo['taskNamePart']} server from locally built binaries."
          ext{}
          doLast {
            if (rootProject."deploy${projectInfo['taskNamePart']}DevFlag" == false) {
              rootProject."deploy${projectInfo['taskNamePart']}DevFlag" = true
              executeChefClient(projectInfo['machineName'], projectInfo['vagrantDir'], projectInfo['vagrantEnvVarsLocal'], "converge", projectInfo['provisioner'], projectInfo['environment'])

              FileTree tree = fileTree(dir: new File(project(':').projectDir.parentFile, 'infrastructure/chef/cookbooks'))

              if (projectInfo['taskNamePart'] == "Solr") {
                ant.touch(file: new File(project(":production:health-time:health-time-core").buildDir, "${projectInfo['taskNamePart']}Dev.last_successful.flag"))
              }
            }
          }
        }
      }

      if (projectInfo['testDeploy']) {
        task "deploy${projectInfo['taskNamePart']}" {
          group deployGroup
          description "Locally deploys ${projectInfo['taskNamePart']} server from Nexus."
          ext{}
          doLast {
            if (rootProject."deploy${projectInfo['taskNamePart']}Flag" == false) {
              rootProject."deploy${projectInfo['taskNamePart']}Flag" = true
              executeChefClient(projectInfo['machineName'], projectInfo['vagrantDir'], projectInfo['vagrantEnvVarsVersion'], "converge", projectInfo['provisioner'], projectInfo['environment'])
            }
          }
        }
      }

      task "start${projectInfo['taskNamePart']}" {
        group deployGroup
        description "Starts the local ${projectInfo['taskNamePart']} server."
        ext{}
        doLast {
          if (rootProject."start${projectInfo['taskNamePart']}Flag" == false) {
            rootProject."start${projectInfo['taskNamePart']}Flag" = true
            startVM(projectInfo['machineName'], projectInfo['vagrantDir'])
          }
        }
      }

      task "stop${projectInfo['taskNamePart']}" {
        group deployGroup
        description "Stops the local ${projectInfo['taskNamePart']} server."
        ext{}
        doLast {
          if (rootProject."stop${projectInfo['taskNamePart']}Flag" == false) {
            rootProject."stop${projectInfo['taskNamePart']}Flag" = true
            if ( projectInfo['taskNamePart'] == "VXSync") {
              vxSyncShutdown(projectInfo['vagrantDir'])
            }
            stopVM(projectInfo['machineName'], projectInfo['vagrantDir'], projectInfo['provisioner'])
          }
        }
      }

      task "reload${projectInfo['taskNamePart']}" {
        group deployGroup
        description "Reloads (restarts and applies changes from Vagantfile) to the local ${projectInfo['taskNamePart']} server."
        ext{}
        doLast {
          if (rootProject."reload${projectInfo['taskNamePart']}Flag" == false) {
            rootProject."reload${projectInfo['taskNamePart']}Flag" = true
            stopVM(projectInfo['machineName'], projectInfo['vagrantDir'], projectInfo['provisioner'])
            startVM(projectInfo['machineName'], projectInfo['vagrantDir'])
          }
        }
      }

      task "destroy${projectInfo['taskNamePart']}" {
        group deployGroup
        description "Destroys local ${projectInfo['taskNamePart']} server."
        ext{}
        doLast {
          if (rootProject."destroy${projectInfo['taskNamePart']}Flag" == false) {
            rootProject."destroy${projectInfo['taskNamePart']}Flag" = true
            executeChefClient(projectInfo['machineName'], projectInfo['vagrantDir'], projectInfo['vagrantEnvVarsLocal'], 'destroy', projectInfo['provisioner'], projectInfo['environment'])
          }
        }
      }
    }
  }
}

task "resetSync" {
  description "Clears the locally deployed JDS cache."
  ext{}
  doLast {
    executeChefClient("vxsync","${rootDir}/../../.chef/vms",['RESET_SYNC': true], 'converge', "ehmp_provision", "_default")
  }
}

def executeVagrant(vagrantDir, command) {
  exec {
    executable = '/usr/bin/vagrant'
    args = command
    workingDir vagrantDir
  }
}

def vxSyncShutdown(vagrantDir) {
  exec {
    executable = "sh"
    args = ["vxsync_stop.sh"]
    workingDir "${rootDir}/../infrastructure/gradle/vxsync"
  }
}

def startVM(vagrantMachine, vagrantDir) {
  if(vagrantMachine == "cprs"){
    executeVagrant(vagrantDir, ["up", "${vagrantMachine}-${System.getenv()['USER'].replaceAll('_','-')}"])
  } else {
    executeVagrant(vagrantDir, ["up", "${vagrantMachine}-${stackName()}"])
  }
}

def stopVM(vagrantMachine, vagrantDir, provisioner) {
  executeChefClient(vagrantMachine, vagrantDir, [], 'stop', provisioner, "_default")
}

def executeChefClient(vagrantMachine, vagrantDir, envVars, String action = 'converge', provisioner, env) {
  def newVars = envVars
  if (newVars == ""){
    newVars = getVersionParams("ehmp", "acceptance-test")
  }
  def logLevel = (System.getenv()['LOG_LEVEL'] == null || "") ? "warn" : System.getenv()['LOG_LEVEL']
  def chefEnv = (System.getenv()['CHEF_ENV'] == null || "") ? env : System.getenv()['CHEF_ENV']
  println "LOG_LEVEL: ${logLevel}"
  println "Chef Environment: ${chefEnv}"
  newVars << ['MACHINE_NAME':"${vagrantMachine}", 'DRIVER': 'vagrant', 'ACTION': "${action}",'ALLOW_WEB_ACCESS':'true','PATH':'/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/git/bin']

  def knife_path = "${System.getenv()['WORKSPACE']}/.chef/knife.rb"
  def chefArgs = []

  syncNodesBetweenChefServerAndChefZero(vagrantMachine)
  if(System.getenv()['CHEF_REPO']){
    chefArgs = ['-z', '-o', "${provisioner}", "--environment", chefEnv, "--config", knife_path, '--force-formatter', '-l', logLevel]
  } else if(newVars["DEV_DEPLOY"]){
    chefArgs = ['-o', "${provisioner}@${local_provision_version()}", "--environment", chefEnv, "--config", knife_path, '--force-formatter', '-l', logLevel]
  } else {
    chefArgs = ['-o', "${provisioner}@${chooseStableBuild(provisionerRepo(provisioner),'acceptance-test',provisioner)}", "--environment", chefEnv, "--config", knife_path, '--force-formatter', '-l', logLevel]
  }
  exec {
    executable = '/opt/chefdk/bin/chef-client'
    args = chefArgs
    environment(newVars)
  }
  reconcileDelete(vagrantMachine, action)
  syncNodesBetweenChefServerAndChefZero(vagrantMachine)
}

def reconcileDelete(String vagrantMachine, String action){
  exec{
    executable = "rake"
    args = ["reconcile_delete[${vagrantMachine},${stackName()},${action}]"]
    workingDir "${rootDir}/../infrastructure/gradle"
  }
}

def syncNodesBetweenChefServerAndChefZero(String machine = '*'){
  exec{
    executable = "rake"
    args = ["sync_nodes_between_chef_server_and_chef_zero[${machine},${stackName()}]"]
    workingDir "${rootDir}/../infrastructure/gradle"
  }
}

def local_provision_version() {
  def text = new File("$rootDir/provisioner/provisionerVersion").text.trim()
  return text
}

def stackName(){
  def text = new File("$rootDir/../infrastructure/properties/releaseVersion").text.trim()
  def stack = "${System.getenv()['USER'].replaceAll('_','-')}-${text}"
  return stack
}

def provisionerRepo(String provisioner){
  return provisioner.minus("_provision")
}

def chooseStableBuild(String repoName, String buildType, String artifactVersionName) {
  def protocol = 'https://'
  def serverName = 'ci.vistacore.us'
  def port = ''
  def branchName = new File('../infrastructure/properties/jenkinsVersion').text.trim()
  def jobName = "${repoName}-${buildType}-build-${branchName}"
  def formatted_artifact = artifactVersionName.replace("-","_").toUpperCase()
  def restEndPointBuildList = "${protocol}${serverName}${port}/job/${jobName}/lastStableBuild/api/xml"
  def conn = restEndPointBuildList.toURL().openConnection()
  def auth = 'build:38dfad82cfdffe645bb67df1253a3baf'.getBytes().encodeBase64().toString()
  conn.setRequestProperty('Authorization', "Basic ${auth}")
  def buildResult = new XmlSlurper().parseText(conn.content.text)
  def buildNumber = buildResult.action.parameter.find{ param -> param.name.text() == formatted_artifact }.value.text()
  return buildNumber
}

def getVersionParams(String repoName, String buildType) {
  def protocol = 'https://'
  def serverName = 'ci.vistacore.us'
  def branchName = new File('../infrastructure/properties/releaseVersion').text.trim()
  def jobName = "${repoName}-${buildType}-build-${branchName}"
  def restEndPointBuildList = "${protocol}${serverName}/job/${jobName}/lastStableBuild/api/xml"
  def conn = restEndPointBuildList.toURL().openConnection()
  def auth = 'build:38dfad82cfdffe645bb67df1253a3baf'.getBytes().encodeBase64().toString()
  conn.setRequestProperty('Authorization', "Basic ${auth}")
  def versionParamsXml = new XmlSlurper().parseText(conn.content.text)
  def versionParamsMap = [:]
  versionParamsXml.action.parameter.each { parameter ->
    println "${parameter.name} : ${parameter.value}"
    versionParamsMap["${parameter.name}"] = "${parameter.value}"
  }
  return versionParamsMap
}

repositories {
  maven { url "https://store.vistacore.us/nexus/content/groups/public" }
}
