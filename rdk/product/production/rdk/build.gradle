ext.set('repo', 'releases')
ext.set('groupId', 'us.vistacore.rdk')
ext.set('artifactId', 'rdk')
ext.set('commitCountDir', projectDir)

def repoCommitCountClosure = {
  def proc1 = ['sh', '-c', "git rev-list --full-history --all ${->commitCountDir}"].execute()
  def proc2 = 'wc -l'.execute()
  proc1 | proc2
  return proc2.text.trim()
}

def repoCommitCount = "${->repoCommitCountClosure()}"
def version = "${->repoVersion + '.' + repoCommitCount}"

uploadArchives {
  repositories.mavenDeployer {
    pom.groupId = "${->groupId}"
    pom.version = "${->version}"
    repository(url: "https://store.vistacore.us/nexus/content/repositories/${->repo}/") {
      authentication(userName: System.getenv()['NEXUS_USER_NAME'], password: System.getenv()['NEXUS_PASSWORD'])
    }
  }
}

task installNpm(type: Exec) {
  group "RDK Tasks"
  description "installs package(s)"
  commandLine "npm", "install", "--registry", "https://store.vistacore.us/nexus/content/repositories/npm-all/"
}

task installNpmOracleDB(type: Exec) {
  group "RDK Tasks"
  description "installs the Oracle DB node package"
  commandLine "npm", "install", "oracledb@1.9.3", "--registry", "https://store.vistacore.us/nexus/content/repositories/npm-all/"
}

task ccowInstallNpm(type: Exec) {
  workingDir './ccow'
  group "RDK Tasks"
  description "installs package(s) for ccow"
  commandLine "npm", "install", "--registry", "https://store.vistacore.us/nexus/content/repositories/npm-all/"
}

task writeInstallNpm(type: Exec) {
  workingDir './src/write'
  group "RDK Tasks"
  description "installs package(s) for write back"
  commandLine "npm", "install", "--registry", "https://store.vistacore.us/nexus/content/repositories/npm-all/"
}

task pruneNpm(type: Exec) {
  group "RDK Tasks"
  description "prune package(s)"
  commandLine  "npm", "prune"
}

clean.dependsOn pruneNpm

task build(dependsOn: [clean, installNpm]) {
  group "RDK Tasks"
  description "installs package(s)"
}

task check(type: Exec, dependsOn: [build]) {
  group "RDK Tasks"
  description "installs package(s) and runs jshint"
  commandLine "npm", "run-script", "check"
}

task checkApiDocs(type: Exec, dependsOn: [build]) {
  group "RDK Tasks"
  description "Checks API Blueprint documentation and pre-parses it into JSON"
  commandLine "npm", "run-script", "documentation:check"
}

task test(type: Exec, dependsOn: [build, checkApiDocs]) {
  group "RDK Tasks"
  description "installs package(s) and runs unit tests"
  commandLine "npm", "test"
}

task rdkIntTests(type: Exec, dependsOn: [build]) {
  group "RDK Tasks"
  description "installs package(s) and runs integration tests"
  workingDir "${projectDir}/../../tests/"
  commandLine "rake", "inttest"
}

task rdkAllTests(dependsOn: [test, rdkIntTests]) {
  group "RDK Tasks"
  description "runs unit and integration tests"
}

task zipRDK(type: Zip, dependsOn: [build, ccowInstallNpm, writeInstallNpm]) {
  extension = 'zip'
  baseName = 'rdk'
  version = version
  destinationDir parent.parent.buildDir
  from projectDir
  exclude { details -> details.file.name.endsWith('-spec.js') ||
                       details.file.name.endsWith('-spec-data.js') ||
                       details.file.name.endsWith('-spec-data.json') ||
                       details.file.name.endsWith('.gradle') ||
                       details.file.name.endsWith('.log') ||
                       details.file.name.equalsIgnoreCase('xunit.xml') ||
                       details.file.name.endsWith('.sh') ||
                       details.file.name.startsWith('.') }
}

uploadArchives.dependsOn zipRDK

artifacts {
  archives zipRDK
}
