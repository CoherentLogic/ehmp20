if(System.getenv()['CHEF_REPO']){
  def commit = "git rev-parse HEAD".execute(null, new File("${rootDir}/../../chef-repo")).text
  println "chef-repo commit hash: ${commit}"
}

import groovy.json.JsonBuilder
import groovy.json.JsonOutput

configurations {
  antform
}

buildscript {
  repositories {
    maven { url "https://store.vistacore.us/nexus/content/groups/public" }
  }

  dependencies {
    classpath 'net.java.dev.jna:jna:4.0.0'
  }
}

dependencies {
  antform group: 'com.sardak', name: 'antform', version: '2.0'
}

def deployGroup = 'Deployment/Vagrant'

def projectInfoCollection = [
  [
    taskNamePart : 'ehmp-ui',
    dependsOn : [':production:build'],
    machineName: "ehmp-ui",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal : [ 'DEV_DEPLOY': 'true', "ADK_VERSION" : "${-> chooseStableBuild('ehmp-ui','acceptance-test','ADK_VERSION')}"],
    vagrantEnvVarsVersion : [ 'EHMPUI_VERSION' : "${-> chooseStableBuild('ehmp-ui','acceptance-test','EHMPUI_VERSION')}", 'ADK_VERSION' : "${-> chooseStableBuild('ehmp-ui','acceptance-test','ADK_VERSION')}" ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    provisioner : "ehmp-ui_provision"
  ],
  [
    taskNamePart : 'ehmp-balancer',
    machineName: "ehmp-balancer",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal : [ 'DEV_DEPLOY': 'true', 'ADK_VERSION' : "${-> chooseStableBuild('ehmp-ui','acceptance-test','ADK_VERSION')}" ],
    vagrantEnvVarsVersion : [ 'EHMPUI_VERSION' : "${-> chooseStableBuild('ehmp-ui','acceptance-test','EHMPUI_VERSION')}", 'ADK_VERSION' : "${-> chooseStableBuild('ehmp-ui','acceptance-test','ADK_VERSION')}" ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    provisioner : "ehmp-ui_provision"
  ],
  [
    taskNamePart : 'ehmp-uilocal',
    dependsOn : [':production:build'],
    machineName: "ehmp-ui",
    vagrantDir : "${rootDir}/../../.chef/vms",
    vagrantEnvVarsLocal : [ 'DEV_DEPLOY': 'true', 'LOCAL_ADK': 'true' ],
    vagrantEnvVarsVersion : [ 'EHMPUI_VERSION' : "${-> chooseStableBuild('ehmp-ui','acceptance-test','EHMPUI_VERSION')}", 'LOCAL_ADK': 'true' ],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true,
    provisioner : "ehmp-ui_provision"
  ]/*,
  [
    taskNamePart : 'ie9-vm',
    machineName: "ie9-vm",
    vagrantDir : "${rootDir}/../infrastructure/vagrant/virtualbox/ehmp-ui",
    vagrantEnvVarsLocal : [:],
    vagrantEnvVarsVersion : [:],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true
  ],
  [
    taskNamePart : 'ie11-vm',
    machineName: "ie11-vm",
    vagrantDir : "${rootDir}/../infrastructure/vagrant/virtualbox/ehmp-ui",
    vagrantEnvVarsLocal : [:],
    vagrantEnvVarsVersion : [:],
    partOfTestEnv : true,
    partOfBackend : true,
    devDeploy : true,
    testDeploy : true
  ],
  [
    taskNamePart : 'OWA',
    dependsOn : [],
    machineName : "owa",
    vagrantDir : "${rootDir}/../infrastructure/vagrant/virtualbox/ehmp-ui",
    vagrantEnvVarsLocal : [:],
    vagrantEnvVarsVersion : [:],
    partOfTestEnv : true,
    partOfBackend : true,
    partOfVE2 : false,
    devDeploy : false,
    testDeploy : true
  ]*/

]

projectInfoCollection.each { projectInfo ->
  ext.set("deploy${projectInfo['taskNamePart']}DevFlag", false)
  ext.set("deploy${projectInfo['taskNamePart']}Flag", false)
  ext.set("start${projectInfo['taskNamePart']}Flag", false)
  ext.set("stop${projectInfo['taskNamePart']}Flag", false)
  ext.set("reload${projectInfo['taskNamePart']}Flag", false)
  ext.set("destroy${projectInfo['taskNamePart']}Flag", false)
  ext.set("snapshot${projectInfo['taskNamePart']}Flag", false)
  ext.set("restore${projectInfo['taskNamePart']}Flag", false)
  ext.set("ssh${projectInfo['taskNamePart']}Flag", false)
}
ext.set("deployForTesterFlag", false)
ext.set("deployBackendDevFlag", false)
ext.set("deployBackendFlag", false)
ext.set("destroyBackendDevFlag", false)
ext.set("stopBackendDevFlag", false)
ext.set("startBackendDevFlag", false)
ext.set("destroyAllFlag", false)
ext.set("stopAllFlag", false)
ext.set("startAllFlag", false)

allprojects  {
  projectInfoCollection.each { projectInfo ->

    if (projectInfo['devDeploy']) {
      task "deploy${projectInfo['taskNamePart']}Dev"(dependsOn:projectInfo['dependsOn']) {
        group deployGroup
        description "Locally deploys ${projectInfo['taskNamePart']} server from locally built binaries."
        doLast {
          if (rootProject."deploy${projectInfo['taskNamePart']}DevFlag" == false) {
            rootProject."deploy${projectInfo['taskNamePart']}DevFlag" = true
            executeChefClient(projectInfo['machineName'], projectInfo['vagrantDir'], projectInfo['vagrantEnvVarsLocal'], 'converge', projectInfo['provisioner'])
          }
        }
      }
    }

    if (projectInfo['testDeploy']) {
      task "deploy${projectInfo['taskNamePart']}" {
        group deployGroup
        description "Locally deploys ${projectInfo['taskNamePart']} server from Nexus."
        doLast {
          if (rootProject."deploy${projectInfo['taskNamePart']}Flag" == false) {
            rootProject."deploy${projectInfo['taskNamePart']}Flag" = true
            executeChefClient(projectInfo['machineName'], projectInfo['vagrantDir'],projectInfo['vagrantEnvVarsVersion'], 'converge', projectInfo['provisioner'])
          }
        }
      }
    }

    task "start${projectInfo['taskNamePart']}" {
      group deployGroup
      description "Starts the local ${projectInfo['taskNamePart']} server."
      doLast {
        if (rootProject."start${projectInfo['taskNamePart']}Flag" == false) {
          rootProject."start${projectInfo['taskNamePart']}Flag" = true
          startVM(projectInfo['machineName'], projectInfo['vagrantDir'])
        }
      }
    }

    task "stop${projectInfo['taskNamePart']}" {
      group deployGroup
      description "Stops the local ${projectInfo['taskNamePart']} server."
      doLast {
        if (rootProject."stop${projectInfo['taskNamePart']}Flag" == false) {
          rootProject."stop${projectInfo['taskNamePart']}Flag" = true
          stopVM(projectInfo['machineName'], projectInfo['vagrantDir'], projectInfo['provisioner'])
        }
      }
    }

    task "reload${projectInfo['taskNamePart']}" {
      group deployGroup
      description "Reloads (restarts and applies changes from Vagantfile) to the local ${projectInfo['taskNamePart']} server."
      doLast {
        if (rootProject."reload${projectInfo['taskNamePart']}Flag" == false) {
          rootProject."reload${projectInfo['taskNamePart']}Flag" = true
          stopVM(projectInfo['machineName'], projectInfo['vagrantDir'], projectInfo['provisioner'])
          startVM(projectInfo['machineName'], projectInfo['vagrantDir'])

        }
      }
    }

    task "destroy${projectInfo['taskNamePart']}" {
      group deployGroup
      description "Destroys local ${projectInfo['taskNamePart']} server."
      doLast {
        if (rootProject."destroy${projectInfo['taskNamePart']}Flag" == false) {
          rootProject."destroy${projectInfo['taskNamePart']}Flag" = true
          executeChefClient(projectInfo['machineName'], projectInfo['vagrantDir'], projectInfo['vagrantEnvVarsLocal'], 'destroy', projectInfo['provisioner'])
        }
      }
    }
  }

  task deployApplet {
    doLast {
      deployLocalApplet("ehmp-ui", "${rootDir}/../infrastructure/vagrant/virtualbox/ehmp-ui", envVars)
    }
  }

  task "zipApplet"(type: Zip) {
    archiveName 'app.zip'
    /*from('production/app/applets')
    {
      into 'applets'
    }
    from('production/app/screens')
    {
      into 'screens'
    }*/
    from('production/app.json')

    includeEmptyDirs true
    destinationDir buildDir
  }
}


def executeVagrant(vagrantDir, command) {
  exec {
    executable = '/usr/bin/vagrant'
    args = command
    workingDir vagrantDir
  }
}

def vxSyncShutdown(vagrantDir) {
  exec {
    executable = "sh"
    args = ["vxsync_stop.sh"]
    workingDir "${rootDir}/../infrastructure/gradle/vxsync"
  }
}

def startVM(vagrantMachine, vagrantDir) {
  executeVagrant(vagrantDir, ["up", "${vagrantMachine}-${stackName()}"])
}

def stopVM(vagrantMachine, vagrantDir, provisioner) {
  executeChefClient(vagrantMachine, vagrantDir, [], 'stop', provisioner)
}

def executeChefClient(vagrantMachine, vagrantDir, envVars, String action = 'converge', provisioner) {
  def newVars = envVars
  def logLevel = (System.getenv()['LOG_LEVEL'] == null || "") ? "warn" : System.getenv()['LOG_LEVEL']
  println "LOG_LEVEL: ${logLevel}"
  newVars << ['MACHINE_NAME':"${vagrantMachine}", 'DRIVER': 'vagrant', 'ACTION': "${action}",'ALLOW_WEB_ACCESS':'true','PATH':'/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/git/bin']

  def knife_path = "${System.getenv()['WORKSPACE']}/.chef/knife.rb"
  def chefArgs = []

  println envVars
  syncNodesBetweenChefServerAndChefZero(vagrantMachine)
  if(System.getenv()['CHEF_REPO']){
    chefArgs = ['-z', '-o', "${provisioner}", "--environment", "_default", "--config", knife_path, '--force-formatter', '-l', logLevel]
  } else if(envVars["DEV_DEPLOY"]){
    chefArgs = ['-o', "${provisioner}@${local_provision_version()}", "--environment", "_default", "--config", knife_path, '--force-formatter', '-l', logLevel]
  } else {
    chefArgs = ['-o', "${provisioner}@${chooseStableBuild(provisionerRepo(provisioner),'acceptance-test',provisioner)}", "--environment", "_default", "--config", knife_path, '--force-formatter', '-l', logLevel]
  }
  exec {
    executable = '/opt/chefdk/bin/chef-client'
    args = chefArgs
    environment(newVars)
  }
  reconcileDelete(vagrantMachine, action)
  syncNodesBetweenChefServerAndChefZero(vagrantMachine)
}

def reconcileDelete(String vagrantMachine, String action){
  exec{
    executable = "rake"
    args = ["reconcile_delete[${vagrantMachine},${stackName()},${action}]"]
    workingDir "${rootDir}/../infrastructure/gradle"
  }
}

def syncNodesBetweenChefServerAndChefZero(String machine = '*'){
  exec{
    executable = "rake"
    args = ["sync_nodes_between_chef_server_and_chef_zero[${machine}]"]
    workingDir "${rootDir}/../infrastructure/gradle"
  }
}

def local_provision_version() {
  def text = new File("$rootDir/provisioner/provisionerVersion").text.trim()
  return text
}

def stackName(){
  def text = new File("$rootDir/../infrastructure/properties/releaseVersion").text.trim()
  def stack = "${System.getenv()['USER'].replaceAll('_','-')}-${text}"
  return stack
}

def provisionerRepo(String provisioner){
  return provisioner.minus("_provision")
}

def chooseStableBuild(String repoName, String buildType, String artifactVersionName) {
  def protocol = 'https://'
  def serverName = 'ci.vistacore.us'
  def port = ''
  def branchName = new File('../infrastructure/properties/jenkinsVersion').text.trim()
  def jobName = "${repoName}-${buildType}-build-${branchName}"
  def formatted_artifact = artifactVersionName.replace("-","_").toUpperCase()
  def restEndPointBuildList = "${protocol}${serverName}${port}/job/${jobName}/lastStableBuild/api/xml"
  def conn = restEndPointBuildList.toURL().openConnection()
  def auth = 'build:38dfad82cfdffe645bb67df1253a3baf'.getBytes().encodeBase64().toString()
  conn.setRequestProperty('Authorization', "Basic ${auth}")
  def buildResult = new XmlSlurper().parseText(conn.content.text)
  def buildNumber = buildResult.action.parameter.find{ param -> param.name.text() == formatted_artifact }.value.text()
  return buildNumber
}

repositories {
  maven { url "https://store.vistacore.us/nexus/content/groups/public" }
}
