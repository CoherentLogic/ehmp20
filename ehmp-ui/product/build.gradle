apply from : '../infrastructure/gradle/deploy.gradle'

if( !System.getenv().keySet().contains('WORKSPACE') ){
  throw new GradleException('WORKSPACE environment variable not set. Did you "source infrastructure/set.env.sh"?')
}

allprojects {
  apply plugin: 'maven'

  ext.set('repo','releases')
  ext.set('groupId', 'us.vistacore.ehmp-ui')
  ext.set('artifactId','ehmp-ui')
  ext.set('repoVersion', getRepoVersion())
  ext.set('branchName', getCurrentBranchName())
  ext.set('currentCommitHash', getCurrentCommitHash())
  ext.set('commitCountDir', projectDir)

  def repoCommitCountClosure = {
    def proc1 = ['sh', '-c', "git rev-list --full-history --all ${->commitCountDir}"].execute()
    def proc2 = 'wc -l'.execute()
    proc1 | proc2
    return proc2.text.trim()
  }
  
  def repoCommitCount = "${->repoCommitCountClosure()}"
  version = "${->repoVersion + '.' + repoCommitCount}"

  repositories {
    maven {url "https://store.vistacore.us/nexus/content/groups/public"}
  }

  task bundleInstall{
    doLast{
      exec {
        workingDir = "${rootDir}/production/applets/test_resources/"
        executable = "bundle"
        args = ['install']
      }
    }
  }

  uploadArchives {
    repositories.mavenDeployer {
      pom.groupId = "${->groupId}"
      pom.version = "${->version}"
      repository(url: "https://store.vistacore.us/nexus/content/repositories/${->repo}/") {
        authentication(userName: System.getenv()['NEXUS_USER_NAME'], password: System.getenv()['NEXUS_PASSWORD'])
      }
    }
  }
}

def getRepoVersion() {
  def v
  v = new File(rootDir, "../infrastructure/properties/applicationVersionPrefix").getText()
  if (v.endsWith('.'))
    v = v.substring(0, v.length()-1)
  return v
}

def getCurrentBranchName() {
  def branchName
  if (System.properties['os.name'].toLowerCase().contains('windows')) {
    branchName = repoVersion + '.' + 'cmd /C git rev-parse --abbrev-ref HEAD'.execute().text.trim()
  } else {
    branchName = ['sh', '-c', 'git rev-parse --abbrev-ref HEAD'].execute().text.trim()
  }
  return branchName
}

def getCurrentCommitHash() {
  def commitHash
  if (System.properties['os.name'].toLowerCase().contains('windows')) {
    commitHash = repoVersion + '.' + 'cmd /C git rev-parse HEAD'.execute().text.trim()
  } else {
    commitHash = ['sh', '-c', 'git rev-parse HEAD'].execute().text.trim()
  }
  return commitHash
}

def createAppletStructure() {
  def stagedFiles = ['sh', '-c', 'git diff --name-only --cached'].execute().text

  if(!stagedFiles) {
    def console = System.console()

    if(console) {
      appletName = console.readLine('> \n\nPlease enter the name of the Applet. (No dashes allowed.): ')

      if(appletName.contains("-"))
        println "\nError: Invalid character found."
      else {
        if(appletName) {
          exec {
            executable = "/opt/chef/embedded/bin/ruby"
            args = ['appletRepo.rb', appletName]
            workingDir = "${rootDir}/../infrastructure/applet-template"
          }
        } else {
          println "\nError: no applet name given."
        }
      }
    } else {
      println "\nCannot get console."
    } 
  } else {
    println "\nStaged files found. Please commit them before creating an applet infrastructure."
  }
}

def deleteAppletStructure() {
  def stagedFiles = ['sh', '-c', 'git diff --name-only --cached'].execute().text

  if(!stagedFiles) {
    def console = System.console()

    if(console) {
      appletName = console.readLine('> \n\nPlease enter the name of the Applet. (No dashes allowed.): ')

      if(appletName.contains("-"))
        println "\nError: Invalid character found."
      else {
        if(appletName) {
          exec {
            executable = "/opt/chef/embedded/bin/ruby"
            args = ['appletModify.rb', appletName]
            workingDir = "${rootDir}/../infrastructure/applet-template"
          }
        } else {
          println "\nError: no applet name given."
        }
      }
    } else {
      println "\nCannot get console."
    } 
  } else {
    println "\nStaged files found. Please commit or unstage them before creating an applet infrastructure."
  }
}

def local_provision_version() {
  def text = new File("$rootDir/provisioner/provisionerVersion").text.trim()
  return text
}



task generateVersionPropertiesFile() {
  doLast {
    def ehmpuiVersion = version
    def commitHash = getCurrentCommitHash()
    def provisionerVersion = local_provision_version()

    println "EHMPUI_VERSION='${ehmpuiVersion}'"
    println "COMMIT_HASH='${commitHash}'"
    println "EHMP_UI_PROVISION='${provisionerVersion}'"

    project.buildDir.mkdirs()
    delete "${project.buildDir}/version.properties"
    new File("${project.buildDir}/version.properties") << """EHMPUI_VERSION=${ehmpuiVersion}
EHMP_UI_PROVISION=${provisionerVersion}
COMMIT_HASH=${commitHash}"""
  }
}

task createApplet() {
  group "Applet"
  description "Creates the applet directory structure and stages it."
  doLast {
    createAppletStructure()
  }
}

task deleteApplet() {
  group "Applet"
  description "Delete the applet directory structure."
  doLast {
    deleteAppletStructure()
  }
}

task zipEhmpuiApp(type: Zip) {
  from('production/app/contexts')
    {
      into 'contexts'
      excludes = ["workspace/demo"]
    }
  from('production/app/applets')
    {
      into 'applets'
      excludes = ["*/**/node_modules","*/**/test","*/**/build.gradle","*/**/Gruntfile.js", "ui_components_demo"]
    }
  from('production/app/screens')
    {
      into 'screens'
    }
  from('production/assets/css')
    {
      into 'css'
    }
  from('production/app/resources')
    {
      into 'resources'
    }
  from('production/app.json')

  includeEmptyDirs true
  baseName = 'ehmp-ui'
  def version = project(':production').version 
  destinationDir buildDir
}

task bundleInstallAcceptance{
  doLast{
    exec {
      workingDir = "${rootDir}/tests/acceptance-tests"
      executable = "bundle"
      args = ['install']
    }
  }
}

task acceptanceTest(dependsOn: bundleInstallAcceptance){
  group "test"
  doLast{
    exec {
      workingDir = "${rootDir}/tests/acceptance-tests"
      executable = "bundle"
      args = ['exec', 'rake', 'codequality', 'baseTests', 'recentTests']
    }
  }
}

task "rubocop"(dependsOn: bundleInstallAcceptance){
  description 'Runs the rubocop tests.'
  group "test"
  doLast{
    exec {
      workingDir = "${rootDir}/tests/acceptance-tests"
      executable = "bundle"
      args = ['exec', 'rake', 'codequality']
    }
  }
}

task "ui-base"(dependsOn: [bundleInstallAcceptance, "rubocop"]){
    description 'Runs the base tests.'
    group "test"
    doLast{
        exec {
            workingDir = "${rootDir}/tests/acceptance-tests"
            executable = "bundle"
            args = ['exec', 'rake', 'baseTests[virtualbox]']
        }
    }
}

task baseTest(dependsOn: bundleInstallAcceptance){
  group "test"
  doLast{
    exec {
      workingDir = "${rootDir}/tests/acceptance-tests"
      executable = "bundle"
      args = ['exec', 'rake', 'baseTests']
    }
  }
}

task smokeTest(dependsOn: bundleInstallAcceptance){
  group "test"
  doLast{
    exec {
      workingDir = "${rootDir}/tests/acceptance-tests"
      executable = "bundle"
      args = ['exec', 'rake', 'smokeTests']
    }
  }
}

task recentTest(dependsOn: bundleInstallAcceptance){
  group "test"
  doLast{
    exec {
      workingDir = "${rootDir}/tests/acceptance-tests"
      executable = "bundle"
      args = ['exec', 'rake', 'recentTests']
    }
  }
}

task triageTest(dependsOn: bundleInstallAcceptance){
  group "test"
  doLast{
    exec {
      workingDir = "${rootDir}/tests/acceptance-tests"
      executable = "bundle"
      args = ['exec', 'rake', 'failingTests']
    }
  }
}

task regressionTest(dependsOn: bundleInstallAcceptance){
  group "test"
  doLast{
    exec {
      workingDir = "${rootDir}/tests/acceptance-tests"
      executable = "bundle"
      args = ['exec', 'rake', 'codequality', 'regressionTests']
    }
  }
}

task appAcceptanceTestIE(dependsOn: bundleInstallAcceptance){
  group "App"
  doLast{
    exec {
      workingDir = "${rootDir}/tests/acceptance-tests"
      executable = "bundle"
      args = ['exec', 'rake', 'BTYPE=IE']
    }
  }
}

artifacts {
  archives zipEhmpuiApp
}

// Fortify stuff
// Add a new configuration
configurations {
 fortify { }
}
 
// pull in the fortify libs for the new configuration
dependencies {
 fortify 'com.fortify:sourceanalyzer:4.1'
}
 
task fortifySetup << {
 ant.properties['build.compiler']='com.fortify.dev.ant.SCACompiler'
 ant.typedef(name: 'sca', classname: 'com.fortify.dev.ant.SourceanalyzerTask',
 classpath: configurations.fortify.asPath)
}
 
task fortifyReport << {

  Map<String, String> fortifyProjects = [
    'ehmp-ui': '**/*.js'
  ]

  for (e in fortifyProjects) {
    println "Scanning: ${e.key} => ${e.value}"
    ant.sca(jdk:"1.7",
      debug:true ,
      verbose:true ,
      failonerror:true ,
      scan:true ,
      maxHeap:"4096M" ,
      logFile:file("$buildDir/reports/fortify/Fortify-${e.key}.log"),
      resultsFile:file("$buildDir/reports/fortify/${e.key}.fpr")
    ){
    fileset(dir:'production') {
      include(name:"${e.value}")
      exclude(name:'**/lib/**')
      exclude(name:'**/test/**')
      exclude(name:'**/*Test*')
      exclude(name:'**/build/**')
      }
    }
  }
}
